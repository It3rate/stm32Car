
Joy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008d3c  08008d3c  00009d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dac  08008dac  0000a15c  2**0
                  CONTENTS
  4 .ARM          00000008  08008dac  08008dac  00009dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db4  08008db4  0000a15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db4  08008db4  00009db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008db8  08008db8  00009db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08008dbc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e4c  2000015c  08008f18  0000a15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  08008f18  0000afa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017de1  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e0  00000000  00000000  00021f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00026450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8a  00000000  00000000  000278e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eea2  00000000  00000000  00028872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c508  00000000  00000000  00047714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a01e0  00000000  00000000  00063c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103dfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058d0  00000000  00000000  00103e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  00109710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000015c 	.word	0x2000015c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008d24 	.word	0x08008d24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000160 	.word	0x20000160
 80001d4:	08008d24 	.word	0x08008d24

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvCpltCallback>:

uint8_t buffer[] = "Hello World\r\n";
Joy *myJoy = nullptr;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS(buffer, sizeof(buffer));
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <_Z22onButtonChangedHandlerP3Joy>:

void onButtonChangedHandler(Joy* instance)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(buffer, sizeof(buffer));
 80004e4:	210e      	movs	r1, #14
 80004e6:	4803      	ldr	r0, [pc, #12]	@ (80004f4 <_Z22onButtonChangedHandlerP3Joy+0x18>)
 80004e8:	f007 fe14 	bl	8008114 <CDC_Transmit_FS>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000000 	.word	0x20000000

080004f8 <_Z12EventLoopCppv>:
void EventLoopCpp() {
 80004f8:	b598      	push	{r3, r4, r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	myJoy = new Joy(&hadc1, &htim2, GPIO_PIN_2);
 80004fc:	201c      	movs	r0, #28
 80004fe:	f008 fa5d 	bl	80089bc <_Znwj>
 8000502:	4603      	mov	r3, r0
 8000504:	461c      	mov	r4, r3
 8000506:	2304      	movs	r3, #4
 8000508:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <_Z12EventLoopCppv+0x30>)
 800050a:	4908      	ldr	r1, [pc, #32]	@ (800052c <_Z12EventLoopCppv+0x34>)
 800050c:	4620      	mov	r0, r4
 800050e:	f000 f819 	bl	8000544 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDeft>
 8000512:	4b07      	ldr	r3, [pc, #28]	@ (8000530 <_Z12EventLoopCppv+0x38>)
 8000514:	601c      	str	r4, [r3, #0]
	myJoy->attachOnButtonChanged(onButtonChangedHandler);
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <_Z12EventLoopCppv+0x38>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4906      	ldr	r1, [pc, #24]	@ (8000534 <_Z12EventLoopCppv+0x3c>)
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f869 	bl	80005f4 <_ZN3Joy21attachOnButtonChangedEPFvPS_E>

	while (1) {
 8000522:	bf00      	nop
 8000524:	e7fd      	b.n	8000522 <_Z12EventLoopCppv+0x2a>
 8000526:	bf00      	nop
 8000528:	2000022c 	.word	0x2000022c
 800052c:	20000180 	.word	0x20000180
 8000530:	20000178 	.word	0x20000178
 8000534:	080004dd 	.word	0x080004dd

08000538 <EventLoopC>:
	}
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	EventLoopCpp();
 800053c:	f7ff ffdc 	bl	80004f8 <_Z12EventLoopCppv>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDeft>:

#include <Joy.hpp>

static Joy* _instance = nullptr;

Joy::Joy(ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim, uint16_t joyPin):
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	807b      	strh	r3, [r7, #2]
		onButtonChanged(nullptr), _hadc(hadc), _htim(htim), _joyPin(joyPin)
 8000552:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDeft+0x68>)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	887a      	ldrh	r2, [r7, #2]
 800056e:	821a      	strh	r2, [r3, #16]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	825a      	strh	r2, [r3, #18]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	829a      	strh	r2, [r3, #20]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2200      	movs	r2, #0
 8000580:	82da      	strh	r2, [r3, #22]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2201      	movs	r2, #1
 8000586:	761a      	strb	r2, [r3, #24]
{
    _instance = this;
 8000588:	4a09      	ldr	r2, [pc, #36]	@ (80005b0 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDeft+0x6c>)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)_joyBuf, 2);
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3312      	adds	r3, #18
 8000592:	2202      	movs	r2, #2
 8000594:	4619      	mov	r1, r3
 8000596:	68b8      	ldr	r0, [r7, #8]
 8000598:	f000 fdb6 	bl	8001108 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(htim);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f003 fe69 	bl	8004274 <HAL_TIM_Base_Start>
}
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	08008d8c 	.word	0x08008d8c
 80005b0:	2000017c 	.word	0x2000017c

080005b4 <_ZN3JoyD1Ev>:

Joy::~Joy() {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	4a04      	ldr	r2, [pc, #16]	@ (80005d0 <_ZN3JoyD1Ev+0x1c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	08008d8c 	.word	0x08008d8c

080005d4 <_ZN3JoyD0Ev>:
Joy::~Joy() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
}
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ffe9 	bl	80005b4 <_ZN3JoyD1Ev>
 80005e2:	211c      	movs	r1, #28
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f008 f9e7 	bl	80089b8 <_ZdlPvj>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <_ZN3Joy21attachOnButtonChangedEPFvPS_E>:

void Joy::attachOnButtonChanged(ButtonChangedHandler handler)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
    onButtonChanged = handler;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	605a      	str	r2, [r3, #4]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <_ZN3Joy14OnButtonChangeEt>:
const uint16_t* Joy::getXYButton()
{
	return _joyBuf;
}
void Joy::OnButtonChange(uint16_t GPIO_Pin)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	807b      	strh	r3, [r7, #2]
	if(GPIO_Pin == _joyPin)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	8a1b      	ldrh	r3, [r3, #16]
 8000620:	887a      	ldrh	r2, [r7, #2]
 8000622:	429a      	cmp	r2, r3
 8000624:	d108      	bne.n	8000638 <_ZN3Joy14OnButtonChangeEt+0x28>
	{
		_joyBuf[2] = _joyBuf[2] == 0 ? 1 : 0;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	8adb      	ldrh	r3, [r3, #22]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d101      	bne.n	8000632 <_ZN3Joy14OnButtonChangeEt+0x22>
 800062e:	2201      	movs	r2, #1
 8000630:	e000      	b.n	8000634 <_ZN3Joy14OnButtonChangeEt+0x24>
 8000632:	2200      	movs	r2, #0
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	82da      	strh	r2, [r3, #22]
	}

	if (onButtonChanged != nullptr)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <_ZN3Joy14OnButtonChangeEt+0x38>
	{
        onButtonChanged(this);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	4798      	blx	r3
    }
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <HAL_GPIO_EXTI_Callback>:

extern void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	80fb      	strh	r3, [r7, #6]
    if (_instance != nullptr) {
 800065a:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x28>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_EXTI_Callback+0x20>
        _instance->OnButtonChange(GPIO_Pin);
 8000662:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x28>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	88fa      	ldrh	r2, [r7, #6]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffd0 	bl	8000610 <_ZN3Joy14OnButtonChangeEt>
    }
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000017c 	.word	0x2000017c

0800067c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068e:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <MX_ADC1_Init+0xb8>)
 8000690:	4a29      	ldr	r2, [pc, #164]	@ (8000738 <MX_ADC1_Init+0xbc>)
 8000692:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000694:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <MX_ADC1_Init+0xb8>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069a:	4b26      	ldr	r3, [pc, #152]	@ (8000734 <MX_ADC1_Init+0xb8>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006a0:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a6:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006be:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80006c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006de:	4815      	ldr	r0, [pc, #84]	@ (8000734 <MX_ADC1_Init+0xb8>)
 80006e0:	f000 fbbe 	bl	8000e60 <HAL_ADC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006ea:	f000 f987 	bl	80009fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80006f6:	2306      	movs	r3, #6
 80006f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <MX_ADC1_Init+0xb8>)
 8000700:	f000 fe10 	bl	8001324 <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800070a:	f000 f977 	bl	80009fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800070e:	2301      	movs	r3, #1
 8000710:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	@ (8000734 <MX_ADC1_Init+0xb8>)
 800071c:	f000 fe02 	bl	8001324 <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000726:	f000 f969 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000180 	.word	0x20000180
 8000738:	40012000 	.word	0x40012000

0800073c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a33      	ldr	r2, [pc, #204]	@ (8000828 <HAL_ADC_MspInit+0xec>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d15f      	bne.n	800081e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b32      	ldr	r3, [pc, #200]	@ (800082c <HAL_ADC_MspInit+0xf0>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000766:	4a31      	ldr	r2, [pc, #196]	@ (800082c <HAL_ADC_MspInit+0xf0>)
 8000768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800076c:	6453      	str	r3, [r2, #68]	@ 0x44
 800076e:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <HAL_ADC_MspInit+0xf0>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <HAL_ADC_MspInit+0xf0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a2a      	ldr	r2, [pc, #168]	@ (800082c <HAL_ADC_MspInit+0xf0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b28      	ldr	r3, [pc, #160]	@ (800082c <HAL_ADC_MspInit+0xf0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8000796:	2303      	movs	r3, #3
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079a:	2303      	movs	r3, #3
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4821      	ldr	r0, [pc, #132]	@ (8000830 <HAL_ADC_MspInit+0xf4>)
 80007aa:	f001 fcf7 	bl	800219c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007b0:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <HAL_ADC_MspInit+0xfc>)
 80007b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007f2:	4810      	ldr	r0, [pc, #64]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 80007f4:	f001 f962 	bl	8001abc <HAL_DMA_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80007fe:	f000 f8fd 	bl	80009fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 8000806:	639a      	str	r2, [r3, #56]	@ 0x38
 8000808:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <HAL_ADC_MspInit+0xf8>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2012      	movs	r0, #18
 8000814:	f001 f91b 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000818:	2012      	movs	r0, #18
 800081a:	f001 f934 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40012000 	.word	0x40012000
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	200001c8 	.word	0x200001c8
 8000838:	40026410 	.word	0x40026410

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_DMA_Init+0x3c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <MX_DMA_Init+0x3c>)
 800084c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_DMA_Init+0x3c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2038      	movs	r0, #56	@ 0x38
 8000864:	f001 f8f3 	bl	8001a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000868:	2038      	movs	r0, #56	@ 0x38
 800086a:	f001 f90c 	bl	8001a86 <HAL_NVIC_EnableIRQ>

}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_GPIO_Init+0x80>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <MX_GPIO_Init+0x80>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <MX_GPIO_Init+0x80>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_GPIO_Init+0x80>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <MX_GPIO_Init+0x80>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_GPIO_Init+0x80>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 80008ca:	2304      	movs	r3, #4
 80008cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4808      	ldr	r0, [pc, #32]	@ (8000900 <MX_GPIO_Init+0x84>)
 80008e0:	f001 fc5c 	bl	800219c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2008      	movs	r0, #8
 80008ea:	f001 f8b0 	bl	8001a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008ee:	2008      	movs	r0, #8
 80008f0:	f001 f8c9 	bl	8001a86 <HAL_NVIC_EnableIRQ>

}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fa14 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f80e 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f7ff ffb4 	bl	800087c <MX_GPIO_Init>
  MX_DMA_Init();
 8000914:	f7ff ff92 	bl	800083c <MX_DMA_Init>
  MX_ADC1_Init();
 8000918:	f7ff feb0 	bl	800067c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800091c:	f007 fb3c 	bl	8007f98 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000920:	f000 f95a 	bl	8000bd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  EventLoopC();
 8000924:	f7ff fe08 	bl	8000538 <EventLoopC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <main+0x24>

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	@ 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	@ 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f008 f920 	bl	8008b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <SystemClock_Config+0xc8>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	4a26      	ldr	r2, [pc, #152]	@ (80009f4 <SystemClock_Config+0xc8>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000960:	4b24      	ldr	r3, [pc, #144]	@ (80009f4 <SystemClock_Config+0xc8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <SystemClock_Config+0xcc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a20      	ldr	r2, [pc, #128]	@ (80009f8 <SystemClock_Config+0xcc>)
 8000976:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <SystemClock_Config+0xcc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800099a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800099c:	230f      	movs	r3, #15
 800099e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80009a0:	2390      	movs	r3, #144	@ 0x90
 80009a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009a8:	2305      	movs	r3, #5
 80009aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 ffdf 	bl	8003974 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009bc:	f000 f81e 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2101      	movs	r1, #1
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fa41 	bl	8003e64 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e8:	f000 f808 	bl	80009fc <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	@ 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aae:	f000 f993 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_BTN_Pin);
 8000aba:	2004      	movs	r0, #4
 8000abc:	f001 fcf2 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <ADC_IRQHandler+0x10>)
 8000aca:	f000 fa0c 	bl	8000ee6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000180 	.word	0x20000180

08000ad8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <DMA2_Stream0_IRQHandler+0x10>)
 8000ade:	f001 f8f3 	bl	8001cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001c8 	.word	0x200001c8

08000aec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <OTG_FS_IRQHandler+0x10>)
 8000af2:	f001 fe33 	bl	800275c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20001758 	.word	0x20001758

08000b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return 1;
 8000b04:	2301      	movs	r3, #1
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_kill>:

int _kill(int pid, int sig)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b1a:	f008 f88d 	bl	8008c38 <__errno>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2216      	movs	r2, #22
 8000b22:	601a      	str	r2, [r3, #0]
  return -1;
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_exit>:

void _exit (int status)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ffe7 	bl	8000b10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b42:	bf00      	nop
 8000b44:	e7fd      	b.n	8000b42 <_exit+0x12>
	...

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f008 f85e 	bl	8008c38 <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20020000 	.word	0x20020000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000228 	.word	0x20000228
 8000bb0:	20001fa8 	.word	0x20001fa8

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c04:	4b25      	ldr	r3, [pc, #148]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 8000c0c:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c0e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c1c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2e:	481b      	ldr	r0, [pc, #108]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c30:	f003 fad0 	bl	80041d4 <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000c3a:	f7ff fedf 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c42:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c44:	f107 0320 	add.w	r3, r7, #32
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4814      	ldr	r0, [pc, #80]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c4c:	f003 fb6c 	bl	8004328 <HAL_TIM_ConfigClockSource>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000c56:	f7ff fed1 	bl	80009fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c6a:	f003 fc24 	bl	80044b6 <HAL_TIM_SlaveConfigSynchro>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000c74:	f7ff fec2 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c78:	2320      	movs	r3, #32
 8000c7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_TIM2_Init+0xc4>)
 8000c86:	f003 fe11 	bl	80048ac <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000c90:	f7ff feb4 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	@ 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000022c 	.word	0x2000022c

08000ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb0:	d10d      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce4:	f7ff ff66 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	@ (8000d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	@ (8000d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f007 ff99 	bl	8008c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fdf7 	bl	8000904 <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000d24:	08008dbc 	.word	0x08008dbc
  ldr r2, =_sbss
 8000d28:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000d2c:	20001fa8 	.word	0x20001fa8

08000d30 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <DMA1_Stream0_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d74 <HAL_Init+0x40>)
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_Init+0x40>)
 8000d4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	@ (8000d74 <HAL_Init+0x40>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 fe6b 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	200f      	movs	r0, #15
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fe4e 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fe83 	bl	8001aa2 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 fe4b 	bl	8001a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	@ (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000010 	.word	0x20000010
 8000dd0:	20000018 	.word	0x20000018
 8000dd4:	20000014 	.word	0x20000014

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000018 	.word	0x20000018
 8000dfc:	20000274 	.word	0x20000274

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	@ (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000274 	.word	0x20000274

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_Delay+0x44>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffde 	bl	8000e00 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000018 	.word	0x20000018

08000e60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e033      	b.n	8000ede <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d109      	bne.n	8000e92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fc5c 	bl	800073c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d118      	bne.n	8000ed0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ea6:	f023 0302 	bic.w	r3, r3, #2
 8000eaa:	f043 0202 	orr.w	r2, r3, #2
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 fb68 	bl	8001588 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	f023 0303 	bic.w	r3, r3, #3
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ece:	e001      	b.n	8000ed4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d049      	beq.n	8000fb0 <HAL_ADC_IRQHandler+0xca>
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d046      	beq.n	8000fb0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d105      	bne.n	8000f3a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d12b      	bne.n	8000fa0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d127      	bne.n	8000fa0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d119      	bne.n	8000fa0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0220 	bic.w	r2, r2, #32
 8000f7a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff fa91 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f06f 0212 	mvn.w	r2, #18
 8000fae:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fbe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d057      	beq.n	8001076 <HAL_ADC_IRQHandler+0x190>
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d054      	beq.n	8001076 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d139      	bne.n	8001066 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ff8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800100a:	2b00      	cmp	r3, #0
 800100c:	d12b      	bne.n	8001066 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001018:	2b00      	cmp	r3, #0
 800101a:	d124      	bne.n	8001066 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001026:	2b00      	cmp	r3, #0
 8001028:	d11d      	bne.n	8001066 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800102e:	2b00      	cmp	r3, #0
 8001030:	d119      	bne.n	8001066 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001040:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d105      	bne.n	8001066 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	f043 0201 	orr.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fc0c 	bl	8001884 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f06f 020c 	mvn.w	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001084:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d017      	beq.n	80010bc <HAL_ADC_IRQHandler+0x1d6>
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d014      	beq.n	80010bc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10d      	bne.n	80010bc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f925 	bl	80012fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f06f 0201 	mvn.w	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010ca:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d015      	beq.n	80010fe <HAL_ADC_IRQHandler+0x218>
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d012      	beq.n	80010fe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010dc:	f043 0202 	orr.w	r2, r3, #2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 0220 	mvn.w	r2, #32
 80010ec:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f90e 	bl	8001310 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f06f 0220 	mvn.w	r2, #32
 80010fc:	601a      	str	r2, [r3, #0]
  }
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Start_DMA+0x1e>
 8001122:	2302      	movs	r3, #2
 8001124:	e0ce      	b.n	80012c4 <HAL_ADC_Start_DMA+0x1bc>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d018      	beq.n	800116e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114c:	4b5f      	ldr	r3, [pc, #380]	@ (80012cc <HAL_ADC_Start_DMA+0x1c4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a5f      	ldr	r2, [pc, #380]	@ (80012d0 <HAL_ADC_Start_DMA+0x1c8>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9a      	lsrs	r2, r3, #18
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001160:	e002      	b.n	8001168 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	3b01      	subs	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800117c:	d107      	bne.n	800118e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800118c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	f040 8086 	bne.w	80012aa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011dc:	d106      	bne.n	80011ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f023 0206 	bic.w	r2, r3, #6
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80011ea:	e002      	b.n	80011f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fa:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <HAL_ADC_Start_DMA+0x1cc>)
 80011fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001202:	4a35      	ldr	r2, [pc, #212]	@ (80012d8 <HAL_ADC_Start_DMA+0x1d0>)
 8001204:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120a:	4a34      	ldr	r2, [pc, #208]	@ (80012dc <HAL_ADC_Start_DMA+0x1d4>)
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001212:	4a33      	ldr	r2, [pc, #204]	@ (80012e0 <HAL_ADC_Start_DMA+0x1d8>)
 8001214:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800121e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800122e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800123e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	334c      	adds	r3, #76	@ 0x4c
 800124a:	4619      	mov	r1, r3
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f000 fce2 	bl	8001c18 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10f      	bne.n	8001280 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d129      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	e020      	b.n	80012c2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <HAL_ADC_Start_DMA+0x1dc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d11b      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x1ba>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d114      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	e00b      	b.n	80012c2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f043 0210 	orr.w	r2, r3, #16
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000010 	.word	0x20000010
 80012d0:	431bde83 	.word	0x431bde83
 80012d4:	40012300 	.word	0x40012300
 80012d8:	08001781 	.word	0x08001781
 80012dc:	0800183b 	.word	0x0800183b
 80012e0:	08001857 	.word	0x08001857
 80012e4:	40012000 	.word	0x40012000

080012e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x1c>
 800133c:	2302      	movs	r3, #2
 800133e:	e113      	b.n	8001568 <HAL_ADC_ConfigChannel+0x244>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b09      	cmp	r3, #9
 800134e:	d925      	bls.n	800139c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68d9      	ldr	r1, [r3, #12]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	3b1e      	subs	r3, #30
 8001366:	2207      	movs	r2, #7
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43da      	mvns	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	400a      	ands	r2, r1
 8001374:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68d9      	ldr	r1, [r3, #12]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	4603      	mov	r3, r0
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4403      	add	r3, r0
 800138e:	3b1e      	subs	r3, #30
 8001390:	409a      	lsls	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	e022      	b.n	80013e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6919      	ldr	r1, [r3, #16]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	2207      	movs	r2, #7
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	400a      	ands	r2, r1
 80013be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4403      	add	r3, r0
 80013d8:	409a      	lsls	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d824      	bhi.n	8001434 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b05      	subs	r3, #5
 80013fc:	221f      	movs	r2, #31
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	400a      	ands	r2, r1
 800140a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3b05      	subs	r3, #5
 8001426:	fa00 f203 	lsl.w	r2, r0, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	635a      	str	r2, [r3, #52]	@ 0x34
 8001432:	e04c      	b.n	80014ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d824      	bhi.n	8001486 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	3b23      	subs	r3, #35	@ 0x23
 800144e:	221f      	movs	r2, #31
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43da      	mvns	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	400a      	ands	r2, r1
 800145c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3b23      	subs	r3, #35	@ 0x23
 8001478:	fa00 f203 	lsl.w	r2, r0, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	631a      	str	r2, [r3, #48]	@ 0x30
 8001484:	e023      	b.n	80014ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	3b41      	subs	r3, #65	@ 0x41
 8001498:	221f      	movs	r2, #31
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	400a      	ands	r2, r1
 80014a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b41      	subs	r3, #65	@ 0x41
 80014c2:	fa00 f203 	lsl.w	r2, r0, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ce:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <HAL_ADC_ConfigChannel+0x250>)
 80014d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a28      	ldr	r2, [pc, #160]	@ (8001578 <HAL_ADC_ConfigChannel+0x254>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d10f      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1d8>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b12      	cmp	r3, #18
 80014e2:	d10b      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <HAL_ADC_ConfigChannel+0x254>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d12b      	bne.n	800155e <HAL_ADC_ConfigChannel+0x23a>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1c      	ldr	r2, [pc, #112]	@ (800157c <HAL_ADC_ConfigChannel+0x258>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d003      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x1f4>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b11      	cmp	r3, #17
 8001516:	d122      	bne.n	800155e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a11      	ldr	r2, [pc, #68]	@ (800157c <HAL_ADC_ConfigChannel+0x258>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d111      	bne.n	800155e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_ADC_ConfigChannel+0x25c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <HAL_ADC_ConfigChannel+0x260>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	0c9a      	lsrs	r2, r3, #18
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001550:	e002      	b.n	8001558 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3b01      	subs	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f9      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40012300 	.word	0x40012300
 8001578:	40012000 	.word	0x40012000
 800157c:	10000012 	.word	0x10000012
 8001580:	20000010 	.word	0x20000010
 8001584:	431bde83 	.word	0x431bde83

08001588 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001590:	4b79      	ldr	r3, [pc, #484]	@ (8001778 <ADC_Init+0x1f0>)
 8001592:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	021a      	lsls	r2, r3, #8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6899      	ldr	r1, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161a:	4a58      	ldr	r2, [pc, #352]	@ (800177c <ADC_Init+0x1f4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d022      	beq.n	8001666 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800162e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6899      	ldr	r1, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6899      	ldr	r1, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	e00f      	b.n	8001686 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001684:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0202 	bic.w	r2, r2, #2
 8001694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6899      	ldr	r1, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7e1b      	ldrb	r3, [r3, #24]
 80016a0:	005a      	lsls	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01b      	beq.n	80016ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6859      	ldr	r1, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	3b01      	subs	r3, #1
 80016e0:	035a      	lsls	r2, r3, #13
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	e007      	b.n	80016fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	3b01      	subs	r3, #1
 8001718:	051a      	lsls	r2, r3, #20
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001730:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6899      	ldr	r1, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800173e:	025a      	lsls	r2, r3, #9
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001756:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	029a      	lsls	r2, r3, #10
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40012300 	.word	0x40012300
 800177c:	0f000001 	.word	0x0f000001

08001780 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001796:	2b00      	cmp	r3, #0
 8001798:	d13c      	bne.n	8001814 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d12b      	bne.n	800180c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d127      	bne.n	800180c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d119      	bne.n	800180c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0220 	bic.w	r2, r2, #32
 80017e6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7fe fe5b 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001812:	e00e      	b.n	8001832 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff fd75 	bl	8001310 <HAL_ADC_ErrorCallback>
}
 8001826:	e004      	b.n	8001832 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	4798      	blx	r3
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001846:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff fd4d 	bl	80012e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001862:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2240      	movs	r2, #64	@ 0x40
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	f043 0204 	orr.w	r2, r3, #4
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff fd4a 	bl	8001310 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4907      	ldr	r1, [pc, #28]	@ (8001934 <__NVIC_EnableIRQ+0x38>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	@ (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	@ (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	@ 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	@ 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f7ff ff8e 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff29 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff3e 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff8e 	bl	800198c <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5d 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff31 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffa2 	bl	80019f4 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff f99a 	bl	8000e00 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e099      	b.n	8001c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af8:	e00f      	b.n	8001b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afa:	f7ff f981 	bl	8000e00 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d908      	bls.n	8001b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2203      	movs	r2, #3
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e078      	b.n	8001c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e8      	bne.n	8001afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <HAL_DMA_Init+0x158>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d107      	bne.n	8001b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f023 0307 	bic.w	r3, r3, #7
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d117      	bne.n	8001bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fa6f 	bl	80020a4 <DMA_CheckFifoParam>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2240      	movs	r2, #64	@ 0x40
 8001bd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e016      	b.n	8001c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fa26 	bl	8002038 <DMA_CalcBaseAndBitshift>
 8001bec:	4603      	mov	r3, r0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf4:	223f      	movs	r2, #63	@ 0x3f
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f010803f 	.word	0xf010803f

08001c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_DMA_Start_IT+0x26>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e040      	b.n	8001cc0 <HAL_DMA_Start_IT+0xa8>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d12f      	bne.n	8001cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2202      	movs	r2, #2
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f9b8 	bl	8001fdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c70:	223f      	movs	r2, #63	@ 0x3f
 8001c72:	409a      	lsls	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0216 	orr.w	r2, r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0208 	orr.w	r2, r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e005      	b.n	8001cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8001f10 <HAL_DMA_IRQHandler+0x248>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a8e      	ldr	r2, [pc, #568]	@ (8001f14 <HAL_DMA_IRQHandler+0x24c>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01a      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0204 	bic.w	r2, r2, #4
 8001d1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d20:	2208      	movs	r2, #8
 8001d22:	409a      	lsls	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d38:	2201      	movs	r2, #1
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d012      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d56:	2201      	movs	r2, #1
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	2204      	movs	r2, #4
 8001d70:	409a      	lsls	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d012      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d98:	f043 0204 	orr.w	r2, r3, #4
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	2210      	movs	r2, #16
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d043      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d03c      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d018      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d108      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d024      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
 8001df6:	e01f      	b.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
 8001e08:	e016      	b.n	8001e38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0208 	bic.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 808f 	beq.w	8001f68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8087 	beq.w	8001f68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5e:	2220      	movs	r2, #32
 8001e60:	409a      	lsls	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d136      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0216 	bic.w	r2, r2, #22
 8001e80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <HAL_DMA_IRQHandler+0x1da>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0208 	bic.w	r2, r2, #8
 8001eb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	223f      	movs	r2, #63	@ 0x3f
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d07e      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
        }
        return;
 8001ede:	e079      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01d      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10d      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d031      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e02c      	b.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
 8001f0e:	bf00      	nop
 8001f10:	20000010 	.word	0x20000010
 8001f14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d023      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
 8001f28:	e01e      	b.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10f      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0210 	bic.w	r2, r2, #16
 8001f46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d032      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d022      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2205      	movs	r2, #5
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d307      	bcc.n	8001fb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f2      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x2cc>
 8001fae:	e000      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
 8001fd2:	e000      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fd4:	bf00      	nop
    }
  }
}
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b40      	cmp	r3, #64	@ 0x40
 8002008:	d108      	bne.n	800201c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800201a:	e007      	b.n	800202c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	60da      	str	r2, [r3, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3b10      	subs	r3, #16
 8002048:	4a14      	ldr	r2, [pc, #80]	@ (800209c <DMA_CalcBaseAndBitshift+0x64>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002052:	4a13      	ldr	r2, [pc, #76]	@ (80020a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d909      	bls.n	800207a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	1d1a      	adds	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	659a      	str	r2, [r3, #88]	@ 0x58
 8002078:	e007      	b.n	800208a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	aaaaaaab 	.word	0xaaaaaaab
 80020a0:	08008da4 	.word	0x08008da4

080020a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11f      	bne.n	80020fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d856      	bhi.n	8002172 <DMA_CheckFifoParam+0xce>
 80020c4:	a201      	add	r2, pc, #4	@ (adr r2, 80020cc <DMA_CheckFifoParam+0x28>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020ef 	.word	0x080020ef
 80020d4:	080020dd 	.word	0x080020dd
 80020d8:	08002173 	.word	0x08002173
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d046      	beq.n	8002176 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ec:	e043      	b.n	8002176 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020f6:	d140      	bne.n	800217a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fc:	e03d      	b.n	800217a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002106:	d121      	bne.n	800214c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d837      	bhi.n	800217e <DMA_CheckFifoParam+0xda>
 800210e:	a201      	add	r2, pc, #4	@ (adr r2, 8002114 <DMA_CheckFifoParam+0x70>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	08002125 	.word	0x08002125
 8002118:	0800212b 	.word	0x0800212b
 800211c:	08002125 	.word	0x08002125
 8002120:	0800213d 	.word	0x0800213d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      break;
 8002128:	e030      	b.n	800218c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d025      	beq.n	8002182 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213a:	e022      	b.n	8002182 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002144:	d11f      	bne.n	8002186 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800214a:	e01c      	b.n	8002186 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d903      	bls.n	800215a <DMA_CheckFifoParam+0xb6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002158:	e018      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      break;
 800215e:	e015      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      break;
 8002170:	e00b      	b.n	800218a <DMA_CheckFifoParam+0xe6>
      break;
 8002172:	bf00      	nop
 8002174:	e00a      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
 8002178:	e008      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e006      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e004      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e002      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;   
 8002186:	bf00      	nop
 8002188:	e000      	b.n	800218c <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
    }
  } 
  
  return status; 
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e159      	b.n	800246c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8148 	bne.w	8002466 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a2 	beq.w	8002466 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b57      	ldr	r3, [pc, #348]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	4a56      	ldr	r2, [pc, #344]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002330:	6453      	str	r3, [r2, #68]	@ 0x44
 8002332:	4b54      	ldr	r3, [pc, #336]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_GPIO_Init+0x2ec>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a49      	ldr	r2, [pc, #292]	@ (800248c <HAL_GPIO_Init+0x2f0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x202>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a48      	ldr	r2, [pc, #288]	@ (8002490 <HAL_GPIO_Init+0x2f4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x1fe>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a47      	ldr	r2, [pc, #284]	@ (8002494 <HAL_GPIO_Init+0x2f8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x1fa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a46      	ldr	r2, [pc, #280]	@ (8002498 <HAL_GPIO_Init+0x2fc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x1f6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a45      	ldr	r2, [pc, #276]	@ (800249c <HAL_GPIO_Init+0x300>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x1f2>
 800238a:	2304      	movs	r3, #4
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800238e:	2307      	movs	r3, #7
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	@ (8002488 <HAL_GPIO_Init+0x2ec>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a2f      	ldr	r2, [pc, #188]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a24      	ldr	r2, [pc, #144]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002436:	4a1a      	ldr	r2, [pc, #104]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002460:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f aea2 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	@ 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f8c4 	bl	8000650 <HAL_GPIO_EXTI_Callback>
  }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af02      	add	r7, sp, #8
 80024da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e101      	b.n	80026ea <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f005 ff4f 	bl	80083a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2203      	movs	r2, #3
 800250a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002514:	d102      	bne.n	800251c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f002 fb48 	bl	8004bb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7c1a      	ldrb	r2, [r3, #16]
 800252e:	f88d 2000 	strb.w	r2, [sp]
 8002532:	3304      	adds	r3, #4
 8002534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002536:	f002 fa27 	bl	8004988 <USB_CoreInit>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0ce      	b.n	80026ea <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fb40 	bl	8004bd8 <USB_SetCurrentMode>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0bf      	b.n	80026ea <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e04a      	b.n	8002606 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3315      	adds	r3, #21
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3314      	adds	r3, #20
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	b298      	uxth	r0, r3
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	332e      	adds	r3, #46	@ 0x2e
 80025ac:	4602      	mov	r2, r0
 80025ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3318      	adds	r3, #24
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	331c      	adds	r3, #28
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3320      	adds	r3, #32
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3324      	adds	r3, #36	@ 0x24
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	3301      	adds	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	429a      	cmp	r2, r3
 800260e:	d3af      	bcc.n	8002570 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e044      	b.n	80026a0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3301      	adds	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	791b      	ldrb	r3, [r3, #4]
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d3b5      	bcc.n	8002616 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7c1a      	ldrb	r2, [r3, #16]
 80026b2:	f88d 2000 	strb.w	r2, [sp]
 80026b6:	3304      	adds	r3, #4
 80026b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ba:	f002 fad9 	bl	8004c70 <USB_DevInit>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e00c      	b.n	80026ea <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fb1d 	bl	8005d22 <USB_DevDisconnect>

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_PCD_Start+0x1c>
 800270a:	2302      	movs	r3, #2
 800270c:	e022      	b.n	8002754 <HAL_PCD_Start+0x62>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002726:	2b01      	cmp	r3, #1
 8002728:	d105      	bne.n	8002736 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fa2a 	bl	8004b94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f003 facb 	bl	8005ce0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b08d      	sub	sp, #52	@ 0x34
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 fb89 	bl	8005e8a <USB_GetMode>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 848c 	bne.w	8003098 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f003 faed 	bl	8005d64 <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8482 	beq.w	8003096 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 fada 	bl	8005d64 <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f002 0202 	and.w	r2, r2, #2
 80027c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fac8 	bl	8005d64 <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d161      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0210 	bic.w	r2, r2, #16
 80027ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 020f 	and.w	r2, r3, #15
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	3304      	adds	r3, #4
 800280c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	0c5b      	lsrs	r3, r3, #17
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	2b02      	cmp	r3, #2
 8002818:	d124      	bne.n	8002864 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d035      	beq.n	8002892 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	6a38      	ldr	r0, [r7, #32]
 800283a:	f003 f8ff 	bl	8005a3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800284a:	441a      	add	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285c:	441a      	add	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	615a      	str	r2, [r3, #20]
 8002862:	e016      	b.n	8002892 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	0c5b      	lsrs	r3, r3, #17
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	2b06      	cmp	r3, #6
 800286e:	d110      	bne.n	8002892 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002876:	2208      	movs	r2, #8
 8002878:	4619      	mov	r1, r3
 800287a:	6a38      	ldr	r0, [r7, #32]
 800287c:	f003 f8de 	bl	8005a3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800288c:	441a      	add	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0210 	orr.w	r2, r2, #16
 80028a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fa5c 	bl	8005d64 <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028b6:	f040 80a7 	bne.w	8002a08 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 fa61 	bl	8005d8a <USB_ReadDevAllOutEpInterrupt>
 80028c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028ca:	e099      	b.n	8002a00 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 808e 	beq.w	80029f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fa85 	bl	8005df2 <USB_ReadDevOutEPInterrupt>
 80028e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00c      	beq.n	800290e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002900:	461a      	mov	r2, r3
 8002902:	2301      	movs	r3, #1
 8002904:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002906:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fea1 	bl	8003650 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00c      	beq.n	8002932 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002924:	461a      	mov	r2, r3
 8002926:	2308      	movs	r3, #8
 8002928:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800292a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 ff77 	bl	8003820 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	2310      	movs	r3, #16
 800294c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d030      	beq.n	80029ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002960:	2b80      	cmp	r3, #128	@ 0x80
 8002962:	d109      	bne.n	8002978 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002976:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	78db      	ldrb	r3, [r3, #3]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d108      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f005 fdfa 	bl	800859c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b4:	461a      	mov	r2, r3
 80029b6:	2302      	movs	r3, #2
 80029b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029d0:	461a      	mov	r2, r3
 80029d2:	2320      	movs	r3, #32
 80029d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ec:	461a      	mov	r2, r3
 80029ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	3301      	adds	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f47f af62 	bne.w	80028cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 f9a9 	bl	8005d64 <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a1c:	f040 80db 	bne.w	8002bd6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 f9ca 	bl	8005dbe <USB_ReadDevAllInEpInterrupt>
 8002a2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a30:	e0cd      	b.n	8002bce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80c2 	beq.w	8002bc2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 f9f0 	bl	8005e2e <USB_ReadDevInEPInterrupt>
 8002a4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d057      	beq.n	8002b0a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	2201      	movs	r2, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69f9      	ldr	r1, [r7, #28]
 8002a76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	799b      	ldrb	r3, [r3, #6]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d132      	bne.n	8002afe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3320      	adds	r3, #32
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4403      	add	r3, r0
 8002ab8:	331c      	adds	r3, #28
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4419      	add	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4403      	add	r3, r0
 8002acc:	3320      	adds	r3, #32
 8002ace:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d113      	bne.n	8002afe <HAL_PCD_IRQHandler+0x3a2>
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3324      	adds	r3, #36	@ 0x24
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d108      	bne.n	8002afe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002af6:	461a      	mov	r2, r3
 8002af8:	2101      	movs	r1, #1
 8002afa:	f003 f9f7 	bl	8005eec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f005 fcce 	bl	80084a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b20:	461a      	mov	r2, r3
 8002b22:	2308      	movs	r3, #8
 8002b24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2310      	movs	r3, #16
 8002b40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2340      	movs	r3, #64	@ 0x40
 8002b5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d023      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b6a:	6a38      	ldr	r0, [r7, #32]
 8002b6c:	f002 f9e4 	bl	8004f38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	3310      	adds	r3, #16
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	3304      	adds	r3, #4
 8002b82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	78db      	ldrb	r3, [r3, #3]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d108      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f005 fd11 	bl	80085c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002baa:	461a      	mov	r2, r3
 8002bac:	2302      	movs	r3, #2
 8002bae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fcbb 	bl	8003538 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f af2e 	bne.w	8002a32 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 f8c2 	bl	8005d64 <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002be6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bea:	d122      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c12:	2100      	movs	r1, #0
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fea1 	bl	800395c <HAL_PCDEx_LPM_Callback>
 8002c1a:	e002      	b.n	8002c22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f005 fcaf 	bl	8008580 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 f894 	bl	8005d64 <USB_ReadInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c46:	d112      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d102      	bne.n	8002c5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f005 fc6b 	bl	8008534 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c6c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 f876 	bl	8005d64 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c82:	f040 80b7 	bne.w	8002df4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2110      	movs	r1, #16
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f002 f949 	bl	8004f38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002caa:	e046      	b.n	8002d3a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cbe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cd0:	0151      	lsls	r1, r2, #5
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	440a      	add	r2, r1
 8002cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002cda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cec:	461a      	mov	r2, r3
 8002cee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cf2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d04:	0151      	lsls	r1, r2, #5
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	440a      	add	r2, r1
 8002d0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d24:	0151      	lsls	r1, r2, #5
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	440a      	add	r2, r1
 8002d2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d36:	3301      	adds	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	791b      	ldrb	r3, [r3, #4]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d3b2      	bcc.n	8002cac <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d54:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7bdb      	ldrb	r3, [r3, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d72:	f043 030b 	orr.w	r3, r3, #11
 8002d76:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d88:	f043 030b 	orr.w	r3, r3, #11
 8002d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8e:	e015      	b.n	8002dbc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002da2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002da6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db6:	f043 030b 	orr.w	r3, r3, #11
 8002dba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002dce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dde:	461a      	mov	r2, r3
 8002de0:	f003 f884 	bl	8005eec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 ffb3 	bl	8005d64 <USB_ReadInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e08:	d123      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 f849 	bl	8005ea6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 f906 	bl	800502a <USB_GetDevSpeed>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681c      	ldr	r4, [r3, #0]
 8002e2a:	f001 f9c7 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 8002e2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e34:	461a      	mov	r2, r3
 8002e36:	4620      	mov	r0, r4
 8002e38:	f001 fe0a 	bl	8004a50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f005 fb5a 	bl	80084f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 ff84 	bl	8005d64 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d10a      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f005 fb37 	bl	80084da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f002 0208 	and.w	r2, r2, #8
 8002e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 ff6f 	bl	8005d64 <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8c:	2b80      	cmp	r3, #128	@ 0x80
 8002e8e:	d123      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea0:	e014      	b.n	8002ecc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb08 	bl	80034d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d3e4      	bcc.n	8002ea2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 ff41 	bl	8005d64 <USB_ReadInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eec:	d13c      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eee:	2301      	movs	r3, #1
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	e02b      	b.n	8002f4c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3318      	adds	r3, #24
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d115      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da12      	bge.n	8002f46 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3317      	adds	r3, #23
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fac8 	bl	80034d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	791b      	ldrb	r3, [r3, #4]
 8002f50:	461a      	mov	r2, r3
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d3cd      	bcc.n	8002ef4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 fef9 	bl	8005d64 <USB_ReadInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f7c:	d156      	bne.n	800302c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7e:	2301      	movs	r3, #1
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	e045      	b.n	8003010 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d12e      	bne.n	800300a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	da2b      	bge.n	800300a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002fbe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d121      	bne.n	800300a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003006:	6053      	str	r3, [r2, #4]
            break;
 8003008:	e008      	b.n	800301c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	3301      	adds	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	791b      	ldrb	r3, [r3, #4]
 8003014:	461a      	mov	r2, r3
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	4293      	cmp	r3, r2
 800301a:	d3b3      	bcc.n	8002f84 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800302a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f002 fe97 	bl	8005d64 <USB_ReadInterrupts>
 8003036:	4603      	mov	r3, r0
 8003038:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003040:	d10a      	bne.n	8003058 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f005 face 	bl	80085e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f002 fe81 	bl	8005d64 <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d115      	bne.n	8003098 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f005 fabe 	bl	8008600 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	e000      	b.n	8003098 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003096:	bf00      	nop
    }
  }
}
 8003098:	3734      	adds	r7, #52	@ 0x34
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}

0800309e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_PCD_SetAddress+0x1a>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e012      	b.n	80030de <HAL_PCD_SetAddress+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 fde0 	bl	8005c94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	4608      	mov	r0, r1
 80030f0:	4611      	mov	r1, r2
 80030f2:	461a      	mov	r2, r3
 80030f4:	4603      	mov	r3, r0
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	460b      	mov	r3, r1
 80030fa:	803b      	strh	r3, [r7, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003108:	2b00      	cmp	r3, #0
 800310a:	da0f      	bge.n	800312c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	3310      	adds	r3, #16
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	705a      	strb	r2, [r3, #1]
 800312a:	e00f      	b.n	800314c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 020f 	and.w	r2, r3, #15
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003158:	883a      	ldrh	r2, [r7, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	78ba      	ldrb	r2, [r7, #2]
 8003162:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003176:	78bb      	ldrb	r3, [r7, #2]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d102      	bne.n	8003182 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_PCD_EP_Open+0xaa>
 800318c:	2302      	movs	r3, #2
 800318e:	e00e      	b.n	80031ae <HAL_PCD_EP_Open+0xc8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 ff68 	bl	8005074 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80031ac:	7afb      	ldrb	r3, [r7, #11]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da0f      	bge.n	80031ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	3310      	adds	r3, #16
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	3304      	adds	r3, #4
 80031e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	705a      	strb	r2, [r3, #1]
 80031e8:	e00f      	b.n	800320a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_PCD_EP_Close+0x6e>
 8003220:	2302      	movs	r3, #2
 8003222:	e00e      	b.n	8003242 <HAL_PCD_EP_Close+0x8c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68f9      	ldr	r1, [r7, #12]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 ffa6 	bl	8005184 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	460b      	mov	r3, r1
 8003258:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2200      	movs	r2, #0
 8003284:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	b2da      	uxtb	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	799b      	ldrb	r3, [r3, #6]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	799b      	ldrb	r3, [r3, #6]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	f002 f843 	bl	800533c <USB_EPStartXfer>

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3310      	adds	r3, #16
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2200      	movs	r2, #0
 8003328:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2201      	movs	r2, #1
 800332e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	b2da      	uxtb	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	799b      	ldrb	r3, [r3, #6]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	799b      	ldrb	r3, [r3, #6]
 8003352:	461a      	mov	r2, r3
 8003354:	6979      	ldr	r1, [r7, #20]
 8003356:	f001 fff1 	bl	800533c <USB_EPStartXfer>

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	7912      	ldrb	r2, [r2, #4]
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e04f      	b.n	8003422 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003386:	2b00      	cmp	r3, #0
 8003388:	da0f      	bge.n	80033aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	3310      	adds	r3, #16
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	705a      	strb	r2, [r3, #1]
 80033a8:	e00d      	b.n	80033c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	3304      	adds	r3, #4
 80033be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_PCD_EP_SetStall+0x82>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e01d      	b.n	8003422 <HAL_PCD_EP_SetStall+0xbe>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f002 fb79 	bl	8005aec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7999      	ldrb	r1, [r3, #6]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003412:	461a      	mov	r2, r3
 8003414:	f002 fd6a 	bl	8005eec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	7912      	ldrb	r2, [r2, #4]
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e042      	b.n	80034ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800344c:	2b00      	cmp	r3, #0
 800344e:	da0f      	bge.n	8003470 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 020f 	and.w	r2, r3, #15
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	3310      	adds	r3, #16
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	705a      	strb	r2, [r3, #1]
 800346e:	e00f      	b.n	8003490 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	3304      	adds	r3, #4
 8003488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	b2da      	uxtb	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_PCD_EP_ClrStall+0x86>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e00e      	b.n	80034ce <HAL_PCD_EP_ClrStall+0xa4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68f9      	ldr	r1, [r7, #12]
 80034be:	4618      	mov	r0, r3
 80034c0:	f002 fb82 	bl	8005bc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da0c      	bge.n	8003504 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	3310      	adds	r3, #16
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	3304      	adds	r3, #4
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e00c      	b.n	800351e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68f9      	ldr	r1, [r7, #12]
 8003524:	4618      	mov	r0, r3
 8003526:	f002 f9a1 	bl	800586c <USB_EPStopXfer>
 800352a:	4603      	mov	r3, r0
 800352c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800352e:	7afb      	ldrb	r3, [r7, #11]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	@ 0x28
 800353c:	af02      	add	r7, sp, #8
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	3310      	adds	r3, #16
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	429a      	cmp	r2, r3
 800356a:	d901      	bls.n	8003570 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e06b      	b.n	8003648 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	429a      	cmp	r2, r3
 8003584:	d902      	bls.n	800358c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3303      	adds	r3, #3
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003594:	e02a      	b.n	80035ec <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d902      	bls.n	80035b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3303      	adds	r3, #3
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68d9      	ldr	r1, [r3, #12]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4603      	mov	r3, r0
 80035ce:	6978      	ldr	r0, [r7, #20]
 80035d0:	f002 f9f6 	bl	80059c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	441a      	add	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	441a      	add	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d809      	bhi.n	8003616 <PCD_WriteEmptyTxFifo+0xde>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800360a:	429a      	cmp	r2, r3
 800360c:	d203      	bcs.n	8003616 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1bf      	bne.n	8003596 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	429a      	cmp	r2, r3
 8003620:	d811      	bhi.n	8003646 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	2201      	movs	r2, #1
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	43db      	mvns	r3, r3
 800363c:	6939      	ldr	r1, [r7, #16]
 800363e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003642:	4013      	ands	r3, r2
 8003644:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	333c      	adds	r3, #60	@ 0x3c
 8003668:	3304      	adds	r3, #4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	799b      	ldrb	r3, [r3, #6]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d17b      	bne.n	800377e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4a61      	ldr	r2, [pc, #388]	@ (8003818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f240 80b9 	bls.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80b3 	beq.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b2:	461a      	mov	r2, r3
 80036b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b8:	6093      	str	r3, [r2, #8]
 80036ba:	e0a7      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d2:	461a      	mov	r2, r3
 80036d4:	2320      	movs	r3, #32
 80036d6:	6093      	str	r3, [r2, #8]
 80036d8:	e098      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 8093 	bne.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d90f      	bls.n	800370e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	e07e      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1a      	ldr	r2, [r3, #32]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	0159      	lsls	r1, r3, #5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	440b      	add	r3, r1
 8003730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	1ad2      	subs	r2, r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d114      	bne.n	8003770 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003758:	461a      	mov	r2, r3
 800375a:	2101      	movs	r1, #1
 800375c:	f002 fbc6 	bl	8005eec <USB_EP0_OutStart>
 8003760:	e006      	b.n	8003770 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	441a      	add	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f004 fe7a 	bl	8008470 <HAL_PCD_DataOutStageCallback>
 800377c:	e046      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	4a26      	ldr	r2, [pc, #152]	@ (800381c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d124      	bne.n	80037d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a2:	6093      	str	r3, [r2, #8]
 80037a4:	e032      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037bc:	461a      	mov	r2, r3
 80037be:	2320      	movs	r3, #32
 80037c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f004 fe51 	bl	8008470 <HAL_PCD_DataOutStageCallback>
 80037ce:	e01d      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d114      	bne.n	8003800 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d108      	bne.n	8003800 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037f8:	461a      	mov	r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	f002 fb76 	bl	8005eec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f004 fe32 	bl	8008470 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	4f54300a 	.word	0x4f54300a
 800381c:	4f54310a 	.word	0x4f54310a

08003820 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	333c      	adds	r3, #60	@ 0x3c
 8003838:	3304      	adds	r3, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a15      	ldr	r2, [pc, #84]	@ (80038a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d90e      	bls.n	8003874 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003872:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f004 fde9 	bl	800844c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d90c      	bls.n	800389c <PCD_EP_OutSetupPacket_int+0x7c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	799b      	ldrb	r3, [r3, #6]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003894:	461a      	mov	r2, r3
 8003896:	2101      	movs	r1, #1
 8003898:	f002 fb28 	bl	8005eec <USB_EP0_OutStart>
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	4f54300a 	.word	0x4f54300a

080038ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
 80038b8:	4613      	mov	r3, r2
 80038ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038ca:	883b      	ldrh	r3, [r7, #0]
 80038cc:	0419      	lsls	r1, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038d8:	e028      	b.n	800392c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e00d      	b.n	800390a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	3340      	adds	r3, #64	@ 0x40
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4413      	add	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	3301      	adds	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	3b01      	subs	r3, #1
 8003910:	429a      	cmp	r2, r3
 8003912:	d3ec      	bcc.n	80038ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003914:	883b      	ldrh	r3, [r7, #0]
 8003916:	0418      	lsls	r0, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	3b01      	subs	r3, #1
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	4302      	orrs	r2, r0
 8003924:	3340      	adds	r3, #64	@ 0x40
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e267      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d075      	beq.n	8003a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003992:	4b88      	ldr	r3, [pc, #544]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d00c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b85      	ldr	r3, [pc, #532]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d112      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b82      	ldr	r3, [pc, #520]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05b      	beq.n	8003a7c <HAL_RCC_OscConfig+0x108>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d157      	bne.n	8003a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e242      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_OscConfig+0x74>
 80039da:	4b76      	ldr	r3, [pc, #472]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a75      	ldr	r2, [pc, #468]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x98>
 80039f2:	4b70      	ldr	r3, [pc, #448]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6f      	ldr	r2, [pc, #444]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6c      	ldr	r2, [pc, #432]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 8003a0c:	4b69      	ldr	r3, [pc, #420]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a68      	ldr	r2, [pc, #416]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b66      	ldr	r3, [pc, #408]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fd f9e8 	bl	8000e00 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fd f9e4 	bl	8000e00 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e207      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xc0>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fd f9d4 	bl	8000e00 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fd f9d0 	bl	8000e00 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	@ 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e1f3      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b51      	ldr	r3, [pc, #324]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0xe8>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b47      	ldr	r3, [pc, #284]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa2:	4b44      	ldr	r3, [pc, #272]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b41      	ldr	r3, [pc, #260]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x152>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1c7      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4937      	ldr	r1, [pc, #220]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e03a      	b.n	8003b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <HAL_RCC_OscConfig+0x244>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fd f989 	bl	8000e00 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fd f985 	bl	8000e00 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1a8      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b28      	ldr	r3, [pc, #160]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4925      	ldr	r1, [pc, #148]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	e015      	b.n	8003b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b24      	ldr	r3, [pc, #144]	@ (8003bb8 <HAL_RCC_OscConfig+0x244>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd f968 	bl	8000e00 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fd f964 	bl	8000e00 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e187      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d036      	beq.n	8003bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <HAL_RCC_OscConfig+0x248>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd f948 	bl	8000e00 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b74:	f7fd f944 	bl	8000e00 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e167      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x200>
 8003b92:	e01b      	b.n	8003bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_RCC_OscConfig+0x248>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd f931 	bl	8000e00 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	e00e      	b.n	8003bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fd f92d 	bl	8000e00 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d907      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e150      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	42470000 	.word	0x42470000
 8003bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	4b88      	ldr	r3, [pc, #544]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ea      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8097 	beq.w	8003d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b81      	ldr	r3, [pc, #516]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	4b7d      	ldr	r3, [pc, #500]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4b77      	ldr	r3, [pc, #476]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d118      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c16:	4b74      	ldr	r3, [pc, #464]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a73      	ldr	r2, [pc, #460]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c22:	f7fd f8ed 	bl	8000e00 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7fd f8e9 	bl	8000e00 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e10c      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x2ea>
 8003c50:	4b64      	ldr	r3, [pc, #400]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c54:	4a63      	ldr	r2, [pc, #396]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCC_OscConfig+0x324>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x30c>
 8003c66:	4b5f      	ldr	r3, [pc, #380]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c72:	4b5c      	ldr	r3, [pc, #368]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	4a5b      	ldr	r2, [pc, #364]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0x324>
 8003c80:	4b58      	ldr	r3, [pc, #352]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	4a57      	ldr	r2, [pc, #348]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8c:	4b55      	ldr	r3, [pc, #340]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a54      	ldr	r2, [pc, #336]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 0304 	bic.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd f8ae 	bl	8000e00 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd f8aa 	bl	8000e00 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0cb      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	4b49      	ldr	r3, [pc, #292]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ee      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x334>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ccc:	f7fd f898 	bl	8000e00 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f894 	bl	8000e00 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0b5      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	4b3e      	ldr	r3, [pc, #248]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ee      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b39      	ldr	r3, [pc, #228]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	4a38      	ldr	r2, [pc, #224]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a1 	beq.w	8003e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d12:	4b34      	ldr	r3, [pc, #208]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d05c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d141      	bne.n	8003daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d26:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd f868 	bl	8000e00 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd f864 	bl	8000e00 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e087      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	019b      	lsls	r3, r3, #6
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	491b      	ldr	r1, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fd f83d 	bl	8000e00 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fd f839 	bl	8000e00 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e05c      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9c:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x416>
 8003da8:	e054      	b.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fd f826 	bl	8000e00 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd f822 	bl	8000e00 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e045      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x444>
 8003dd6:	e03d      	b.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e038      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000
 8003dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <HAL_RCC_OscConfig+0x4ec>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d121      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11a      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800

08003e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0cc      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e78:	4b68      	ldr	r3, [pc, #416]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d90c      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b65      	ldr	r3, [pc, #404]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b63      	ldr	r3, [pc, #396]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b8      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb8:	4b59      	ldr	r3, [pc, #356]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed0:	4b53      	ldr	r3, [pc, #332]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a52      	ldr	r2, [pc, #328]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b50      	ldr	r3, [pc, #320]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	494d      	ldr	r1, [pc, #308]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d044      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d119      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f22:	4b3f      	ldr	r3, [pc, #252]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e067      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f42:	4b37      	ldr	r3, [pc, #220]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4934      	ldr	r1, [pc, #208]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f54:	f7fc ff54 	bl	8000e00 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5c:	f7fc ff50 	bl	8000e00 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e04f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f72:	4b2b      	ldr	r3, [pc, #172]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 020c 	and.w	r2, r3, #12
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d1eb      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f84:	4b25      	ldr	r3, [pc, #148]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d20c      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b22      	ldr	r3, [pc, #136]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b20      	ldr	r3, [pc, #128]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e032      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4916      	ldr	r1, [pc, #88]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490e      	ldr	r1, [pc, #56]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fea:	f000 f821 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490a      	ldr	r1, [pc, #40]	@ (8004024 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a09      	ldr	r2, [pc, #36]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004006:	4b09      	ldr	r3, [pc, #36]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc feb4 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023c00 	.word	0x40023c00
 8004020:	40023800 	.word	0x40023800
 8004024:	08008d94 	.word	0x08008d94
 8004028:	20000010 	.word	0x20000010
 800402c:	20000014 	.word	0x20000014

08004030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004034:	b090      	sub	sp, #64	@ 0x40
 8004036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
 800403c:	2300      	movs	r3, #0
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004040:	2300      	movs	r3, #0
 8004042:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004048:	4b59      	ldr	r3, [pc, #356]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d00d      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x40>
 8004054:	2b08      	cmp	r3, #8
 8004056:	f200 80a1 	bhi.w	800419c <HAL_RCC_GetSysClockFreq+0x16c>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x34>
 800405e:	2b04      	cmp	r3, #4
 8004060:	d003      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x3a>
 8004062:	e09b      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b53      	ldr	r3, [pc, #332]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004066:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004068:	e09b      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406a:	4b53      	ldr	r3, [pc, #332]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800406c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800406e:	e098      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004070:	4b4f      	ldr	r3, [pc, #316]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004078:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407a:	4b4d      	ldr	r3, [pc, #308]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d028      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004086:	4b4a      	ldr	r3, [pc, #296]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	2200      	movs	r2, #0
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	627a      	str	r2, [r7, #36]	@ 0x24
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004098:	2100      	movs	r1, #0
 800409a:	4b47      	ldr	r3, [pc, #284]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800409c:	fb03 f201 	mul.w	r2, r3, r1
 80040a0:	2300      	movs	r3, #0
 80040a2:	fb00 f303 	mul.w	r3, r0, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	4a43      	ldr	r2, [pc, #268]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040aa:	fba0 1202 	umull	r1, r2, r0, r2
 80040ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040b0:	460a      	mov	r2, r1
 80040b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b6:	4413      	add	r3, r2
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040bc:	2200      	movs	r2, #0
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	61fa      	str	r2, [r7, #28]
 80040c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040ca:	f7fc f885 	bl	80001d8 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4613      	mov	r3, r2
 80040d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040d6:	e053      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d8:	4b35      	ldr	r3, [pc, #212]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	099b      	lsrs	r3, r3, #6
 80040de:	2200      	movs	r2, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	617a      	str	r2, [r7, #20]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040ea:	f04f 0b00 	mov.w	fp, #0
 80040ee:	4652      	mov	r2, sl
 80040f0:	465b      	mov	r3, fp
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	0159      	lsls	r1, r3, #5
 80040fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004100:	0150      	lsls	r0, r2, #5
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	ebb2 080a 	subs.w	r8, r2, sl
 800410a:	eb63 090b 	sbc.w	r9, r3, fp
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800411a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800411e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004122:	ebb2 0408 	subs.w	r4, r2, r8
 8004126:	eb63 0509 	sbc.w	r5, r3, r9
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	00eb      	lsls	r3, r5, #3
 8004134:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004138:	00e2      	lsls	r2, r4, #3
 800413a:	4614      	mov	r4, r2
 800413c:	461d      	mov	r5, r3
 800413e:	eb14 030a 	adds.w	r3, r4, sl
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	eb45 030b 	adc.w	r3, r5, fp
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004156:	4629      	mov	r1, r5
 8004158:	028b      	lsls	r3, r1, #10
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004160:	4621      	mov	r1, r4
 8004162:	028a      	lsls	r2, r1, #10
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416a:	2200      	movs	r2, #0
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	60fa      	str	r2, [r7, #12]
 8004170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004174:	f7fc f830 	bl	80001d8 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	3301      	adds	r3, #1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004190:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800419e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3740      	adds	r7, #64	@ 0x40
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	017d7840 	.word	0x017d7840

080041bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c0:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000010 	.word	0x20000010

080041d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e041      	b.n	800426a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc fd50 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 f992 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e03c      	b.n	8004306 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <HAL_TIM_Base_Start+0xa0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d018      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a6:	d013      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004318 <HAL_TIM_Base_Start+0xa4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a19      	ldr	r2, [pc, #100]	@ (800431c <HAL_TIM_Base_Start+0xa8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <HAL_TIM_Base_Start+0xac>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_TIM_Base_Start+0x5c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a16      	ldr	r2, [pc, #88]	@ (8004324 <HAL_TIM_Base_Start+0xb0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d111      	bne.n	80042f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d010      	beq.n	8004304 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	e007      	b.n	8004304 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40014000 	.word	0x40014000

08004328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIM_ConfigClockSource+0x1c>
 8004340:	2302      	movs	r3, #2
 8004342:	e0b4      	b.n	80044ae <HAL_TIM_ConfigClockSource+0x186>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800436a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437c:	d03e      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0xd4>
 800437e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004382:	f200 8087 	bhi.w	8004494 <HAL_TIM_ConfigClockSource+0x16c>
 8004386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438a:	f000 8086 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x172>
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004392:	d87f      	bhi.n	8004494 <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b70      	cmp	r3, #112	@ 0x70
 8004396:	d01a      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0xa6>
 8004398:	2b70      	cmp	r3, #112	@ 0x70
 800439a:	d87b      	bhi.n	8004494 <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b60      	cmp	r3, #96	@ 0x60
 800439e:	d050      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x11a>
 80043a0:	2b60      	cmp	r3, #96	@ 0x60
 80043a2:	d877      	bhi.n	8004494 <HAL_TIM_ConfigClockSource+0x16c>
 80043a4:	2b50      	cmp	r3, #80	@ 0x50
 80043a6:	d03c      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0xfa>
 80043a8:	2b50      	cmp	r3, #80	@ 0x50
 80043aa:	d873      	bhi.n	8004494 <HAL_TIM_ConfigClockSource+0x16c>
 80043ac:	2b40      	cmp	r3, #64	@ 0x40
 80043ae:	d058      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x13a>
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d86f      	bhi.n	8004494 <HAL_TIM_ConfigClockSource+0x16c>
 80043b4:	2b30      	cmp	r3, #48	@ 0x30
 80043b6:	d064      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x15a>
 80043b8:	2b30      	cmp	r3, #48	@ 0x30
 80043ba:	d86b      	bhi.n	8004494 <HAL_TIM_ConfigClockSource+0x16c>
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d060      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x15a>
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d867      	bhi.n	8004494 <HAL_TIM_ConfigClockSource+0x16c>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d05c      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x15a>
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d05a      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x15a>
 80043cc:	e062      	b.n	8004494 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043de:	f000 fa44 	bl	800486a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	609a      	str	r2, [r3, #8]
      break;
 80043fa:	e04f      	b.n	800449c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440c:	f000 fa2d 	bl	800486a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800441e:	609a      	str	r2, [r3, #8]
      break;
 8004420:	e03c      	b.n	800449c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	461a      	mov	r2, r3
 8004430:	f000 f9a1 	bl	8004776 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2150      	movs	r1, #80	@ 0x50
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f9fa 	bl	8004834 <TIM_ITRx_SetConfig>
      break;
 8004440:	e02c      	b.n	800449c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800444e:	461a      	mov	r2, r3
 8004450:	f000 f9c0 	bl	80047d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2160      	movs	r1, #96	@ 0x60
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f9ea 	bl	8004834 <TIM_ITRx_SetConfig>
      break;
 8004460:	e01c      	b.n	800449c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446e:	461a      	mov	r2, r3
 8004470:	f000 f981 	bl	8004776 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2140      	movs	r1, #64	@ 0x40
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f9da 	bl	8004834 <TIM_ITRx_SetConfig>
      break;
 8004480:	e00c      	b.n	800449c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f000 f9d1 	bl	8004834 <TIM_ITRx_SetConfig>
      break;
 8004492:	e003      	b.n	800449c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e000      	b.n	800449c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800449a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_SlaveConfigSynchro+0x18>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e031      	b.n	8004532 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8b7 	bl	8004654 <TIM_SlaveTimer_SetConfig>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e018      	b.n	8004532 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800451e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3a      	ldr	r2, [pc, #232]	@ (8004638 <TIM_Base_SetConfig+0xfc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00f      	beq.n	8004574 <TIM_Base_SetConfig+0x38>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455a:	d00b      	beq.n	8004574 <TIM_Base_SetConfig+0x38>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a37      	ldr	r2, [pc, #220]	@ (800463c <TIM_Base_SetConfig+0x100>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_Base_SetConfig+0x38>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a36      	ldr	r2, [pc, #216]	@ (8004640 <TIM_Base_SetConfig+0x104>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_Base_SetConfig+0x38>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a35      	ldr	r2, [pc, #212]	@ (8004644 <TIM_Base_SetConfig+0x108>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d108      	bne.n	8004586 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <TIM_Base_SetConfig+0xfc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01b      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004594:	d017      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a28      	ldr	r2, [pc, #160]	@ (800463c <TIM_Base_SetConfig+0x100>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a27      	ldr	r2, [pc, #156]	@ (8004640 <TIM_Base_SetConfig+0x104>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a26      	ldr	r2, [pc, #152]	@ (8004644 <TIM_Base_SetConfig+0x108>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a25      	ldr	r2, [pc, #148]	@ (8004648 <TIM_Base_SetConfig+0x10c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a24      	ldr	r2, [pc, #144]	@ (800464c <TIM_Base_SetConfig+0x110>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a23      	ldr	r2, [pc, #140]	@ (8004650 <TIM_Base_SetConfig+0x114>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004638 <TIM_Base_SetConfig+0xfc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d105      	bne.n	800462a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f023 0201 	bic.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]
  }
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40010000 	.word	0x40010000
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40014000 	.word	0x40014000
 800464c:	40014400 	.word	0x40014400
 8004650:	40014800 	.word	0x40014800

08004654 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004670:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f023 0307 	bic.w	r3, r3, #7
 8004682:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b70      	cmp	r3, #112	@ 0x70
 800469c:	d01a      	beq.n	80046d4 <TIM_SlaveTimer_SetConfig+0x80>
 800469e:	2b70      	cmp	r3, #112	@ 0x70
 80046a0:	d860      	bhi.n	8004764 <TIM_SlaveTimer_SetConfig+0x110>
 80046a2:	2b60      	cmp	r3, #96	@ 0x60
 80046a4:	d054      	beq.n	8004750 <TIM_SlaveTimer_SetConfig+0xfc>
 80046a6:	2b60      	cmp	r3, #96	@ 0x60
 80046a8:	d85c      	bhi.n	8004764 <TIM_SlaveTimer_SetConfig+0x110>
 80046aa:	2b50      	cmp	r3, #80	@ 0x50
 80046ac:	d046      	beq.n	800473c <TIM_SlaveTimer_SetConfig+0xe8>
 80046ae:	2b50      	cmp	r3, #80	@ 0x50
 80046b0:	d858      	bhi.n	8004764 <TIM_SlaveTimer_SetConfig+0x110>
 80046b2:	2b40      	cmp	r3, #64	@ 0x40
 80046b4:	d019      	beq.n	80046ea <TIM_SlaveTimer_SetConfig+0x96>
 80046b6:	2b40      	cmp	r3, #64	@ 0x40
 80046b8:	d854      	bhi.n	8004764 <TIM_SlaveTimer_SetConfig+0x110>
 80046ba:	2b30      	cmp	r3, #48	@ 0x30
 80046bc:	d055      	beq.n	800476a <TIM_SlaveTimer_SetConfig+0x116>
 80046be:	2b30      	cmp	r3, #48	@ 0x30
 80046c0:	d850      	bhi.n	8004764 <TIM_SlaveTimer_SetConfig+0x110>
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d051      	beq.n	800476a <TIM_SlaveTimer_SetConfig+0x116>
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d84c      	bhi.n	8004764 <TIM_SlaveTimer_SetConfig+0x110>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d04d      	beq.n	800476a <TIM_SlaveTimer_SetConfig+0x116>
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d04b      	beq.n	800476a <TIM_SlaveTimer_SetConfig+0x116>
 80046d2:	e047      	b.n	8004764 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80046e4:	f000 f8c1 	bl	800486a <TIM_ETR_SetConfig>
      break;
 80046e8:	e040      	b.n	800476c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d101      	bne.n	80046f6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e03b      	b.n	800476e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800471c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	621a      	str	r2, [r3, #32]
      break;
 800473a:	e017      	b.n	800476c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004748:	461a      	mov	r2, r3
 800474a:	f000 f814 	bl	8004776 <TIM_TI1_ConfigInputStage>
      break;
 800474e:	e00d      	b.n	800476c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800475c:	461a      	mov	r2, r3
 800475e:	f000 f839 	bl	80047d4 <TIM_TI2_ConfigInputStage>
      break;
 8004762:	e003      	b.n	800476c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	75fb      	strb	r3, [r7, #23]
      break;
 8004768:	e000      	b.n	800476c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800476a:	bf00      	nop
  }

  return status;
 800476c:	7dfb      	ldrb	r3, [r7, #23]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004776:	b480      	push	{r7}
 8004778:	b087      	sub	sp, #28
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f023 0201 	bic.w	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 030a 	bic.w	r3, r3, #10
 80047b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	621a      	str	r2, [r3, #32]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0210 	bic.w	r2, r3, #16
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	031b      	lsls	r3, r3, #12
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004810:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	621a      	str	r2, [r3, #32]
}
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	f043 0307 	orr.w	r3, r3, #7
 8004856:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800486a:	b480      	push	{r7}
 800486c:	b087      	sub	sp, #28
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004884:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	021a      	lsls	r2, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	431a      	orrs	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	609a      	str	r2, [r3, #8]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e050      	b.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d018      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004910:	d013      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00e      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a16      	ldr	r2, [pc, #88]	@ (800497c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d009      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a15      	ldr	r2, [pc, #84]	@ (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a13      	ldr	r2, [pc, #76]	@ (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d10c      	bne.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4313      	orrs	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40010000 	.word	0x40010000
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800
 8004980:	40000c00 	.word	0x40000c00
 8004984:	40014000 	.word	0x40014000

08004988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004988:	b084      	sub	sp, #16
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	f107 001c 	add.w	r0, r7, #28
 8004996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800499a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d123      	bne.n	80049ea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80049b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 fae2 	bl	8005fa8 <USB_CoreReset>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e01b      	b.n	8004a22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f001 fad6 	bl	8005fa8 <USB_CoreReset>
 80049fc:	4603      	mov	r3, r0
 80049fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a14:	e005      	b.n	8004a22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a22:	7fbb      	ldrb	r3, [r7, #30]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d10b      	bne.n	8004a40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f043 0206 	orr.w	r2, r3, #6
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a4c:	b004      	add	sp, #16
 8004a4e:	4770      	bx	lr

08004a50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d165      	bne.n	8004b30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a41      	ldr	r2, [pc, #260]	@ (8004b6c <USB_SetTurnaroundTime+0x11c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d906      	bls.n	8004a7a <USB_SetTurnaroundTime+0x2a>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4a40      	ldr	r2, [pc, #256]	@ (8004b70 <USB_SetTurnaroundTime+0x120>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d202      	bcs.n	8004a7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a74:	230f      	movs	r3, #15
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e062      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b70 <USB_SetTurnaroundTime+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d306      	bcc.n	8004a90 <USB_SetTurnaroundTime+0x40>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4a3b      	ldr	r2, [pc, #236]	@ (8004b74 <USB_SetTurnaroundTime+0x124>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d202      	bcs.n	8004a90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a8a:	230e      	movs	r3, #14
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	e057      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4a38      	ldr	r2, [pc, #224]	@ (8004b74 <USB_SetTurnaroundTime+0x124>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d306      	bcc.n	8004aa6 <USB_SetTurnaroundTime+0x56>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4a37      	ldr	r2, [pc, #220]	@ (8004b78 <USB_SetTurnaroundTime+0x128>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d202      	bcs.n	8004aa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004aa0:	230d      	movs	r3, #13
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e04c      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4a33      	ldr	r2, [pc, #204]	@ (8004b78 <USB_SetTurnaroundTime+0x128>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d306      	bcc.n	8004abc <USB_SetTurnaroundTime+0x6c>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4a32      	ldr	r2, [pc, #200]	@ (8004b7c <USB_SetTurnaroundTime+0x12c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d802      	bhi.n	8004abc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	e041      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a2f      	ldr	r2, [pc, #188]	@ (8004b7c <USB_SetTurnaroundTime+0x12c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d906      	bls.n	8004ad2 <USB_SetTurnaroundTime+0x82>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a2e      	ldr	r2, [pc, #184]	@ (8004b80 <USB_SetTurnaroundTime+0x130>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d802      	bhi.n	8004ad2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004acc:	230b      	movs	r3, #11
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e036      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b80 <USB_SetTurnaroundTime+0x130>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d906      	bls.n	8004ae8 <USB_SetTurnaroundTime+0x98>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a29      	ldr	r2, [pc, #164]	@ (8004b84 <USB_SetTurnaroundTime+0x134>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d802      	bhi.n	8004ae8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e02b      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4a26      	ldr	r2, [pc, #152]	@ (8004b84 <USB_SetTurnaroundTime+0x134>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d906      	bls.n	8004afe <USB_SetTurnaroundTime+0xae>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a25      	ldr	r2, [pc, #148]	@ (8004b88 <USB_SetTurnaroundTime+0x138>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d202      	bcs.n	8004afe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004af8:	2309      	movs	r3, #9
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e020      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4a21      	ldr	r2, [pc, #132]	@ (8004b88 <USB_SetTurnaroundTime+0x138>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d306      	bcc.n	8004b14 <USB_SetTurnaroundTime+0xc4>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a20      	ldr	r2, [pc, #128]	@ (8004b8c <USB_SetTurnaroundTime+0x13c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d802      	bhi.n	8004b14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b0e:	2308      	movs	r3, #8
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e015      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <USB_SetTurnaroundTime+0x13c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d906      	bls.n	8004b2a <USB_SetTurnaroundTime+0xda>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b90 <USB_SetTurnaroundTime+0x140>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d202      	bcs.n	8004b2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b24:	2307      	movs	r3, #7
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e00a      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b2a:	2306      	movs	r3, #6
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e007      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b36:	2309      	movs	r3, #9
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e001      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b3c:	2309      	movs	r3, #9
 8004b3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	029b      	lsls	r3, r3, #10
 8004b54:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	00d8acbf 	.word	0x00d8acbf
 8004b70:	00e4e1c0 	.word	0x00e4e1c0
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	01067380 	.word	0x01067380
 8004b7c:	011a499f 	.word	0x011a499f
 8004b80:	01312cff 	.word	0x01312cff
 8004b84:	014ca43f 	.word	0x014ca43f
 8004b88:	016e3600 	.word	0x016e3600
 8004b8c:	01a6ab1f 	.word	0x01a6ab1f
 8004b90:	01e84800 	.word	0x01e84800

08004b94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d115      	bne.n	8004c26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c06:	200a      	movs	r0, #10
 8004c08:	f7fc f906 	bl	8000e18 <HAL_Delay>
      ms += 10U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	330a      	adds	r3, #10
 8004c10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f001 f939 	bl	8005e8a <USB_GetMode>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d01e      	beq.n	8004c5c <USB_SetCurrentMode+0x84>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c22:	d9f0      	bls.n	8004c06 <USB_SetCurrentMode+0x2e>
 8004c24:	e01a      	b.n	8004c5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d115      	bne.n	8004c58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c38:	200a      	movs	r0, #10
 8004c3a:	f7fc f8ed 	bl	8000e18 <HAL_Delay>
      ms += 10U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	330a      	adds	r3, #10
 8004c42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f001 f920 	bl	8005e8a <USB_GetMode>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <USB_SetCurrentMode+0x84>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c54:	d9f0      	bls.n	8004c38 <USB_SetCurrentMode+0x60>
 8004c56:	e001      	b.n	8004c5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e005      	b.n	8004c68 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c60:	d101      	bne.n	8004c66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c70:	b084      	sub	sp, #16
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	e009      	b.n	8004ca4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3340      	adds	r3, #64	@ 0x40
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b0e      	cmp	r3, #14
 8004ca8:	d9f2      	bls.n	8004c90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004caa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11c      	bne.n	8004cec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cea:	e00b      	b.n	8004d04 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10d      	bne.n	8004d34 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d20:	2100      	movs	r1, #0
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f968 	bl	8004ff8 <USB_SetDevSpeed>
 8004d28:	e008      	b.n	8004d3c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f963 	bl	8004ff8 <USB_SetDevSpeed>
 8004d32:	e003      	b.n	8004d3c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d34:	2103      	movs	r1, #3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f95e 	bl	8004ff8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d3c:	2110      	movs	r1, #16
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8fa 	bl	8004f38 <USB_FlushTxFifo>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f924 	bl	8004f9c <USB_FlushRxFifo>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d64:	461a      	mov	r2, r3
 8004d66:	2300      	movs	r3, #0
 8004d68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d70:	461a      	mov	r2, r3
 8004d72:	2300      	movs	r3, #0
 8004d74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e043      	b.n	8004e10 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d9e:	d118      	bne.n	8004dd2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db2:	461a      	mov	r2, r3
 8004db4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e013      	b.n	8004de4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	e008      	b.n	8004de4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df0:	461a      	mov	r2, r3
 8004df2:	2300      	movs	r3, #0
 8004df4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e02:	461a      	mov	r2, r3
 8004e04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e14:	461a      	mov	r2, r3
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d3b5      	bcc.n	8004d88 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	e043      	b.n	8004eaa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e38:	d118      	bne.n	8004e6c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	e013      	b.n	8004e7e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e62:	461a      	mov	r2, r3
 8004e64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e008      	b.n	8004e7e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ea2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004eae:	461a      	mov	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d3b5      	bcc.n	8004e22 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ec8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004ed6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f043 0210 	orr.w	r2, r3, #16
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <USB_DevInit+0x2c4>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ef8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f043 0208 	orr.w	r2, r3, #8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f1c:	f043 0304 	orr.w	r3, r3, #4
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f30:	b004      	add	sp, #16
 8004f32:	4770      	bx	lr
 8004f34:	803c3800 	.word	0x803c3800

08004f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f52:	d901      	bls.n	8004f58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e01b      	b.n	8004f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	daf2      	bge.n	8004f46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	019b      	lsls	r3, r3, #6
 8004f68:	f043 0220 	orr.w	r2, r3, #32
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f7c:	d901      	bls.n	8004f82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e006      	b.n	8004f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d0f0      	beq.n	8004f70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb4:	d901      	bls.n	8004fba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e018      	b.n	8004fec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	daf2      	bge.n	8004fa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2210      	movs	r2, #16
 8004fca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fd8:	d901      	bls.n	8004fde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e006      	b.n	8004fec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d0f0      	beq.n	8004fcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800502a:	b480      	push	{r7}
 800502c:	b087      	sub	sp, #28
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0306 	and.w	r3, r3, #6
 8005042:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800504a:	2300      	movs	r3, #0
 800504c:	75fb      	strb	r3, [r7, #23]
 800504e:	e00a      	b.n	8005066 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d002      	beq.n	800505c <USB_GetDevSpeed+0x32>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b06      	cmp	r3, #6
 800505a:	d102      	bne.n	8005062 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800505c:	2302      	movs	r3, #2
 800505e:	75fb      	strb	r3, [r7, #23]
 8005060:	e001      	b.n	8005066 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005062:	230f      	movs	r3, #15
 8005064:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
}
 8005068:	4618      	mov	r0, r3
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	785b      	ldrb	r3, [r3, #1]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d13a      	bne.n	8005106 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	2101      	movs	r1, #1
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	68f9      	ldr	r1, [r7, #12]
 80050aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d155      	bne.n	8005174 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	791b      	ldrb	r3, [r3, #4]
 80050e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	059b      	lsls	r3, r3, #22
 80050ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050ec:	4313      	orrs	r3, r2
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e036      	b.n	8005174 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	2101      	movs	r1, #1
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005124:	4313      	orrs	r3, r2
 8005126:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d11a      	bne.n	8005174 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	791b      	ldrb	r3, [r3, #4]
 8005158:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800515a:	430b      	orrs	r3, r1
 800515c:	4313      	orrs	r3, r2
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005172:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d161      	bne.n	8005264 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051b6:	d11f      	bne.n	80051f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	2101      	movs	r1, #1
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	b29b      	uxth	r3, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005218:	4013      	ands	r3, r2
 800521a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	b29b      	uxth	r3, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800523c:	4013      	ands	r3, r2
 800523e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	0159      	lsls	r1, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	440b      	add	r3, r1
 8005256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525a:	4619      	mov	r1, r3
 800525c:	4b35      	ldr	r3, [pc, #212]	@ (8005334 <USB_DeactivateEndpoint+0x1b0>)
 800525e:	4013      	ands	r3, r2
 8005260:	600b      	str	r3, [r1, #0]
 8005262:	e060      	b.n	8005326 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800527a:	d11f      	bne.n	80052bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005296:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800529a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	2101      	movs	r1, #1
 80052ce:	fa01 f303 	lsl.w	r3, r1, r3
 80052d2:	041b      	lsls	r3, r3, #16
 80052d4:	43db      	mvns	r3, r3
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052dc:	4013      	ands	r3, r2
 80052de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	2101      	movs	r1, #1
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	43db      	mvns	r3, r3
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005300:	4013      	ands	r3, r2
 8005302:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	0159      	lsls	r1, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	440b      	add	r3, r1
 800531a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800531e:	4619      	mov	r1, r3
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <USB_DeactivateEndpoint+0x1b4>)
 8005322:	4013      	ands	r3, r2
 8005324:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	ec337800 	.word	0xec337800
 8005338:	eff37800 	.word	0xeff37800

0800533c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08a      	sub	sp, #40	@ 0x28
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	2b01      	cmp	r3, #1
 800535a:	f040 817a 	bne.w	8005652 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d132      	bne.n	80053cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005380:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005384:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053c4:	0cdb      	lsrs	r3, r3, #19
 80053c6:	04db      	lsls	r3, r3, #19
 80053c8:	6113      	str	r3, [r2, #16]
 80053ca:	e092      	b.n	80054f2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053e6:	0cdb      	lsrs	r3, r3, #19
 80053e8:	04db      	lsls	r3, r3, #19
 80053ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005406:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800540a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800540e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11a      	bne.n	800544c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	429a      	cmp	r2, r3
 8005420:	d903      	bls.n	800542a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005444:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005448:	6113      	str	r3, [r2, #16]
 800544a:	e01b      	b.n	8005484 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005458:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6919      	ldr	r1, [r3, #16]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	440b      	add	r3, r1
 8005464:	1e59      	subs	r1, r3, #1
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	fbb1 f3f3 	udiv	r3, r1, r3
 800546e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005470:	4ba2      	ldr	r3, [pc, #648]	@ (80056fc <USB_EPStartXfer+0x3c0>)
 8005472:	400b      	ands	r3, r1
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	0148      	lsls	r0, r1, #5
 8005478:	69f9      	ldr	r1, [r7, #28]
 800547a:	4401      	add	r1, r0
 800547c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005480:	4313      	orrs	r3, r2
 8005482:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549a:	69b9      	ldr	r1, [r7, #24]
 800549c:	0148      	lsls	r0, r1, #5
 800549e:	69f9      	ldr	r1, [r7, #28]
 80054a0:	4401      	add	r1, r0
 80054a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80054a6:	4313      	orrs	r3, r2
 80054a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	791b      	ldrb	r3, [r3, #4]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d11f      	bne.n	80054f2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054cc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80054d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d14b      	bne.n	8005590 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550c:	461a      	mov	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	791b      	ldrb	r3, [r3, #4]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d128      	bne.n	800556e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d110      	bne.n	800554e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005546:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	e00f      	b.n	800556e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005588:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e165      	b.n	800585c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	791b      	ldrb	r3, [r3, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d015      	beq.n	80055e4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 814d 	beq.w	800585c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	2101      	movs	r1, #1
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	69f9      	ldr	r1, [r7, #28]
 80055da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055de:	4313      	orrs	r3, r2
 80055e0:	634b      	str	r3, [r1, #52]	@ 0x34
 80055e2:	e13b      	b.n	800585c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d110      	bne.n	8005616 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800560e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	e00f      	b.n	8005636 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005634:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68d9      	ldr	r1, [r3, #12]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	b298      	uxth	r0, r3
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	4603      	mov	r3, r0
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f9b8 	bl	80059c0 <USB_WritePacket>
 8005650:	e104      	b.n	800585c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800566c:	0cdb      	lsrs	r3, r3, #19
 800566e:	04db      	lsls	r3, r3, #19
 8005670:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800568c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005690:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005694:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d131      	bne.n	8005700 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ca:	69b9      	ldr	r1, [r7, #24]
 80056cc:	0148      	lsls	r0, r1, #5
 80056ce:	69f9      	ldr	r1, [r7, #28]
 80056d0:	4401      	add	r1, r0
 80056d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056d6:	4313      	orrs	r3, r2
 80056d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056f8:	6113      	str	r3, [r2, #16]
 80056fa:	e061      	b.n	80057c0 <USB_EPStartXfer+0x484>
 80056fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d123      	bne.n	8005750 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800571e:	69b9      	ldr	r1, [r7, #24]
 8005720:	0148      	lsls	r0, r1, #5
 8005722:	69f9      	ldr	r1, [r7, #28]
 8005724:	4401      	add	r1, r0
 8005726:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800572a:	4313      	orrs	r3, r2
 800572c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005748:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800574c:	6113      	str	r3, [r2, #16]
 800574e:	e037      	b.n	80057c0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4413      	add	r3, r2
 800575a:	1e5a      	subs	r2, r3, #1
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	8afa      	ldrh	r2, [r7, #22]
 800576c:	fb03 f202 	mul.w	r2, r3, r2
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	8afb      	ldrh	r3, [r7, #22]
 8005784:	04d9      	lsls	r1, r3, #19
 8005786:	4b38      	ldr	r3, [pc, #224]	@ (8005868 <USB_EPStartXfer+0x52c>)
 8005788:	400b      	ands	r3, r1
 800578a:	69b9      	ldr	r1, [r7, #24]
 800578c:	0148      	lsls	r0, r1, #5
 800578e:	69f9      	ldr	r1, [r7, #28]
 8005790:	4401      	add	r1, r0
 8005792:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005796:	4313      	orrs	r3, r2
 8005798:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	0148      	lsls	r0, r1, #5
 80057b4:	69f9      	ldr	r1, [r7, #28]
 80057b6:	4401      	add	r1, r0
 80057b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057bc:	4313      	orrs	r3, r2
 80057be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d10d      	bne.n	80057e2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	68d9      	ldr	r1, [r3, #12]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057de:	460a      	mov	r2, r1
 80057e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	791b      	ldrb	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d128      	bne.n	800583c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d110      	bne.n	800581c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005814:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e00f      	b.n	800583c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800583a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005856:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800585a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	1ff80000 	.word	0x1ff80000

0800586c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d14a      	bne.n	8005920 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800589e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058a2:	f040 8086 	bne.w	80059b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	7812      	ldrb	r2, [r2, #0]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	7812      	ldrb	r2, [r2, #0]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d902      	bls.n	8005904 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	75fb      	strb	r3, [r7, #23]
          break;
 8005902:	e056      	b.n	80059b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800591c:	d0e7      	beq.n	80058ee <USB_EPStopXfer+0x82>
 800591e:	e048      	b.n	80059b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005938:	d13b      	bne.n	80059b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	7812      	ldrb	r2, [r2, #0]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005958:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800595c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	7812      	ldrb	r2, [r2, #0]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800597c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005980:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800598e:	4293      	cmp	r3, r2
 8005990:	d902      	bls.n	8005998 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
          break;
 8005996:	e00c      	b.n	80059b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059b0:	d0e7      	beq.n	8005982 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b089      	sub	sp, #36	@ 0x24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4611      	mov	r1, r2
 80059cc:	461a      	mov	r2, r3
 80059ce:	460b      	mov	r3, r1
 80059d0:	71fb      	strb	r3, [r7, #7]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d123      	bne.n	8005a2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059e6:	88bb      	ldrh	r3, [r7, #4]
 80059e8:	3303      	adds	r3, #3
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e018      	b.n	8005a26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	031a      	lsls	r2, r3, #12
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a00:	461a      	mov	r2, r3
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3301      	adds	r3, #1
 8005a12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	3301      	adds	r3, #1
 8005a18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	3301      	adds	r3, #1
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d3e2      	bcc.n	80059f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3724      	adds	r7, #36	@ 0x24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b08b      	sub	sp, #44	@ 0x2c
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	089b      	lsrs	r3, r3, #2
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	e014      	b.n	8005a92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	3301      	adds	r3, #1
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	3301      	adds	r3, #1
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	3301      	adds	r3, #1
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d3e6      	bcc.n	8005a68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a9a:	8bfb      	ldrh	r3, [r7, #30]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01e      	beq.n	8005ade <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f107 0310 	add.w	r3, r7, #16
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	623b      	str	r3, [r7, #32]
      pDest++;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	3301      	adds	r3, #1
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ad2:	8bfb      	ldrh	r3, [r7, #30]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ad8:	8bfb      	ldrh	r3, [r7, #30]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1ea      	bne.n	8005ab4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	372c      	adds	r7, #44	@ 0x2c
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d12c      	bne.n	8005b62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	db12      	blt.n	8005b40 <USB_EPSetStall+0x54>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00f      	beq.n	8005b40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	e02b      	b.n	8005bba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	db12      	blt.n	8005b9a <USB_EPSetStall+0xae>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00f      	beq.n	8005b9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d128      	bne.n	8005c36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	791b      	ldrb	r3, [r3, #4]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d003      	beq.n	8005c14 <USB_EPClearStall+0x4c>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	791b      	ldrb	r3, [r3, #4]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d138      	bne.n	8005c86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e027      	b.n	8005c86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	791b      	ldrb	r3, [r3, #4]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d003      	beq.n	8005c66 <USB_EPClearStall+0x9e>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d10f      	bne.n	8005c86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cb2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005cb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005cc8:	68f9      	ldr	r1, [r7, #12]
 8005cca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d0e:	f023 0302 	bic.w	r3, r3, #2
 8005d12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d3c:	f023 0303 	bic.w	r3, r3, #3
 8005d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	4013      	ands	r3, r2
 8005dac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	0c1b      	lsrs	r3, r3, #16
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	b29b      	uxth	r3, r3
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e20:	68bb      	ldr	r3, [r7, #8]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b087      	sub	sp, #28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	460b      	mov	r3, r1
 8005e38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	01db      	lsls	r3, r3, #7
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0301 	and.w	r3, r3, #1
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ec0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ec4:	f023 0307 	bic.w	r3, r3, #7
 8005ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	333c      	adds	r3, #60	@ 0x3c
 8005f02:	3304      	adds	r3, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4a26      	ldr	r2, [pc, #152]	@ (8005fa4 <USB_EP0_OutStart+0xb8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d90a      	bls.n	8005f26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f20:	d101      	bne.n	8005f26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e037      	b.n	8005f96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f54:	f043 0318 	orr.w	r3, r3, #24
 8005f58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f68:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005f6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d10f      	bne.n	8005f94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f8e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005f92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	4f54300a 	.word	0x4f54300a

08005fa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fc0:	d901      	bls.n	8005fc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e01b      	b.n	8005ffe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	daf2      	bge.n	8005fb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f043 0201 	orr.w	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fea:	d901      	bls.n	8005ff0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e006      	b.n	8005ffe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d0f0      	beq.n	8005fde <USB_CoreReset+0x36>

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006018:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800601c:	f002 fc88 	bl	8008930 <USBD_static_malloc>
 8006020:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	32b0      	adds	r2, #176	@ 0xb0
 8006032:	2100      	movs	r1, #0
 8006034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006038:	2302      	movs	r3, #2
 800603a:	e0d4      	b.n	80061e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800603c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006040:	2100      	movs	r1, #0
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f002 fd9c 	bl	8008b80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	32b0      	adds	r2, #176	@ 0xb0
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	32b0      	adds	r2, #176	@ 0xb0
 8006062:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	7c1b      	ldrb	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d138      	bne.n	80060e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006074:	4b5e      	ldr	r3, [pc, #376]	@ (80061f0 <USBD_CDC_Init+0x1e4>)
 8006076:	7819      	ldrb	r1, [r3, #0]
 8006078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800607c:	2202      	movs	r2, #2
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f002 fb33 	bl	80086ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006084:	4b5a      	ldr	r3, [pc, #360]	@ (80061f0 <USBD_CDC_Init+0x1e4>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	3324      	adds	r3, #36	@ 0x24
 800609a:	2201      	movs	r2, #1
 800609c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800609e:	4b55      	ldr	r3, [pc, #340]	@ (80061f4 <USBD_CDC_Init+0x1e8>)
 80060a0:	7819      	ldrb	r1, [r3, #0]
 80060a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060a6:	2202      	movs	r2, #2
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f002 fb1e 	bl	80086ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060ae:	4b51      	ldr	r3, [pc, #324]	@ (80061f4 <USBD_CDC_Init+0x1e8>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	f003 020f 	and.w	r2, r3, #15
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060c6:	2201      	movs	r2, #1
 80060c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060ca:	4b4b      	ldr	r3, [pc, #300]	@ (80061f8 <USBD_CDC_Init+0x1ec>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	f003 020f 	and.w	r2, r3, #15
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	3326      	adds	r3, #38	@ 0x26
 80060e0:	2210      	movs	r2, #16
 80060e2:	801a      	strh	r2, [r3, #0]
 80060e4:	e035      	b.n	8006152 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060e6:	4b42      	ldr	r3, [pc, #264]	@ (80061f0 <USBD_CDC_Init+0x1e4>)
 80060e8:	7819      	ldrb	r1, [r3, #0]
 80060ea:	2340      	movs	r3, #64	@ 0x40
 80060ec:	2202      	movs	r2, #2
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f002 fafb 	bl	80086ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060f4:	4b3e      	ldr	r3, [pc, #248]	@ (80061f0 <USBD_CDC_Init+0x1e4>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	3324      	adds	r3, #36	@ 0x24
 800610a:	2201      	movs	r2, #1
 800610c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800610e:	4b39      	ldr	r3, [pc, #228]	@ (80061f4 <USBD_CDC_Init+0x1e8>)
 8006110:	7819      	ldrb	r1, [r3, #0]
 8006112:	2340      	movs	r3, #64	@ 0x40
 8006114:	2202      	movs	r2, #2
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f002 fae7 	bl	80086ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800611c:	4b35      	ldr	r3, [pc, #212]	@ (80061f4 <USBD_CDC_Init+0x1e8>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f003 020f 	and.w	r2, r3, #15
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006134:	2201      	movs	r2, #1
 8006136:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006138:	4b2f      	ldr	r3, [pc, #188]	@ (80061f8 <USBD_CDC_Init+0x1ec>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	f003 020f 	and.w	r2, r3, #15
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	3326      	adds	r3, #38	@ 0x26
 800614e:	2210      	movs	r2, #16
 8006150:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006152:	4b29      	ldr	r3, [pc, #164]	@ (80061f8 <USBD_CDC_Init+0x1ec>)
 8006154:	7819      	ldrb	r1, [r3, #0]
 8006156:	2308      	movs	r3, #8
 8006158:	2203      	movs	r2, #3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f002 fac5 	bl	80086ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006160:	4b25      	ldr	r3, [pc, #148]	@ (80061f8 <USBD_CDC_Init+0x1ec>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f003 020f 	and.w	r2, r3, #15
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	3324      	adds	r3, #36	@ 0x24
 8006176:	2201      	movs	r2, #1
 8006178:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	33b0      	adds	r3, #176	@ 0xb0
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80061b0:	2302      	movs	r3, #2
 80061b2:	e018      	b.n	80061e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7c1b      	ldrb	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061bc:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <USBD_CDC_Init+0x1e8>)
 80061be:	7819      	ldrb	r1, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f002 fb7c 	bl	80088c8 <USBD_LL_PrepareReceive>
 80061d0:	e008      	b.n	80061e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061d2:	4b08      	ldr	r3, [pc, #32]	@ (80061f4 <USBD_CDC_Init+0x1e8>)
 80061d4:	7819      	ldrb	r1, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061dc:	2340      	movs	r3, #64	@ 0x40
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f002 fb72 	bl	80088c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200000a3 	.word	0x200000a3
 80061f4:	200000a4 	.word	0x200000a4
 80061f8:	200000a5 	.word	0x200000a5

080061fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006208:	4b3a      	ldr	r3, [pc, #232]	@ (80062f4 <USBD_CDC_DeInit+0xf8>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f002 fa91 	bl	8008736 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006214:	4b37      	ldr	r3, [pc, #220]	@ (80062f4 <USBD_CDC_DeInit+0xf8>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f003 020f 	and.w	r2, r3, #15
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	3324      	adds	r3, #36	@ 0x24
 800622a:	2200      	movs	r2, #0
 800622c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800622e:	4b32      	ldr	r3, [pc, #200]	@ (80062f8 <USBD_CDC_DeInit+0xfc>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f002 fa7e 	bl	8008736 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800623a:	4b2f      	ldr	r3, [pc, #188]	@ (80062f8 <USBD_CDC_DeInit+0xfc>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	f003 020f 	and.w	r2, r3, #15
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006252:	2200      	movs	r2, #0
 8006254:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006256:	4b29      	ldr	r3, [pc, #164]	@ (80062fc <USBD_CDC_DeInit+0x100>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f002 fa6a 	bl	8008736 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006262:	4b26      	ldr	r3, [pc, #152]	@ (80062fc <USBD_CDC_DeInit+0x100>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	3324      	adds	r3, #36	@ 0x24
 8006278:	2200      	movs	r2, #0
 800627a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800627c:	4b1f      	ldr	r3, [pc, #124]	@ (80062fc <USBD_CDC_DeInit+0x100>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	440b      	add	r3, r1
 8006290:	3326      	adds	r3, #38	@ 0x26
 8006292:	2200      	movs	r2, #0
 8006294:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	32b0      	adds	r2, #176	@ 0xb0
 80062a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01f      	beq.n	80062e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	33b0      	adds	r3, #176	@ 0xb0
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	32b0      	adds	r2, #176	@ 0xb0
 80062c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f002 fb3e 	bl	800894c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	32b0      	adds	r2, #176	@ 0xb0
 80062da:	2100      	movs	r1, #0
 80062dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	200000a3 	.word	0x200000a3
 80062f8:	200000a4 	.word	0x200000a4
 80062fc:	200000a5 	.word	0x200000a5

08006300 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	32b0      	adds	r2, #176	@ 0xb0
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800632c:	2303      	movs	r3, #3
 800632e:	e0bf      	b.n	80064b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006338:	2b00      	cmp	r3, #0
 800633a:	d050      	beq.n	80063de <USBD_CDC_Setup+0xde>
 800633c:	2b20      	cmp	r3, #32
 800633e:	f040 80af 	bne.w	80064a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	88db      	ldrh	r3, [r3, #6]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d03a      	beq.n	80063c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b25b      	sxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	da1b      	bge.n	800638c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	33b0      	adds	r3, #176	@ 0xb0
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800636a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	88d2      	ldrh	r2, [r2, #6]
 8006370:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	88db      	ldrh	r3, [r3, #6]
 8006376:	2b07      	cmp	r3, #7
 8006378:	bf28      	it	cs
 800637a:	2307      	movcs	r3, #7
 800637c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	89fa      	ldrh	r2, [r7, #14]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fd87 	bl	8007e98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800638a:	e090      	b.n	80064ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	785a      	ldrb	r2, [r3, #1]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	88db      	ldrh	r3, [r3, #6]
 800639a:	2b3f      	cmp	r3, #63	@ 0x3f
 800639c:	d803      	bhi.n	80063a6 <USBD_CDC_Setup+0xa6>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	88db      	ldrh	r3, [r3, #6]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	e000      	b.n	80063a8 <USBD_CDC_Setup+0xa8>
 80063a6:	2240      	movs	r2, #64	@ 0x40
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80063ae:	6939      	ldr	r1, [r7, #16]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80063b6:	461a      	mov	r2, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 fd99 	bl	8007ef0 <USBD_CtlPrepareRx>
      break;
 80063be:	e076      	b.n	80064ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	33b0      	adds	r3, #176	@ 0xb0
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	7850      	ldrb	r0, [r2, #1]
 80063d6:	2200      	movs	r2, #0
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	4798      	blx	r3
      break;
 80063dc:	e067      	b.n	80064ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b0b      	cmp	r3, #11
 80063e4:	d851      	bhi.n	800648a <USBD_CDC_Setup+0x18a>
 80063e6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <USBD_CDC_Setup+0xec>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	0800641d 	.word	0x0800641d
 80063f0:	08006499 	.word	0x08006499
 80063f4:	0800648b 	.word	0x0800648b
 80063f8:	0800648b 	.word	0x0800648b
 80063fc:	0800648b 	.word	0x0800648b
 8006400:	0800648b 	.word	0x0800648b
 8006404:	0800648b 	.word	0x0800648b
 8006408:	0800648b 	.word	0x0800648b
 800640c:	0800648b 	.word	0x0800648b
 8006410:	0800648b 	.word	0x0800648b
 8006414:	08006447 	.word	0x08006447
 8006418:	08006471 	.word	0x08006471
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b03      	cmp	r3, #3
 8006426:	d107      	bne.n	8006438 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006428:	f107 030a 	add.w	r3, r7, #10
 800642c:	2202      	movs	r2, #2
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 fd31 	bl	8007e98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006436:	e032      	b.n	800649e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fcbb 	bl	8007db6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006440:	2303      	movs	r3, #3
 8006442:	75fb      	strb	r3, [r7, #23]
          break;
 8006444:	e02b      	b.n	800649e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b03      	cmp	r3, #3
 8006450:	d107      	bne.n	8006462 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006452:	f107 030d 	add.w	r3, r7, #13
 8006456:	2201      	movs	r2, #1
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fd1c 	bl	8007e98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006460:	e01d      	b.n	800649e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 fca6 	bl	8007db6 <USBD_CtlError>
            ret = USBD_FAIL;
 800646a:	2303      	movs	r3, #3
 800646c:	75fb      	strb	r3, [r7, #23]
          break;
 800646e:	e016      	b.n	800649e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b03      	cmp	r3, #3
 800647a:	d00f      	beq.n	800649c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 fc99 	bl	8007db6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006484:	2303      	movs	r3, #3
 8006486:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006488:	e008      	b.n	800649c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 fc92 	bl	8007db6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006492:	2303      	movs	r3, #3
 8006494:	75fb      	strb	r3, [r7, #23]
          break;
 8006496:	e002      	b.n	800649e <USBD_CDC_Setup+0x19e>
          break;
 8006498:	bf00      	nop
 800649a:	e008      	b.n	80064ae <USBD_CDC_Setup+0x1ae>
          break;
 800649c:	bf00      	nop
      }
      break;
 800649e:	e006      	b.n	80064ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 fc87 	bl	8007db6 <USBD_CtlError>
      ret = USBD_FAIL;
 80064a8:	2303      	movs	r3, #3
 80064aa:	75fb      	strb	r3, [r7, #23]
      break;
 80064ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	32b0      	adds	r2, #176	@ 0xb0
 80064d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80064de:	2303      	movs	r3, #3
 80064e0:	e065      	b.n	80065ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	32b0      	adds	r2, #176	@ 0xb0
 80064ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	f003 020f 	and.w	r2, r3, #15
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	3318      	adds	r3, #24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d02f      	beq.n	800656c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	f003 020f 	and.w	r2, r3, #15
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	3318      	adds	r3, #24
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	f003 010f 	and.w	r1, r3, #15
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	460b      	mov	r3, r1
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	440b      	add	r3, r1
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4403      	add	r3, r0
 8006534:	331c      	adds	r3, #28
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	fbb2 f1f3 	udiv	r1, r2, r3
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006542:	2b00      	cmp	r3, #0
 8006544:	d112      	bne.n	800656c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	f003 020f 	and.w	r2, r3, #15
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	3318      	adds	r3, #24
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800655e:	78f9      	ldrb	r1, [r7, #3]
 8006560:	2300      	movs	r3, #0
 8006562:	2200      	movs	r2, #0
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f002 f98e 	bl	8008886 <USBD_LL_Transmit>
 800656a:	e01f      	b.n	80065ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	33b0      	adds	r3, #176	@ 0xb0
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d010      	beq.n	80065ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	33b0      	adds	r3, #176	@ 0xb0
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	32b0      	adds	r2, #176	@ 0xb0
 80065cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	32b0      	adds	r2, #176	@ 0xb0
 80065dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e01a      	b.n	800661e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f002 f98c 	bl	800890a <USBD_LL_GetRxDataSize>
 80065f2:	4602      	mov	r2, r0
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	33b0      	adds	r3, #176	@ 0xb0
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006618:	4611      	mov	r1, r2
 800661a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	32b0      	adds	r2, #176	@ 0xb0
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	e024      	b.n	8006692 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	33b0      	adds	r3, #176	@ 0xb0
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d019      	beq.n	8006690 <USBD_CDC_EP0_RxReady+0x6a>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006662:	2bff      	cmp	r3, #255	@ 0xff
 8006664:	d014      	beq.n	8006690 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	33b0      	adds	r3, #176	@ 0xb0
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800667e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006686:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	22ff      	movs	r2, #255	@ 0xff
 800668c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066a4:	2182      	movs	r1, #130	@ 0x82
 80066a6:	4818      	ldr	r0, [pc, #96]	@ (8006708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066a8:	f000 fd4f 	bl	800714a <USBD_GetEpDesc>
 80066ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066ae:	2101      	movs	r1, #1
 80066b0:	4815      	ldr	r0, [pc, #84]	@ (8006708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066b2:	f000 fd4a 	bl	800714a <USBD_GetEpDesc>
 80066b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066b8:	2181      	movs	r1, #129	@ 0x81
 80066ba:	4813      	ldr	r0, [pc, #76]	@ (8006708 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066bc:	f000 fd45 	bl	800714a <USBD_GetEpDesc>
 80066c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2210      	movs	r2, #16
 80066cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066dc:	711a      	strb	r2, [r3, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d006      	beq.n	80066f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066f0:	711a      	strb	r2, [r3, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2243      	movs	r2, #67	@ 0x43
 80066fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066fc:	4b02      	ldr	r3, [pc, #8]	@ (8006708 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000060 	.word	0x20000060

0800670c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006714:	2182      	movs	r1, #130	@ 0x82
 8006716:	4818      	ldr	r0, [pc, #96]	@ (8006778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006718:	f000 fd17 	bl	800714a <USBD_GetEpDesc>
 800671c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800671e:	2101      	movs	r1, #1
 8006720:	4815      	ldr	r0, [pc, #84]	@ (8006778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006722:	f000 fd12 	bl	800714a <USBD_GetEpDesc>
 8006726:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006728:	2181      	movs	r1, #129	@ 0x81
 800672a:	4813      	ldr	r0, [pc, #76]	@ (8006778 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800672c:	f000 fd0d 	bl	800714a <USBD_GetEpDesc>
 8006730:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2210      	movs	r2, #16
 800673c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d006      	beq.n	8006752 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2200      	movs	r2, #0
 8006748:	711a      	strb	r2, [r3, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f042 0202 	orr.w	r2, r2, #2
 8006750:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d006      	beq.n	8006766 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	711a      	strb	r2, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f042 0202 	orr.w	r2, r2, #2
 8006764:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2243      	movs	r2, #67	@ 0x43
 800676a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800676c:	4b02      	ldr	r3, [pc, #8]	@ (8006778 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000060 	.word	0x20000060

0800677c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006784:	2182      	movs	r1, #130	@ 0x82
 8006786:	4818      	ldr	r0, [pc, #96]	@ (80067e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006788:	f000 fcdf 	bl	800714a <USBD_GetEpDesc>
 800678c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800678e:	2101      	movs	r1, #1
 8006790:	4815      	ldr	r0, [pc, #84]	@ (80067e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006792:	f000 fcda 	bl	800714a <USBD_GetEpDesc>
 8006796:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006798:	2181      	movs	r1, #129	@ 0x81
 800679a:	4813      	ldr	r0, [pc, #76]	@ (80067e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800679c:	f000 fcd5 	bl	800714a <USBD_GetEpDesc>
 80067a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2210      	movs	r2, #16
 80067ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d006      	beq.n	80067c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067bc:	711a      	strb	r2, [r3, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d006      	beq.n	80067d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067d0:	711a      	strb	r2, [r3, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2243      	movs	r2, #67	@ 0x43
 80067da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067dc:	4b02      	ldr	r3, [pc, #8]	@ (80067e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000060 	.word	0x20000060

080067ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	220a      	movs	r2, #10
 80067f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067fa:	4b03      	ldr	r3, [pc, #12]	@ (8006808 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	2000001c 	.word	0x2000001c

0800680c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800681c:	2303      	movs	r3, #3
 800681e:	e009      	b.n	8006834 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	33b0      	adds	r3, #176	@ 0xb0
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	32b0      	adds	r2, #176	@ 0xb0
 8006856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006862:	2303      	movs	r3, #3
 8006864:	e008      	b.n	8006878 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	32b0      	adds	r2, #176	@ 0xb0
 8006898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e004      	b.n	80068b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32b0      	adds	r2, #176	@ 0xb0
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e025      	b.n	8006932 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11f      	bne.n	8006930 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80068f8:	4b10      	ldr	r3, [pc, #64]	@ (800693c <USBD_CDC_TransmitPacket+0x7c>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f003 020f 	and.w	r2, r3, #15
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4403      	add	r3, r0
 8006912:	3318      	adds	r3, #24
 8006914:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006916:	4b09      	ldr	r3, [pc, #36]	@ (800693c <USBD_CDC_TransmitPacket+0x7c>)
 8006918:	7819      	ldrb	r1, [r3, #0]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 ffad 	bl	8008886 <USBD_LL_Transmit>

    ret = USBD_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	200000a3 	.word	0x200000a3

08006940 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	32b0      	adds	r2, #176	@ 0xb0
 8006952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006956:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	32b0      	adds	r2, #176	@ 0xb0
 8006962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800696a:	2303      	movs	r3, #3
 800696c:	e018      	b.n	80069a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	7c1b      	ldrb	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10a      	bne.n	800698c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006976:	4b0c      	ldr	r3, [pc, #48]	@ (80069a8 <USBD_CDC_ReceivePacket+0x68>)
 8006978:	7819      	ldrb	r1, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 ff9f 	bl	80088c8 <USBD_LL_PrepareReceive>
 800698a:	e008      	b.n	800699e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800698c:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <USBD_CDC_ReceivePacket+0x68>)
 800698e:	7819      	ldrb	r1, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006996:	2340      	movs	r3, #64	@ 0x40
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 ff95 	bl	80088c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	200000a4 	.word	0x200000a4

080069ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e01f      	b.n	8006a04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	79fa      	ldrb	r2, [r7, #7]
 80069f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f001 fe0f 	bl	800861c <USBD_LL_Init>
 80069fe:	4603      	mov	r3, r0
 8006a00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e025      	b.n	8006a70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	32ae      	adds	r2, #174	@ 0xae
 8006a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00f      	beq.n	8006a60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	32ae      	adds	r2, #174	@ 0xae
 8006a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	f107 020e 	add.w	r2, r7, #14
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	4602      	mov	r2, r0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fe17 	bl	80086b4 <USBD_LL_Start>
 8006a86:	4603      	mov	r3, r0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d009      	beq.n	8006ad4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	78fa      	ldrb	r2, [r7, #3]
 8006aca:	4611      	mov	r1, r2
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	4611      	mov	r1, r2
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b04:	2303      	movs	r3, #3
 8006b06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 f90c 	bl	8007d42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006b38:	461a      	mov	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d01a      	beq.n	8006b84 <USBD_LL_SetupStage+0x72>
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d822      	bhi.n	8006b98 <USBD_LL_SetupStage+0x86>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <USBD_LL_SetupStage+0x4a>
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d00a      	beq.n	8006b70 <USBD_LL_SetupStage+0x5e>
 8006b5a:	e01d      	b.n	8006b98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fb63 	bl	8007230 <USBD_StdDevReq>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6e:	e020      	b.n	8006bb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fbcb 	bl	8007314 <USBD_StdItfReq>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]
      break;
 8006b82:	e016      	b.n	8006bb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc2d 	bl	80073ec <USBD_StdEPReq>
 8006b92:	4603      	mov	r3, r0
 8006b94:	73fb      	strb	r3, [r7, #15]
      break;
 8006b96:	e00c      	b.n	8006bb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fde4 	bl	8008774 <USBD_LL_StallEP>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb0:	bf00      	nop
  }

  return ret;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d16e      	bne.n	8006cb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006bda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	f040 8098 	bne.w	8006d18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d913      	bls.n	8006c1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	1ad2      	subs	r2, r2, r3
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	bf28      	it	cs
 8006c0e:	4613      	movcs	r3, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f001 f988 	bl	8007f2a <USBD_CtlContinueRx>
 8006c1a:	e07d      	b.n	8006d18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d014      	beq.n	8006c54 <USBD_LL_DataOutStage+0x98>
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d81d      	bhi.n	8006c6a <USBD_LL_DataOutStage+0xae>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <USBD_LL_DataOutStage+0x7c>
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d003      	beq.n	8006c3e <USBD_LL_DataOutStage+0x82>
 8006c36:	e018      	b.n	8006c6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75bb      	strb	r3, [r7, #22]
            break;
 8006c3c:	e018      	b.n	8006c70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fa64 	bl	8007116 <USBD_CoreFindIF>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75bb      	strb	r3, [r7, #22]
            break;
 8006c52:	e00d      	b.n	8006c70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fa66 	bl	8007130 <USBD_CoreFindEP>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75bb      	strb	r3, [r7, #22]
            break;
 8006c68:	e002      	b.n	8006c70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75bb      	strb	r3, [r7, #22]
            break;
 8006c6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c70:	7dbb      	ldrb	r3, [r7, #22]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d119      	bne.n	8006caa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d113      	bne.n	8006caa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c82:	7dba      	ldrb	r2, [r7, #22]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	32ae      	adds	r2, #174	@ 0xae
 8006c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c92:	7dba      	ldrb	r2, [r7, #22]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c9a:	7dba      	ldrb	r2, [r7, #22]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	32ae      	adds	r2, #174	@ 0xae
 8006ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f001 f94e 	bl	8007f4c <USBD_CtlSendStatus>
 8006cb0:	e032      	b.n	8006d18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fa37 	bl	8007130 <USBD_CoreFindEP>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cc6:	7dbb      	ldrb	r3, [r7, #22]
 8006cc8:	2bff      	cmp	r3, #255	@ 0xff
 8006cca:	d025      	beq.n	8006d18 <USBD_LL_DataOutStage+0x15c>
 8006ccc:	7dbb      	ldrb	r3, [r7, #22]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d122      	bne.n	8006d18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d117      	bne.n	8006d0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006cde:	7dba      	ldrb	r2, [r7, #22]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	32ae      	adds	r2, #174	@ 0xae
 8006ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00f      	beq.n	8006d0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006cee:	7dba      	ldrb	r2, [r7, #22]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006cf6:	7dba      	ldrb	r2, [r7, #22]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	32ae      	adds	r2, #174	@ 0xae
 8006cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	7afa      	ldrb	r2, [r7, #11]
 8006d04:	4611      	mov	r1, r2
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	4798      	blx	r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	e000      	b.n	8006d1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d30:	7afb      	ldrb	r3, [r7, #11]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d16f      	bne.n	8006e16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3314      	adds	r3, #20
 8006d3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d15a      	bne.n	8006dfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d914      	bls.n	8006d7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f001 f8b0 	bl	8007ece <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2200      	movs	r2, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f001 fda7 	bl	80088c8 <USBD_LL_PrepareReceive>
 8006d7a:	e03f      	b.n	8006dfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d11c      	bne.n	8006dc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d316      	bcc.n	8006dc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d20f      	bcs.n	8006dc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006da2:	2200      	movs	r2, #0
 8006da4:	2100      	movs	r1, #0
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f001 f891 	bl	8007ece <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006db4:	2300      	movs	r3, #0
 8006db6:	2200      	movs	r2, #0
 8006db8:	2100      	movs	r1, #0
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f001 fd84 	bl	80088c8 <USBD_LL_PrepareReceive>
 8006dc0:	e01c      	b.n	8006dfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d10f      	bne.n	8006dee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dee:	2180      	movs	r1, #128	@ 0x80
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 fcbf 	bl	8008774 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f001 f8bb 	bl	8007f72 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d03a      	beq.n	8006e7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fe42 	bl	8006a90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006e14:	e032      	b.n	8006e7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f985 	bl	8007130 <USBD_CoreFindEP>
 8006e26:	4603      	mov	r3, r0
 8006e28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2bff      	cmp	r3, #255	@ 0xff
 8006e2e:	d025      	beq.n	8006e7c <USBD_LL_DataInStage+0x15a>
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d122      	bne.n	8006e7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d11c      	bne.n	8006e7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e42:	7dfa      	ldrb	r2, [r7, #23]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	32ae      	adds	r2, #174	@ 0xae
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d014      	beq.n	8006e7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e52:	7dfa      	ldrb	r2, [r7, #23]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e5a:	7dfa      	ldrb	r2, [r7, #23]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	32ae      	adds	r2, #174	@ 0xae
 8006e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	7afa      	ldrb	r2, [r7, #11]
 8006e68:	4611      	mov	r1, r2
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	4798      	blx	r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e72:	7dbb      	ldrb	r3, [r7, #22]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e78:	7dbb      	ldrb	r3, [r7, #22]
 8006e7a:	e000      	b.n	8006e7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d014      	beq.n	8006eec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00e      	beq.n	8006eec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6852      	ldr	r2, [r2, #4]
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	4611      	mov	r1, r2
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	4798      	blx	r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eec:	2340      	movs	r3, #64	@ 0x40
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fbf9 	bl	80086ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2240      	movs	r2, #64	@ 0x40
 8006f04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f08:	2340      	movs	r3, #64	@ 0x40
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2180      	movs	r1, #128	@ 0x80
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fbeb 	bl	80086ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2240      	movs	r2, #64	@ 0x40
 8006f1e:	621a      	str	r2, [r3, #32]

  return ret;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d006      	beq.n	8006f6c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d106      	bne.n	8006fa4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d110      	bne.n	8006fe8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00b      	beq.n	8006fe8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	32ae      	adds	r2, #174	@ 0xae
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	e01c      	b.n	800704e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b03      	cmp	r3, #3
 800701e:	d115      	bne.n	800704c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	32ae      	adds	r2, #174	@ 0xae
 800702a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32ae      	adds	r2, #174	@ 0xae
 800703e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	78fa      	ldrb	r2, [r7, #3]
 8007046:	4611      	mov	r1, r2
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	32ae      	adds	r2, #174	@ 0xae
 800706c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	e01c      	b.n	80070b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b03      	cmp	r3, #3
 8007082:	d115      	bne.n	80070b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	32ae      	adds	r2, #174	@ 0xae
 800708e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	32ae      	adds	r2, #174	@ 0xae
 80070a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	4611      	mov	r1, r2
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6852      	ldr	r2, [r2, #4]
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	4611      	mov	r1, r2
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007108:	2303      	movs	r3, #3
 800710a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007122:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800713c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b086      	sub	sp, #24
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	885b      	ldrh	r3, [r3, #2]
 8007166:	b29b      	uxth	r3, r3
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	4293      	cmp	r3, r2
 800716e:	d91f      	bls.n	80071b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007176:	e013      	b.n	80071a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007178:	f107 030a 	add.w	r3, r7, #10
 800717c:	4619      	mov	r1, r3
 800717e:	6978      	ldr	r0, [r7, #20]
 8007180:	f000 f81b 	bl	80071ba <USBD_GetNextDesc>
 8007184:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b05      	cmp	r3, #5
 800718c:	d108      	bne.n	80071a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	789b      	ldrb	r3, [r3, #2]
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	429a      	cmp	r2, r3
 800719a:	d008      	beq.n	80071ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	885b      	ldrh	r3, [r3, #2]
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	897b      	ldrh	r3, [r7, #10]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d8e5      	bhi.n	8007178 <USBD_GetEpDesc+0x2e>
 80071ac:	e000      	b.n	80071b0 <USBD_GetEpDesc+0x66>
          break;
 80071ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80071b0:	693b      	ldr	r3, [r7, #16]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	4413      	add	r3, r2
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4413      	add	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80071e4:	68fb      	ldr	r3, [r7, #12]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3301      	adds	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007210:	8a3b      	ldrh	r3, [r7, #16]
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	b21a      	sxth	r2, r3
 8007216:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800721a:	4313      	orrs	r3, r2
 800721c:	b21b      	sxth	r3, r3
 800721e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007220:	89fb      	ldrh	r3, [r7, #14]
}
 8007222:	4618      	mov	r0, r3
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007246:	2b40      	cmp	r3, #64	@ 0x40
 8007248:	d005      	beq.n	8007256 <USBD_StdDevReq+0x26>
 800724a:	2b40      	cmp	r3, #64	@ 0x40
 800724c:	d857      	bhi.n	80072fe <USBD_StdDevReq+0xce>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00f      	beq.n	8007272 <USBD_StdDevReq+0x42>
 8007252:	2b20      	cmp	r3, #32
 8007254:	d153      	bne.n	80072fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	32ae      	adds	r2, #174	@ 0xae
 8007260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]
      break;
 8007270:	e04a      	b.n	8007308 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b09      	cmp	r3, #9
 8007278:	d83b      	bhi.n	80072f2 <USBD_StdDevReq+0xc2>
 800727a:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <USBD_StdDevReq+0x50>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072d5 	.word	0x080072d5
 8007284:	080072e9 	.word	0x080072e9
 8007288:	080072f3 	.word	0x080072f3
 800728c:	080072df 	.word	0x080072df
 8007290:	080072f3 	.word	0x080072f3
 8007294:	080072b3 	.word	0x080072b3
 8007298:	080072a9 	.word	0x080072a9
 800729c:	080072f3 	.word	0x080072f3
 80072a0:	080072cb 	.word	0x080072cb
 80072a4:	080072bd 	.word	0x080072bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa3c 	bl	8007728 <USBD_GetDescriptor>
          break;
 80072b0:	e024      	b.n	80072fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fba1 	bl	80079fc <USBD_SetAddress>
          break;
 80072ba:	e01f      	b.n	80072fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fbe0 	bl	8007a84 <USBD_SetConfig>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]
          break;
 80072c8:	e018      	b.n	80072fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc83 	bl	8007bd8 <USBD_GetConfig>
          break;
 80072d2:	e013      	b.n	80072fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fcb4 	bl	8007c44 <USBD_GetStatus>
          break;
 80072dc:	e00e      	b.n	80072fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fce3 	bl	8007cac <USBD_SetFeature>
          break;
 80072e6:	e009      	b.n	80072fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fd07 	bl	8007cfe <USBD_ClrFeature>
          break;
 80072f0:	e004      	b.n	80072fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fd5e 	bl	8007db6 <USBD_CtlError>
          break;
 80072fa:	bf00      	nop
      }
      break;
 80072fc:	e004      	b.n	8007308 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fd58 	bl	8007db6 <USBD_CtlError>
      break;
 8007306:	bf00      	nop
  }

  return ret;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop

08007314 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800732a:	2b40      	cmp	r3, #64	@ 0x40
 800732c:	d005      	beq.n	800733a <USBD_StdItfReq+0x26>
 800732e:	2b40      	cmp	r3, #64	@ 0x40
 8007330:	d852      	bhi.n	80073d8 <USBD_StdItfReq+0xc4>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <USBD_StdItfReq+0x26>
 8007336:	2b20      	cmp	r3, #32
 8007338:	d14e      	bne.n	80073d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007340:	b2db      	uxtb	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	2b02      	cmp	r3, #2
 8007346:	d840      	bhi.n	80073ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	889b      	ldrh	r3, [r3, #4]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b01      	cmp	r3, #1
 8007350:	d836      	bhi.n	80073c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	889b      	ldrh	r3, [r3, #4]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fedb 	bl	8007116 <USBD_CoreFindIF>
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2bff      	cmp	r3, #255	@ 0xff
 8007368:	d01d      	beq.n	80073a6 <USBD_StdItfReq+0x92>
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11a      	bne.n	80073a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007370:	7bba      	ldrb	r2, [r7, #14]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	32ae      	adds	r2, #174	@ 0xae
 8007376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00f      	beq.n	80073a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007380:	7bba      	ldrb	r2, [r7, #14]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007388:	7bba      	ldrb	r2, [r7, #14]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32ae      	adds	r2, #174	@ 0xae
 800738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800739e:	e004      	b.n	80073aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80073a0:	2303      	movs	r3, #3
 80073a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073a4:	e001      	b.n	80073aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073a6:	2303      	movs	r3, #3
 80073a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	88db      	ldrh	r3, [r3, #6]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d110      	bne.n	80073d4 <USBD_StdItfReq+0xc0>
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10d      	bne.n	80073d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fdc7 	bl	8007f4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073be:	e009      	b.n	80073d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fcf7 	bl	8007db6 <USBD_CtlError>
          break;
 80073c8:	e004      	b.n	80073d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fcf2 	bl	8007db6 <USBD_CtlError>
          break;
 80073d2:	e000      	b.n	80073d6 <USBD_StdItfReq+0xc2>
          break;
 80073d4:	bf00      	nop
      }
      break;
 80073d6:	e004      	b.n	80073e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fceb 	bl	8007db6 <USBD_CtlError>
      break;
 80073e0:	bf00      	nop
  }

  return ret;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	889b      	ldrh	r3, [r3, #4]
 80073fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007408:	2b40      	cmp	r3, #64	@ 0x40
 800740a:	d007      	beq.n	800741c <USBD_StdEPReq+0x30>
 800740c:	2b40      	cmp	r3, #64	@ 0x40
 800740e:	f200 817f 	bhi.w	8007710 <USBD_StdEPReq+0x324>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02a      	beq.n	800746c <USBD_StdEPReq+0x80>
 8007416:	2b20      	cmp	r3, #32
 8007418:	f040 817a 	bne.w	8007710 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fe85 	bl	8007130 <USBD_CoreFindEP>
 8007426:	4603      	mov	r3, r0
 8007428:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800742a:	7b7b      	ldrb	r3, [r7, #13]
 800742c:	2bff      	cmp	r3, #255	@ 0xff
 800742e:	f000 8174 	beq.w	800771a <USBD_StdEPReq+0x32e>
 8007432:	7b7b      	ldrb	r3, [r7, #13]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 8170 	bne.w	800771a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800743a:	7b7a      	ldrb	r2, [r7, #13]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007442:	7b7a      	ldrb	r2, [r7, #13]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	32ae      	adds	r2, #174	@ 0xae
 8007448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 8163 	beq.w	800771a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007454:	7b7a      	ldrb	r2, [r7, #13]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	32ae      	adds	r2, #174	@ 0xae
 800745a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800746a:	e156      	b.n	800771a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	785b      	ldrb	r3, [r3, #1]
 8007470:	2b03      	cmp	r3, #3
 8007472:	d008      	beq.n	8007486 <USBD_StdEPReq+0x9a>
 8007474:	2b03      	cmp	r3, #3
 8007476:	f300 8145 	bgt.w	8007704 <USBD_StdEPReq+0x318>
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 809b 	beq.w	80075b6 <USBD_StdEPReq+0x1ca>
 8007480:	2b01      	cmp	r3, #1
 8007482:	d03c      	beq.n	80074fe <USBD_StdEPReq+0x112>
 8007484:	e13e      	b.n	8007704 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d002      	beq.n	8007498 <USBD_StdEPReq+0xac>
 8007492:	2b03      	cmp	r3, #3
 8007494:	d016      	beq.n	80074c4 <USBD_StdEPReq+0xd8>
 8007496:	e02c      	b.n	80074f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00d      	beq.n	80074ba <USBD_StdEPReq+0xce>
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	2b80      	cmp	r3, #128	@ 0x80
 80074a2:	d00a      	beq.n	80074ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 f963 	bl	8008774 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ae:	2180      	movs	r1, #128	@ 0x80
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f95f 	bl	8008774 <USBD_LL_StallEP>
 80074b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074b8:	e020      	b.n	80074fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc7a 	bl	8007db6 <USBD_CtlError>
              break;
 80074c2:	e01b      	b.n	80074fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	885b      	ldrh	r3, [r3, #2]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10e      	bne.n	80074ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <USBD_StdEPReq+0xfe>
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b80      	cmp	r3, #128	@ 0x80
 80074d6:	d008      	beq.n	80074ea <USBD_StdEPReq+0xfe>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	88db      	ldrh	r3, [r3, #6]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 f945 	bl	8008774 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fd2e 	bl	8007f4c <USBD_CtlSendStatus>

              break;
 80074f0:	e004      	b.n	80074fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fc5e 	bl	8007db6 <USBD_CtlError>
              break;
 80074fa:	bf00      	nop
          }
          break;
 80074fc:	e107      	b.n	800770e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d002      	beq.n	8007510 <USBD_StdEPReq+0x124>
 800750a:	2b03      	cmp	r3, #3
 800750c:	d016      	beq.n	800753c <USBD_StdEPReq+0x150>
 800750e:	e04b      	b.n	80075a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00d      	beq.n	8007532 <USBD_StdEPReq+0x146>
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b80      	cmp	r3, #128	@ 0x80
 800751a:	d00a      	beq.n	8007532 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f927 	bl	8008774 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007526:	2180      	movs	r1, #128	@ 0x80
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 f923 	bl	8008774 <USBD_LL_StallEP>
 800752e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007530:	e040      	b.n	80075b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc3e 	bl	8007db6 <USBD_CtlError>
              break;
 800753a:	e03b      	b.n	80075b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	885b      	ldrh	r3, [r3, #2]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d136      	bne.n	80075b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754a:	2b00      	cmp	r3, #0
 800754c:	d004      	beq.n	8007558 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 f92d 	bl	80087b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fcf7 	bl	8007f4c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fde4 	bl	8007130 <USBD_CoreFindEP>
 8007568:	4603      	mov	r3, r0
 800756a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800756c:	7b7b      	ldrb	r3, [r7, #13]
 800756e:	2bff      	cmp	r3, #255	@ 0xff
 8007570:	d01f      	beq.n	80075b2 <USBD_StdEPReq+0x1c6>
 8007572:	7b7b      	ldrb	r3, [r7, #13]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d11c      	bne.n	80075b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007578:	7b7a      	ldrb	r2, [r7, #13]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007580:	7b7a      	ldrb	r2, [r7, #13]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	32ae      	adds	r2, #174	@ 0xae
 8007586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d010      	beq.n	80075b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007590:	7b7a      	ldrb	r2, [r7, #13]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	32ae      	adds	r2, #174	@ 0xae
 8007596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	4798      	blx	r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075a6:	e004      	b.n	80075b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fc03 	bl	8007db6 <USBD_CtlError>
              break;
 80075b0:	e000      	b.n	80075b4 <USBD_StdEPReq+0x1c8>
              break;
 80075b2:	bf00      	nop
          }
          break;
 80075b4:	e0ab      	b.n	800770e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d002      	beq.n	80075c8 <USBD_StdEPReq+0x1dc>
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d032      	beq.n	800762c <USBD_StdEPReq+0x240>
 80075c6:	e097      	b.n	80076f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <USBD_StdEPReq+0x1f2>
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
 80075d0:	2b80      	cmp	r3, #128	@ 0x80
 80075d2:	d004      	beq.n	80075de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fbed 	bl	8007db6 <USBD_CtlError>
                break;
 80075dc:	e091      	b.n	8007702 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da0b      	bge.n	80075fe <USBD_StdEPReq+0x212>
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	3310      	adds	r3, #16
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	3304      	adds	r3, #4
 80075fc:	e00b      	b.n	8007616 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	3304      	adds	r3, #4
 8007616:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2202      	movs	r2, #2
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fc37 	bl	8007e98 <USBD_CtlSendData>
              break;
 800762a:	e06a      	b.n	8007702 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800762c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007630:	2b00      	cmp	r3, #0
 8007632:	da11      	bge.n	8007658 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f003 020f 	and.w	r2, r3, #15
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	3324      	adds	r3, #36	@ 0x24
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d117      	bne.n	800767e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fbb0 	bl	8007db6 <USBD_CtlError>
                  break;
 8007656:	e054      	b.n	8007702 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	f003 020f 	and.w	r2, r3, #15
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d104      	bne.n	800767e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fb9d 	bl	8007db6 <USBD_CtlError>
                  break;
 800767c:	e041      	b.n	8007702 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800767e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007682:	2b00      	cmp	r3, #0
 8007684:	da0b      	bge.n	800769e <USBD_StdEPReq+0x2b2>
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	3310      	adds	r3, #16
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	4413      	add	r3, r2
 800769a:	3304      	adds	r3, #4
 800769c:	e00b      	b.n	80076b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	4413      	add	r3, r2
 80076b4:	3304      	adds	r3, #4
 80076b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <USBD_StdEPReq+0x2d8>
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b80      	cmp	r3, #128	@ 0x80
 80076c2:	d103      	bne.n	80076cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	e00e      	b.n	80076ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f88d 	bl	80087f0 <USBD_LL_IsStallEP>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	e002      	b.n	80076ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2202      	movs	r2, #2
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fbd1 	bl	8007e98 <USBD_CtlSendData>
              break;
 80076f6:	e004      	b.n	8007702 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fb5b 	bl	8007db6 <USBD_CtlError>
              break;
 8007700:	bf00      	nop
          }
          break;
 8007702:	e004      	b.n	800770e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fb55 	bl	8007db6 <USBD_CtlError>
          break;
 800770c:	bf00      	nop
      }
      break;
 800770e:	e005      	b.n	800771c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fb4f 	bl	8007db6 <USBD_CtlError>
      break;
 8007718:	e000      	b.n	800771c <USBD_StdEPReq+0x330>
      break;
 800771a:	bf00      	nop
  }

  return ret;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	2b06      	cmp	r3, #6
 800774a:	f200 8128 	bhi.w	800799e <USBD_GetDescriptor+0x276>
 800774e:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <USBD_GetDescriptor+0x2c>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007771 	.word	0x08007771
 8007758:	08007789 	.word	0x08007789
 800775c:	080077c9 	.word	0x080077c9
 8007760:	0800799f 	.word	0x0800799f
 8007764:	0800799f 	.word	0x0800799f
 8007768:	0800793f 	.word	0x0800793f
 800776c:	0800796b 	.word	0x0800796b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
      break;
 8007786:	e112      	b.n	80079ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7c1b      	ldrb	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10d      	bne.n	80077ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	f107 0208 	add.w	r2, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077aa:	e100      	b.n	80079ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	f107 0208 	add.w	r2, r7, #8
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	2202      	movs	r2, #2
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e0f2      	b.n	80079ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	885b      	ldrh	r3, [r3, #2]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	f200 80ac 	bhi.w	800792c <USBD_GetDescriptor+0x204>
 80077d4:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <USBD_GetDescriptor+0xb4>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077f5 	.word	0x080077f5
 80077e0:	08007829 	.word	0x08007829
 80077e4:	0800785d 	.word	0x0800785d
 80077e8:	08007891 	.word	0x08007891
 80077ec:	080078c5 	.word	0x080078c5
 80077f0:	080078f9 	.word	0x080078f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007816:	e091      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 facb 	bl	8007db6 <USBD_CtlError>
            err++;
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	3301      	adds	r3, #1
 8007824:	72fb      	strb	r3, [r7, #11]
          break;
 8007826:	e089      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7c12      	ldrb	r2, [r2, #16]
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784a:	e077      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fab1 	bl	8007db6 <USBD_CtlError>
            err++;
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	3301      	adds	r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
          break;
 800785a:	e06f      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787e:	e05d      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa97 	bl	8007db6 <USBD_CtlError>
            err++;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	3301      	adds	r3, #1
 800788c:	72fb      	strb	r3, [r7, #11]
          break;
 800788e:	e055      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	7c12      	ldrb	r2, [r2, #16]
 80078a8:	f107 0108 	add.w	r1, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b2:	e043      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa7d 	bl	8007db6 <USBD_CtlError>
            err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
          break;
 80078c2:	e03b      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7c12      	ldrb	r2, [r2, #16]
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e6:	e029      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa63 	bl	8007db6 <USBD_CtlError>
            err++;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	3301      	adds	r3, #1
 80078f4:	72fb      	strb	r3, [r7, #11]
          break;
 80078f6:	e021      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	7c12      	ldrb	r2, [r2, #16]
 8007910:	f107 0108 	add.w	r1, r7, #8
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800791a:	e00f      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa49 	bl	8007db6 <USBD_CtlError>
            err++;
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	3301      	adds	r3, #1
 8007928:	72fb      	strb	r3, [r7, #11]
          break;
 800792a:	e007      	b.n	800793c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa41 	bl	8007db6 <USBD_CtlError>
          err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800793a:	bf00      	nop
      }
      break;
 800793c:	e037      	b.n	80079ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7c1b      	ldrb	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800794c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794e:	f107 0208 	add.w	r2, r7, #8
 8007952:	4610      	mov	r0, r2
 8007954:	4798      	blx	r3
 8007956:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007958:	e029      	b.n	80079ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa2a 	bl	8007db6 <USBD_CtlError>
        err++;
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	3301      	adds	r3, #1
 8007966:	72fb      	strb	r3, [r7, #11]
      break;
 8007968:	e021      	b.n	80079ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7c1b      	ldrb	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10d      	bne.n	800798e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	f107 0208 	add.w	r2, r7, #8
 800797e:	4610      	mov	r0, r2
 8007980:	4798      	blx	r3
 8007982:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3301      	adds	r3, #1
 8007988:	2207      	movs	r2, #7
 800798a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800798c:	e00f      	b.n	80079ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fa10 	bl	8007db6 <USBD_CtlError>
        err++;
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	3301      	adds	r3, #1
 800799a:	72fb      	strb	r3, [r7, #11]
      break;
 800799c:	e007      	b.n	80079ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa08 	bl	8007db6 <USBD_CtlError>
      err++;
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	3301      	adds	r3, #1
 80079aa:	72fb      	strb	r3, [r7, #11]
      break;
 80079ac:	bf00      	nop
  }

  if (err != 0U)
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11e      	bne.n	80079f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	88db      	ldrh	r3, [r3, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d016      	beq.n	80079ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079bc:	893b      	ldrh	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88da      	ldrh	r2, [r3, #6]
 80079c6:	893b      	ldrh	r3, [r7, #8]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bf28      	it	cs
 80079cc:	4613      	movcs	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	461a      	mov	r2, r3
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa5d 	bl	8007e98 <USBD_CtlSendData>
 80079de:	e009      	b.n	80079f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f9e7 	bl	8007db6 <USBD_CtlError>
 80079e8:	e004      	b.n	80079f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 faae 	bl	8007f4c <USBD_CtlSendStatus>
 80079f0:	e000      	b.n	80079f4 <USBD_GetDescriptor+0x2cc>
    return;
 80079f2:	bf00      	nop
  }
}
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	889b      	ldrh	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d131      	bne.n	8007a72 <USBD_SetAddress+0x76>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	88db      	ldrh	r3, [r3, #6]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d12d      	bne.n	8007a72 <USBD_SetAddress+0x76>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a1c:	d829      	bhi.n	8007a72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d104      	bne.n	8007a40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f9bc 	bl	8007db6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	e01d      	b.n	8007a7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	7bfa      	ldrb	r2, [r7, #15]
 8007a44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fefb 	bl	8008848 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa7a 	bl	8007f4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a66:	e009      	b.n	8007a7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a70:	e004      	b.n	8007a7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f99e 	bl	8007db6 <USBD_CtlError>
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	885b      	ldrh	r3, [r3, #2]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	4b4e      	ldr	r3, [pc, #312]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007a9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d905      	bls.n	8007ab0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f985 	bl	8007db6 <USBD_CtlError>
    return USBD_FAIL;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e08c      	b.n	8007bca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d002      	beq.n	8007ac2 <USBD_SetConfig+0x3e>
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d029      	beq.n	8007b14 <USBD_SetConfig+0x90>
 8007ac0:	e075      	b.n	8007bae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ac2:	4b44      	ldr	r3, [pc, #272]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d020      	beq.n	8007b0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007aca:	4b42      	ldr	r3, [pc, #264]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7fe ffe3 	bl	8006aa6 <USBD_SetClassConfig>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d008      	beq.n	8007afc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f962 	bl	8007db6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2202      	movs	r2, #2
 8007af6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007afa:	e065      	b.n	8007bc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fa25 	bl	8007f4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2203      	movs	r2, #3
 8007b06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b0a:	e05d      	b.n	8007bc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa1d 	bl	8007f4c <USBD_CtlSendStatus>
      break;
 8007b12:	e059      	b.n	8007bc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b14:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d112      	bne.n	8007b42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007b24:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b2e:	4b29      	ldr	r3, [pc, #164]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7fe ffd2 	bl	8006ade <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa06 	bl	8007f4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b40:	e042      	b.n	8007bc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b42:	4b24      	ldr	r3, [pc, #144]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d02a      	beq.n	8007ba6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7fe ffc0 	bl	8006ade <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b68:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fe ff99 	bl	8006aa6 <USBD_SetClassConfig>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00f      	beq.n	8007b9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f918 	bl	8007db6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fe ffa5 	bl	8006ade <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b9c:	e014      	b.n	8007bc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9d4 	bl	8007f4c <USBD_CtlSendStatus>
      break;
 8007ba4:	e010      	b.n	8007bc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f9d0 	bl	8007f4c <USBD_CtlSendStatus>
      break;
 8007bac:	e00c      	b.n	8007bc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f900 	bl	8007db6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bb6:	4b07      	ldr	r3, [pc, #28]	@ (8007bd4 <USBD_SetConfig+0x150>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7fe ff8e 	bl	8006ade <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc6:	bf00      	nop
  }

  return ret;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000278 	.word	0x20000278

08007bd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	88db      	ldrh	r3, [r3, #6]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d004      	beq.n	8007bf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f8e2 	bl	8007db6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bf2:	e023      	b.n	8007c3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	dc02      	bgt.n	8007c06 <USBD_GetConfig+0x2e>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	dc03      	bgt.n	8007c0c <USBD_GetConfig+0x34>
 8007c04:	e015      	b.n	8007c32 <USBD_GetConfig+0x5a>
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d00b      	beq.n	8007c22 <USBD_GetConfig+0x4a>
 8007c0a:	e012      	b.n	8007c32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3308      	adds	r3, #8
 8007c16:	2201      	movs	r2, #1
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f93c 	bl	8007e98 <USBD_CtlSendData>
        break;
 8007c20:	e00c      	b.n	8007c3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3304      	adds	r3, #4
 8007c26:	2201      	movs	r2, #1
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f934 	bl	8007e98 <USBD_CtlSendData>
        break;
 8007c30:	e004      	b.n	8007c3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f8be 	bl	8007db6 <USBD_CtlError>
        break;
 8007c3a:	bf00      	nop
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d81e      	bhi.n	8007c9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	88db      	ldrh	r3, [r3, #6]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d004      	beq.n	8007c6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f8a5 	bl	8007db6 <USBD_CtlError>
        break;
 8007c6c:	e01a      	b.n	8007ca4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f043 0202 	orr.w	r2, r3, #2
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	2202      	movs	r2, #2
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f900 	bl	8007e98 <USBD_CtlSendData>
      break;
 8007c98:	e004      	b.n	8007ca4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f88a 	bl	8007db6 <USBD_CtlError>
      break;
 8007ca2:	bf00      	nop
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d107      	bne.n	8007cce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f940 	bl	8007f4c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ccc:	e013      	b.n	8007cf6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d10b      	bne.n	8007cee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	889b      	ldrh	r3, [r3, #4]
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f930 	bl	8007f4c <USBD_CtlSendStatus>
}
 8007cec:	e003      	b.n	8007cf6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f860 	bl	8007db6 <USBD_CtlError>
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d80b      	bhi.n	8007d2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d10c      	bne.n	8007d38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f910 	bl	8007f4c <USBD_CtlSendStatus>
      }
      break;
 8007d2c:	e004      	b.n	8007d38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f840 	bl	8007db6 <USBD_CtlError>
      break;
 8007d36:	e000      	b.n	8007d3a <USBD_ClrFeature+0x3c>
      break;
 8007d38:	bf00      	nop
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	781a      	ldrb	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff fa40 	bl	80071f2 <SWAPBYTE>
 8007d72:	4603      	mov	r3, r0
 8007d74:	461a      	mov	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3301      	adds	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fa33 	bl	80071f2 <SWAPBYTE>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3301      	adds	r3, #1
 8007d98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff fa26 	bl	80071f2 <SWAPBYTE>
 8007da6:	4603      	mov	r3, r0
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	80da      	strh	r2, [r3, #6]
}
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dc0:	2180      	movs	r1, #128	@ 0x80
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fcd6 	bl	8008774 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007dc8:	2100      	movs	r1, #0
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fcd2 	bl	8008774 <USBD_LL_StallEP>
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d036      	beq.n	8007e5c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007df2:	6938      	ldr	r0, [r7, #16]
 8007df4:	f000 f836 	bl	8007e64 <USBD_GetLen>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7812      	ldrb	r2, [r2, #0]
 8007e10:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	3301      	adds	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	2203      	movs	r2, #3
 8007e20:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	3301      	adds	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e28:	e013      	b.n	8007e52 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	7812      	ldrb	r2, [r2, #0]
 8007e34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	613b      	str	r3, [r7, #16]
    idx++;
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	4413      	add	r3, r2
 8007e48:	2200      	movs	r2, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e7      	bne.n	8007e2a <USBD_GetString+0x52>
 8007e5a:	e000      	b.n	8007e5e <USBD_GetString+0x86>
    return;
 8007e5c:	bf00      	nop
  }
}
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e74:	e005      	b.n	8007e82 <USBD_GetLen+0x1e>
  {
    len++;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f5      	bne.n	8007e76 <USBD_GetLen+0x12>
  }

  return len;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 fce1 	bl	8008886 <USBD_LL_Transmit>

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	2100      	movs	r1, #0
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 fcd0 	bl	8008886 <USBD_LL_Transmit>

  return USBD_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2203      	movs	r2, #3
 8007f00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	2100      	movs	r1, #0
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 fcd4 	bl	80088c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 fcc3 	bl	80088c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2204      	movs	r2, #4
 8007f58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2100      	movs	r1, #0
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fc8f 	bl	8008886 <USBD_LL_Transmit>

  return USBD_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2205      	movs	r2, #5
 8007f7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f82:	2300      	movs	r3, #0
 8007f84:	2200      	movs	r2, #0
 8007f86:	2100      	movs	r1, #0
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fc9d 	bl	80088c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4912      	ldr	r1, [pc, #72]	@ (8007fe8 <MX_USB_DEVICE_Init+0x50>)
 8007fa0:	4812      	ldr	r0, [pc, #72]	@ (8007fec <MX_USB_DEVICE_Init+0x54>)
 8007fa2:	f7fe fd03 	bl	80069ac <USBD_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fac:	f7f8 fd26 	bl	80009fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fb0:	490f      	ldr	r1, [pc, #60]	@ (8007ff0 <MX_USB_DEVICE_Init+0x58>)
 8007fb2:	480e      	ldr	r0, [pc, #56]	@ (8007fec <MX_USB_DEVICE_Init+0x54>)
 8007fb4:	f7fe fd2a 	bl	8006a0c <USBD_RegisterClass>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fbe:	f7f8 fd1d 	bl	80009fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fc2:	490c      	ldr	r1, [pc, #48]	@ (8007ff4 <MX_USB_DEVICE_Init+0x5c>)
 8007fc4:	4809      	ldr	r0, [pc, #36]	@ (8007fec <MX_USB_DEVICE_Init+0x54>)
 8007fc6:	f7fe fc21 	bl	800680c <USBD_CDC_RegisterInterface>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fd0:	f7f8 fd14 	bl	80009fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fd4:	4805      	ldr	r0, [pc, #20]	@ (8007fec <MX_USB_DEVICE_Init+0x54>)
 8007fd6:	f7fe fd4f 	bl	8006a78 <USBD_Start>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fe0:	f7f8 fd0c 	bl	80009fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fe4:	bf00      	nop
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	200000bc 	.word	0x200000bc
 8007fec:	2000027c 	.word	0x2000027c
 8007ff0:	20000028 	.word	0x20000028
 8007ff4:	200000a8 	.word	0x200000a8

08007ff8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4905      	ldr	r1, [pc, #20]	@ (8008014 <CDC_Init_FS+0x1c>)
 8008000:	4805      	ldr	r0, [pc, #20]	@ (8008018 <CDC_Init_FS+0x20>)
 8008002:	f7fe fc1d 	bl	8006840 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008006:	4905      	ldr	r1, [pc, #20]	@ (800801c <CDC_Init_FS+0x24>)
 8008008:	4803      	ldr	r0, [pc, #12]	@ (8008018 <CDC_Init_FS+0x20>)
 800800a:	f7fe fc3b 	bl	8006884 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800800e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008010:	4618      	mov	r0, r3
 8008012:	bd80      	pop	{r7, pc}
 8008014:	20000d58 	.word	0x20000d58
 8008018:	2000027c 	.word	0x2000027c
 800801c:	20000558 	.word	0x20000558

08008020 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008024:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008026:	4618      	mov	r0, r3
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	71fb      	strb	r3, [r7, #7]
 800803c:	4613      	mov	r3, r2
 800803e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2b23      	cmp	r3, #35	@ 0x23
 8008044:	d84a      	bhi.n	80080dc <CDC_Control_FS+0xac>
 8008046:	a201      	add	r2, pc, #4	@ (adr r2, 800804c <CDC_Control_FS+0x1c>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	080080dd 	.word	0x080080dd
 8008050:	080080dd 	.word	0x080080dd
 8008054:	080080dd 	.word	0x080080dd
 8008058:	080080dd 	.word	0x080080dd
 800805c:	080080dd 	.word	0x080080dd
 8008060:	080080dd 	.word	0x080080dd
 8008064:	080080dd 	.word	0x080080dd
 8008068:	080080dd 	.word	0x080080dd
 800806c:	080080dd 	.word	0x080080dd
 8008070:	080080dd 	.word	0x080080dd
 8008074:	080080dd 	.word	0x080080dd
 8008078:	080080dd 	.word	0x080080dd
 800807c:	080080dd 	.word	0x080080dd
 8008080:	080080dd 	.word	0x080080dd
 8008084:	080080dd 	.word	0x080080dd
 8008088:	080080dd 	.word	0x080080dd
 800808c:	080080dd 	.word	0x080080dd
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080dd 	.word	0x080080dd
 8008098:	080080dd 	.word	0x080080dd
 800809c:	080080dd 	.word	0x080080dd
 80080a0:	080080dd 	.word	0x080080dd
 80080a4:	080080dd 	.word	0x080080dd
 80080a8:	080080dd 	.word	0x080080dd
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080dd 	.word	0x080080dd
 80080bc:	080080dd 	.word	0x080080dd
 80080c0:	080080dd 	.word	0x080080dd
 80080c4:	080080dd 	.word	0x080080dd
 80080c8:	080080dd 	.word	0x080080dd
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080dd 	.word	0x080080dd
 80080d4:	080080dd 	.word	0x080080dd
 80080d8:	080080dd 	.word	0x080080dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080dc:	bf00      	nop
  }

  return (USBD_OK);
 80080de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	4805      	ldr	r0, [pc, #20]	@ (8008110 <CDC_Receive_FS+0x24>)
 80080fa:	f7fe fbc3 	bl	8006884 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080fe:	4804      	ldr	r0, [pc, #16]	@ (8008110 <CDC_Receive_FS+0x24>)
 8008100:	f7fe fc1e 	bl	8006940 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008104:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	2000027c 	.word	0x2000027c

08008114 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008124:	4b0d      	ldr	r3, [pc, #52]	@ (800815c <CDC_Transmit_FS+0x48>)
 8008126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800812a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008136:	2301      	movs	r3, #1
 8008138:	e00b      	b.n	8008152 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800813a:	887b      	ldrh	r3, [r7, #2]
 800813c:	461a      	mov	r2, r3
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4806      	ldr	r0, [pc, #24]	@ (800815c <CDC_Transmit_FS+0x48>)
 8008142:	f7fe fb7d 	bl	8006840 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008146:	4805      	ldr	r0, [pc, #20]	@ (800815c <CDC_Transmit_FS+0x48>)
 8008148:	f7fe fbba 	bl	80068c0 <USBD_CDC_TransmitPacket>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	2000027c 	.word	0x2000027c

08008160 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	4613      	mov	r3, r2
 800816c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008172:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008176:	4618      	mov	r0, r3
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
	...

08008184 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2212      	movs	r2, #18
 8008194:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008196:	4b03      	ldr	r3, [pc, #12]	@ (80081a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	200000d8 	.word	0x200000d8

080081a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2204      	movs	r2, #4
 80081b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081ba:	4b03      	ldr	r3, [pc, #12]	@ (80081c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	200000ec 	.word	0x200000ec

080081cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	4907      	ldr	r1, [pc, #28]	@ (8008200 <USBD_FS_ProductStrDescriptor+0x34>)
 80081e2:	4808      	ldr	r0, [pc, #32]	@ (8008204 <USBD_FS_ProductStrDescriptor+0x38>)
 80081e4:	f7ff fdf8 	bl	8007dd8 <USBD_GetString>
 80081e8:	e004      	b.n	80081f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4904      	ldr	r1, [pc, #16]	@ (8008200 <USBD_FS_ProductStrDescriptor+0x34>)
 80081ee:	4805      	ldr	r0, [pc, #20]	@ (8008204 <USBD_FS_ProductStrDescriptor+0x38>)
 80081f0:	f7ff fdf2 	bl	8007dd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f4:	4b02      	ldr	r3, [pc, #8]	@ (8008200 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20001558 	.word	0x20001558
 8008204:	08008d3c 	.word	0x08008d3c

08008208 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	4904      	ldr	r1, [pc, #16]	@ (8008228 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008218:	4804      	ldr	r0, [pc, #16]	@ (800822c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800821a:	f7ff fddd 	bl	8007dd8 <USBD_GetString>
  return USBD_StrDesc;
 800821e:	4b02      	ldr	r3, [pc, #8]	@ (8008228 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20001558 	.word	0x20001558
 800822c:	08008d54 	.word	0x08008d54

08008230 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	221a      	movs	r2, #26
 8008240:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008242:	f000 f843 	bl	80082cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008246:	4b02      	ldr	r3, [pc, #8]	@ (8008250 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	200000f0 	.word	0x200000f0

08008254 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d105      	bne.n	8008272 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	4907      	ldr	r1, [pc, #28]	@ (8008288 <USBD_FS_ConfigStrDescriptor+0x34>)
 800826a:	4808      	ldr	r0, [pc, #32]	@ (800828c <USBD_FS_ConfigStrDescriptor+0x38>)
 800826c:	f7ff fdb4 	bl	8007dd8 <USBD_GetString>
 8008270:	e004      	b.n	800827c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	4904      	ldr	r1, [pc, #16]	@ (8008288 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008276:	4805      	ldr	r0, [pc, #20]	@ (800828c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008278:	f7ff fdae 	bl	8007dd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800827c:	4b02      	ldr	r3, [pc, #8]	@ (8008288 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20001558 	.word	0x20001558
 800828c:	08008d68 	.word	0x08008d68

08008290 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	6039      	str	r1, [r7, #0]
 800829a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800829c:	79fb      	ldrb	r3, [r7, #7]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d105      	bne.n	80082ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	4907      	ldr	r1, [pc, #28]	@ (80082c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082a6:	4808      	ldr	r0, [pc, #32]	@ (80082c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082a8:	f7ff fd96 	bl	8007dd8 <USBD_GetString>
 80082ac:	e004      	b.n	80082b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	4904      	ldr	r1, [pc, #16]	@ (80082c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082b2:	4805      	ldr	r0, [pc, #20]	@ (80082c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082b4:	f7ff fd90 	bl	8007dd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082b8:	4b02      	ldr	r3, [pc, #8]	@ (80082c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20001558 	.word	0x20001558
 80082c8:	08008d74 	.word	0x08008d74

080082cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008310 <Get_SerialNum+0x44>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008314 <Get_SerialNum+0x48>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082de:	4b0e      	ldr	r3, [pc, #56]	@ (8008318 <Get_SerialNum+0x4c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4413      	add	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d009      	beq.n	8008306 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082f2:	2208      	movs	r2, #8
 80082f4:	4909      	ldr	r1, [pc, #36]	@ (800831c <Get_SerialNum+0x50>)
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 f814 	bl	8008324 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082fc:	2204      	movs	r2, #4
 80082fe:	4908      	ldr	r1, [pc, #32]	@ (8008320 <Get_SerialNum+0x54>)
 8008300:	68b8      	ldr	r0, [r7, #8]
 8008302:	f000 f80f 	bl	8008324 <IntToUnicode>
  }
}
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	1fff7a10 	.word	0x1fff7a10
 8008314:	1fff7a14 	.word	0x1fff7a14
 8008318:	1fff7a18 	.word	0x1fff7a18
 800831c:	200000f2 	.word	0x200000f2
 8008320:	20000102 	.word	0x20000102

08008324 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
 800833a:	e027      	b.n	800838c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	0f1b      	lsrs	r3, r3, #28
 8008340:	2b09      	cmp	r3, #9
 8008342:	d80b      	bhi.n	800835c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	0f1b      	lsrs	r3, r3, #28
 8008348:	b2da      	uxtb	r2, r3
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	4619      	mov	r1, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	440b      	add	r3, r1
 8008354:	3230      	adds	r2, #48	@ 0x30
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	e00a      	b.n	8008372 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	0f1b      	lsrs	r3, r3, #28
 8008360:	b2da      	uxtb	r2, r3
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4619      	mov	r1, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	440b      	add	r3, r1
 800836c:	3237      	adds	r2, #55	@ 0x37
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	3301      	adds	r3, #1
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	4413      	add	r3, r2
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	3301      	adds	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
 800838c:	7dfa      	ldrb	r2, [r7, #23]
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	429a      	cmp	r2, r3
 8008392:	d3d3      	bcc.n	800833c <IntToUnicode+0x18>
  }
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
	...

080083a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08a      	sub	sp, #40	@ 0x28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083ac:	f107 0314 	add.w	r3, r7, #20
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	605a      	str	r2, [r3, #4]
 80083b6:	609a      	str	r2, [r3, #8]
 80083b8:	60da      	str	r2, [r3, #12]
 80083ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083c4:	d13a      	bne.n	800843c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083c6:	2300      	movs	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008444 <HAL_PCD_MspInit+0xa0>)
 80083cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ce:	4a1d      	ldr	r2, [pc, #116]	@ (8008444 <HAL_PCD_MspInit+0xa0>)
 80083d0:	f043 0301 	orr.w	r3, r3, #1
 80083d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80083d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008444 <HAL_PCD_MspInit+0xa0>)
 80083d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	613b      	str	r3, [r7, #16]
 80083e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80083e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80083e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e8:	2302      	movs	r3, #2
 80083ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083f0:	2303      	movs	r3, #3
 80083f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083f4:	230a      	movs	r3, #10
 80083f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	4619      	mov	r1, r3
 80083fe:	4812      	ldr	r0, [pc, #72]	@ (8008448 <HAL_PCD_MspInit+0xa4>)
 8008400:	f7f9 fecc 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008404:	4b0f      	ldr	r3, [pc, #60]	@ (8008444 <HAL_PCD_MspInit+0xa0>)
 8008406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008408:	4a0e      	ldr	r2, [pc, #56]	@ (8008444 <HAL_PCD_MspInit+0xa0>)
 800840a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800840e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	4b0b      	ldr	r3, [pc, #44]	@ (8008444 <HAL_PCD_MspInit+0xa0>)
 8008416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008418:	4a0a      	ldr	r2, [pc, #40]	@ (8008444 <HAL_PCD_MspInit+0xa0>)
 800841a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800841e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008420:	4b08      	ldr	r3, [pc, #32]	@ (8008444 <HAL_PCD_MspInit+0xa0>)
 8008422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800842c:	2200      	movs	r2, #0
 800842e:	2100      	movs	r1, #0
 8008430:	2043      	movs	r0, #67	@ 0x43
 8008432:	f7f9 fb0c 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008436:	2043      	movs	r0, #67	@ 0x43
 8008438:	f7f9 fb25 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800843c:	bf00      	nop
 800843e:	3728      	adds	r7, #40	@ 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	40023800 	.word	0x40023800
 8008448:	40020000 	.word	0x40020000

0800844c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008460:	4619      	mov	r1, r3
 8008462:	4610      	mov	r0, r2
 8008464:	f7fe fb55 	bl	8006b12 <USBD_LL_SetupStage>
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	4619      	mov	r1, r3
 800849a:	f7fe fb8f 	bl	8006bbc <USBD_LL_DataOutStage>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	4613      	mov	r3, r2
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	440b      	add	r3, r1
 80084c6:	3320      	adds	r3, #32
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	4619      	mov	r1, r3
 80084ce:	f7fe fc28 	bl	8006d22 <USBD_LL_DataInStage>
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fd62 	bl	8006fb2 <USBD_LL_SOF>
}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084fe:	2301      	movs	r3, #1
 8008500:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	79db      	ldrb	r3, [r3, #7]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d001      	beq.n	800850e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800850a:	f7f8 fa77 	bl	80009fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008514:	7bfa      	ldrb	r2, [r7, #15]
 8008516:	4611      	mov	r1, r2
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fd06 	bl	8006f2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe fcae 	bl	8006e86 <USBD_LL_Reset>
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fd01 	bl	8006f4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	6812      	ldr	r2, [r2, #0]
 8008556:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7adb      	ldrb	r3, [r3, #11]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008568:	4b04      	ldr	r3, [pc, #16]	@ (800857c <HAL_PCD_SuspendCallback+0x48>)
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	4a03      	ldr	r2, [pc, #12]	@ (800857c <HAL_PCD_SuspendCallback+0x48>)
 800856e:	f043 0306 	orr.w	r3, r3, #6
 8008572:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	e000ed00 	.word	0xe000ed00

08008580 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fcf7 	bl	8006f82 <USBD_LL_Resume>
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fd4f 	bl	8007056 <USBD_LL_IsoOUTIncomplete>
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085d2:	78fa      	ldrb	r2, [r7, #3]
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fd0b 	bl	8006ff2 <USBD_LL_IsoINIncomplete>
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fd61 	bl	80070ba <USBD_LL_DevConnected>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fd5e 	bl	80070d0 <USBD_LL_DevDisconnected>
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d13c      	bne.n	80086a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800862c:	4a20      	ldr	r2, [pc, #128]	@ (80086b0 <USBD_LL_Init+0x94>)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a1e      	ldr	r2, [pc, #120]	@ (80086b0 <USBD_LL_Init+0x94>)
 8008638:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800863c:	4b1c      	ldr	r3, [pc, #112]	@ (80086b0 <USBD_LL_Init+0x94>)
 800863e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008642:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008644:	4b1a      	ldr	r3, [pc, #104]	@ (80086b0 <USBD_LL_Init+0x94>)
 8008646:	2204      	movs	r2, #4
 8008648:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800864a:	4b19      	ldr	r3, [pc, #100]	@ (80086b0 <USBD_LL_Init+0x94>)
 800864c:	2202      	movs	r2, #2
 800864e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008650:	4b17      	ldr	r3, [pc, #92]	@ (80086b0 <USBD_LL_Init+0x94>)
 8008652:	2200      	movs	r2, #0
 8008654:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008656:	4b16      	ldr	r3, [pc, #88]	@ (80086b0 <USBD_LL_Init+0x94>)
 8008658:	2202      	movs	r2, #2
 800865a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800865c:	4b14      	ldr	r3, [pc, #80]	@ (80086b0 <USBD_LL_Init+0x94>)
 800865e:	2200      	movs	r2, #0
 8008660:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008662:	4b13      	ldr	r3, [pc, #76]	@ (80086b0 <USBD_LL_Init+0x94>)
 8008664:	2200      	movs	r2, #0
 8008666:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008668:	4b11      	ldr	r3, [pc, #68]	@ (80086b0 <USBD_LL_Init+0x94>)
 800866a:	2200      	movs	r2, #0
 800866c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800866e:	4b10      	ldr	r3, [pc, #64]	@ (80086b0 <USBD_LL_Init+0x94>)
 8008670:	2200      	movs	r2, #0
 8008672:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008674:	4b0e      	ldr	r3, [pc, #56]	@ (80086b0 <USBD_LL_Init+0x94>)
 8008676:	2200      	movs	r2, #0
 8008678:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800867a:	480d      	ldr	r0, [pc, #52]	@ (80086b0 <USBD_LL_Init+0x94>)
 800867c:	f7f9 ff2a 	bl	80024d4 <HAL_PCD_Init>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008686:	f7f8 f9b9 	bl	80009fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800868a:	2180      	movs	r1, #128	@ 0x80
 800868c:	4808      	ldr	r0, [pc, #32]	@ (80086b0 <USBD_LL_Init+0x94>)
 800868e:	f7fb f954 	bl	800393a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008692:	2240      	movs	r2, #64	@ 0x40
 8008694:	2100      	movs	r1, #0
 8008696:	4806      	ldr	r0, [pc, #24]	@ (80086b0 <USBD_LL_Init+0x94>)
 8008698:	f7fb f908 	bl	80038ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800869c:	2280      	movs	r2, #128	@ 0x80
 800869e:	2101      	movs	r1, #1
 80086a0:	4803      	ldr	r0, [pc, #12]	@ (80086b0 <USBD_LL_Init+0x94>)
 80086a2:	f7fb f903 	bl	80038ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20001758 	.word	0x20001758

080086b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fa f811 	bl	80026f2 <HAL_PCD_Start>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f942 	bl	8008960 <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	461a      	mov	r2, r3
 80086f8:	4603      	mov	r3, r0
 80086fa:	70fb      	strb	r3, [r7, #3]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70bb      	strb	r3, [r7, #2]
 8008700:	4613      	mov	r3, r2
 8008702:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008712:	78bb      	ldrb	r3, [r7, #2]
 8008714:	883a      	ldrh	r2, [r7, #0]
 8008716:	78f9      	ldrb	r1, [r7, #3]
 8008718:	f7fa fce5 	bl	80030e6 <HAL_PCD_EP_Open>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f91c 	bl	8008960 <USBD_Get_USB_Status>
 8008728:	4603      	mov	r3, r0
 800872a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872c:	7bbb      	ldrb	r3, [r7, #14]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f7fa fd2e 	bl	80031b6 <HAL_PCD_EP_Close>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f8fd 	bl	8008960 <USBD_Get_USB_Status>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876a:	7bbb      	ldrb	r3, [r7, #14]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7fa fde6 	bl	8003364 <HAL_PCD_EP_SetStall>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f8de 	bl	8008960 <USBD_Get_USB_Status>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087cc:	78fa      	ldrb	r2, [r7, #3]
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fa fe2a 	bl	800342a <HAL_PCD_EP_ClrStall>
 80087d6:	4603      	mov	r3, r0
 80087d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 f8bf 	bl	8008960 <USBD_Get_USB_Status>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008802:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008808:	2b00      	cmp	r3, #0
 800880a:	da0b      	bge.n	8008824 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008812:	68f9      	ldr	r1, [r7, #12]
 8008814:	4613      	mov	r3, r2
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	3316      	adds	r3, #22
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	e00b      	b.n	800883c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800882a:	68f9      	ldr	r1, [r7, #12]
 800882c:	4613      	mov	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800883a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008862:	78fa      	ldrb	r2, [r7, #3]
 8008864:	4611      	mov	r1, r2
 8008866:	4618      	mov	r0, r3
 8008868:	f7fa fc19 	bl	800309e <HAL_PCD_SetAddress>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f874 	bl	8008960 <USBD_Get_USB_Status>
 8008878:	4603      	mov	r3, r0
 800887a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887c:	7bbb      	ldrb	r3, [r7, #14]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b086      	sub	sp, #24
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	460b      	mov	r3, r1
 8008894:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80088a4:	7af9      	ldrb	r1, [r7, #11]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	f7fa fd21 	bl	80032f0 <HAL_PCD_EP_Transmit>
 80088ae:	4603      	mov	r3, r0
 80088b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 f853 	bl	8008960 <USBD_Get_USB_Status>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088be:	7dbb      	ldrb	r3, [r7, #22]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	460b      	mov	r3, r1
 80088d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80088e6:	7af9      	ldrb	r1, [r7, #11]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	f7fa fcad 	bl	800324a <HAL_PCD_EP_Receive>
 80088f0:	4603      	mov	r3, r0
 80088f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 f832 	bl	8008960 <USBD_Get_USB_Status>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008900:	7dbb      	ldrb	r3, [r7, #22]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f7fa fccd 	bl	80032c0 <HAL_PCD_EP_GetRxCount>
 8008926:	4603      	mov	r3, r0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008938:	4b03      	ldr	r3, [pc, #12]	@ (8008948 <USBD_static_malloc+0x18>)
}
 800893a:	4618      	mov	r0, r3
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	20001c3c 	.word	0x20001c3c

0800894c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]

}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	2b03      	cmp	r3, #3
 8008972:	d817      	bhi.n	80089a4 <USBD_Get_USB_Status+0x44>
 8008974:	a201      	add	r2, pc, #4	@ (adr r2, 800897c <USBD_Get_USB_Status+0x1c>)
 8008976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897a:	bf00      	nop
 800897c:	0800898d 	.word	0x0800898d
 8008980:	08008993 	.word	0x08008993
 8008984:	08008999 	.word	0x08008999
 8008988:	0800899f 	.word	0x0800899f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
    break;
 8008990:	e00b      	b.n	80089aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008992:	2303      	movs	r3, #3
 8008994:	73fb      	strb	r3, [r7, #15]
    break;
 8008996:	e008      	b.n	80089aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008998:	2301      	movs	r3, #1
 800899a:	73fb      	strb	r3, [r7, #15]
    break;
 800899c:	e005      	b.n	80089aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800899e:	2303      	movs	r3, #3
 80089a0:	73fb      	strb	r3, [r7, #15]
    break;
 80089a2:	e002      	b.n	80089aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089a4:	2303      	movs	r3, #3
 80089a6:	73fb      	strb	r3, [r7, #15]
    break;
 80089a8:	bf00      	nop
  }
  return usb_status;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <_ZdlPvj>:
 80089b8:	f000 b811 	b.w	80089de <_ZdlPv>

080089bc <_Znwj>:
 80089bc:	2801      	cmp	r0, #1
 80089be:	bf38      	it	cc
 80089c0:	2001      	movcc	r0, #1
 80089c2:	b510      	push	{r4, lr}
 80089c4:	4604      	mov	r4, r0
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 f81c 	bl	8008a04 <malloc>
 80089cc:	b100      	cbz	r0, 80089d0 <_Znwj+0x14>
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	f000 f808 	bl	80089e4 <_ZSt15get_new_handlerv>
 80089d4:	b908      	cbnz	r0, 80089da <_Znwj+0x1e>
 80089d6:	f000 f80d 	bl	80089f4 <abort>
 80089da:	4780      	blx	r0
 80089dc:	e7f3      	b.n	80089c6 <_Znwj+0xa>

080089de <_ZdlPv>:
 80089de:	f000 b819 	b.w	8008a14 <free>
	...

080089e4 <_ZSt15get_new_handlerv>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	@ (80089f0 <_ZSt15get_new_handlerv+0xc>)
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	f3bf 8f5b 	dmb	ish
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20001e5c 	.word	0x20001e5c

080089f4 <abort>:
 80089f4:	b508      	push	{r3, lr}
 80089f6:	2006      	movs	r0, #6
 80089f8:	f000 f8f2 	bl	8008be0 <raise>
 80089fc:	2001      	movs	r0, #1
 80089fe:	f7f8 f897 	bl	8000b30 <_exit>
	...

08008a04 <malloc>:
 8008a04:	4b02      	ldr	r3, [pc, #8]	@ (8008a10 <malloc+0xc>)
 8008a06:	4601      	mov	r1, r0
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	f000 b82d 	b.w	8008a68 <_malloc_r>
 8008a0e:	bf00      	nop
 8008a10:	2000010c 	.word	0x2000010c

08008a14 <free>:
 8008a14:	4b02      	ldr	r3, [pc, #8]	@ (8008a20 <free+0xc>)
 8008a16:	4601      	mov	r1, r0
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	f000 b939 	b.w	8008c90 <_free_r>
 8008a1e:	bf00      	nop
 8008a20:	2000010c 	.word	0x2000010c

08008a24 <sbrk_aligned>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	4e0f      	ldr	r6, [pc, #60]	@ (8008a64 <sbrk_aligned+0x40>)
 8008a28:	460c      	mov	r4, r1
 8008a2a:	6831      	ldr	r1, [r6, #0]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	b911      	cbnz	r1, 8008a36 <sbrk_aligned+0x12>
 8008a30:	f000 f8f2 	bl	8008c18 <_sbrk_r>
 8008a34:	6030      	str	r0, [r6, #0]
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 f8ed 	bl	8008c18 <_sbrk_r>
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	d103      	bne.n	8008a4a <sbrk_aligned+0x26>
 8008a42:	f04f 34ff 	mov.w	r4, #4294967295
 8008a46:	4620      	mov	r0, r4
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
 8008a4a:	1cc4      	adds	r4, r0, #3
 8008a4c:	f024 0403 	bic.w	r4, r4, #3
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d0f8      	beq.n	8008a46 <sbrk_aligned+0x22>
 8008a54:	1a21      	subs	r1, r4, r0
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 f8de 	bl	8008c18 <_sbrk_r>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d1f2      	bne.n	8008a46 <sbrk_aligned+0x22>
 8008a60:	e7ef      	b.n	8008a42 <sbrk_aligned+0x1e>
 8008a62:	bf00      	nop
 8008a64:	20001e60 	.word	0x20001e60

08008a68 <_malloc_r>:
 8008a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a6c:	1ccd      	adds	r5, r1, #3
 8008a6e:	f025 0503 	bic.w	r5, r5, #3
 8008a72:	3508      	adds	r5, #8
 8008a74:	2d0c      	cmp	r5, #12
 8008a76:	bf38      	it	cc
 8008a78:	250c      	movcc	r5, #12
 8008a7a:	2d00      	cmp	r5, #0
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	db01      	blt.n	8008a84 <_malloc_r+0x1c>
 8008a80:	42a9      	cmp	r1, r5
 8008a82:	d904      	bls.n	8008a8e <_malloc_r+0x26>
 8008a84:	230c      	movs	r3, #12
 8008a86:	6033      	str	r3, [r6, #0]
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b64 <_malloc_r+0xfc>
 8008a92:	f000 f869 	bl	8008b68 <__malloc_lock>
 8008a96:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9a:	461c      	mov	r4, r3
 8008a9c:	bb44      	cbnz	r4, 8008af0 <_malloc_r+0x88>
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff ffbf 	bl	8008a24 <sbrk_aligned>
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	d158      	bne.n	8008b5e <_malloc_r+0xf6>
 8008aac:	f8d8 4000 	ldr.w	r4, [r8]
 8008ab0:	4627      	mov	r7, r4
 8008ab2:	2f00      	cmp	r7, #0
 8008ab4:	d143      	bne.n	8008b3e <_malloc_r+0xd6>
 8008ab6:	2c00      	cmp	r4, #0
 8008ab8:	d04b      	beq.n	8008b52 <_malloc_r+0xea>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	4639      	mov	r1, r7
 8008abe:	4630      	mov	r0, r6
 8008ac0:	eb04 0903 	add.w	r9, r4, r3
 8008ac4:	f000 f8a8 	bl	8008c18 <_sbrk_r>
 8008ac8:	4581      	cmp	r9, r0
 8008aca:	d142      	bne.n	8008b52 <_malloc_r+0xea>
 8008acc:	6821      	ldr	r1, [r4, #0]
 8008ace:	1a6d      	subs	r5, r5, r1
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f7ff ffa6 	bl	8008a24 <sbrk_aligned>
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d03a      	beq.n	8008b52 <_malloc_r+0xea>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	442b      	add	r3, r5
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	bb62      	cbnz	r2, 8008b44 <_malloc_r+0xdc>
 8008aea:	f8c8 7000 	str.w	r7, [r8]
 8008aee:	e00f      	b.n	8008b10 <_malloc_r+0xa8>
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	1b52      	subs	r2, r2, r5
 8008af4:	d420      	bmi.n	8008b38 <_malloc_r+0xd0>
 8008af6:	2a0b      	cmp	r2, #11
 8008af8:	d917      	bls.n	8008b2a <_malloc_r+0xc2>
 8008afa:	1961      	adds	r1, r4, r5
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	6025      	str	r5, [r4, #0]
 8008b00:	bf18      	it	ne
 8008b02:	6059      	strne	r1, [r3, #4]
 8008b04:	6863      	ldr	r3, [r4, #4]
 8008b06:	bf08      	it	eq
 8008b08:	f8c8 1000 	streq.w	r1, [r8]
 8008b0c:	5162      	str	r2, [r4, r5]
 8008b0e:	604b      	str	r3, [r1, #4]
 8008b10:	4630      	mov	r0, r6
 8008b12:	f000 f82f 	bl	8008b74 <__malloc_unlock>
 8008b16:	f104 000b 	add.w	r0, r4, #11
 8008b1a:	1d23      	adds	r3, r4, #4
 8008b1c:	f020 0007 	bic.w	r0, r0, #7
 8008b20:	1ac2      	subs	r2, r0, r3
 8008b22:	bf1c      	itt	ne
 8008b24:	1a1b      	subne	r3, r3, r0
 8008b26:	50a3      	strne	r3, [r4, r2]
 8008b28:	e7af      	b.n	8008a8a <_malloc_r+0x22>
 8008b2a:	6862      	ldr	r2, [r4, #4]
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	bf0c      	ite	eq
 8008b30:	f8c8 2000 	streq.w	r2, [r8]
 8008b34:	605a      	strne	r2, [r3, #4]
 8008b36:	e7eb      	b.n	8008b10 <_malloc_r+0xa8>
 8008b38:	4623      	mov	r3, r4
 8008b3a:	6864      	ldr	r4, [r4, #4]
 8008b3c:	e7ae      	b.n	8008a9c <_malloc_r+0x34>
 8008b3e:	463c      	mov	r4, r7
 8008b40:	687f      	ldr	r7, [r7, #4]
 8008b42:	e7b6      	b.n	8008ab2 <_malloc_r+0x4a>
 8008b44:	461a      	mov	r2, r3
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	d1fb      	bne.n	8008b44 <_malloc_r+0xdc>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	6053      	str	r3, [r2, #4]
 8008b50:	e7de      	b.n	8008b10 <_malloc_r+0xa8>
 8008b52:	230c      	movs	r3, #12
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	4630      	mov	r0, r6
 8008b58:	f000 f80c 	bl	8008b74 <__malloc_unlock>
 8008b5c:	e794      	b.n	8008a88 <_malloc_r+0x20>
 8008b5e:	6005      	str	r5, [r0, #0]
 8008b60:	e7d6      	b.n	8008b10 <_malloc_r+0xa8>
 8008b62:	bf00      	nop
 8008b64:	20001e64 	.word	0x20001e64

08008b68 <__malloc_lock>:
 8008b68:	4801      	ldr	r0, [pc, #4]	@ (8008b70 <__malloc_lock+0x8>)
 8008b6a:	f000 b88f 	b.w	8008c8c <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	20001fa4 	.word	0x20001fa4

08008b74 <__malloc_unlock>:
 8008b74:	4801      	ldr	r0, [pc, #4]	@ (8008b7c <__malloc_unlock+0x8>)
 8008b76:	f000 b88a 	b.w	8008c8e <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	20001fa4 	.word	0x20001fa4

08008b80 <memset>:
 8008b80:	4402      	add	r2, r0
 8008b82:	4603      	mov	r3, r0
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d100      	bne.n	8008b8a <memset+0xa>
 8008b88:	4770      	bx	lr
 8008b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8e:	e7f9      	b.n	8008b84 <memset+0x4>

08008b90 <_raise_r>:
 8008b90:	291f      	cmp	r1, #31
 8008b92:	b538      	push	{r3, r4, r5, lr}
 8008b94:	4605      	mov	r5, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	d904      	bls.n	8008ba4 <_raise_r+0x14>
 8008b9a:	2316      	movs	r3, #22
 8008b9c:	6003      	str	r3, [r0, #0]
 8008b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ba6:	b112      	cbz	r2, 8008bae <_raise_r+0x1e>
 8008ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bac:	b94b      	cbnz	r3, 8008bc2 <_raise_r+0x32>
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f000 f830 	bl	8008c14 <_getpid_r>
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	4628      	mov	r0, r5
 8008bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bbe:	f000 b817 	b.w	8008bf0 <_kill_r>
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d00a      	beq.n	8008bdc <_raise_r+0x4c>
 8008bc6:	1c59      	adds	r1, r3, #1
 8008bc8:	d103      	bne.n	8008bd2 <_raise_r+0x42>
 8008bca:	2316      	movs	r3, #22
 8008bcc:	6003      	str	r3, [r0, #0]
 8008bce:	2001      	movs	r0, #1
 8008bd0:	e7e7      	b.n	8008ba2 <_raise_r+0x12>
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bd8:	4620      	mov	r0, r4
 8008bda:	4798      	blx	r3
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e7e0      	b.n	8008ba2 <_raise_r+0x12>

08008be0 <raise>:
 8008be0:	4b02      	ldr	r3, [pc, #8]	@ (8008bec <raise+0xc>)
 8008be2:	4601      	mov	r1, r0
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	f7ff bfd3 	b.w	8008b90 <_raise_r>
 8008bea:	bf00      	nop
 8008bec:	2000010c 	.word	0x2000010c

08008bf0 <_kill_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d07      	ldr	r5, [pc, #28]	@ (8008c10 <_kill_r+0x20>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	f7f7 ff87 	bl	8000b10 <_kill>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d102      	bne.n	8008c0c <_kill_r+0x1c>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b103      	cbz	r3, 8008c0c <_kill_r+0x1c>
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
 8008c0e:	bf00      	nop
 8008c10:	20001fa0 	.word	0x20001fa0

08008c14 <_getpid_r>:
 8008c14:	f7f7 bf74 	b.w	8000b00 <_getpid>

08008c18 <_sbrk_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	4d06      	ldr	r5, [pc, #24]	@ (8008c34 <_sbrk_r+0x1c>)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	4604      	mov	r4, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	602b      	str	r3, [r5, #0]
 8008c24:	f7f7 ff90 	bl	8000b48 <_sbrk>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_sbrk_r+0x1a>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_sbrk_r+0x1a>
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	20001fa0 	.word	0x20001fa0

08008c38 <__errno>:
 8008c38:	4b01      	ldr	r3, [pc, #4]	@ (8008c40 <__errno+0x8>)
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	2000010c 	.word	0x2000010c

08008c44 <__libc_init_array>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4d0d      	ldr	r5, [pc, #52]	@ (8008c7c <__libc_init_array+0x38>)
 8008c48:	4c0d      	ldr	r4, [pc, #52]	@ (8008c80 <__libc_init_array+0x3c>)
 8008c4a:	1b64      	subs	r4, r4, r5
 8008c4c:	10a4      	asrs	r4, r4, #2
 8008c4e:	2600      	movs	r6, #0
 8008c50:	42a6      	cmp	r6, r4
 8008c52:	d109      	bne.n	8008c68 <__libc_init_array+0x24>
 8008c54:	4d0b      	ldr	r5, [pc, #44]	@ (8008c84 <__libc_init_array+0x40>)
 8008c56:	4c0c      	ldr	r4, [pc, #48]	@ (8008c88 <__libc_init_array+0x44>)
 8008c58:	f000 f864 	bl	8008d24 <_init>
 8008c5c:	1b64      	subs	r4, r4, r5
 8008c5e:	10a4      	asrs	r4, r4, #2
 8008c60:	2600      	movs	r6, #0
 8008c62:	42a6      	cmp	r6, r4
 8008c64:	d105      	bne.n	8008c72 <__libc_init_array+0x2e>
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6c:	4798      	blx	r3
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7ee      	b.n	8008c50 <__libc_init_array+0xc>
 8008c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c76:	4798      	blx	r3
 8008c78:	3601      	adds	r6, #1
 8008c7a:	e7f2      	b.n	8008c62 <__libc_init_array+0x1e>
 8008c7c:	08008db4 	.word	0x08008db4
 8008c80:	08008db4 	.word	0x08008db4
 8008c84:	08008db4 	.word	0x08008db4
 8008c88:	08008db8 	.word	0x08008db8

08008c8c <__retarget_lock_acquire_recursive>:
 8008c8c:	4770      	bx	lr

08008c8e <__retarget_lock_release_recursive>:
 8008c8e:	4770      	bx	lr

08008c90 <_free_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4605      	mov	r5, r0
 8008c94:	2900      	cmp	r1, #0
 8008c96:	d041      	beq.n	8008d1c <_free_r+0x8c>
 8008c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c9c:	1f0c      	subs	r4, r1, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfb8      	it	lt
 8008ca2:	18e4      	addlt	r4, r4, r3
 8008ca4:	f7ff ff60 	bl	8008b68 <__malloc_lock>
 8008ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d20 <_free_r+0x90>)
 8008caa:	6813      	ldr	r3, [r2, #0]
 8008cac:	b933      	cbnz	r3, 8008cbc <_free_r+0x2c>
 8008cae:	6063      	str	r3, [r4, #4]
 8008cb0:	6014      	str	r4, [r2, #0]
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb8:	f7ff bf5c 	b.w	8008b74 <__malloc_unlock>
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	d908      	bls.n	8008cd2 <_free_r+0x42>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	1821      	adds	r1, r4, r0
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf01      	itttt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	1809      	addeq	r1, r1, r0
 8008cce:	6021      	streq	r1, [r4, #0]
 8008cd0:	e7ed      	b.n	8008cae <_free_r+0x1e>
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	b10b      	cbz	r3, 8008cdc <_free_r+0x4c>
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	d9fa      	bls.n	8008cd2 <_free_r+0x42>
 8008cdc:	6811      	ldr	r1, [r2, #0]
 8008cde:	1850      	adds	r0, r2, r1
 8008ce0:	42a0      	cmp	r0, r4
 8008ce2:	d10b      	bne.n	8008cfc <_free_r+0x6c>
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	4401      	add	r1, r0
 8008ce8:	1850      	adds	r0, r2, r1
 8008cea:	4283      	cmp	r3, r0
 8008cec:	6011      	str	r1, [r2, #0]
 8008cee:	d1e0      	bne.n	8008cb2 <_free_r+0x22>
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	6053      	str	r3, [r2, #4]
 8008cf6:	4408      	add	r0, r1
 8008cf8:	6010      	str	r0, [r2, #0]
 8008cfa:	e7da      	b.n	8008cb2 <_free_r+0x22>
 8008cfc:	d902      	bls.n	8008d04 <_free_r+0x74>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	e7d6      	b.n	8008cb2 <_free_r+0x22>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	1821      	adds	r1, r4, r0
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	bf04      	itt	eq
 8008d0c:	6819      	ldreq	r1, [r3, #0]
 8008d0e:	685b      	ldreq	r3, [r3, #4]
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	bf04      	itt	eq
 8008d14:	1809      	addeq	r1, r1, r0
 8008d16:	6021      	streq	r1, [r4, #0]
 8008d18:	6054      	str	r4, [r2, #4]
 8008d1a:	e7ca      	b.n	8008cb2 <_free_r+0x22>
 8008d1c:	bd38      	pop	{r3, r4, r5, pc}
 8008d1e:	bf00      	nop
 8008d20:	20001e64 	.word	0x20001e64

08008d24 <_init>:
 8008d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d26:	bf00      	nop
 8008d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2a:	bc08      	pop	{r3}
 8008d2c:	469e      	mov	lr, r3
 8008d2e:	4770      	bx	lr

08008d30 <_fini>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	bf00      	nop
 8008d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d36:	bc08      	pop	{r3}
 8008d38:	469e      	mov	lr, r3
 8008d3a:	4770      	bx	lr
