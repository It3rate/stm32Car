
Joy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008554  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080086ec  080086ec  000096ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800874c  0800874c  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800874c  0800874c  0000974c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008754  08008754  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008754  08008754  00009754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008758  08008758  00009758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800875c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf8  200000fc  08008858  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001df4  08008858  0000adf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001659b  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e34  00000000  00000000  000206c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00024500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea8  00000000  00000000  00025858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db1c  00000000  00000000  00026700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae40  00000000  00000000  0004421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df43  00000000  00000000  0005f05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcf9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef4  00000000  00000000  000fcfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00101ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080086d4 	.word	0x080086d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080086d4 	.word	0x080086d4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvCpltCallback>:
uint8_t buffer[] = "Hello World\r\n";

#define ADC_BUF_LEN 2
uint16_t joyBuf[ADC_BUF_LEN];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS(buffer, sizeof(buffer));
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <_Z12EventLoopCppv>:
void EventLoopCpp() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)joyBuf, ADC_BUF_LEN);
 80004e0:	2202      	movs	r2, #2
 80004e2:	4904      	ldr	r1, [pc, #16]	@ (80004f4 <_Z12EventLoopCppv+0x18>)
 80004e4:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <_Z12EventLoopCppv+0x1c>)
 80004e6:	f000 fcef 	bl	8000ec8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80004ea:	4804      	ldr	r0, [pc, #16]	@ (80004fc <_Z12EventLoopCppv+0x20>)
 80004ec:	f003 fd8a 	bl	8004004 <HAL_TIM_Base_Start>
	while (1) {
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <_Z12EventLoopCppv+0x14>
 80004f4:	20000118 	.word	0x20000118
 80004f8:	2000011c 	.word	0x2000011c
 80004fc:	200001c4 	.word	0x200001c4

08000500 <EventLoopC>:
	}
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	EventLoopCpp();
 8000504:	f7ff ffea 	bl	80004dc <_Z12EventLoopCppv>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000512:	463b      	mov	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051e:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000520:	4a29      	ldr	r2, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xbc>)
 8000522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000524:	4b27      	ldr	r3, [pc, #156]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800052a:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000530:	4b24      	ldr	r3, [pc, #144]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000532:	2201      	movs	r2, #1
 8000534:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000538:	2201      	movs	r2, #1
 800053a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 800053e:	2200      	movs	r2, #0
 8000540:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000544:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800054a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800054c:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 800054e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000552:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000554:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800055a:	4b1a      	ldr	r3, [pc, #104]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 800055c:	2202      	movs	r2, #2
 800055e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000560:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000562:	2201      	movs	r2, #1
 8000564:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000568:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800056e:	4815      	ldr	r0, [pc, #84]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000570:	f000 fb56 	bl	8000c20 <HAL_ADC_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800057a:	f000 f97f 	bl	800087c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000586:	2306      	movs	r3, #6
 8000588:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 8000590:	f000 fda8 	bl	80010e4 <HAL_ADC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800059a:	f000 f96f 	bl	800087c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800059e:	2301      	movs	r3, #1
 80005a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <MX_ADC1_Init+0xb8>)
 80005ac:	f000 fd9a 	bl	80010e4 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80005b6:	f000 f961 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000011c 	.word	0x2000011c
 80005c8:	40012000 	.word	0x40012000

080005cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a33      	ldr	r2, [pc, #204]	@ (80006b8 <HAL_ADC_MspInit+0xec>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d15f      	bne.n	80006ae <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b32      	ldr	r3, [pc, #200]	@ (80006bc <HAL_ADC_MspInit+0xf0>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f6:	4a31      	ldr	r2, [pc, #196]	@ (80006bc <HAL_ADC_MspInit+0xf0>)
 80005f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80005fe:	4b2f      	ldr	r3, [pc, #188]	@ (80006bc <HAL_ADC_MspInit+0xf0>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b2b      	ldr	r3, [pc, #172]	@ (80006bc <HAL_ADC_MspInit+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a2a      	ldr	r2, [pc, #168]	@ (80006bc <HAL_ADC_MspInit+0xf0>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <HAL_ADC_MspInit+0xf0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 8000626:	2303      	movs	r3, #3
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	2303      	movs	r3, #3
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	4821      	ldr	r0, [pc, #132]	@ (80006c0 <HAL_ADC_MspInit+0xf4>)
 800063a:	f001 fc8f 	bl	8001f5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000640:	4a21      	ldr	r2, [pc, #132]	@ (80006c8 <HAL_ADC_MspInit+0xfc>)
 8000642:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000658:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800065c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800065e:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000660:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000664:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000668:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800066c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000674:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000682:	4810      	ldr	r0, [pc, #64]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000684:	f001 f8fa 	bl	800187c <HAL_DMA_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800068e:	f000 f8f5 	bl	800087c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 8000696:	639a      	str	r2, [r3, #56]	@ 0x38
 8000698:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <HAL_ADC_MspInit+0xf8>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2012      	movs	r0, #18
 80006a4:	f001 f8b3 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006a8:	2012      	movs	r0, #18
 80006aa:	f001 f8cc 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	@ 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40012000 	.word	0x40012000
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000
 80006c4:	20000164 	.word	0x20000164
 80006c8:	40026410 	.word	0x40026410

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DMA_Init+0x3c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <MX_DMA_Init+0x3c>)
 80006dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_DMA_Init+0x3c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2038      	movs	r0, #56	@ 0x38
 80006f4:	f001 f88b 	bl	800180e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006f8:	2038      	movs	r0, #56	@ 0x38
 80006fa:	f001 f8a4 	bl	8001846 <HAL_NVIC_EnableIRQ>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_GPIO_Init+0x70>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a14      	ldr	r2, [pc, #80]	@ (800077c <MX_GPIO_Init+0x70>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_GPIO_Init+0x70>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_GPIO_Init+0x70>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <MX_GPIO_Init+0x70>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_GPIO_Init+0x70>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 800075a:	2304      	movs	r3, #4
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_GPIO_Init+0x74>)
 800076e:	f001 fbf5 	bl	8001f5c <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 f9b4 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f80e 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f7ff ffbc 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 8000794:	f7ff ff9a 	bl	80006cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000798:	f7ff feb8 	bl	800050c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800079c:	f007 fa84 	bl	8007ca8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80007a0:	f000 f8fa 	bl	8000998 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  EventLoopC();
 80007a4:	f7ff feac 	bl	8000500 <EventLoopC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <main+0x24>

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	@ 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f007 ff5e 	bl	800867c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <SystemClock_Config+0xc8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a26      	ldr	r2, [pc, #152]	@ (8000874 <SystemClock_Config+0xc8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e0:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <SystemClock_Config+0xc8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <SystemClock_Config+0xcc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a20      	ldr	r2, [pc, #128]	@ (8000878 <SystemClock_Config+0xcc>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <SystemClock_Config+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800081c:	230f      	movs	r3, #15
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000820:	2390      	movs	r3, #144	@ 0x90
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000824:	2304      	movs	r3, #4
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000828:	2305      	movs	r3, #5
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f002 ff67 	bl	8003704 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800083c:	f000 f81e 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2101      	movs	r1, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f003 f9c9 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000868:	f000 f808 	bl	800087c <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3750      	adds	r7, #80	@ 0x50
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	@ (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089c:	6453      	str	r3, [r2, #68]	@ 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <MemManage_Handler+0x4>

080008f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <UsageFault_Handler+0x4>

08000900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092e:	f000 f933 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800093c:	4802      	ldr	r0, [pc, #8]	@ (8000948 <ADC_IRQHandler+0x10>)
 800093e:	f000 f9b2 	bl	8000ca6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000011c 	.word	0x2000011c

0800094c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <DMA2_Stream0_IRQHandler+0x10>)
 8000952:	f001 f899 	bl	8001a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000164 	.word	0x20000164

08000960 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <OTG_FS_IRQHandler+0x10>)
 8000966:	f001 fdc1 	bl	80024ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200016f0 	.word	0x200016f0

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	@ 0x30
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c4:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 80009cc:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009ce:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80009d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 80009da:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009dc:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80009e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ee:	481b      	ldr	r0, [pc, #108]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 80009f0:	f003 fab8 	bl	8003f64 <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009fa:	f7ff ff3f 	bl	800087c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a02:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a04:	f107 0320 	add.w	r3, r7, #32
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4814      	ldr	r0, [pc, #80]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 8000a0c:	f003 fb54 	bl	80040b8 <HAL_TIM_ConfigClockSource>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a16:	f7ff ff31 	bl	800087c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 8000a2a:	f003 fc0c 	bl	8004246 <HAL_TIM_SlaveConfigSynchro>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a34:	f7ff ff22 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_TIM2_Init+0xc4>)
 8000a46:	f003 fdf9 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000a50:	f7ff ff14 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	@ 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200001c4 	.word	0x200001c4

08000a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a70:	d10d      	bne.n	8000a8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_TIM_Base_MspInit+0x3c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <HAL_TIM_Base_MspInit+0x3c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_TIM_Base_MspInit+0x3c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aa4:	f7ff ff66 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f007 fddd 	bl	800868c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fe57 	bl	8000784 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000ae4:	0800875c 	.word	0x0800875c
  ldr r2, =_sbss
 8000ae8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000aec:	20001df4 	.word	0x20001df4

08000af0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <DMA1_Stream0_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 fe6b 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff feae 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fe83 	bl	8001862 <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 fe4b 	bl	800180e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	2000020c 	.word	0x2000020c

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000020c 	.word	0x2000020c

08000bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff ffee 	bl	8000bc0 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffde 	bl	8000bc0 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e033      	b.n	8000c9e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d109      	bne.n	8000c52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fcc4 	bl	80005cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d118      	bne.n	8000c90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c66:	f023 0302 	bic.w	r3, r3, #2
 8000c6a:	f043 0202 	orr.w	r2, r3, #2
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 fb68 	bl	8001348 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f023 0303 	bic.w	r3, r3, #3
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c8e:	e001      	b.n	8000c94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	f003 0320 	and.w	r3, r3, #32
 8000cd4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d049      	beq.n	8000d70 <HAL_ADC_IRQHandler+0xca>
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d046      	beq.n	8000d70 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d105      	bne.n	8000cfa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d12b      	bne.n	8000d60 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d127      	bne.n	8000d60 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d006      	beq.n	8000d2c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d119      	bne.n	8000d60 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0220 	bic.w	r2, r2, #32
 8000d3a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff fbb1 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f06f 0212 	mvn.w	r2, #18
 8000d6e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d7e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d057      	beq.n	8000e36 <HAL_ADC_IRQHandler+0x190>
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d054      	beq.n	8000e36 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d105      	bne.n	8000da4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d139      	bne.n	8000e26 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d006      	beq.n	8000dce <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d12b      	bne.n	8000e26 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d124      	bne.n	8000e26 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d11d      	bne.n	8000e26 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d119      	bne.n	8000e26 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e00:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f043 0201 	orr.w	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fc0c 	bl	8001644 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f06f 020c 	mvn.w	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e44:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d017      	beq.n	8000e7c <HAL_ADC_IRQHandler+0x1d6>
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d014      	beq.n	8000e7c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10d      	bne.n	8000e7c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f925 	bl	80010bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f06f 0201 	mvn.w	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e8a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d015      	beq.n	8000ebe <HAL_ADC_IRQHandler+0x218>
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d012      	beq.n	8000ebe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9c:	f043 0202 	orr.w	r2, r3, #2
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f06f 0220 	mvn.w	r2, #32
 8000eac:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f90e 	bl	80010d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f06f 0220 	mvn.w	r2, #32
 8000ebc:	601a      	str	r2, [r3, #0]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_ADC_Start_DMA+0x1e>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e0ce      	b.n	8001084 <HAL_ADC_Start_DMA+0x1bc>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d018      	beq.n	8000f2e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0c:	4b5f      	ldr	r3, [pc, #380]	@ (800108c <HAL_ADC_Start_DMA+0x1c4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a5f      	ldr	r2, [pc, #380]	@ (8001090 <HAL_ADC_Start_DMA+0x1c8>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9a      	lsrs	r2, r3, #18
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f20:	e002      	b.n	8000f28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f9      	bne.n	8000f22 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f3c:	d107      	bne.n	8000f4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f4c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	f040 8086 	bne.w	800106a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d007      	beq.n	8000f90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f9c:	d106      	bne.n	8000fac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f023 0206 	bic.w	r2, r3, #6
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	645a      	str	r2, [r3, #68]	@ 0x44
 8000faa:	e002      	b.n	8000fb2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fba:	4b36      	ldr	r3, [pc, #216]	@ (8001094 <HAL_ADC_Start_DMA+0x1cc>)
 8000fbc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc2:	4a35      	ldr	r2, [pc, #212]	@ (8001098 <HAL_ADC_Start_DMA+0x1d0>)
 8000fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fca:	4a34      	ldr	r2, [pc, #208]	@ (800109c <HAL_ADC_Start_DMA+0x1d4>)
 8000fcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd2:	4a33      	ldr	r2, [pc, #204]	@ (80010a0 <HAL_ADC_Start_DMA+0x1d8>)
 8000fd4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000fde:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000fee:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ffe:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	334c      	adds	r3, #76	@ 0x4c
 800100a:	4619      	mov	r1, r3
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f000 fce2 	bl	80019d8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10f      	bne.n	8001040 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d129      	bne.n	8001082 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	e020      	b.n	8001082 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <HAL_ADC_Start_DMA+0x1dc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d11b      	bne.n	8001082 <HAL_ADC_Start_DMA+0x1ba>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d114      	bne.n	8001082 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	e00b      	b.n	8001082 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f043 0210 	orr.w	r2, r3, #16
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	431bde83 	.word	0x431bde83
 8001094:	40012300 	.word	0x40012300
 8001098:	08001541 	.word	0x08001541
 800109c:	080015fb 	.word	0x080015fb
 80010a0:	08001617 	.word	0x08001617
 80010a4:	40012000 	.word	0x40012000

080010a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x1c>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e113      	b.n	8001328 <HAL_ADC_ConfigChannel+0x244>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b09      	cmp	r3, #9
 800110e:	d925      	bls.n	800115c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68d9      	ldr	r1, [r3, #12]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	3b1e      	subs	r3, #30
 8001126:	2207      	movs	r2, #7
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43da      	mvns	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	400a      	ands	r2, r1
 8001134:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68d9      	ldr	r1, [r3, #12]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	4603      	mov	r3, r0
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4403      	add	r3, r0
 800114e:	3b1e      	subs	r3, #30
 8001150:	409a      	lsls	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	e022      	b.n	80011a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6919      	ldr	r1, [r3, #16]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	2207      	movs	r2, #7
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6919      	ldr	r1, [r3, #16]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	4603      	mov	r3, r0
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4403      	add	r3, r0
 8001198:	409a      	lsls	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d824      	bhi.n	80011f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	3b05      	subs	r3, #5
 80011bc:	221f      	movs	r2, #31
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b05      	subs	r3, #5
 80011e6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f2:	e04c      	b.n	800128e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	d824      	bhi.n	8001246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	3b23      	subs	r3, #35	@ 0x23
 800120e:	221f      	movs	r2, #31
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43da      	mvns	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b23      	subs	r3, #35	@ 0x23
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	631a      	str	r2, [r3, #48]	@ 0x30
 8001244:	e023      	b.n	800128e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3b41      	subs	r3, #65	@ 0x41
 8001258:	221f      	movs	r2, #31
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b41      	subs	r3, #65	@ 0x41
 8001282:	fa00 f203 	lsl.w	r2, r0, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128e:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <HAL_ADC_ConfigChannel+0x250>)
 8001290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a28      	ldr	r2, [pc, #160]	@ (8001338 <HAL_ADC_ConfigChannel+0x254>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d10f      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d8>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b12      	cmp	r3, #18
 80012a2:	d10b      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001338 <HAL_ADC_ConfigChannel+0x254>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d12b      	bne.n	800131e <HAL_ADC_ConfigChannel+0x23a>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <HAL_ADC_ConfigChannel+0x258>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d003      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x1f4>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b11      	cmp	r3, #17
 80012d6:	d122      	bne.n	800131e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a11      	ldr	r2, [pc, #68]	@ (800133c <HAL_ADC_ConfigChannel+0x258>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d111      	bne.n	800131e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <HAL_ADC_ConfigChannel+0x25c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a11      	ldr	r2, [pc, #68]	@ (8001344 <HAL_ADC_ConfigChannel+0x260>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9a      	lsrs	r2, r3, #18
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001310:	e002      	b.n	8001318 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3b01      	subs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f9      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	40012300 	.word	0x40012300
 8001338:	40012000 	.word	0x40012000
 800133c:	10000012 	.word	0x10000012
 8001340:	20000000 	.word	0x20000000
 8001344:	431bde83 	.word	0x431bde83

08001348 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001350:	4b79      	ldr	r3, [pc, #484]	@ (8001538 <ADC_Init+0x1f0>)
 8001352:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	431a      	orrs	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800137c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	021a      	lsls	r2, r3, #8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6899      	ldr	r1, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013da:	4a58      	ldr	r2, [pc, #352]	@ (800153c <ADC_Init+0x1f4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d022      	beq.n	8001426 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6899      	ldr	r1, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6899      	ldr	r1, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	e00f      	b.n	8001446 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001444:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0202 	bic.w	r2, r2, #2
 8001454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6899      	ldr	r1, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7e1b      	ldrb	r3, [r3, #24]
 8001460:	005a      	lsls	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d01b      	beq.n	80014ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001482:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6859      	ldr	r1, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149e:	3b01      	subs	r3, #1
 80014a0:	035a      	lsls	r2, r3, #13
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	e007      	b.n	80014bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	051a      	lsls	r2, r3, #20
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014fe:	025a      	lsls	r2, r3, #9
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6899      	ldr	r1, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	029a      	lsls	r2, r3, #10
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40012300 	.word	0x40012300
 800153c:	0f000001 	.word	0x0f000001

08001540 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001556:	2b00      	cmp	r3, #0
 8001558:	d13c      	bne.n	80015d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d12b      	bne.n	80015cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001578:	2b00      	cmp	r3, #0
 800157a:	d127      	bne.n	80015cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001582:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001594:	2b00      	cmp	r3, #0
 8001596:	d119      	bne.n	80015cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0220 	bic.w	r2, r2, #32
 80015a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	f043 0201 	orr.w	r2, r3, #1
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7fe ff7b 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015d2:	e00e      	b.n	80015f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fd75 	bl	80010d0 <HAL_ADC_ErrorCallback>
}
 80015e6:	e004      	b.n	80015f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001606:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff fd4d 	bl	80010a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001622:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2240      	movs	r2, #64	@ 0x40
 8001628:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fd4a 	bl	80010d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4907      	ldr	r1, [pc, #28]	@ (80016f4 <__NVIC_EnableIRQ+0x38>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	@ (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	@ (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	@ 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff29 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff3e 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff8e 	bl	800174c <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5d 	bl	80016f8 <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff31 	bl	80016bc <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffa2 	bl	80017b4 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff f99a 	bl	8000bc0 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e099      	b.n	80019cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b8:	e00f      	b.n	80018da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ba:	f7ff f981 	bl	8000bc0 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d908      	bls.n	80018da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2220      	movs	r2, #32
 80018cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2203      	movs	r2, #3
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e078      	b.n	80019cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e8      	bne.n	80018ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <HAL_DMA_Init+0x158>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001906:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	2b04      	cmp	r3, #4
 8001932:	d107      	bne.n	8001944 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	4313      	orrs	r3, r2
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4313      	orrs	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f023 0307 	bic.w	r3, r3, #7
 800195a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	4313      	orrs	r3, r2
 8001964:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	2b04      	cmp	r3, #4
 800196c:	d117      	bne.n	800199e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00e      	beq.n	800199e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fa6f 	bl	8001e64 <DMA_CheckFifoParam>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2240      	movs	r2, #64	@ 0x40
 8001990:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800199a:	2301      	movs	r3, #1
 800199c:	e016      	b.n	80019cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fa26 	bl	8001df8 <DMA_CalcBaseAndBitshift>
 80019ac:	4603      	mov	r3, r0
 80019ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b4:	223f      	movs	r2, #63	@ 0x3f
 80019b6:	409a      	lsls	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	f010803f 	.word	0xf010803f

080019d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_DMA_Start_IT+0x26>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e040      	b.n	8001a80 <HAL_DMA_Start_IT+0xa8>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d12f      	bne.n	8001a72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2202      	movs	r2, #2
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f9b8 	bl	8001d9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a30:	223f      	movs	r2, #63	@ 0x3f
 8001a32:	409a      	lsls	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0216 	orr.w	r2, r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0208 	orr.w	r2, r2, #8
 8001a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e005      	b.n	8001a7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a94:	4b8e      	ldr	r3, [pc, #568]	@ (8001cd0 <HAL_DMA_IRQHandler+0x248>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a8e      	ldr	r2, [pc, #568]	@ (8001cd4 <HAL_DMA_IRQHandler+0x24c>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0a9b      	lsrs	r3, r3, #10
 8001aa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01a      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d013      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0204 	bic.w	r2, r2, #4
 8001ada:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af8:	2201      	movs	r2, #1
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d012      	beq.n	8001b2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b16:	2201      	movs	r2, #1
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b22:	f043 0202 	orr.w	r2, r3, #2
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2e:	2204      	movs	r2, #4
 8001b30:	409a      	lsls	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d012      	beq.n	8001b60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00b      	beq.n	8001b60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b58:	f043 0204 	orr.w	r2, r3, #4
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b64:	2210      	movs	r2, #16
 8001b66:	409a      	lsls	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d043      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d03c      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	2210      	movs	r2, #16
 8001b84:	409a      	lsls	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d018      	beq.n	8001bca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d108      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d024      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
 8001bb6:	e01f      	b.n	8001bf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01b      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
 8001bc8:	e016      	b.n	8001bf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0208 	bic.w	r2, r2, #8
 8001be6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 808f 	beq.w	8001d28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8087 	beq.w	8001d28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1e:	2220      	movs	r2, #32
 8001c20:	409a      	lsls	r2, r3
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d136      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0216 	bic.w	r2, r2, #22
 8001c40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <HAL_DMA_IRQHandler+0x1da>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0208 	bic.w	r2, r2, #8
 8001c70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c76:	223f      	movs	r2, #63	@ 0x3f
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d07e      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
        }
        return;
 8001c9e:	e079      	b.n	8001d94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01d      	beq.n	8001cea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10d      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d031      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
 8001ccc:	e02c      	b.n	8001d28 <HAL_DMA_IRQHandler+0x2a0>
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d023      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
 8001ce8:	e01e      	b.n	8001d28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10f      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0210 	bic.w	r2, r2, #16
 8001d06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d032      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d022      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2205      	movs	r2, #5
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3301      	adds	r3, #1
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d307      	bcc.n	8001d70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f2      	bne.n	8001d54 <HAL_DMA_IRQHandler+0x2cc>
 8001d6e:	e000      	b.n	8001d72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	4798      	blx	r3
 8001d92:	e000      	b.n	8001d96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d94:	bf00      	nop
    }
  }
}
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001db8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b40      	cmp	r3, #64	@ 0x40
 8001dc8:	d108      	bne.n	8001ddc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dda:	e007      	b.n	8001dec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	60da      	str	r2, [r3, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3b10      	subs	r3, #16
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <DMA_CalcBaseAndBitshift+0x64>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e12:	4a13      	ldr	r2, [pc, #76]	@ (8001e60 <DMA_CalcBaseAndBitshift+0x68>)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d909      	bls.n	8001e3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	1d1a      	adds	r2, r3, #4
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e38:	e007      	b.n	8001e4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	aaaaaaab 	.word	0xaaaaaaab
 8001e60:	08008744 	.word	0x08008744

08001e64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d11f      	bne.n	8001ebe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d856      	bhi.n	8001f32 <DMA_CheckFifoParam+0xce>
 8001e84:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <DMA_CheckFifoParam+0x28>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001eaf 	.word	0x08001eaf
 8001e94:	08001e9d 	.word	0x08001e9d
 8001e98:	08001f33 	.word	0x08001f33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d046      	beq.n	8001f36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eac:	e043      	b.n	8001f36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eb6:	d140      	bne.n	8001f3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ebc:	e03d      	b.n	8001f3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ec6:	d121      	bne.n	8001f0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d837      	bhi.n	8001f3e <DMA_CheckFifoParam+0xda>
 8001ece:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed4 <DMA_CheckFifoParam+0x70>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001eeb 	.word	0x08001eeb
 8001edc:	08001ee5 	.word	0x08001ee5
 8001ee0:	08001efd 	.word	0x08001efd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee8:	e030      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d025      	beq.n	8001f42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efa:	e022      	b.n	8001f42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f04:	d11f      	bne.n	8001f46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f0a:	e01c      	b.n	8001f46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d903      	bls.n	8001f1a <DMA_CheckFifoParam+0xb6>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d003      	beq.n	8001f20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f18:	e018      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1e:	e015      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f30:	e00b      	b.n	8001f4a <DMA_CheckFifoParam+0xe6>
      break;
 8001f32:	bf00      	nop
 8001f34:	e00a      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f36:	bf00      	nop
 8001f38:	e008      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e006      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e004      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f42:	bf00      	nop
 8001f44:	e002      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f46:	bf00      	nop
 8001f48:	e000      	b.n	8001f4c <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	@ 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e159      	b.n	800222c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8148 	bne.w	8002226 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d005      	beq.n	8001fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d130      	bne.n	8002010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 0201 	and.w	r2, r3, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b03      	cmp	r3, #3
 800201a:	d017      	beq.n	800204c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d123      	bne.n	80020a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	69b9      	ldr	r1, [r7, #24]
 800209c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0203 	and.w	r2, r3, #3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a2 	beq.w	8002226 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b57      	ldr	r3, [pc, #348]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	4a56      	ldr	r2, [pc, #344]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 80020ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f2:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020fe:	4a52      	ldr	r2, [pc, #328]	@ (8002248 <HAL_GPIO_Init+0x2ec>)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a49      	ldr	r2, [pc, #292]	@ (800224c <HAL_GPIO_Init+0x2f0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d019      	beq.n	800215e <HAL_GPIO_Init+0x202>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a48      	ldr	r2, [pc, #288]	@ (8002250 <HAL_GPIO_Init+0x2f4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0x1fe>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a47      	ldr	r2, [pc, #284]	@ (8002254 <HAL_GPIO_Init+0x2f8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00d      	beq.n	8002156 <HAL_GPIO_Init+0x1fa>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a46      	ldr	r2, [pc, #280]	@ (8002258 <HAL_GPIO_Init+0x2fc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <HAL_GPIO_Init+0x1f6>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a45      	ldr	r2, [pc, #276]	@ (800225c <HAL_GPIO_Init+0x300>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_GPIO_Init+0x1f2>
 800214a:	2304      	movs	r3, #4
 800214c:	e008      	b.n	8002160 <HAL_GPIO_Init+0x204>
 800214e:	2307      	movs	r3, #7
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x204>
 8002152:	2303      	movs	r3, #3
 8002154:	e004      	b.n	8002160 <HAL_GPIO_Init+0x204>
 8002156:	2302      	movs	r3, #2
 8002158:	e002      	b.n	8002160 <HAL_GPIO_Init+0x204>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x204>
 800215e:	2300      	movs	r3, #0
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	f002 0203 	and.w	r2, r2, #3
 8002166:	0092      	lsls	r2, r2, #2
 8002168:	4093      	lsls	r3, r2
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002170:	4935      	ldr	r1, [pc, #212]	@ (8002248 <HAL_GPIO_Init+0x2ec>)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800217e:	4b38      	ldr	r3, [pc, #224]	@ (8002260 <HAL_GPIO_Init+0x304>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002260 <HAL_GPIO_Init+0x304>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <HAL_GPIO_Init+0x304>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021cc:	4a24      	ldr	r2, [pc, #144]	@ (8002260 <HAL_GPIO_Init+0x304>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021d2:	4b23      	ldr	r3, [pc, #140]	@ (8002260 <HAL_GPIO_Init+0x304>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002260 <HAL_GPIO_Init+0x304>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021fc:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_GPIO_Init+0x304>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002220:	4a0f      	ldr	r2, [pc, #60]	@ (8002260 <HAL_GPIO_Init+0x304>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3301      	adds	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	f67f aea2 	bls.w	8001f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3724      	adds	r7, #36	@ 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40013800 	.word	0x40013800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40020800 	.word	0x40020800
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40021000 	.word	0x40021000
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af02      	add	r7, sp, #8
 800226a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e101      	b.n	800247a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f005 fee9 	bl	8008068 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a4:	d102      	bne.n	80022ac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fb48 	bl	8004946 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7c1a      	ldrb	r2, [r3, #16]
 80022be:	f88d 2000 	strb.w	r2, [sp]
 80022c2:	3304      	adds	r3, #4
 80022c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c6:	f002 fa27 	bl	8004718 <USB_CoreInit>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0ce      	b.n	800247a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 fb40 	bl	8004968 <USB_SetCurrentMode>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0bf      	b.n	800247a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	e04a      	b.n	8002396 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3315      	adds	r3, #21
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3314      	adds	r3, #20
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	b298      	uxth	r0, r3
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	332e      	adds	r3, #46	@ 0x2e
 800233c:	4602      	mov	r2, r0
 800233e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3318      	adds	r3, #24
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	331c      	adds	r3, #28
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3320      	adds	r3, #32
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3324      	adds	r3, #36	@ 0x24
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	3301      	adds	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	429a      	cmp	r2, r3
 800239e:	d3af      	bcc.n	8002300 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e044      	b.n	8002430 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	3301      	adds	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	791b      	ldrb	r3, [r3, #4]
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3b5      	bcc.n	80023a6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7c1a      	ldrb	r2, [r3, #16]
 8002442:	f88d 2000 	strb.w	r2, [sp]
 8002446:	3304      	adds	r3, #4
 8002448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244a:	f002 fad9 	bl	8004a00 <USB_DevInit>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e00c      	b.n	800247a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fb1d 	bl	8005ab2 <USB_DevDisconnect>

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_PCD_Start+0x1c>
 800249a:	2302      	movs	r3, #2
 800249c:	e022      	b.n	80024e4 <HAL_PCD_Start+0x62>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 fa2a 	bl	8004924 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 facb 	bl	8005a70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b08d      	sub	sp, #52	@ 0x34
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fb89 	bl	8005c1a <USB_GetMode>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 848c 	bne.w	8002e28 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f003 faed 	bl	8005af4 <USB_ReadInterrupts>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8482 	beq.w	8002e26 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fada 	bl	8005af4 <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d107      	bne.n	800255a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f002 0202 	and.w	r2, r2, #2
 8002558:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fac8 	bl	8005af4 <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b10      	cmp	r3, #16
 800256c:	d161      	bne.n	8002632 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0210 	bic.w	r2, r2, #16
 800257c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 020f 	and.w	r2, r3, #15
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	3304      	adds	r3, #4
 800259c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	0c5b      	lsrs	r3, r3, #17
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d124      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d035      	beq.n	8002622 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6a38      	ldr	r0, [r7, #32]
 80025ca:	f003 f8ff 	bl	80057cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025da:	441a      	add	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ec:	441a      	add	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	615a      	str	r2, [r3, #20]
 80025f2:	e016      	b.n	8002622 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	0c5b      	lsrs	r3, r3, #17
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d110      	bne.n	8002622 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002606:	2208      	movs	r2, #8
 8002608:	4619      	mov	r1, r3
 800260a:	6a38      	ldr	r0, [r7, #32]
 800260c:	f003 f8de 	bl	80057cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800261c:	441a      	add	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0210 	orr.w	r2, r2, #16
 8002630:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fa5c 	bl	8005af4 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002642:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002646:	f040 80a7 	bne.w	8002798 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fa61 	bl	8005b1a <USB_ReadDevAllOutEpInterrupt>
 8002658:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800265a:	e099      	b.n	8002790 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 808e 	beq.w	8002784 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f003 fa85 	bl	8005b82 <USB_ReadDevOutEPInterrupt>
 8002678:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00c      	beq.n	800269e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002690:	461a      	mov	r2, r3
 8002692:	2301      	movs	r3, #1
 8002694:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002696:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fea1 	bl	80033e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00c      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b4:	461a      	mov	r2, r3
 80026b6:	2308      	movs	r3, #8
 80026b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 ff77 	bl	80035b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d8:	461a      	mov	r2, r3
 80026da:	2310      	movs	r3, #16
 80026dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d030      	beq.n	800274a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f0:	2b80      	cmp	r3, #128	@ 0x80
 80026f2:	d109      	bne.n	8002708 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002706:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	78db      	ldrb	r3, [r3, #3]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	b2db      	uxtb	r3, r3
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f005 fd94 	bl	8008260 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002744:	461a      	mov	r2, r3
 8002746:	2302      	movs	r3, #2
 8002748:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	2320      	movs	r3, #32
 8002764:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800277c:	461a      	mov	r2, r3
 800277e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002782:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	3301      	adds	r3, #1
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800278a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002792:	2b00      	cmp	r3, #0
 8002794:	f47f af62 	bne.w	800265c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 f9a9 	bl	8005af4 <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027ac:	f040 80db 	bne.w	8002966 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 f9ca 	bl	8005b4e <USB_ReadDevAllInEpInterrupt>
 80027ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80027c0:	e0cd      	b.n	800295e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80c2 	beq.w	8002952 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 f9f0 	bl	8005bbe <USB_ReadDevInEPInterrupt>
 80027de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d057      	beq.n	800289a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	2201      	movs	r2, #1
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	69f9      	ldr	r1, [r7, #28]
 8002806:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800280a:	4013      	ands	r3, r2
 800280c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800281a:	461a      	mov	r2, r3
 800281c:	2301      	movs	r3, #1
 800281e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	799b      	ldrb	r3, [r3, #6]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d132      	bne.n	800288e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3320      	adds	r3, #32
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4403      	add	r3, r0
 8002848:	331c      	adds	r3, #28
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4419      	add	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4403      	add	r3, r0
 800285c:	3320      	adds	r3, #32
 800285e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d113      	bne.n	800288e <HAL_PCD_IRQHandler+0x3a2>
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3324      	adds	r3, #36	@ 0x24
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d108      	bne.n	800288e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002886:	461a      	mov	r2, r3
 8002888:	2101      	movs	r1, #1
 800288a:	f003 f9f7 	bl	8005c7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f005 fc68 	bl	800816a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028b0:	461a      	mov	r2, r3
 80028b2:	2308      	movs	r3, #8
 80028b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028cc:	461a      	mov	r2, r3
 80028ce:	2310      	movs	r3, #16
 80028d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028e8:	461a      	mov	r2, r3
 80028ea:	2340      	movs	r3, #64	@ 0x40
 80028ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d023      	beq.n	8002940 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028fa:	6a38      	ldr	r0, [r7, #32]
 80028fc:	f002 f9e4 	bl	8004cc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	3310      	adds	r3, #16
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	78db      	ldrb	r3, [r3, #3]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d108      	bne.n	800292e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2200      	movs	r2, #0
 8002920:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f005 fcab 	bl	8008284 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800293a:	461a      	mov	r2, r3
 800293c:	2302      	movs	r3, #2
 800293e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800294a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fcbb 	bl	80032c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	3301      	adds	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f af2e 	bne.w	80027c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 f8c2 	bl	8005af4 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002976:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800297a:	d122      	bne.n	80029c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029a2:	2100      	movs	r1, #0
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fea1 	bl	80036ec <HAL_PCDEx_LPM_Callback>
 80029aa:	e002      	b.n	80029b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f005 fc49 	bl	8008244 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80029c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 f894 	bl	8005af4 <USB_ReadInterrupts>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d6:	d112      	bne.n	80029fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d102      	bne.n	80029ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f005 fc05 	bl	80081f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029fc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 f876 	bl	8005af4 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a12:	f040 80b7 	bne.w	8002b84 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2110      	movs	r1, #16
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 f949 	bl	8004cc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a3a:	e046      	b.n	8002aca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a60:	0151      	lsls	r1, r2, #5
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	440a      	add	r2, r1
 8002a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a94:	0151      	lsls	r1, r2, #5
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	440a      	add	r2, r1
 8002a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002aa2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab4:	0151      	lsls	r1, r2, #5
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	440a      	add	r2, r1
 8002aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002abe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ac2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d3b2      	bcc.n	8002a3c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ae8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7bdb      	ldrb	r3, [r3, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b02:	f043 030b 	orr.w	r3, r3, #11
 8002b06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b18:	f043 030b 	orr.w	r3, r3, #11
 8002b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1e:	e015      	b.n	8002b4c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b32:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b36:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b46:	f043 030b 	orr.w	r3, r3, #11
 8002b4a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b5a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b5e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f003 f884 	bl	8005c7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f002 ffb3 	bl	8005af4 <USB_ReadInterrupts>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b98:	d123      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 f849 	bl	8005c36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 f906 	bl	8004dba <USB_GetDevSpeed>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681c      	ldr	r4, [r3, #0]
 8002bba:	f001 f9c7 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8002bbe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f001 fe0a 	bl	80047e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f005 faf4 	bl	80081ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 ff84 	bl	8005af4 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d10a      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f005 fad1 	bl	800819e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f002 0208 	and.w	r2, r2, #8
 8002c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 ff6f 	bl	8005af4 <USB_ReadInterrupts>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1c:	2b80      	cmp	r3, #128	@ 0x80
 8002c1e:	d123      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c30:	e014      	b.n	8002c5c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fb08 	bl	8003266 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	3301      	adds	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	791b      	ldrb	r3, [r3, #4]
 8002c60:	461a      	mov	r2, r3
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d3e4      	bcc.n	8002c32 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f002 ff41 	bl	8005af4 <USB_ReadInterrupts>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c7c:	d13c      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c7e:	2301      	movs	r3, #1
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c82:	e02b      	b.n	8002cdc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d115      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002caa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da12      	bge.n	8002cd6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3317      	adds	r3, #23
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fac8 	bl	8003266 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	3301      	adds	r3, #1
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	791b      	ldrb	r3, [r3, #4]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d3cd      	bcc.n	8002c84 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fef9 	bl	8005af4 <USB_ReadInterrupts>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d0c:	d156      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d0e:	2301      	movs	r3, #1
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d12:	e045      	b.n	8002da0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d12e      	bne.n	8002d9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da2b      	bge.n	8002d9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d121      	bne.n	8002d9a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d96:	6053      	str	r3, [r2, #4]
            break;
 8002d98:	e008      	b.n	8002dac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	791b      	ldrb	r3, [r3, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d3b3      	bcc.n	8002d14 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fe97 	bl	8005af4 <USB_ReadInterrupts>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd0:	d10a      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f005 fa68 	bl	80082a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 fe81 	bl	8005af4 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d115      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f005 fa58 	bl	80082c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	e000      	b.n	8002e28 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002e26:	bf00      	nop
    }
  }
}
 8002e28:	3734      	adds	r7, #52	@ 0x34
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}

08002e2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_PCD_SetAddress+0x1a>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e012      	b.n	8002e6e <HAL_PCD_SetAddress+0x40>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fde0 	bl	8005a24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	4608      	mov	r0, r1
 8002e80:	4611      	mov	r1, r2
 8002e82:	461a      	mov	r2, r3
 8002e84:	4603      	mov	r3, r0
 8002e86:	70fb      	strb	r3, [r7, #3]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	803b      	strh	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da0f      	bge.n	8002ebc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 020f 	and.w	r2, r3, #15
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	3310      	adds	r3, #16
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	705a      	strb	r2, [r3, #1]
 8002eba:	e00f      	b.n	8002edc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ee8:	883a      	ldrh	r2, [r7, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	78ba      	ldrb	r2, [r7, #2]
 8002ef2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f06:	78bb      	ldrb	r3, [r7, #2]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d102      	bne.n	8002f12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_PCD_EP_Open+0xaa>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e00e      	b.n	8002f3e <HAL_PCD_EP_Open+0xc8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68f9      	ldr	r1, [r7, #12]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 ff68 	bl	8004e04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da0f      	bge.n	8002f7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 020f 	and.w	r2, r3, #15
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	3310      	adds	r3, #16
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	705a      	strb	r2, [r3, #1]
 8002f78:	e00f      	b.n	8002f9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_PCD_EP_Close+0x6e>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e00e      	b.n	8002fd2 <HAL_PCD_EP_Close+0x8c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 ffa6 	bl	8004f14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2200      	movs	r2, #0
 8003014:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	b2da      	uxtb	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	799b      	ldrb	r3, [r3, #6]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d102      	bne.n	8003036 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	799b      	ldrb	r3, [r3, #6]
 800303e:	461a      	mov	r2, r3
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	f002 f843 	bl	80050cc <USB_EPStartXfer>

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	f003 020f 	and.w	r2, r3, #15
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	460b      	mov	r3, r1
 800308e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003090:	7afb      	ldrb	r3, [r7, #11]
 8003092:	f003 020f 	and.w	r2, r3, #15
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	3310      	adds	r3, #16
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	3304      	adds	r3, #4
 80030a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2200      	movs	r2, #0
 80030b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2201      	movs	r2, #1
 80030be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c0:	7afb      	ldrb	r3, [r7, #11]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	799b      	ldrb	r3, [r3, #6]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d102      	bne.n	80030da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	799b      	ldrb	r3, [r3, #6]
 80030e2:	461a      	mov	r2, r3
 80030e4:	6979      	ldr	r1, [r7, #20]
 80030e6:	f001 fff1 	bl	80050cc <USB_EPStartXfer>

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	7912      	ldrb	r2, [r2, #4]
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e04f      	b.n	80031b2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003116:	2b00      	cmp	r3, #0
 8003118:	da0f      	bge.n	800313a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	3310      	adds	r3, #16
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	3304      	adds	r3, #4
 8003130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	705a      	strb	r2, [r3, #1]
 8003138:	e00d      	b.n	8003156 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	b2da      	uxtb	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_PCD_EP_SetStall+0x82>
 8003172:	2302      	movs	r3, #2
 8003174:	e01d      	b.n	80031b2 <HAL_PCD_EP_SetStall+0xbe>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	4618      	mov	r0, r3
 8003186:	f002 fb79 	bl	800587c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7999      	ldrb	r1, [r3, #6]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031a2:	461a      	mov	r2, r3
 80031a4:	f002 fd6a 	bl	8005c7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	7912      	ldrb	r2, [r2, #4]
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e042      	b.n	800325e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da0f      	bge.n	8003200 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	3310      	adds	r3, #16
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	3304      	adds	r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	705a      	strb	r2, [r3, #1]
 80031fe:	e00f      	b.n	8003220 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 020f 	and.w	r2, r3, #15
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	3304      	adds	r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_PCD_EP_ClrStall+0x86>
 800323c:	2302      	movs	r3, #2
 800323e:	e00e      	b.n	800325e <HAL_PCD_EP_ClrStall+0xa4>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 fb82 	bl	8005958 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003276:	2b00      	cmp	r3, #0
 8003278:	da0c      	bge.n	8003294 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	3310      	adds	r3, #16
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	3304      	adds	r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e00c      	b.n	80032ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	f003 020f 	and.w	r2, r3, #15
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 f9a1 	bl	80055fc <USB_EPStopXfer>
 80032ba:	4603      	mov	r3, r0
 80032bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032be:	7afb      	ldrb	r3, [r7, #11]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	@ 0x28
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3310      	adds	r3, #16
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d901      	bls.n	8003300 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e06b      	b.n	80033d8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	429a      	cmp	r2, r3
 8003314:	d902      	bls.n	800331c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3303      	adds	r3, #3
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003324:	e02a      	b.n	800337c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	429a      	cmp	r2, r3
 800333a:	d902      	bls.n	8003342 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3303      	adds	r3, #3
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	68d9      	ldr	r1, [r3, #12]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4603      	mov	r3, r0
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f002 f9f6 	bl	8005750 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	441a      	add	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	429a      	cmp	r2, r3
 8003390:	d809      	bhi.n	80033a6 <PCD_WriteEmptyTxFifo+0xde>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800339a:	429a      	cmp	r2, r3
 800339c:	d203      	bcs.n	80033a6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1bf      	bne.n	8003326 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d811      	bhi.n	80033d6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2201      	movs	r2, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	6939      	ldr	r1, [r7, #16]
 80033ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033d2:	4013      	ands	r3, r2
 80033d4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	333c      	adds	r3, #60	@ 0x3c
 80033f8:	3304      	adds	r3, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	799b      	ldrb	r3, [r3, #6]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d17b      	bne.n	800350e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	4a61      	ldr	r2, [pc, #388]	@ (80035a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f240 80b9 	bls.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80b3 	beq.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	e0a7      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	2320      	movs	r3, #32
 8003466:	6093      	str	r3, [r2, #8]
 8003468:	e098      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 8093 	bne.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4a4b      	ldr	r2, [pc, #300]	@ (80035a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d90f      	bls.n	800349e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	e07e      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1a      	ldr	r2, [r3, #32]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	0159      	lsls	r1, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	440b      	add	r3, r1
 80034c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	1ad2      	subs	r2, r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034e8:	461a      	mov	r2, r3
 80034ea:	2101      	movs	r1, #1
 80034ec:	f002 fbc6 	bl	8005c7c <USB_EP0_OutStart>
 80034f0:	e006      	b.n	8003500 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	441a      	add	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f004 fe14 	bl	8008134 <HAL_PCD_DataOutStageCallback>
 800350c:	e046      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	4a26      	ldr	r2, [pc, #152]	@ (80035ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d124      	bne.n	8003560 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	e032      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800354c:	461a      	mov	r2, r3
 800354e:	2320      	movs	r3, #32
 8003550:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f004 fdeb 	bl	8008134 <HAL_PCD_DataOutStageCallback>
 800355e:	e01d      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d114      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003588:	461a      	mov	r2, r3
 800358a:	2100      	movs	r1, #0
 800358c:	f002 fb76 	bl	8005c7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f004 fdcc 	bl	8008134 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	4f54300a 	.word	0x4f54300a
 80035ac:	4f54310a 	.word	0x4f54310a

080035b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	333c      	adds	r3, #60	@ 0x3c
 80035c8:	3304      	adds	r3, #4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a15      	ldr	r2, [pc, #84]	@ (8003638 <PCD_EP_OutSetupPacket_int+0x88>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d90e      	bls.n	8003604 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003602:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f004 fd83 	bl	8008110 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a0a      	ldr	r2, [pc, #40]	@ (8003638 <PCD_EP_OutSetupPacket_int+0x88>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d90c      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x7c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	799b      	ldrb	r3, [r3, #6]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d108      	bne.n	800362c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003624:	461a      	mov	r2, r3
 8003626:	2101      	movs	r1, #1
 8003628:	f002 fb28 	bl	8005c7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	4f54300a 	.word	0x4f54300a

0800363c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
 8003648:	4613      	mov	r3, r2
 800364a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800365a:	883b      	ldrh	r3, [r7, #0]
 800365c:	0419      	lsls	r1, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	430a      	orrs	r2, r1
 8003666:	629a      	str	r2, [r3, #40]	@ 0x28
 8003668:	e028      	b.n	80036bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e00d      	b.n	800369a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	3340      	adds	r3, #64	@ 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	3301      	adds	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	3b01      	subs	r3, #1
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3ec      	bcc.n	800367e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036a4:	883b      	ldrh	r3, [r7, #0]
 80036a6:	0418      	lsls	r0, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4302      	orrs	r2, r0
 80036b4:	3340      	adds	r3, #64	@ 0x40
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e267      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d075      	beq.n	800380e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003722:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d00c      	beq.n	8003748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372e:	4b85      	ldr	r3, [pc, #532]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	2b08      	cmp	r3, #8
 8003738:	d112      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373a:	4b82      	ldr	r3, [pc, #520]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003746:	d10b      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	4b7e      	ldr	r3, [pc, #504]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d05b      	beq.n	800380c <HAL_RCC_OscConfig+0x108>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d157      	bne.n	800380c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e242      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x74>
 800376a:	4b76      	ldr	r3, [pc, #472]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a75      	ldr	r2, [pc, #468]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e01d      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x98>
 8003782:	4b70      	ldr	r3, [pc, #448]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6f      	ldr	r2, [pc, #444]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b6d      	ldr	r3, [pc, #436]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6c      	ldr	r2, [pc, #432]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 800379c:	4b69      	ldr	r3, [pc, #420]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a68      	ldr	r2, [pc, #416]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a65      	ldr	r2, [pc, #404]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fa00 	bl	8000bc0 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd f9fc 	bl	8000bc0 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	@ 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e207      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xc0>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd f9ec 	bl	8000bc0 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd f9e8 	bl	8000bc0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	@ 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1f3      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	4b51      	ldr	r3, [pc, #324]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0xe8>
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d063      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003826:	4b47      	ldr	r3, [pc, #284]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	2b08      	cmp	r3, #8
 8003830:	d11c      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b44      	ldr	r3, [pc, #272]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1c7      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b3b      	ldr	r3, [pc, #236]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4937      	ldr	r1, [pc, #220]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	e03a      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003874:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <HAL_RCC_OscConfig+0x244>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fd f9a1 	bl	8000bc0 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003882:	f7fd f99d 	bl	8000bc0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e1a8      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b28      	ldr	r3, [pc, #160]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4925      	ldr	r1, [pc, #148]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
 80038b4:	e015      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HAL_RCC_OscConfig+0x244>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd f980 	bl	8000bc0 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fd f97c 	bl	8000bc0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e187      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d036      	beq.n	800395c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b15      	ldr	r3, [pc, #84]	@ (800394c <HAL_RCC_OscConfig+0x248>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd f960 	bl	8000bc0 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003904:	f7fd f95c 	bl	8000bc0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e167      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_OscConfig+0x240>)
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x200>
 8003922:	e01b      	b.n	800395c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003924:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_RCC_OscConfig+0x248>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fd f949 	bl	8000bc0 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	e00e      	b.n	8003950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003932:	f7fd f945 	bl	8000bc0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d907      	bls.n	8003950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e150      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003944:	40023800 	.word	0x40023800
 8003948:	42470000 	.word	0x42470000
 800394c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b88      	ldr	r3, [pc, #544]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ea      	bne.n	8003932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8097 	beq.w	8003a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b81      	ldr	r3, [pc, #516]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	4a7c      	ldr	r2, [pc, #496]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	@ 0x40
 800398a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b77      	ldr	r3, [pc, #476]	@ (8003b78 <HAL_RCC_OscConfig+0x474>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d118      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a6:	4b74      	ldr	r3, [pc, #464]	@ (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a73      	ldr	r2, [pc, #460]	@ (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b2:	f7fd f905 	bl	8000bc0 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7fd f901 	bl	8000bc0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e10c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x2ea>
 80039e0:	4b64      	ldr	r3, [pc, #400]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e4:	4a63      	ldr	r2, [pc, #396]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x30c>
 80039f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a02:	4b5c      	ldr	r3, [pc, #368]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	4a5b      	ldr	r2, [pc, #364]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 8003a10:	4b58      	ldr	r3, [pc, #352]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	4a57      	ldr	r2, [pc, #348]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1c:	4b55      	ldr	r3, [pc, #340]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	4a54      	ldr	r2, [pc, #336]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd f8c6 	bl	8000bc0 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fd f8c2 	bl	8000bc0 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0cb      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4e:	4b49      	ldr	r3, [pc, #292]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0ee      	beq.n	8003a38 <HAL_RCC_OscConfig+0x334>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fd f8b0 	bl	8000bc0 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fd f8ac 	bl	8000bc0 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0b5      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ee      	bne.n	8003a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	4a38      	ldr	r2, [pc, #224]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a1 	beq.w	8003be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa2:	4b34      	ldr	r3, [pc, #208]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d05c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d141      	bne.n	8003b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b31      	ldr	r3, [pc, #196]	@ (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fd f880 	bl	8000bc0 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd f87c 	bl	8000bc0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e087      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	491b      	ldr	r1, [pc, #108]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fd f855 	bl	8000bc0 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fd f851 	bl	8000bc0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e05c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x416>
 8003b38:	e054      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd f83e 	bl	8000bc0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd f83a 	bl	8000bc0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e045      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x444>
 8003b66:	e03d      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e038      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b80:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x4ec>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d028      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d121      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d11a      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0cc      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b68      	ldr	r3, [pc, #416]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90c      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b65      	ldr	r3, [pc, #404]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a52      	ldr	r2, [pc, #328]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d044      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e067      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b37      	ldr	r3, [pc, #220]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4934      	ldr	r1, [pc, #208]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7fc ff6c 	bl	8000bc0 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fc ff68 	bl	8000bc0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e04f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b2b      	ldr	r3, [pc, #172]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d14:	4b25      	ldr	r3, [pc, #148]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d20c      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b22      	ldr	r3, [pc, #136]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b12      	ldr	r3, [pc, #72]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	490a      	ldr	r1, [pc, #40]	@ (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	@ (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fecc 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40023c00 	.word	0x40023c00
 8003db0:	40023800 	.word	0x40023800
 8003db4:	08008734 	.word	0x08008734
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	20000004 	.word	0x20000004

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b090      	sub	sp, #64	@ 0x40
 8003dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dcc:	2300      	movs	r3, #0
 8003dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd8:	4b59      	ldr	r3, [pc, #356]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d00d      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x40>
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	f200 80a1 	bhi.w	8003f2c <HAL_RCC_GetSysClockFreq+0x16c>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003df2:	e09b      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b53      	ldr	r3, [pc, #332]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003df8:	e09b      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dfa:	4b53      	ldr	r3, [pc, #332]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dfe:	e098      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e00:	4b4f      	ldr	r3, [pc, #316]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d028      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e16:	4b4a      	ldr	r3, [pc, #296]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4b47      	ldr	r3, [pc, #284]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e2c:	fb03 f201 	mul.w	r2, r3, r1
 8003e30:	2300      	movs	r3, #0
 8003e32:	fb00 f303 	mul.w	r3, r0, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	4a43      	ldr	r2, [pc, #268]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e40:	460a      	mov	r2, r1
 8003e42:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e46:	4413      	add	r3, r2
 8003e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	61fa      	str	r2, [r7, #28]
 8003e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e5a:	f7fc f9bd 	bl	80001d8 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4613      	mov	r3, r2
 8003e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e66:	e053      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e68:	4b35      	ldr	r3, [pc, #212]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	2200      	movs	r2, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	617a      	str	r2, [r7, #20]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e7a:	f04f 0b00 	mov.w	fp, #0
 8003e7e:	4652      	mov	r2, sl
 8003e80:	465b      	mov	r3, fp
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	0159      	lsls	r1, r3, #5
 8003e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e90:	0150      	lsls	r0, r2, #5
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	ebb2 080a 	subs.w	r8, r2, sl
 8003e9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eb2:	ebb2 0408 	subs.w	r4, r2, r8
 8003eb6:	eb63 0509 	sbc.w	r5, r3, r9
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	00eb      	lsls	r3, r5, #3
 8003ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec8:	00e2      	lsls	r2, r4, #3
 8003eca:	4614      	mov	r4, r2
 8003ecc:	461d      	mov	r5, r3
 8003ece:	eb14 030a 	adds.w	r3, r4, sl
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	eb45 030b 	adc.w	r3, r5, fp
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	028b      	lsls	r3, r1, #10
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	028a      	lsls	r2, r1, #10
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efa:	2200      	movs	r2, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	60fa      	str	r2, [r7, #12]
 8003f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f04:	f7fc f968 	bl	80001d8 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003f20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3740      	adds	r7, #64	@ 0x40
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	017d7840 	.word	0x017d7840

08003f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000000 	.word	0x20000000

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e041      	b.n	8003ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fc fd68 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 f992 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e03c      	b.n	8004096 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1e      	ldr	r2, [pc, #120]	@ (80040a4 <HAL_TIM_Base_Start+0xa0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d018      	beq.n	8004060 <HAL_TIM_Base_Start+0x5c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004036:	d013      	beq.n	8004060 <HAL_TIM_Base_Start+0x5c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1a      	ldr	r2, [pc, #104]	@ (80040a8 <HAL_TIM_Base_Start+0xa4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <HAL_TIM_Base_Start+0x5c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a19      	ldr	r2, [pc, #100]	@ (80040ac <HAL_TIM_Base_Start+0xa8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_TIM_Base_Start+0x5c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <HAL_TIM_Base_Start+0xac>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_TIM_Base_Start+0x5c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a16      	ldr	r2, [pc, #88]	@ (80040b4 <HAL_TIM_Base_Start+0xb0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d111      	bne.n	8004084 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b06      	cmp	r3, #6
 8004070:	d010      	beq.n	8004094 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004082:	e007      	b.n	8004094 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40000c00 	.word	0x40000c00
 80040b4:	40014000 	.word	0x40014000

080040b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_TIM_ConfigClockSource+0x1c>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e0b4      	b.n	800423e <HAL_TIM_ConfigClockSource+0x186>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410c:	d03e      	beq.n	800418c <HAL_TIM_ConfigClockSource+0xd4>
 800410e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004112:	f200 8087 	bhi.w	8004224 <HAL_TIM_ConfigClockSource+0x16c>
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800411a:	f000 8086 	beq.w	800422a <HAL_TIM_ConfigClockSource+0x172>
 800411e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004122:	d87f      	bhi.n	8004224 <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b70      	cmp	r3, #112	@ 0x70
 8004126:	d01a      	beq.n	800415e <HAL_TIM_ConfigClockSource+0xa6>
 8004128:	2b70      	cmp	r3, #112	@ 0x70
 800412a:	d87b      	bhi.n	8004224 <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b60      	cmp	r3, #96	@ 0x60
 800412e:	d050      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004130:	2b60      	cmp	r3, #96	@ 0x60
 8004132:	d877      	bhi.n	8004224 <HAL_TIM_ConfigClockSource+0x16c>
 8004134:	2b50      	cmp	r3, #80	@ 0x50
 8004136:	d03c      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004138:	2b50      	cmp	r3, #80	@ 0x50
 800413a:	d873      	bhi.n	8004224 <HAL_TIM_ConfigClockSource+0x16c>
 800413c:	2b40      	cmp	r3, #64	@ 0x40
 800413e:	d058      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004140:	2b40      	cmp	r3, #64	@ 0x40
 8004142:	d86f      	bhi.n	8004224 <HAL_TIM_ConfigClockSource+0x16c>
 8004144:	2b30      	cmp	r3, #48	@ 0x30
 8004146:	d064      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x15a>
 8004148:	2b30      	cmp	r3, #48	@ 0x30
 800414a:	d86b      	bhi.n	8004224 <HAL_TIM_ConfigClockSource+0x16c>
 800414c:	2b20      	cmp	r3, #32
 800414e:	d060      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x15a>
 8004150:	2b20      	cmp	r3, #32
 8004152:	d867      	bhi.n	8004224 <HAL_TIM_ConfigClockSource+0x16c>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05c      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x15a>
 8004158:	2b10      	cmp	r3, #16
 800415a:	d05a      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x15a>
 800415c:	e062      	b.n	8004224 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800416e:	f000 fa44 	bl	80045fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	609a      	str	r2, [r3, #8]
      break;
 800418a:	e04f      	b.n	800422c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800419c:	f000 fa2d 	bl	80045fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041ae:	609a      	str	r2, [r3, #8]
      break;
 80041b0:	e03c      	b.n	800422c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	461a      	mov	r2, r3
 80041c0:	f000 f9a1 	bl	8004506 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2150      	movs	r1, #80	@ 0x50
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f9fa 	bl	80045c4 <TIM_ITRx_SetConfig>
      break;
 80041d0:	e02c      	b.n	800422c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041de:	461a      	mov	r2, r3
 80041e0:	f000 f9c0 	bl	8004564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2160      	movs	r1, #96	@ 0x60
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f9ea 	bl	80045c4 <TIM_ITRx_SetConfig>
      break;
 80041f0:	e01c      	b.n	800422c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 f981 	bl	8004506 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2140      	movs	r1, #64	@ 0x40
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f9da 	bl	80045c4 <TIM_ITRx_SetConfig>
      break;
 8004210:	e00c      	b.n	800422c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f000 f9d1 	bl	80045c4 <TIM_ITRx_SetConfig>
      break;
 8004222:	e003      	b.n	800422c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e000      	b.n	800422c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800422a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_TIM_SlaveConfigSynchro+0x18>
 800425a:	2302      	movs	r3, #2
 800425c:	e031      	b.n	80042c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8b7 	bl	80043e4 <TIM_SlaveTimer_SetConfig>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e018      	b.n	80042c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800429e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042ae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3a      	ldr	r2, [pc, #232]	@ (80043c8 <TIM_Base_SetConfig+0xfc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00f      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a37      	ldr	r2, [pc, #220]	@ (80043cc <TIM_Base_SetConfig+0x100>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a36      	ldr	r2, [pc, #216]	@ (80043d0 <TIM_Base_SetConfig+0x104>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a35      	ldr	r2, [pc, #212]	@ (80043d4 <TIM_Base_SetConfig+0x108>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2b      	ldr	r2, [pc, #172]	@ (80043c8 <TIM_Base_SetConfig+0xfc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01b      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004324:	d017      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a28      	ldr	r2, [pc, #160]	@ (80043cc <TIM_Base_SetConfig+0x100>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a27      	ldr	r2, [pc, #156]	@ (80043d0 <TIM_Base_SetConfig+0x104>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00f      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a26      	ldr	r2, [pc, #152]	@ (80043d4 <TIM_Base_SetConfig+0x108>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a25      	ldr	r2, [pc, #148]	@ (80043d8 <TIM_Base_SetConfig+0x10c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a24      	ldr	r2, [pc, #144]	@ (80043dc <TIM_Base_SetConfig+0x110>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a23      	ldr	r2, [pc, #140]	@ (80043e0 <TIM_Base_SetConfig+0x114>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800435c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a0e      	ldr	r2, [pc, #56]	@ (80043c8 <TIM_Base_SetConfig+0xfc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d105      	bne.n	80043ba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f023 0201 	bic.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]
  }
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800

080043e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004400:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f023 0307 	bic.w	r3, r3, #7
 8004412:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b70      	cmp	r3, #112	@ 0x70
 800442c:	d01a      	beq.n	8004464 <TIM_SlaveTimer_SetConfig+0x80>
 800442e:	2b70      	cmp	r3, #112	@ 0x70
 8004430:	d860      	bhi.n	80044f4 <TIM_SlaveTimer_SetConfig+0x110>
 8004432:	2b60      	cmp	r3, #96	@ 0x60
 8004434:	d054      	beq.n	80044e0 <TIM_SlaveTimer_SetConfig+0xfc>
 8004436:	2b60      	cmp	r3, #96	@ 0x60
 8004438:	d85c      	bhi.n	80044f4 <TIM_SlaveTimer_SetConfig+0x110>
 800443a:	2b50      	cmp	r3, #80	@ 0x50
 800443c:	d046      	beq.n	80044cc <TIM_SlaveTimer_SetConfig+0xe8>
 800443e:	2b50      	cmp	r3, #80	@ 0x50
 8004440:	d858      	bhi.n	80044f4 <TIM_SlaveTimer_SetConfig+0x110>
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d019      	beq.n	800447a <TIM_SlaveTimer_SetConfig+0x96>
 8004446:	2b40      	cmp	r3, #64	@ 0x40
 8004448:	d854      	bhi.n	80044f4 <TIM_SlaveTimer_SetConfig+0x110>
 800444a:	2b30      	cmp	r3, #48	@ 0x30
 800444c:	d055      	beq.n	80044fa <TIM_SlaveTimer_SetConfig+0x116>
 800444e:	2b30      	cmp	r3, #48	@ 0x30
 8004450:	d850      	bhi.n	80044f4 <TIM_SlaveTimer_SetConfig+0x110>
 8004452:	2b20      	cmp	r3, #32
 8004454:	d051      	beq.n	80044fa <TIM_SlaveTimer_SetConfig+0x116>
 8004456:	2b20      	cmp	r3, #32
 8004458:	d84c      	bhi.n	80044f4 <TIM_SlaveTimer_SetConfig+0x110>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d04d      	beq.n	80044fa <TIM_SlaveTimer_SetConfig+0x116>
 800445e:	2b10      	cmp	r3, #16
 8004460:	d04b      	beq.n	80044fa <TIM_SlaveTimer_SetConfig+0x116>
 8004462:	e047      	b.n	80044f4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004474:	f000 f8c1 	bl	80045fa <TIM_ETR_SetConfig>
      break;
 8004478:	e040      	b.n	80044fc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b05      	cmp	r3, #5
 8004480:	d101      	bne.n	8004486 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e03b      	b.n	80044fe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
      break;
 80044ca:	e017      	b.n	80044fc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d8:	461a      	mov	r2, r3
 80044da:	f000 f814 	bl	8004506 <TIM_TI1_ConfigInputStage>
      break;
 80044de:	e00d      	b.n	80044fc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ec:	461a      	mov	r2, r3
 80044ee:	f000 f839 	bl	8004564 <TIM_TI2_ConfigInputStage>
      break;
 80044f2:	e003      	b.n	80044fc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
      break;
 80044f8:	e000      	b.n	80044fc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80044fa:	bf00      	nop
  }

  return status;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004506:	b480      	push	{r7}
 8004508:	b087      	sub	sp, #28
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f023 0201 	bic.w	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 030a 	bic.w	r3, r3, #10
 8004542:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	621a      	str	r2, [r3, #32]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f023 0210 	bic.w	r2, r3, #16
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800458e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	031b      	lsls	r3, r3, #12
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f043 0307 	orr.w	r3, r3, #7
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	609a      	str	r2, [r3, #8]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004614:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	431a      	orrs	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4313      	orrs	r3, r2
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	609a      	str	r2, [r3, #8]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e050      	b.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1c      	ldr	r2, [pc, #112]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a0:	d013      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a16      	ldr	r2, [pc, #88]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a15      	ldr	r2, [pc, #84]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a13      	ldr	r2, [pc, #76]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10c      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40014000 	.word	0x40014000

08004718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004718:	b084      	sub	sp, #16
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	f107 001c 	add.w	r0, r7, #28
 8004726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800472a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800472e:	2b01      	cmp	r3, #1
 8004730:	d123      	bne.n	800477a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800475a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f001 fae2 	bl	8005d38 <USB_CoreReset>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e01b      	b.n	80047b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f001 fad6 	bl	8005d38 <USB_CoreReset>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004790:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004794:	2b00      	cmp	r3, #0
 8004796:	d106      	bne.n	80047a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80047a4:	e005      	b.n	80047b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047b2:	7fbb      	ldrb	r3, [r7, #30]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d10b      	bne.n	80047d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f043 0206 	orr.w	r2, r3, #6
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f043 0220 	orr.w	r2, r3, #32
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047dc:	b004      	add	sp, #16
 80047de:	4770      	bx	lr

080047e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d165      	bne.n	80048c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4a41      	ldr	r2, [pc, #260]	@ (80048fc <USB_SetTurnaroundTime+0x11c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d906      	bls.n	800480a <USB_SetTurnaroundTime+0x2a>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4a40      	ldr	r2, [pc, #256]	@ (8004900 <USB_SetTurnaroundTime+0x120>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d202      	bcs.n	800480a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004804:	230f      	movs	r3, #15
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e062      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4a3c      	ldr	r2, [pc, #240]	@ (8004900 <USB_SetTurnaroundTime+0x120>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d306      	bcc.n	8004820 <USB_SetTurnaroundTime+0x40>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4a3b      	ldr	r2, [pc, #236]	@ (8004904 <USB_SetTurnaroundTime+0x124>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d202      	bcs.n	8004820 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800481a:	230e      	movs	r3, #14
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e057      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4a38      	ldr	r2, [pc, #224]	@ (8004904 <USB_SetTurnaroundTime+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d306      	bcc.n	8004836 <USB_SetTurnaroundTime+0x56>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4a37      	ldr	r2, [pc, #220]	@ (8004908 <USB_SetTurnaroundTime+0x128>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d202      	bcs.n	8004836 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004830:	230d      	movs	r3, #13
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e04c      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4a33      	ldr	r2, [pc, #204]	@ (8004908 <USB_SetTurnaroundTime+0x128>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d306      	bcc.n	800484c <USB_SetTurnaroundTime+0x6c>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4a32      	ldr	r2, [pc, #200]	@ (800490c <USB_SetTurnaroundTime+0x12c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d802      	bhi.n	800484c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004846:	230c      	movs	r3, #12
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e041      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4a2f      	ldr	r2, [pc, #188]	@ (800490c <USB_SetTurnaroundTime+0x12c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d906      	bls.n	8004862 <USB_SetTurnaroundTime+0x82>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a2e      	ldr	r2, [pc, #184]	@ (8004910 <USB_SetTurnaroundTime+0x130>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d802      	bhi.n	8004862 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800485c:	230b      	movs	r3, #11
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e036      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4a2a      	ldr	r2, [pc, #168]	@ (8004910 <USB_SetTurnaroundTime+0x130>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d906      	bls.n	8004878 <USB_SetTurnaroundTime+0x98>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4a29      	ldr	r2, [pc, #164]	@ (8004914 <USB_SetTurnaroundTime+0x134>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d802      	bhi.n	8004878 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004872:	230a      	movs	r3, #10
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e02b      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a26      	ldr	r2, [pc, #152]	@ (8004914 <USB_SetTurnaroundTime+0x134>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d906      	bls.n	800488e <USB_SetTurnaroundTime+0xae>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4a25      	ldr	r2, [pc, #148]	@ (8004918 <USB_SetTurnaroundTime+0x138>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d202      	bcs.n	800488e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004888:	2309      	movs	r3, #9
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e020      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4a21      	ldr	r2, [pc, #132]	@ (8004918 <USB_SetTurnaroundTime+0x138>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d306      	bcc.n	80048a4 <USB_SetTurnaroundTime+0xc4>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4a20      	ldr	r2, [pc, #128]	@ (800491c <USB_SetTurnaroundTime+0x13c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d802      	bhi.n	80048a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800489e:	2308      	movs	r3, #8
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e015      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4a1d      	ldr	r2, [pc, #116]	@ (800491c <USB_SetTurnaroundTime+0x13c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d906      	bls.n	80048ba <USB_SetTurnaroundTime+0xda>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004920 <USB_SetTurnaroundTime+0x140>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d202      	bcs.n	80048ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048b4:	2307      	movs	r3, #7
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e00a      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048ba:	2306      	movs	r3, #6
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e007      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048c6:	2309      	movs	r3, #9
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	e001      	b.n	80048d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048cc:	2309      	movs	r3, #9
 80048ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	029b      	lsls	r3, r3, #10
 80048e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	00d8acbf 	.word	0x00d8acbf
 8004900:	00e4e1c0 	.word	0x00e4e1c0
 8004904:	00f42400 	.word	0x00f42400
 8004908:	01067380 	.word	0x01067380
 800490c:	011a499f 	.word	0x011a499f
 8004910:	01312cff 	.word	0x01312cff
 8004914:	014ca43f 	.word	0x014ca43f
 8004918:	016e3600 	.word	0x016e3600
 800491c:	01a6ab1f 	.word	0x01a6ab1f
 8004920:	01e84800 	.word	0x01e84800

08004924 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 0201 	bic.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d115      	bne.n	80049b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004996:	200a      	movs	r0, #10
 8004998:	f7fc f91e 	bl	8000bd8 <HAL_Delay>
      ms += 10U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	330a      	adds	r3, #10
 80049a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f001 f939 	bl	8005c1a <USB_GetMode>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d01e      	beq.n	80049ec <USB_SetCurrentMode+0x84>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80049b2:	d9f0      	bls.n	8004996 <USB_SetCurrentMode+0x2e>
 80049b4:	e01a      	b.n	80049ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d115      	bne.n	80049e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049c8:	200a      	movs	r0, #10
 80049ca:	f7fc f905 	bl	8000bd8 <HAL_Delay>
      ms += 10U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	330a      	adds	r3, #10
 80049d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f001 f920 	bl	8005c1a <USB_GetMode>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <USB_SetCurrentMode+0x84>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80049e4:	d9f0      	bls.n	80049c8 <USB_SetCurrentMode+0x60>
 80049e6:	e001      	b.n	80049ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e005      	b.n	80049f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80049f0:	d101      	bne.n	80049f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	e009      	b.n	8004a34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3340      	adds	r3, #64	@ 0x40
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3301      	adds	r3, #1
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b0e      	cmp	r3, #14
 8004a38:	d9f2      	bls.n	8004a20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11c      	bne.n	8004a7c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a50:	f043 0302 	orr.w	r3, r3, #2
 8004a54:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a7a:	e00b      	b.n	8004a94 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a80:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aa0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10d      	bne.n	8004ac4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f968 	bl	8004d88 <USB_SetDevSpeed>
 8004ab8:	e008      	b.n	8004acc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004aba:	2101      	movs	r1, #1
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f963 	bl	8004d88 <USB_SetDevSpeed>
 8004ac2:	e003      	b.n	8004acc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f95e 	bl	8004d88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004acc:	2110      	movs	r1, #16
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8fa 	bl	8004cc8 <USB_FlushTxFifo>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f924 	bl	8004d2c <USB_FlushRxFifo>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af4:	461a      	mov	r2, r3
 8004af6:	2300      	movs	r3, #0
 8004af8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b00:	461a      	mov	r2, r3
 8004b02:	2300      	movs	r3, #0
 8004b04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e043      	b.n	8004ba0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b2e:	d118      	bne.n	8004b62 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b42:	461a      	mov	r2, r3
 8004b44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e013      	b.n	8004b74 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e008      	b.n	8004b74 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b80:	461a      	mov	r2, r3
 8004b82:	2300      	movs	r3, #0
 8004b84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b92:	461a      	mov	r2, r3
 8004b94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d3b5      	bcc.n	8004b18 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	e043      	b.n	8004c3a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc8:	d118      	bne.n	8004bfc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e013      	b.n	8004c0e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e008      	b.n	8004c0e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	3301      	adds	r3, #1
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c3e:	461a      	mov	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d3b5      	bcc.n	8004bb2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f043 0210 	orr.w	r2, r3, #16
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <USB_DevInit+0x2c4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f043 0208 	orr.w	r2, r3, #8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc0:	b004      	add	sp, #16
 8004cc2:	4770      	bx	lr
 8004cc4:	803c3800 	.word	0x803c3800

08004cc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ce2:	d901      	bls.n	8004ce8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e01b      	b.n	8004d20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	daf2      	bge.n	8004cd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	019b      	lsls	r3, r3, #6
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d0c:	d901      	bls.n	8004d12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e006      	b.n	8004d20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d0f0      	beq.n	8004d00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d44:	d901      	bls.n	8004d4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e018      	b.n	8004d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	daf2      	bge.n	8004d38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d68:	d901      	bls.n	8004d6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e006      	b.n	8004d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d0f0      	beq.n	8004d5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0306 	and.w	r3, r3, #6
 8004dd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
 8004dde:	e00a      	b.n	8004df6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d002      	beq.n	8004dec <USB_GetDevSpeed+0x32>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b06      	cmp	r3, #6
 8004dea:	d102      	bne.n	8004df2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004dec:	2302      	movs	r3, #2
 8004dee:	75fb      	strb	r3, [r7, #23]
 8004df0:	e001      	b.n	8004df6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004df2:	230f      	movs	r3, #15
 8004df4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d13a      	bne.n	8004e96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	2101      	movs	r1, #1
 8004e32:	fa01 f303 	lsl.w	r3, r1, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d155      	bne.n	8004f04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	791b      	ldrb	r3, [r3, #4]
 8004e72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	059b      	lsls	r3, r3, #22
 8004e7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e036      	b.n	8004f04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	68f9      	ldr	r1, [r7, #12]
 8004eb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11a      	bne.n	8004f04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	791b      	ldrb	r3, [r3, #4]
 8004ee8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eea:	430b      	orrs	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	785b      	ldrb	r3, [r3, #1]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d161      	bne.n	8004ff4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f46:	d11f      	bne.n	8004f88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	2101      	movs	r1, #1
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fa8:	4013      	ands	r3, r2
 8004faa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	68f9      	ldr	r1, [r7, #12]
 8004fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	0159      	lsls	r1, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	440b      	add	r3, r1
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fea:	4619      	mov	r1, r3
 8004fec:	4b35      	ldr	r3, [pc, #212]	@ (80050c4 <USB_DeactivateEndpoint+0x1b0>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
 8004ff2:	e060      	b.n	80050b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005006:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800500a:	d11f      	bne.n	800504c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005026:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800502a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005046:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800504a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	2101      	movs	r1, #1
 800505e:	fa01 f303 	lsl.w	r3, r1, r3
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	43db      	mvns	r3, r3
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800506c:	4013      	ands	r3, r2
 800506e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	2101      	movs	r1, #1
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	43db      	mvns	r3, r3
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005090:	4013      	ands	r3, r2
 8005092:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0159      	lsls	r1, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	440b      	add	r3, r1
 80050aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ae:	4619      	mov	r1, r3
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <USB_DeactivateEndpoint+0x1b4>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	ec337800 	.word	0xec337800
 80050c8:	eff37800 	.word	0xeff37800

080050cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	@ 0x28
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	f040 817a 	bne.w	80053e2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d132      	bne.n	800515c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005110:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005114:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005118:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005134:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005154:	0cdb      	lsrs	r3, r3, #19
 8005156:	04db      	lsls	r3, r3, #19
 8005158:	6113      	str	r3, [r2, #16]
 800515a:	e092      	b.n	8005282 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005176:	0cdb      	lsrs	r3, r3, #19
 8005178:	04db      	lsls	r3, r3, #19
 800517a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005196:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800519a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800519e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d11a      	bne.n	80051dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d903      	bls.n	80051ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051d8:	6113      	str	r3, [r2, #16]
 80051da:	e01b      	b.n	8005214 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6919      	ldr	r1, [r3, #16]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	440b      	add	r3, r1
 80051f4:	1e59      	subs	r1, r3, #1
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80051fe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005200:	4ba2      	ldr	r3, [pc, #648]	@ (800548c <USB_EPStartXfer+0x3c0>)
 8005202:	400b      	ands	r3, r1
 8005204:	69b9      	ldr	r1, [r7, #24]
 8005206:	0148      	lsls	r0, r1, #5
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	4401      	add	r1, r0
 800520c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005210:	4313      	orrs	r3, r2
 8005212:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800522a:	69b9      	ldr	r1, [r7, #24]
 800522c:	0148      	lsls	r0, r1, #5
 800522e:	69f9      	ldr	r1, [r7, #28]
 8005230:	4401      	add	r1, r0
 8005232:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005236:	4313      	orrs	r3, r2
 8005238:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	791b      	ldrb	r3, [r3, #4]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d11f      	bne.n	8005282 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800525c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005260:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800527c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005280:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d14b      	bne.n	8005320 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529c:	461a      	mov	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	791b      	ldrb	r3, [r3, #4]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d128      	bne.n	80052fe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d110      	bne.n	80052de <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	e00f      	b.n	80052fe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005318:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e165      	b.n	80055ec <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800533a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800533e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	791b      	ldrb	r3, [r3, #4]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d015      	beq.n	8005374 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 814d 	beq.w	80055ec <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	2101      	movs	r1, #1
 8005364:	fa01 f303 	lsl.w	r3, r1, r3
 8005368:	69f9      	ldr	r1, [r7, #28]
 800536a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800536e:	4313      	orrs	r3, r2
 8005370:	634b      	str	r3, [r1, #52]	@ 0x34
 8005372:	e13b      	b.n	80055ec <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d110      	bne.n	80053a6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e00f      	b.n	80053c6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	68d9      	ldr	r1, [r3, #12]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	b298      	uxth	r0, r3
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	4603      	mov	r3, r0
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f9b8 	bl	8005750 <USB_WritePacket>
 80053e0:	e104      	b.n	80055ec <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053fc:	0cdb      	lsrs	r3, r3, #19
 80053fe:	04db      	lsls	r3, r3, #19
 8005400:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800541c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005420:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005424:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d131      	bne.n	8005490 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800545a:	69b9      	ldr	r1, [r7, #24]
 800545c:	0148      	lsls	r0, r1, #5
 800545e:	69f9      	ldr	r1, [r7, #28]
 8005460:	4401      	add	r1, r0
 8005462:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005466:	4313      	orrs	r3, r2
 8005468:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005484:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005488:	6113      	str	r3, [r2, #16]
 800548a:	e061      	b.n	8005550 <USB_EPStartXfer+0x484>
 800548c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d123      	bne.n	80054e0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ae:	69b9      	ldr	r1, [r7, #24]
 80054b0:	0148      	lsls	r0, r1, #5
 80054b2:	69f9      	ldr	r1, [r7, #28]
 80054b4:	4401      	add	r1, r0
 80054b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054dc:	6113      	str	r3, [r2, #16]
 80054de:	e037      	b.n	8005550 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	1e5a      	subs	r2, r3, #1
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	8afa      	ldrh	r2, [r7, #22]
 80054fc:	fb03 f202 	mul.w	r2, r3, r2
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	8afb      	ldrh	r3, [r7, #22]
 8005514:	04d9      	lsls	r1, r3, #19
 8005516:	4b38      	ldr	r3, [pc, #224]	@ (80055f8 <USB_EPStartXfer+0x52c>)
 8005518:	400b      	ands	r3, r1
 800551a:	69b9      	ldr	r1, [r7, #24]
 800551c:	0148      	lsls	r0, r1, #5
 800551e:	69f9      	ldr	r1, [r7, #28]
 8005520:	4401      	add	r1, r0
 8005522:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005526:	4313      	orrs	r3, r2
 8005528:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005540:	69b9      	ldr	r1, [r7, #24]
 8005542:	0148      	lsls	r0, r1, #5
 8005544:	69f9      	ldr	r1, [r7, #28]
 8005546:	4401      	add	r1, r0
 8005548:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800554c:	4313      	orrs	r3, r2
 800554e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10d      	bne.n	8005572 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68d9      	ldr	r1, [r3, #12]
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556e:	460a      	mov	r2, r1
 8005570:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	791b      	ldrb	r3, [r3, #4]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d128      	bne.n	80055cc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d110      	bne.n	80055ac <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e00f      	b.n	80055cc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	1ff80000 	.word	0x1ff80000

080055fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d14a      	bne.n	80056b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800562e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005632:	f040 8086 	bne.w	8005742 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005654:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005658:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800567c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f242 7210 	movw	r2, #10000	@ 0x2710
 800568a:	4293      	cmp	r3, r2
 800568c:	d902      	bls.n	8005694 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
          break;
 8005692:	e056      	b.n	8005742 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ac:	d0e7      	beq.n	800567e <USB_EPStopXfer+0x82>
 80056ae:	e048      	b.n	8005742 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056c8:	d13b      	bne.n	8005742 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005710:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800571e:	4293      	cmp	r3, r2
 8005720:	d902      	bls.n	8005728 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
          break;
 8005726:	e00c      	b.n	8005742 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800573c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005740:	d0e7      	beq.n	8005712 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	@ 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	460b      	mov	r3, r1
 8005760:	71fb      	strb	r3, [r7, #7]
 8005762:	4613      	mov	r3, r2
 8005764:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800576e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d123      	bne.n	80057be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005776:	88bb      	ldrh	r3, [r7, #4]
 8005778:	3303      	adds	r3, #3
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	e018      	b.n	80057b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	031a      	lsls	r2, r3, #12
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	4413      	add	r3, r2
 800578c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005790:	461a      	mov	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3e2      	bcc.n	8005784 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3724      	adds	r7, #36	@ 0x24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b08b      	sub	sp, #44	@ 0x2c
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	e014      	b.n	8005822 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	601a      	str	r2, [r3, #0]
    pDest++;
 8005804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005806:	3301      	adds	r3, #1
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	3301      	adds	r3, #1
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	3301      	adds	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	3301      	adds	r3, #1
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	3301      	adds	r3, #1
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	429a      	cmp	r2, r3
 8005828:	d3e6      	bcc.n	80057f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800582a:	8bfb      	ldrh	r3, [r7, #30]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01e      	beq.n	800586e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800583a:	461a      	mov	r2, r3
 800583c:	f107 0310 	add.w	r3, r7, #16
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	b2da      	uxtb	r2, r3
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	701a      	strb	r2, [r3, #0]
      i++;
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	3301      	adds	r3, #1
 800585a:	623b      	str	r3, [r7, #32]
      pDest++;
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	3301      	adds	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005862:	8bfb      	ldrh	r3, [r7, #30]
 8005864:	3b01      	subs	r3, #1
 8005866:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005868:	8bfb      	ldrh	r3, [r7, #30]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ea      	bne.n	8005844 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005870:	4618      	mov	r0, r3
 8005872:	372c      	adds	r7, #44	@ 0x2c
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d12c      	bne.n	80058f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db12      	blt.n	80058d0 <USB_EPSetStall+0x54>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00f      	beq.n	80058d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e02b      	b.n	800594a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	db12      	blt.n	800592a <USB_EPSetStall+0xae>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00f      	beq.n	800592a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005924:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005928:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005944:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005948:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d128      	bne.n	80059c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800598e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005992:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	791b      	ldrb	r3, [r3, #4]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d003      	beq.n	80059a4 <USB_EPClearStall+0x4c>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	791b      	ldrb	r3, [r3, #4]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d138      	bne.n	8005a16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	e027      	b.n	8005a16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	791b      	ldrb	r3, [r3, #4]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d003      	beq.n	80059f6 <USB_EPClearStall+0x9e>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	791b      	ldrb	r3, [r3, #4]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d10f      	bne.n	8005a16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a9e:	f023 0302 	bic.w	r3, r3, #2
 8005aa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	0c1b      	lsrs	r3, r3, #16
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	b29b      	uxth	r3, r3
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4013      	ands	r3, r2
 8005bae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	fa22 f303 	lsr.w	r3, r2, r3
 8005bee:	01db      	lsls	r3, r3, #7
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0301 	and.w	r3, r3, #1
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005c54:	f023 0307 	bic.w	r3, r3, #7
 8005c58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	460b      	mov	r3, r1
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	333c      	adds	r3, #60	@ 0x3c
 8005c92:	3304      	adds	r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4a26      	ldr	r2, [pc, #152]	@ (8005d34 <USB_EP0_OutStart+0xb8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d90a      	bls.n	8005cb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb0:	d101      	bne.n	8005cb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e037      	b.n	8005d26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce4:	f043 0318 	orr.w	r3, r3, #24
 8005ce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005cfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d10f      	bne.n	8005d24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	4f54300a 	.word	0x4f54300a

08005d38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d50:	d901      	bls.n	8005d56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e01b      	b.n	8005d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	daf2      	bge.n	8005d44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f043 0201 	orr.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d7a:	d901      	bls.n	8005d80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e006      	b.n	8005d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d0f0      	beq.n	8005d6e <USB_CoreReset+0x36>

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005da8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005dac:	f002 fc22 	bl	80085f4 <USBD_static_malloc>
 8005db0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	32b0      	adds	r2, #176	@ 0xb0
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e0d4      	b.n	8005f76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dcc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f002 fc52 	bl	800867c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32b0      	adds	r2, #176	@ 0xb0
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	32b0      	adds	r2, #176	@ 0xb0
 8005df2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7c1b      	ldrb	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d138      	bne.n	8005e76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e04:	4b5e      	ldr	r3, [pc, #376]	@ (8005f80 <USBD_CDC_Init+0x1e4>)
 8005e06:	7819      	ldrb	r1, [r3, #0]
 8005e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f002 facd 	bl	80083ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e14:	4b5a      	ldr	r3, [pc, #360]	@ (8005f80 <USBD_CDC_Init+0x1e4>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	3324      	adds	r3, #36	@ 0x24
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e2e:	4b55      	ldr	r3, [pc, #340]	@ (8005f84 <USBD_CDC_Init+0x1e8>)
 8005e30:	7819      	ldrb	r1, [r3, #0]
 8005e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e36:	2202      	movs	r2, #2
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f002 fab8 	bl	80083ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e3e:	4b51      	ldr	r3, [pc, #324]	@ (8005f84 <USBD_CDC_Init+0x1e8>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	f003 020f 	and.w	r2, r3, #15
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e56:	2201      	movs	r2, #1
 8005e58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f88 <USBD_CDC_Init+0x1ec>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f003 020f 	and.w	r2, r3, #15
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	3326      	adds	r3, #38	@ 0x26
 8005e70:	2210      	movs	r2, #16
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e035      	b.n	8005ee2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e76:	4b42      	ldr	r3, [pc, #264]	@ (8005f80 <USBD_CDC_Init+0x1e4>)
 8005e78:	7819      	ldrb	r1, [r3, #0]
 8005e7a:	2340      	movs	r3, #64	@ 0x40
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f002 fa95 	bl	80083ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e84:	4b3e      	ldr	r3, [pc, #248]	@ (8005f80 <USBD_CDC_Init+0x1e4>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f003 020f 	and.w	r2, r3, #15
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	3324      	adds	r3, #36	@ 0x24
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e9e:	4b39      	ldr	r3, [pc, #228]	@ (8005f84 <USBD_CDC_Init+0x1e8>)
 8005ea0:	7819      	ldrb	r1, [r3, #0]
 8005ea2:	2340      	movs	r3, #64	@ 0x40
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f002 fa81 	bl	80083ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005eac:	4b35      	ldr	r3, [pc, #212]	@ (8005f84 <USBD_CDC_Init+0x1e8>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f003 020f 	and.w	r2, r3, #15
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8005f88 <USBD_CDC_Init+0x1ec>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	3326      	adds	r3, #38	@ 0x26
 8005ede:	2210      	movs	r2, #16
 8005ee0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ee2:	4b29      	ldr	r3, [pc, #164]	@ (8005f88 <USBD_CDC_Init+0x1ec>)
 8005ee4:	7819      	ldrb	r1, [r3, #0]
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	2203      	movs	r2, #3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f002 fa5f 	bl	80083ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ef0:	4b25      	ldr	r3, [pc, #148]	@ (8005f88 <USBD_CDC_Init+0x1ec>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	f003 020f 	and.w	r2, r3, #15
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	3324      	adds	r3, #36	@ 0x24
 8005f06:	2201      	movs	r2, #1
 8005f08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	33b0      	adds	r3, #176	@ 0xb0
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f40:	2302      	movs	r3, #2
 8005f42:	e018      	b.n	8005f76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	7c1b      	ldrb	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <USBD_CDC_Init+0x1e8>)
 8005f4e:	7819      	ldrb	r1, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f002 fb16 	bl	800858c <USBD_LL_PrepareReceive>
 8005f60:	e008      	b.n	8005f74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f62:	4b08      	ldr	r3, [pc, #32]	@ (8005f84 <USBD_CDC_Init+0x1e8>)
 8005f64:	7819      	ldrb	r1, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f6c:	2340      	movs	r3, #64	@ 0x40
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f002 fb0c 	bl	800858c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000093 	.word	0x20000093
 8005f84:	20000094 	.word	0x20000094
 8005f88:	20000095 	.word	0x20000095

08005f8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f98:	4b3a      	ldr	r3, [pc, #232]	@ (8006084 <USBD_CDC_DeInit+0xf8>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f002 fa2b 	bl	80083fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005fa4:	4b37      	ldr	r3, [pc, #220]	@ (8006084 <USBD_CDC_DeInit+0xf8>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f003 020f 	and.w	r2, r3, #15
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	3324      	adds	r3, #36	@ 0x24
 8005fba:	2200      	movs	r2, #0
 8005fbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fbe:	4b32      	ldr	r3, [pc, #200]	@ (8006088 <USBD_CDC_DeInit+0xfc>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f002 fa18 	bl	80083fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fca:	4b2f      	ldr	r3, [pc, #188]	@ (8006088 <USBD_CDC_DeInit+0xfc>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	f003 020f 	and.w	r2, r3, #15
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fe6:	4b29      	ldr	r3, [pc, #164]	@ (800608c <USBD_CDC_DeInit+0x100>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f002 fa04 	bl	80083fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ff2:	4b26      	ldr	r3, [pc, #152]	@ (800608c <USBD_CDC_DeInit+0x100>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f003 020f 	and.w	r2, r3, #15
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	3324      	adds	r3, #36	@ 0x24
 8006008:	2200      	movs	r2, #0
 800600a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800600c:	4b1f      	ldr	r3, [pc, #124]	@ (800608c <USBD_CDC_DeInit+0x100>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	3326      	adds	r3, #38	@ 0x26
 8006022:	2200      	movs	r2, #0
 8006024:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	32b0      	adds	r2, #176	@ 0xb0
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01f      	beq.n	8006078 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	33b0      	adds	r3, #176	@ 0xb0
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	32b0      	adds	r2, #176	@ 0xb0
 8006056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605a:	4618      	mov	r0, r3
 800605c:	f002 fad8 	bl	8008610 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	32b0      	adds	r2, #176	@ 0xb0
 800606a:	2100      	movs	r1, #0
 800606c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000093 	.word	0x20000093
 8006088:	20000094 	.word	0x20000094
 800608c:	20000095 	.word	0x20000095

08006090 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	32b0      	adds	r2, #176	@ 0xb0
 80060a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060bc:	2303      	movs	r3, #3
 80060be:	e0bf      	b.n	8006240 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d050      	beq.n	800616e <USBD_CDC_Setup+0xde>
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	f040 80af 	bne.w	8006230 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	88db      	ldrh	r3, [r3, #6]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03a      	beq.n	8006150 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da1b      	bge.n	800611c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	33b0      	adds	r3, #176	@ 0xb0
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	88d2      	ldrh	r2, [r2, #6]
 8006100:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	88db      	ldrh	r3, [r3, #6]
 8006106:	2b07      	cmp	r3, #7
 8006108:	bf28      	it	cs
 800610a:	2307      	movcs	r3, #7
 800610c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	89fa      	ldrh	r2, [r7, #14]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 fd47 	bl	8007ba8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800611a:	e090      	b.n	800623e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	785a      	ldrb	r2, [r3, #1]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	88db      	ldrh	r3, [r3, #6]
 800612a:	2b3f      	cmp	r3, #63	@ 0x3f
 800612c:	d803      	bhi.n	8006136 <USBD_CDC_Setup+0xa6>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	88db      	ldrh	r3, [r3, #6]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	e000      	b.n	8006138 <USBD_CDC_Setup+0xa8>
 8006136:	2240      	movs	r2, #64	@ 0x40
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800613e:	6939      	ldr	r1, [r7, #16]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006146:	461a      	mov	r2, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fd59 	bl	8007c00 <USBD_CtlPrepareRx>
      break;
 800614e:	e076      	b.n	800623e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	33b0      	adds	r3, #176	@ 0xb0
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	7850      	ldrb	r0, [r2, #1]
 8006166:	2200      	movs	r2, #0
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	4798      	blx	r3
      break;
 800616c:	e067      	b.n	800623e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	2b0b      	cmp	r3, #11
 8006174:	d851      	bhi.n	800621a <USBD_CDC_Setup+0x18a>
 8006176:	a201      	add	r2, pc, #4	@ (adr r2, 800617c <USBD_CDC_Setup+0xec>)
 8006178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617c:	080061ad 	.word	0x080061ad
 8006180:	08006229 	.word	0x08006229
 8006184:	0800621b 	.word	0x0800621b
 8006188:	0800621b 	.word	0x0800621b
 800618c:	0800621b 	.word	0x0800621b
 8006190:	0800621b 	.word	0x0800621b
 8006194:	0800621b 	.word	0x0800621b
 8006198:	0800621b 	.word	0x0800621b
 800619c:	0800621b 	.word	0x0800621b
 80061a0:	0800621b 	.word	0x0800621b
 80061a4:	080061d7 	.word	0x080061d7
 80061a8:	08006201 	.word	0x08006201
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d107      	bne.n	80061c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061b8:	f107 030a 	add.w	r3, r7, #10
 80061bc:	2202      	movs	r2, #2
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fcf1 	bl	8007ba8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061c6:	e032      	b.n	800622e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fc7b 	bl	8007ac6 <USBD_CtlError>
            ret = USBD_FAIL;
 80061d0:	2303      	movs	r3, #3
 80061d2:	75fb      	strb	r3, [r7, #23]
          break;
 80061d4:	e02b      	b.n	800622e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d107      	bne.n	80061f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061e2:	f107 030d 	add.w	r3, r7, #13
 80061e6:	2201      	movs	r2, #1
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 fcdc 	bl	8007ba8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061f0:	e01d      	b.n	800622e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fc66 	bl	8007ac6 <USBD_CtlError>
            ret = USBD_FAIL;
 80061fa:	2303      	movs	r3, #3
 80061fc:	75fb      	strb	r3, [r7, #23]
          break;
 80061fe:	e016      	b.n	800622e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b03      	cmp	r3, #3
 800620a:	d00f      	beq.n	800622c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fc59 	bl	8007ac6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006214:	2303      	movs	r3, #3
 8006216:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006218:	e008      	b.n	800622c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fc52 	bl	8007ac6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006222:	2303      	movs	r3, #3
 8006224:	75fb      	strb	r3, [r7, #23]
          break;
 8006226:	e002      	b.n	800622e <USBD_CDC_Setup+0x19e>
          break;
 8006228:	bf00      	nop
 800622a:	e008      	b.n	800623e <USBD_CDC_Setup+0x1ae>
          break;
 800622c:	bf00      	nop
      }
      break;
 800622e:	e006      	b.n	800623e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fc47 	bl	8007ac6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	75fb      	strb	r3, [r7, #23]
      break;
 800623c:	bf00      	nop
  }

  return (uint8_t)ret;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800625a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	32b0      	adds	r2, #176	@ 0xb0
 8006266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800626e:	2303      	movs	r3, #3
 8006270:	e065      	b.n	800633e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	32b0      	adds	r2, #176	@ 0xb0
 800627c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006280:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	3318      	adds	r3, #24
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d02f      	beq.n	80062fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	f003 020f 	and.w	r2, r3, #15
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	3318      	adds	r3, #24
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	f003 010f 	and.w	r1, r3, #15
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	460b      	mov	r3, r1
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	440b      	add	r3, r1
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4403      	add	r3, r0
 80062c4:	331c      	adds	r3, #28
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d112      	bne.n	80062fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	3318      	adds	r3, #24
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062ee:	78f9      	ldrb	r1, [r7, #3]
 80062f0:	2300      	movs	r3, #0
 80062f2:	2200      	movs	r2, #0
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f002 f928 	bl	800854a <USBD_LL_Transmit>
 80062fa:	e01f      	b.n	800633c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	33b0      	adds	r3, #176	@ 0xb0
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d010      	beq.n	800633c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	33b0      	adds	r3, #176	@ 0xb0
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006338:	78fa      	ldrb	r2, [r7, #3]
 800633a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	32b0      	adds	r2, #176	@ 0xb0
 800635c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	32b0      	adds	r2, #176	@ 0xb0
 800636c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006374:	2303      	movs	r3, #3
 8006376:	e01a      	b.n	80063ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f002 f926 	bl	80085ce <USBD_LL_GetRxDataSize>
 8006382:	4602      	mov	r2, r0
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	33b0      	adds	r3, #176	@ 0xb0
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80063a8:	4611      	mov	r1, r2
 80063aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	32b0      	adds	r2, #176	@ 0xb0
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e024      	b.n	8006422 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	33b0      	adds	r3, #176	@ 0xb0
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d019      	beq.n	8006420 <USBD_CDC_EP0_RxReady+0x6a>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80063f2:	2bff      	cmp	r3, #255	@ 0xff
 80063f4:	d014      	beq.n	8006420 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	33b0      	adds	r3, #176	@ 0xb0
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800640e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006416:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	22ff      	movs	r2, #255	@ 0xff
 800641c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006434:	2182      	movs	r1, #130	@ 0x82
 8006436:	4818      	ldr	r0, [pc, #96]	@ (8006498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006438:	f000 fd0f 	bl	8006e5a <USBD_GetEpDesc>
 800643c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800643e:	2101      	movs	r1, #1
 8006440:	4815      	ldr	r0, [pc, #84]	@ (8006498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006442:	f000 fd0a 	bl	8006e5a <USBD_GetEpDesc>
 8006446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006448:	2181      	movs	r1, #129	@ 0x81
 800644a:	4813      	ldr	r0, [pc, #76]	@ (8006498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800644c:	f000 fd05 	bl	8006e5a <USBD_GetEpDesc>
 8006450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2210      	movs	r2, #16
 800645c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d006      	beq.n	8006472 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2200      	movs	r2, #0
 8006468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800646c:	711a      	strb	r2, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d006      	beq.n	8006486 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006480:	711a      	strb	r2, [r3, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2243      	movs	r2, #67	@ 0x43
 800648a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800648c:	4b02      	ldr	r3, [pc, #8]	@ (8006498 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000050 	.word	0x20000050

0800649c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064a4:	2182      	movs	r1, #130	@ 0x82
 80064a6:	4818      	ldr	r0, [pc, #96]	@ (8006508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064a8:	f000 fcd7 	bl	8006e5a <USBD_GetEpDesc>
 80064ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064ae:	2101      	movs	r1, #1
 80064b0:	4815      	ldr	r0, [pc, #84]	@ (8006508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064b2:	f000 fcd2 	bl	8006e5a <USBD_GetEpDesc>
 80064b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064b8:	2181      	movs	r1, #129	@ 0x81
 80064ba:	4813      	ldr	r0, [pc, #76]	@ (8006508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064bc:	f000 fccd 	bl	8006e5a <USBD_GetEpDesc>
 80064c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2210      	movs	r2, #16
 80064cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d006      	beq.n	80064e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2200      	movs	r2, #0
 80064d8:	711a      	strb	r2, [r3, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f042 0202 	orr.w	r2, r2, #2
 80064e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d006      	beq.n	80064f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	711a      	strb	r2, [r3, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f042 0202 	orr.w	r2, r2, #2
 80064f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2243      	movs	r2, #67	@ 0x43
 80064fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064fc:	4b02      	ldr	r3, [pc, #8]	@ (8006508 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20000050 	.word	0x20000050

0800650c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006514:	2182      	movs	r1, #130	@ 0x82
 8006516:	4818      	ldr	r0, [pc, #96]	@ (8006578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006518:	f000 fc9f 	bl	8006e5a <USBD_GetEpDesc>
 800651c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800651e:	2101      	movs	r1, #1
 8006520:	4815      	ldr	r0, [pc, #84]	@ (8006578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006522:	f000 fc9a 	bl	8006e5a <USBD_GetEpDesc>
 8006526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006528:	2181      	movs	r1, #129	@ 0x81
 800652a:	4813      	ldr	r0, [pc, #76]	@ (8006578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800652c:	f000 fc95 	bl	8006e5a <USBD_GetEpDesc>
 8006530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2210      	movs	r2, #16
 800653c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2200      	movs	r2, #0
 8006548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800654c:	711a      	strb	r2, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006560:	711a      	strb	r2, [r3, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2243      	movs	r2, #67	@ 0x43
 800656a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800656c:	4b02      	ldr	r3, [pc, #8]	@ (8006578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000050 	.word	0x20000050

0800657c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	220a      	movs	r2, #10
 8006588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800658a:	4b03      	ldr	r3, [pc, #12]	@ (8006598 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	2000000c 	.word	0x2000000c

0800659c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e009      	b.n	80065c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	33b0      	adds	r3, #176	@ 0xb0
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	32b0      	adds	r2, #176	@ 0xb0
 80065e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e008      	b.n	8006608 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	32b0      	adds	r2, #176	@ 0xb0
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006634:	2303      	movs	r3, #3
 8006636:	e004      	b.n	8006642 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	32b0      	adds	r2, #176	@ 0xb0
 8006662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006666:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32b0      	adds	r2, #176	@ 0xb0
 8006672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800667a:	2303      	movs	r3, #3
 800667c:	e018      	b.n	80066b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	7c1b      	ldrb	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006686:	4b0c      	ldr	r3, [pc, #48]	@ (80066b8 <USBD_CDC_ReceivePacket+0x68>)
 8006688:	7819      	ldrb	r1, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 ff79 	bl	800858c <USBD_LL_PrepareReceive>
 800669a:	e008      	b.n	80066ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <USBD_CDC_ReceivePacket+0x68>)
 800669e:	7819      	ldrb	r1, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066a6:	2340      	movs	r3, #64	@ 0x40
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 ff6f 	bl	800858c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20000094 	.word	0x20000094

080066bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e01f      	b.n	8006714 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	79fa      	ldrb	r2, [r7, #7]
 8006706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 fde9 	bl	80082e0 <USBD_LL_Init>
 800670e:	4603      	mov	r3, r0
 8006710:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	e025      	b.n	8006780 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	32ae      	adds	r2, #174	@ 0xae
 8006746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00f      	beq.n	8006770 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	32ae      	adds	r2, #174	@ 0xae
 800675a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006760:	f107 020e 	add.w	r2, r7, #14
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	4602      	mov	r2, r0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fdf1 	bl	8008378 <USBD_LL_Start>
 8006796:	4603      	mov	r3, r0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	78fa      	ldrb	r2, [r7, #3]
 80067da:	4611      	mov	r1, r2
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	4611      	mov	r1, r2
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006814:	2303      	movs	r3, #3
 8006816:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f001 f90c 	bl	8007a52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006848:	461a      	mov	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	2b02      	cmp	r3, #2
 800685c:	d01a      	beq.n	8006894 <USBD_LL_SetupStage+0x72>
 800685e:	2b02      	cmp	r3, #2
 8006860:	d822      	bhi.n	80068a8 <USBD_LL_SetupStage+0x86>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <USBD_LL_SetupStage+0x4a>
 8006866:	2b01      	cmp	r3, #1
 8006868:	d00a      	beq.n	8006880 <USBD_LL_SetupStage+0x5e>
 800686a:	e01d      	b.n	80068a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fb63 	bl	8006f40 <USBD_StdDevReq>
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
      break;
 800687e:	e020      	b.n	80068c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fbcb 	bl	8007024 <USBD_StdItfReq>
 800688e:	4603      	mov	r3, r0
 8006890:	73fb      	strb	r3, [r7, #15]
      break;
 8006892:	e016      	b.n	80068c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fc2d 	bl	80070fc <USBD_StdEPReq>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73fb      	strb	r3, [r7, #15]
      break;
 80068a6:	e00c      	b.n	80068c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fdbe 	bl	8008438 <USBD_LL_StallEP>
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]
      break;
 80068c0:	bf00      	nop
  }

  return ret;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	460b      	mov	r3, r1
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d16e      	bne.n	80069c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80068ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	f040 8098 	bne.w	8006a28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	429a      	cmp	r2, r3
 8006902:	d913      	bls.n	800692c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	1ad2      	subs	r2, r2, r3
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4293      	cmp	r3, r2
 800691c:	bf28      	it	cs
 800691e:	4613      	movcs	r3, r2
 8006920:	461a      	mov	r2, r3
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f001 f988 	bl	8007c3a <USBD_CtlContinueRx>
 800692a:	e07d      	b.n	8006a28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	2b02      	cmp	r3, #2
 8006938:	d014      	beq.n	8006964 <USBD_LL_DataOutStage+0x98>
 800693a:	2b02      	cmp	r3, #2
 800693c:	d81d      	bhi.n	800697a <USBD_LL_DataOutStage+0xae>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <USBD_LL_DataOutStage+0x7c>
 8006942:	2b01      	cmp	r3, #1
 8006944:	d003      	beq.n	800694e <USBD_LL_DataOutStage+0x82>
 8006946:	e018      	b.n	800697a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	75bb      	strb	r3, [r7, #22]
            break;
 800694c:	e018      	b.n	8006980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006954:	b2db      	uxtb	r3, r3
 8006956:	4619      	mov	r1, r3
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa64 	bl	8006e26 <USBD_CoreFindIF>
 800695e:	4603      	mov	r3, r0
 8006960:	75bb      	strb	r3, [r7, #22]
            break;
 8006962:	e00d      	b.n	8006980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800696a:	b2db      	uxtb	r3, r3
 800696c:	4619      	mov	r1, r3
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fa66 	bl	8006e40 <USBD_CoreFindEP>
 8006974:	4603      	mov	r3, r0
 8006976:	75bb      	strb	r3, [r7, #22]
            break;
 8006978:	e002      	b.n	8006980 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	75bb      	strb	r3, [r7, #22]
            break;
 800697e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006980:	7dbb      	ldrb	r3, [r7, #22]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d119      	bne.n	80069ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d113      	bne.n	80069ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006992:	7dba      	ldrb	r2, [r7, #22]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	32ae      	adds	r2, #174	@ 0xae
 8006998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80069a2:	7dba      	ldrb	r2, [r7, #22]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80069aa:	7dba      	ldrb	r2, [r7, #22]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	32ae      	adds	r2, #174	@ 0xae
 80069b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f001 f94e 	bl	8007c5c <USBD_CtlSendStatus>
 80069c0:	e032      	b.n	8006a28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	4619      	mov	r1, r3
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fa37 	bl	8006e40 <USBD_CoreFindEP>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069d6:	7dbb      	ldrb	r3, [r7, #22]
 80069d8:	2bff      	cmp	r3, #255	@ 0xff
 80069da:	d025      	beq.n	8006a28 <USBD_LL_DataOutStage+0x15c>
 80069dc:	7dbb      	ldrb	r3, [r7, #22]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d122      	bne.n	8006a28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d117      	bne.n	8006a1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069ee:	7dba      	ldrb	r2, [r7, #22]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	32ae      	adds	r2, #174	@ 0xae
 80069f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00f      	beq.n	8006a1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80069fe:	7dba      	ldrb	r2, [r7, #22]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a06:	7dba      	ldrb	r2, [r7, #22]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	32ae      	adds	r2, #174	@ 0xae
 8006a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	7afa      	ldrb	r2, [r7, #11]
 8006a14:	4611      	mov	r1, r2
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	4798      	blx	r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	e000      	b.n	8006a2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b086      	sub	sp, #24
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	607a      	str	r2, [r7, #4]
 8006a3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d16f      	bne.n	8006b26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3314      	adds	r3, #20
 8006a4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d15a      	bne.n	8006b0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d914      	bls.n	8006a8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	1ad2      	subs	r2, r2, r3
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f001 f8b0 	bl	8007bde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2200      	movs	r2, #0
 8006a82:	2100      	movs	r1, #0
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f001 fd81 	bl	800858c <USBD_LL_PrepareReceive>
 8006a8a:	e03f      	b.n	8006b0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d11c      	bne.n	8006ad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d316      	bcc.n	8006ad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d20f      	bcs.n	8006ad2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f001 f891 	bl	8007bde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f001 fd5e 	bl	800858c <USBD_LL_PrepareReceive>
 8006ad0:	e01c      	b.n	8006b0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d10f      	bne.n	8006afe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006afe:	2180      	movs	r1, #128	@ 0x80
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f001 fc99 	bl	8008438 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f001 f8bb 	bl	8007c82 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d03a      	beq.n	8006b8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff fe42 	bl	80067a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b24:	e032      	b.n	8006b8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b26:	7afb      	ldrb	r3, [r7, #11]
 8006b28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f985 	bl	8006e40 <USBD_CoreFindEP>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	2bff      	cmp	r3, #255	@ 0xff
 8006b3e:	d025      	beq.n	8006b8c <USBD_LL_DataInStage+0x15a>
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d122      	bne.n	8006b8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d11c      	bne.n	8006b8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b52:	7dfa      	ldrb	r2, [r7, #23]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	32ae      	adds	r2, #174	@ 0xae
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d014      	beq.n	8006b8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b62:	7dfa      	ldrb	r2, [r7, #23]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b6a:	7dfa      	ldrb	r2, [r7, #23]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	32ae      	adds	r2, #174	@ 0xae
 8006b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	7afa      	ldrb	r2, [r7, #11]
 8006b78:	4611      	mov	r1, r2
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b82:	7dbb      	ldrb	r3, [r7, #22]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b88:	7dbb      	ldrb	r3, [r7, #22]
 8006b8a:	e000      	b.n	8006b8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d014      	beq.n	8006bfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00e      	beq.n	8006bfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6852      	ldr	r2, [r2, #4]
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	4611      	mov	r1, r2
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bfc:	2340      	movs	r3, #64	@ 0x40
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 fbd3 	bl	80083ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2240      	movs	r2, #64	@ 0x40
 8006c14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c18:	2340      	movs	r3, #64	@ 0x40
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2180      	movs	r1, #128	@ 0x80
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 fbc5 	bl	80083ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2240      	movs	r2, #64	@ 0x40
 8006c2e:	621a      	str	r2, [r3, #32]

  return ret;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d006      	beq.n	8006c7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d106      	bne.n	8006cb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d110      	bne.n	8006cf8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	32ae      	adds	r2, #174	@ 0xae
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e01c      	b.n	8006d5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d115      	bne.n	8006d5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32ae      	adds	r2, #174	@ 0xae
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	32ae      	adds	r2, #174	@ 0xae
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	4611      	mov	r1, r2
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	32ae      	adds	r2, #174	@ 0xae
 8006d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e01c      	b.n	8006dc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d115      	bne.n	8006dc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	32ae      	adds	r2, #174	@ 0xae
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	32ae      	adds	r2, #174	@ 0xae
 8006db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00e      	beq.n	8006e1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6852      	ldr	r2, [r2, #4]
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b086      	sub	sp, #24
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	885b      	ldrh	r3, [r3, #2]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	7812      	ldrb	r2, [r2, #0]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d91f      	bls.n	8006ec0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e86:	e013      	b.n	8006eb0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e88:	f107 030a 	add.w	r3, r7, #10
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	f000 f81b 	bl	8006eca <USBD_GetNextDesc>
 8006e94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	2b05      	cmp	r3, #5
 8006e9c:	d108      	bne.n	8006eb0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	789b      	ldrb	r3, [r3, #2]
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d008      	beq.n	8006ebe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	885b      	ldrh	r3, [r3, #2]
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	897b      	ldrh	r3, [r7, #10]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d8e5      	bhi.n	8006e88 <USBD_GetEpDesc+0x2e>
 8006ebc:	e000      	b.n	8006ec0 <USBD_GetEpDesc+0x66>
          break;
 8006ebe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006ec0:	693b      	ldr	r3, [r7, #16]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b087      	sub	sp, #28
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	3301      	adds	r3, #1
 8006f18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f20:	8a3b      	ldrh	r3, [r7, #16]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	b21a      	sxth	r2, r3
 8006f26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	b21b      	sxth	r3, r3
 8006f2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f30:	89fb      	ldrh	r3, [r7, #14]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f56:	2b40      	cmp	r3, #64	@ 0x40
 8006f58:	d005      	beq.n	8006f66 <USBD_StdDevReq+0x26>
 8006f5a:	2b40      	cmp	r3, #64	@ 0x40
 8006f5c:	d857      	bhi.n	800700e <USBD_StdDevReq+0xce>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00f      	beq.n	8006f82 <USBD_StdDevReq+0x42>
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d153      	bne.n	800700e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	32ae      	adds	r2, #174	@ 0xae
 8006f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f80:	e04a      	b.n	8007018 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b09      	cmp	r3, #9
 8006f88:	d83b      	bhi.n	8007002 <USBD_StdDevReq+0xc2>
 8006f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f90 <USBD_StdDevReq+0x50>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fe5 	.word	0x08006fe5
 8006f94:	08006ff9 	.word	0x08006ff9
 8006f98:	08007003 	.word	0x08007003
 8006f9c:	08006fef 	.word	0x08006fef
 8006fa0:	08007003 	.word	0x08007003
 8006fa4:	08006fc3 	.word	0x08006fc3
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08007003 	.word	0x08007003
 8006fb0:	08006fdb 	.word	0x08006fdb
 8006fb4:	08006fcd 	.word	0x08006fcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa3c 	bl	8007438 <USBD_GetDescriptor>
          break;
 8006fc0:	e024      	b.n	800700c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fba1 	bl	800770c <USBD_SetAddress>
          break;
 8006fca:	e01f      	b.n	800700c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fbe0 	bl	8007794 <USBD_SetConfig>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
          break;
 8006fd8:	e018      	b.n	800700c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc83 	bl	80078e8 <USBD_GetConfig>
          break;
 8006fe2:	e013      	b.n	800700c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fcb4 	bl	8007954 <USBD_GetStatus>
          break;
 8006fec:	e00e      	b.n	800700c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fce3 	bl	80079bc <USBD_SetFeature>
          break;
 8006ff6:	e009      	b.n	800700c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fd07 	bl	8007a0e <USBD_ClrFeature>
          break;
 8007000:	e004      	b.n	800700c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fd5e 	bl	8007ac6 <USBD_CtlError>
          break;
 800700a:	bf00      	nop
      }
      break;
 800700c:	e004      	b.n	8007018 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fd58 	bl	8007ac6 <USBD_CtlError>
      break;
 8007016:	bf00      	nop
  }

  return ret;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop

08007024 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800703a:	2b40      	cmp	r3, #64	@ 0x40
 800703c:	d005      	beq.n	800704a <USBD_StdItfReq+0x26>
 800703e:	2b40      	cmp	r3, #64	@ 0x40
 8007040:	d852      	bhi.n	80070e8 <USBD_StdItfReq+0xc4>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <USBD_StdItfReq+0x26>
 8007046:	2b20      	cmp	r3, #32
 8007048:	d14e      	bne.n	80070e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	2b02      	cmp	r3, #2
 8007056:	d840      	bhi.n	80070da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	889b      	ldrh	r3, [r3, #4]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b01      	cmp	r3, #1
 8007060:	d836      	bhi.n	80070d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	889b      	ldrh	r3, [r3, #4]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fedb 	bl	8006e26 <USBD_CoreFindIF>
 8007070:	4603      	mov	r3, r0
 8007072:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2bff      	cmp	r3, #255	@ 0xff
 8007078:	d01d      	beq.n	80070b6 <USBD_StdItfReq+0x92>
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d11a      	bne.n	80070b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007080:	7bba      	ldrb	r2, [r7, #14]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32ae      	adds	r2, #174	@ 0xae
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00f      	beq.n	80070b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007090:	7bba      	ldrb	r2, [r7, #14]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007098:	7bba      	ldrb	r2, [r7, #14]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	32ae      	adds	r2, #174	@ 0xae
 800709e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070ae:	e004      	b.n	80070ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070b4:	e001      	b.n	80070ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80070b6:	2303      	movs	r3, #3
 80070b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	88db      	ldrh	r3, [r3, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d110      	bne.n	80070e4 <USBD_StdItfReq+0xc0>
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10d      	bne.n	80070e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fdc7 	bl	8007c5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070ce:	e009      	b.n	80070e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fcf7 	bl	8007ac6 <USBD_CtlError>
          break;
 80070d8:	e004      	b.n	80070e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fcf2 	bl	8007ac6 <USBD_CtlError>
          break;
 80070e2:	e000      	b.n	80070e6 <USBD_StdItfReq+0xc2>
          break;
 80070e4:	bf00      	nop
      }
      break;
 80070e6:	e004      	b.n	80070f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fceb 	bl	8007ac6 <USBD_CtlError>
      break;
 80070f0:	bf00      	nop
  }

  return ret;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	889b      	ldrh	r3, [r3, #4]
 800710e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007118:	2b40      	cmp	r3, #64	@ 0x40
 800711a:	d007      	beq.n	800712c <USBD_StdEPReq+0x30>
 800711c:	2b40      	cmp	r3, #64	@ 0x40
 800711e:	f200 817f 	bhi.w	8007420 <USBD_StdEPReq+0x324>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d02a      	beq.n	800717c <USBD_StdEPReq+0x80>
 8007126:	2b20      	cmp	r3, #32
 8007128:	f040 817a 	bne.w	8007420 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff fe85 	bl	8006e40 <USBD_CoreFindEP>
 8007136:	4603      	mov	r3, r0
 8007138:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800713a:	7b7b      	ldrb	r3, [r7, #13]
 800713c:	2bff      	cmp	r3, #255	@ 0xff
 800713e:	f000 8174 	beq.w	800742a <USBD_StdEPReq+0x32e>
 8007142:	7b7b      	ldrb	r3, [r7, #13]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 8170 	bne.w	800742a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800714a:	7b7a      	ldrb	r2, [r7, #13]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007152:	7b7a      	ldrb	r2, [r7, #13]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	32ae      	adds	r2, #174	@ 0xae
 8007158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 8163 	beq.w	800742a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007164:	7b7a      	ldrb	r2, [r7, #13]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	32ae      	adds	r2, #174	@ 0xae
 800716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800717a:	e156      	b.n	800742a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	785b      	ldrb	r3, [r3, #1]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d008      	beq.n	8007196 <USBD_StdEPReq+0x9a>
 8007184:	2b03      	cmp	r3, #3
 8007186:	f300 8145 	bgt.w	8007414 <USBD_StdEPReq+0x318>
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 809b 	beq.w	80072c6 <USBD_StdEPReq+0x1ca>
 8007190:	2b01      	cmp	r3, #1
 8007192:	d03c      	beq.n	800720e <USBD_StdEPReq+0x112>
 8007194:	e13e      	b.n	8007414 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d002      	beq.n	80071a8 <USBD_StdEPReq+0xac>
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d016      	beq.n	80071d4 <USBD_StdEPReq+0xd8>
 80071a6:	e02c      	b.n	8007202 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00d      	beq.n	80071ca <USBD_StdEPReq+0xce>
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	2b80      	cmp	r3, #128	@ 0x80
 80071b2:	d00a      	beq.n	80071ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f93d 	bl	8008438 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071be:	2180      	movs	r1, #128	@ 0x80
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 f939 	bl	8008438 <USBD_LL_StallEP>
 80071c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071c8:	e020      	b.n	800720c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc7a 	bl	8007ac6 <USBD_CtlError>
              break;
 80071d2:	e01b      	b.n	800720c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	885b      	ldrh	r3, [r3, #2]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10e      	bne.n	80071fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <USBD_StdEPReq+0xfe>
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b80      	cmp	r3, #128	@ 0x80
 80071e6:	d008      	beq.n	80071fa <USBD_StdEPReq+0xfe>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	88db      	ldrh	r3, [r3, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 f91f 	bl	8008438 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fd2e 	bl	8007c5c <USBD_CtlSendStatus>

              break;
 8007200:	e004      	b.n	800720c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fc5e 	bl	8007ac6 <USBD_CtlError>
              break;
 800720a:	bf00      	nop
          }
          break;
 800720c:	e107      	b.n	800741e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d002      	beq.n	8007220 <USBD_StdEPReq+0x124>
 800721a:	2b03      	cmp	r3, #3
 800721c:	d016      	beq.n	800724c <USBD_StdEPReq+0x150>
 800721e:	e04b      	b.n	80072b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00d      	beq.n	8007242 <USBD_StdEPReq+0x146>
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b80      	cmp	r3, #128	@ 0x80
 800722a:	d00a      	beq.n	8007242 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f901 	bl	8008438 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007236:	2180      	movs	r1, #128	@ 0x80
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f8fd 	bl	8008438 <USBD_LL_StallEP>
 800723e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007240:	e040      	b.n	80072c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fc3e 	bl	8007ac6 <USBD_CtlError>
              break;
 800724a:	e03b      	b.n	80072c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	885b      	ldrh	r3, [r3, #2]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d136      	bne.n	80072c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 f907 	bl	8008476 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fcf7 	bl	8007c5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff fde4 	bl	8006e40 <USBD_CoreFindEP>
 8007278:	4603      	mov	r3, r0
 800727a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800727c:	7b7b      	ldrb	r3, [r7, #13]
 800727e:	2bff      	cmp	r3, #255	@ 0xff
 8007280:	d01f      	beq.n	80072c2 <USBD_StdEPReq+0x1c6>
 8007282:	7b7b      	ldrb	r3, [r7, #13]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11c      	bne.n	80072c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007288:	7b7a      	ldrb	r2, [r7, #13]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007290:	7b7a      	ldrb	r2, [r7, #13]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	32ae      	adds	r2, #174	@ 0xae
 8007296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d010      	beq.n	80072c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072a0:	7b7a      	ldrb	r2, [r7, #13]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	32ae      	adds	r2, #174	@ 0xae
 80072a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80072b6:	e004      	b.n	80072c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fc03 	bl	8007ac6 <USBD_CtlError>
              break;
 80072c0:	e000      	b.n	80072c4 <USBD_StdEPReq+0x1c8>
              break;
 80072c2:	bf00      	nop
          }
          break;
 80072c4:	e0ab      	b.n	800741e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d002      	beq.n	80072d8 <USBD_StdEPReq+0x1dc>
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d032      	beq.n	800733c <USBD_StdEPReq+0x240>
 80072d6:	e097      	b.n	8007408 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <USBD_StdEPReq+0x1f2>
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	2b80      	cmp	r3, #128	@ 0x80
 80072e2:	d004      	beq.n	80072ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fbed 	bl	8007ac6 <USBD_CtlError>
                break;
 80072ec:	e091      	b.n	8007412 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	da0b      	bge.n	800730e <USBD_StdEPReq+0x212>
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	3310      	adds	r3, #16
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	4413      	add	r3, r2
 800730a:	3304      	adds	r3, #4
 800730c:	e00b      	b.n	8007326 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	4413      	add	r3, r2
 8007324:	3304      	adds	r3, #4
 8007326:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2202      	movs	r2, #2
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fc37 	bl	8007ba8 <USBD_CtlSendData>
              break;
 800733a:	e06a      	b.n	8007412 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800733c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007340:	2b00      	cmp	r3, #0
 8007342:	da11      	bge.n	8007368 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	f003 020f 	and.w	r2, r3, #15
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	3324      	adds	r3, #36	@ 0x24
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d117      	bne.n	800738e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fbb0 	bl	8007ac6 <USBD_CtlError>
                  break;
 8007366:	e054      	b.n	8007412 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	f003 020f 	and.w	r2, r3, #15
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d104      	bne.n	800738e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fb9d 	bl	8007ac6 <USBD_CtlError>
                  break;
 800738c:	e041      	b.n	8007412 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007392:	2b00      	cmp	r3, #0
 8007394:	da0b      	bge.n	80073ae <USBD_StdEPReq+0x2b2>
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	3310      	adds	r3, #16
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4413      	add	r3, r2
 80073aa:	3304      	adds	r3, #4
 80073ac:	e00b      	b.n	80073c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	3304      	adds	r3, #4
 80073c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <USBD_StdEPReq+0x2d8>
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b80      	cmp	r3, #128	@ 0x80
 80073d2:	d103      	bne.n	80073dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e00e      	b.n	80073fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 f867 	bl	80084b4 <USBD_LL_IsStallEP>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e002      	b.n	80073fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2202      	movs	r2, #2
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fbd1 	bl	8007ba8 <USBD_CtlSendData>
              break;
 8007406:	e004      	b.n	8007412 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fb5b 	bl	8007ac6 <USBD_CtlError>
              break;
 8007410:	bf00      	nop
          }
          break;
 8007412:	e004      	b.n	800741e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fb55 	bl	8007ac6 <USBD_CtlError>
          break;
 800741c:	bf00      	nop
      }
      break;
 800741e:	e005      	b.n	800742c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb4f 	bl	8007ac6 <USBD_CtlError>
      break;
 8007428:	e000      	b.n	800742c <USBD_StdEPReq+0x330>
      break;
 800742a:	bf00      	nop
  }

  return ret;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	885b      	ldrh	r3, [r3, #2]
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	2b06      	cmp	r3, #6
 800745a:	f200 8128 	bhi.w	80076ae <USBD_GetDescriptor+0x276>
 800745e:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <USBD_GetDescriptor+0x2c>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007481 	.word	0x08007481
 8007468:	08007499 	.word	0x08007499
 800746c:	080074d9 	.word	0x080074d9
 8007470:	080076af 	.word	0x080076af
 8007474:	080076af 	.word	0x080076af
 8007478:	0800764f 	.word	0x0800764f
 800747c:	0800767b 	.word	0x0800767b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	7c12      	ldrb	r2, [r2, #16]
 800748c:	f107 0108 	add.w	r1, r7, #8
 8007490:	4610      	mov	r0, r2
 8007492:	4798      	blx	r3
 8007494:	60f8      	str	r0, [r7, #12]
      break;
 8007496:	e112      	b.n	80076be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7c1b      	ldrb	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10d      	bne.n	80074bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	f107 0208 	add.w	r2, r7, #8
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
 80074b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	2202      	movs	r2, #2
 80074b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074ba:	e100      	b.n	80076be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	f107 0208 	add.w	r2, r7, #8
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
 80074cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	2202      	movs	r2, #2
 80074d4:	701a      	strb	r2, [r3, #0]
      break;
 80074d6:	e0f2      	b.n	80076be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	885b      	ldrh	r3, [r3, #2]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b05      	cmp	r3, #5
 80074e0:	f200 80ac 	bhi.w	800763c <USBD_GetDescriptor+0x204>
 80074e4:	a201      	add	r2, pc, #4	@ (adr r2, 80074ec <USBD_GetDescriptor+0xb4>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	08007505 	.word	0x08007505
 80074f0:	08007539 	.word	0x08007539
 80074f4:	0800756d 	.word	0x0800756d
 80074f8:	080075a1 	.word	0x080075a1
 80074fc:	080075d5 	.word	0x080075d5
 8007500:	08007609 	.word	0x08007609
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7c12      	ldrb	r2, [r2, #16]
 800751c:	f107 0108 	add.w	r1, r7, #8
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
 8007524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007526:	e091      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 facb 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007530:	7afb      	ldrb	r3, [r7, #11]
 8007532:	3301      	adds	r3, #1
 8007534:	72fb      	strb	r3, [r7, #11]
          break;
 8007536:	e089      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7c12      	ldrb	r2, [r2, #16]
 8007550:	f107 0108 	add.w	r1, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800755a:	e077      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fab1 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	3301      	adds	r3, #1
 8007568:	72fb      	strb	r3, [r7, #11]
          break;
 800756a:	e06f      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	7c12      	ldrb	r2, [r2, #16]
 8007584:	f107 0108 	add.w	r1, r7, #8
 8007588:	4610      	mov	r0, r2
 800758a:	4798      	blx	r3
 800758c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758e:	e05d      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fa97 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	3301      	adds	r3, #1
 800759c:	72fb      	strb	r3, [r7, #11]
          break;
 800759e:	e055      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	7c12      	ldrb	r2, [r2, #16]
 80075b8:	f107 0108 	add.w	r1, r7, #8
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
 80075c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c2:	e043      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa7d 	bl	8007ac6 <USBD_CtlError>
            err++;
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	3301      	adds	r3, #1
 80075d0:	72fb      	strb	r3, [r7, #11]
          break;
 80075d2:	e03b      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f6:	e029      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa63 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	3301      	adds	r3, #1
 8007604:	72fb      	strb	r3, [r7, #11]
          break;
 8007606:	e021      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7c12      	ldrb	r2, [r2, #16]
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762a:	e00f      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa49 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	3301      	adds	r3, #1
 8007638:	72fb      	strb	r3, [r7, #11]
          break;
 800763a:	e007      	b.n	800764c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa41 	bl	8007ac6 <USBD_CtlError>
          err++;
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	3301      	adds	r3, #1
 8007648:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800764a:	bf00      	nop
      }
      break;
 800764c:	e037      	b.n	80076be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7c1b      	ldrb	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800765c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800765e:	f107 0208 	add.w	r2, r7, #8
 8007662:	4610      	mov	r0, r2
 8007664:	4798      	blx	r3
 8007666:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007668:	e029      	b.n	80076be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fa2a 	bl	8007ac6 <USBD_CtlError>
        err++;
 8007672:	7afb      	ldrb	r3, [r7, #11]
 8007674:	3301      	adds	r3, #1
 8007676:	72fb      	strb	r3, [r7, #11]
      break;
 8007678:	e021      	b.n	80076be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7c1b      	ldrb	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10d      	bne.n	800769e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	f107 0208 	add.w	r2, r7, #8
 800768e:	4610      	mov	r0, r2
 8007690:	4798      	blx	r3
 8007692:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	2207      	movs	r2, #7
 800769a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800769c:	e00f      	b.n	80076be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fa10 	bl	8007ac6 <USBD_CtlError>
        err++;
 80076a6:	7afb      	ldrb	r3, [r7, #11]
 80076a8:	3301      	adds	r3, #1
 80076aa:	72fb      	strb	r3, [r7, #11]
      break;
 80076ac:	e007      	b.n	80076be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fa08 	bl	8007ac6 <USBD_CtlError>
      err++;
 80076b6:	7afb      	ldrb	r3, [r7, #11]
 80076b8:	3301      	adds	r3, #1
 80076ba:	72fb      	strb	r3, [r7, #11]
      break;
 80076bc:	bf00      	nop
  }

  if (err != 0U)
 80076be:	7afb      	ldrb	r3, [r7, #11]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11e      	bne.n	8007702 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	88db      	ldrh	r3, [r3, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d016      	beq.n	80076fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076cc:	893b      	ldrh	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00e      	beq.n	80076f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	88da      	ldrh	r2, [r3, #6]
 80076d6:	893b      	ldrh	r3, [r7, #8]
 80076d8:	4293      	cmp	r3, r2
 80076da:	bf28      	it	cs
 80076dc:	4613      	movcs	r3, r2
 80076de:	b29b      	uxth	r3, r3
 80076e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076e2:	893b      	ldrh	r3, [r7, #8]
 80076e4:	461a      	mov	r2, r3
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa5d 	bl	8007ba8 <USBD_CtlSendData>
 80076ee:	e009      	b.n	8007704 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f9e7 	bl	8007ac6 <USBD_CtlError>
 80076f8:	e004      	b.n	8007704 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 faae 	bl	8007c5c <USBD_CtlSendStatus>
 8007700:	e000      	b.n	8007704 <USBD_GetDescriptor+0x2cc>
    return;
 8007702:	bf00      	nop
  }
}
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop

0800770c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	889b      	ldrh	r3, [r3, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d131      	bne.n	8007782 <USBD_SetAddress+0x76>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	88db      	ldrh	r3, [r3, #6]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d12d      	bne.n	8007782 <USBD_SetAddress+0x76>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	885b      	ldrh	r3, [r3, #2]
 800772a:	2b7f      	cmp	r3, #127	@ 0x7f
 800772c:	d829      	bhi.n	8007782 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	885b      	ldrh	r3, [r3, #2]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d104      	bne.n	8007750 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9bc 	bl	8007ac6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	e01d      	b.n	800778c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	7bfa      	ldrb	r2, [r7, #15]
 8007754:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fed5 	bl	800850c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa7a 	bl	8007c5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2202      	movs	r2, #2
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007776:	e009      	b.n	800778c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007780:	e004      	b.n	800778c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f99e 	bl	8007ac6 <USBD_CtlError>
  }
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	885b      	ldrh	r3, [r3, #2]
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	4b4e      	ldr	r3, [pc, #312]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077ac:	4b4d      	ldr	r3, [pc, #308]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d905      	bls.n	80077c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f985 	bl	8007ac6 <USBD_CtlError>
    return USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	e08c      	b.n	80078da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d002      	beq.n	80077d2 <USBD_SetConfig+0x3e>
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d029      	beq.n	8007824 <USBD_SetConfig+0x90>
 80077d0:	e075      	b.n	80078be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077d2:	4b44      	ldr	r3, [pc, #272]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d020      	beq.n	800781c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80077da:	4b42      	ldr	r3, [pc, #264]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077e4:	4b3f      	ldr	r3, [pc, #252]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fe ffe3 	bl	80067b6 <USBD_SetClassConfig>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f962 	bl	8007ac6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800780a:	e065      	b.n	80078d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fa25 	bl	8007c5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2203      	movs	r2, #3
 8007816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800781a:	e05d      	b.n	80078d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa1d 	bl	8007c5c <USBD_CtlSendStatus>
      break;
 8007822:	e059      	b.n	80078d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007824:	4b2f      	ldr	r3, [pc, #188]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d112      	bne.n	8007852 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007834:	4b2b      	ldr	r3, [pc, #172]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800783e:	4b29      	ldr	r3, [pc, #164]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fe ffd2 	bl	80067ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa06 	bl	8007c5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007850:	e042      	b.n	80078d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007852:	4b24      	ldr	r3, [pc, #144]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d02a      	beq.n	80078b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fe ffc0 	bl	80067ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800786e:	4b1d      	ldr	r3, [pc, #116]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007878:	4b1a      	ldr	r3, [pc, #104]	@ (80078e4 <USBD_SetConfig+0x150>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fe ff99 	bl	80067b6 <USBD_SetClassConfig>
 8007884:	4603      	mov	r3, r0
 8007886:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00f      	beq.n	80078ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f918 	bl	8007ac6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fe ffa5 	bl	80067ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80078ac:	e014      	b.n	80078d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9d4 	bl	8007c5c <USBD_CtlSendStatus>
      break;
 80078b4:	e010      	b.n	80078d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9d0 	bl	8007c5c <USBD_CtlSendStatus>
      break;
 80078bc:	e00c      	b.n	80078d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f900 	bl	8007ac6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078c6:	4b07      	ldr	r3, [pc, #28]	@ (80078e4 <USBD_SetConfig+0x150>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7fe ff8e 	bl	80067ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078d2:	2303      	movs	r3, #3
 80078d4:	73fb      	strb	r3, [r7, #15]
      break;
 80078d6:	bf00      	nop
  }

  return ret;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000210 	.word	0x20000210

080078e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	88db      	ldrh	r3, [r3, #6]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d004      	beq.n	8007904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f8e2 	bl	8007ac6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007902:	e023      	b.n	800794c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	dc02      	bgt.n	8007916 <USBD_GetConfig+0x2e>
 8007910:	2b00      	cmp	r3, #0
 8007912:	dc03      	bgt.n	800791c <USBD_GetConfig+0x34>
 8007914:	e015      	b.n	8007942 <USBD_GetConfig+0x5a>
 8007916:	2b03      	cmp	r3, #3
 8007918:	d00b      	beq.n	8007932 <USBD_GetConfig+0x4a>
 800791a:	e012      	b.n	8007942 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3308      	adds	r3, #8
 8007926:	2201      	movs	r2, #1
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f93c 	bl	8007ba8 <USBD_CtlSendData>
        break;
 8007930:	e00c      	b.n	800794c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3304      	adds	r3, #4
 8007936:	2201      	movs	r2, #1
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f934 	bl	8007ba8 <USBD_CtlSendData>
        break;
 8007940:	e004      	b.n	800794c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f8be 	bl	8007ac6 <USBD_CtlError>
        break;
 800794a:	bf00      	nop
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007964:	b2db      	uxtb	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	2b02      	cmp	r3, #2
 800796a:	d81e      	bhi.n	80079aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d004      	beq.n	800797e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8a5 	bl	8007ac6 <USBD_CtlError>
        break;
 800797c:	e01a      	b.n	80079b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f043 0202 	orr.w	r2, r3, #2
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	330c      	adds	r3, #12
 800799e:	2202      	movs	r2, #2
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f900 	bl	8007ba8 <USBD_CtlSendData>
      break;
 80079a8:	e004      	b.n	80079b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f88a 	bl	8007ac6 <USBD_CtlError>
      break;
 80079b2:	bf00      	nop
  }
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d107      	bne.n	80079de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f940 	bl	8007c5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079dc:	e013      	b.n	8007a06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d10b      	bne.n	80079fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	889b      	ldrh	r3, [r3, #4]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f930 	bl	8007c5c <USBD_CtlSendStatus>
}
 80079fc:	e003      	b.n	8007a06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f860 	bl	8007ac6 <USBD_CtlError>
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d80b      	bhi.n	8007a3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	885b      	ldrh	r3, [r3, #2]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d10c      	bne.n	8007a48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f910 	bl	8007c5c <USBD_CtlSendStatus>
      }
      break;
 8007a3c:	e004      	b.n	8007a48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f840 	bl	8007ac6 <USBD_CtlError>
      break;
 8007a46:	e000      	b.n	8007a4a <USBD_ClrFeature+0x3c>
      break;
 8007a48:	bf00      	nop
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	781a      	ldrb	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	781a      	ldrb	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f7ff fa40 	bl	8006f02 <SWAPBYTE>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff fa33 	bl	8006f02 <SWAPBYTE>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7ff fa26 	bl	8006f02 <SWAPBYTE>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	80da      	strh	r2, [r3, #6]
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ad0:	2180      	movs	r1, #128	@ 0x80
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fcb0 	bl	8008438 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ad8:	2100      	movs	r1, #0
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fcac 	bl	8008438 <USBD_LL_StallEP>
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d036      	beq.n	8007b6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b02:	6938      	ldr	r0, [r7, #16]
 8007b04:	f000 f836 	bl	8007b74 <USBD_GetLen>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	7812      	ldrb	r2, [r2, #0]
 8007b20:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	3301      	adds	r3, #1
 8007b26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	2203      	movs	r2, #3
 8007b30:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	3301      	adds	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b38:	e013      	b.n	8007b62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	4413      	add	r3, r2
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	613b      	str	r3, [r7, #16]
    idx++;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	4413      	add	r3, r2
 8007b58:	2200      	movs	r2, #0
 8007b5a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e7      	bne.n	8007b3a <USBD_GetString+0x52>
 8007b6a:	e000      	b.n	8007b6e <USBD_GetString+0x86>
    return;
 8007b6c:	bf00      	nop
  }
}
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b84:	e005      	b.n	8007b92 <USBD_GetLen+0x1e>
  {
    len++;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f5      	bne.n	8007b86 <USBD_GetLen+0x12>
  }

  return len;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fcbb 	bl	800854a <USBD_LL_Transmit>

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	2100      	movs	r1, #0
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fcaa 	bl	800854a <USBD_LL_Transmit>

  return USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2203      	movs	r2, #3
 8007c10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fcae 	bl	800858c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fc9d 	bl	800858c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2204      	movs	r2, #4
 8007c68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fc69 	bl	800854a <USBD_LL_Transmit>

  return USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2205      	movs	r2, #5
 8007c8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c92:	2300      	movs	r3, #0
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fc77 	bl	800858c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cac:	2200      	movs	r2, #0
 8007cae:	4912      	ldr	r1, [pc, #72]	@ (8007cf8 <MX_USB_DEVICE_Init+0x50>)
 8007cb0:	4812      	ldr	r0, [pc, #72]	@ (8007cfc <MX_USB_DEVICE_Init+0x54>)
 8007cb2:	f7fe fd03 	bl	80066bc <USBD_Init>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cbc:	f7f8 fdde 	bl	800087c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007cc0:	490f      	ldr	r1, [pc, #60]	@ (8007d00 <MX_USB_DEVICE_Init+0x58>)
 8007cc2:	480e      	ldr	r0, [pc, #56]	@ (8007cfc <MX_USB_DEVICE_Init+0x54>)
 8007cc4:	f7fe fd2a 	bl	800671c <USBD_RegisterClass>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cce:	f7f8 fdd5 	bl	800087c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cd2:	490c      	ldr	r1, [pc, #48]	@ (8007d04 <MX_USB_DEVICE_Init+0x5c>)
 8007cd4:	4809      	ldr	r0, [pc, #36]	@ (8007cfc <MX_USB_DEVICE_Init+0x54>)
 8007cd6:	f7fe fc61 	bl	800659c <USBD_CDC_RegisterInterface>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ce0:	f7f8 fdcc 	bl	800087c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ce4:	4805      	ldr	r0, [pc, #20]	@ (8007cfc <MX_USB_DEVICE_Init+0x54>)
 8007ce6:	f7fe fd4f 	bl	8006788 <USBD_Start>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cf0:	f7f8 fdc4 	bl	800087c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cf4:	bf00      	nop
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	200000ac 	.word	0x200000ac
 8007cfc:	20000214 	.word	0x20000214
 8007d00:	20000018 	.word	0x20000018
 8007d04:	20000098 	.word	0x20000098

08007d08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4905      	ldr	r1, [pc, #20]	@ (8007d24 <CDC_Init_FS+0x1c>)
 8007d10:	4805      	ldr	r0, [pc, #20]	@ (8007d28 <CDC_Init_FS+0x20>)
 8007d12:	f7fe fc5d 	bl	80065d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d16:	4905      	ldr	r1, [pc, #20]	@ (8007d2c <CDC_Init_FS+0x24>)
 8007d18:	4803      	ldr	r0, [pc, #12]	@ (8007d28 <CDC_Init_FS+0x20>)
 8007d1a:	f7fe fc7b 	bl	8006614 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000cf0 	.word	0x20000cf0
 8007d28:	20000214 	.word	0x20000214
 8007d2c:	200004f0 	.word	0x200004f0

08007d30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	71fb      	strb	r3, [r7, #7]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d50:	79fb      	ldrb	r3, [r7, #7]
 8007d52:	2b23      	cmp	r3, #35	@ 0x23
 8007d54:	d84a      	bhi.n	8007dec <CDC_Control_FS+0xac>
 8007d56:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <CDC_Control_FS+0x1c>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007ded 	.word	0x08007ded
 8007d60:	08007ded 	.word	0x08007ded
 8007d64:	08007ded 	.word	0x08007ded
 8007d68:	08007ded 	.word	0x08007ded
 8007d6c:	08007ded 	.word	0x08007ded
 8007d70:	08007ded 	.word	0x08007ded
 8007d74:	08007ded 	.word	0x08007ded
 8007d78:	08007ded 	.word	0x08007ded
 8007d7c:	08007ded 	.word	0x08007ded
 8007d80:	08007ded 	.word	0x08007ded
 8007d84:	08007ded 	.word	0x08007ded
 8007d88:	08007ded 	.word	0x08007ded
 8007d8c:	08007ded 	.word	0x08007ded
 8007d90:	08007ded 	.word	0x08007ded
 8007d94:	08007ded 	.word	0x08007ded
 8007d98:	08007ded 	.word	0x08007ded
 8007d9c:	08007ded 	.word	0x08007ded
 8007da0:	08007ded 	.word	0x08007ded
 8007da4:	08007ded 	.word	0x08007ded
 8007da8:	08007ded 	.word	0x08007ded
 8007dac:	08007ded 	.word	0x08007ded
 8007db0:	08007ded 	.word	0x08007ded
 8007db4:	08007ded 	.word	0x08007ded
 8007db8:	08007ded 	.word	0x08007ded
 8007dbc:	08007ded 	.word	0x08007ded
 8007dc0:	08007ded 	.word	0x08007ded
 8007dc4:	08007ded 	.word	0x08007ded
 8007dc8:	08007ded 	.word	0x08007ded
 8007dcc:	08007ded 	.word	0x08007ded
 8007dd0:	08007ded 	.word	0x08007ded
 8007dd4:	08007ded 	.word	0x08007ded
 8007dd8:	08007ded 	.word	0x08007ded
 8007ddc:	08007ded 	.word	0x08007ded
 8007de0:	08007ded 	.word	0x08007ded
 8007de4:	08007ded 	.word	0x08007ded
 8007de8:	08007ded 	.word	0x08007ded
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007dec:	bf00      	nop
  }

  return (USBD_OK);
 8007dee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	4805      	ldr	r0, [pc, #20]	@ (8007e20 <CDC_Receive_FS+0x24>)
 8007e0a:	f7fe fc03 	bl	8006614 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e0e:	4804      	ldr	r0, [pc, #16]	@ (8007e20 <CDC_Receive_FS+0x24>)
 8007e10:	f7fe fc1e 	bl	8006650 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000214 	.word	0x20000214

08007e24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2212      	movs	r2, #18
 8007e58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e5a:	4b03      	ldr	r3, [pc, #12]	@ (8007e68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	200000c8 	.word	0x200000c8

08007e6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	6039      	str	r1, [r7, #0]
 8007e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e7e:	4b03      	ldr	r3, [pc, #12]	@ (8007e8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	200000dc 	.word	0x200000dc

08007e90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	6039      	str	r1, [r7, #0]
 8007e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d105      	bne.n	8007eae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	4907      	ldr	r1, [pc, #28]	@ (8007ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ea6:	4808      	ldr	r0, [pc, #32]	@ (8007ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ea8:	f7ff fe1e 	bl	8007ae8 <USBD_GetString>
 8007eac:	e004      	b.n	8007eb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	4904      	ldr	r1, [pc, #16]	@ (8007ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eb2:	4805      	ldr	r0, [pc, #20]	@ (8007ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007eb4:	f7ff fe18 	bl	8007ae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007eb8:	4b02      	ldr	r3, [pc, #8]	@ (8007ec4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200014f0 	.word	0x200014f0
 8007ec8:	080086ec 	.word	0x080086ec

08007ecc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	4904      	ldr	r1, [pc, #16]	@ (8007eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007edc:	4804      	ldr	r0, [pc, #16]	@ (8007ef0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ede:	f7ff fe03 	bl	8007ae8 <USBD_GetString>
  return USBD_StrDesc;
 8007ee2:	4b02      	ldr	r3, [pc, #8]	@ (8007eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	200014f0 	.word	0x200014f0
 8007ef0:	08008704 	.word	0x08008704

08007ef4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	221a      	movs	r2, #26
 8007f04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f06:	f000 f843 	bl	8007f90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f0a:	4b02      	ldr	r3, [pc, #8]	@ (8007f14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	200000e0 	.word	0x200000e0

08007f18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d105      	bne.n	8007f36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	4907      	ldr	r1, [pc, #28]	@ (8007f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f2e:	4808      	ldr	r0, [pc, #32]	@ (8007f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f30:	f7ff fdda 	bl	8007ae8 <USBD_GetString>
 8007f34:	e004      	b.n	8007f40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4904      	ldr	r1, [pc, #16]	@ (8007f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f3a:	4805      	ldr	r0, [pc, #20]	@ (8007f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f3c:	f7ff fdd4 	bl	8007ae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f40:	4b02      	ldr	r3, [pc, #8]	@ (8007f4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200014f0 	.word	0x200014f0
 8007f50:	08008718 	.word	0x08008718

08007f54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	6039      	str	r1, [r7, #0]
 8007f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d105      	bne.n	8007f72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4907      	ldr	r1, [pc, #28]	@ (8007f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f6a:	4808      	ldr	r0, [pc, #32]	@ (8007f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f6c:	f7ff fdbc 	bl	8007ae8 <USBD_GetString>
 8007f70:	e004      	b.n	8007f7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	4904      	ldr	r1, [pc, #16]	@ (8007f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f76:	4805      	ldr	r0, [pc, #20]	@ (8007f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f78:	f7ff fdb6 	bl	8007ae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f7c:	4b02      	ldr	r3, [pc, #8]	@ (8007f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	200014f0 	.word	0x200014f0
 8007f8c:	08008724 	.word	0x08008724

08007f90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f96:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd4 <Get_SerialNum+0x44>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd8 <Get_SerialNum+0x48>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8007fdc <Get_SerialNum+0x4c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d009      	beq.n	8007fca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	4909      	ldr	r1, [pc, #36]	@ (8007fe0 <Get_SerialNum+0x50>)
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 f814 	bl	8007fe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	4908      	ldr	r1, [pc, #32]	@ (8007fe4 <Get_SerialNum+0x54>)
 8007fc4:	68b8      	ldr	r0, [r7, #8]
 8007fc6:	f000 f80f 	bl	8007fe8 <IntToUnicode>
  }
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	1fff7a10 	.word	0x1fff7a10
 8007fd8:	1fff7a14 	.word	0x1fff7a14
 8007fdc:	1fff7a18 	.word	0x1fff7a18
 8007fe0:	200000e2 	.word	0x200000e2
 8007fe4:	200000f2 	.word	0x200000f2

08007fe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	75fb      	strb	r3, [r7, #23]
 8007ffe:	e027      	b.n	8008050 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	0f1b      	lsrs	r3, r3, #28
 8008004:	2b09      	cmp	r3, #9
 8008006:	d80b      	bhi.n	8008020 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	0f1b      	lsrs	r3, r3, #28
 800800c:	b2da      	uxtb	r2, r3
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	4619      	mov	r1, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	440b      	add	r3, r1
 8008018:	3230      	adds	r2, #48	@ 0x30
 800801a:	b2d2      	uxtb	r2, r2
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	e00a      	b.n	8008036 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	0f1b      	lsrs	r3, r3, #28
 8008024:	b2da      	uxtb	r2, r3
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	4619      	mov	r1, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	440b      	add	r3, r1
 8008030:	3237      	adds	r2, #55	@ 0x37
 8008032:	b2d2      	uxtb	r2, r2
 8008034:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	3301      	adds	r3, #1
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	4413      	add	r3, r2
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	3301      	adds	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]
 8008050:	7dfa      	ldrb	r2, [r7, #23]
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	429a      	cmp	r2, r3
 8008056:	d3d3      	bcc.n	8008000 <IntToUnicode+0x18>
  }
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
	...

08008068 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	@ 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008070:	f107 0314 	add.w	r3, r7, #20
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	609a      	str	r2, [r3, #8]
 800807c:	60da      	str	r2, [r3, #12]
 800807e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008088:	d13a      	bne.n	8008100 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800808a:	2300      	movs	r3, #0
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	4b1e      	ldr	r3, [pc, #120]	@ (8008108 <HAL_PCD_MspInit+0xa0>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008092:	4a1d      	ldr	r2, [pc, #116]	@ (8008108 <HAL_PCD_MspInit+0xa0>)
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	6313      	str	r3, [r2, #48]	@ 0x30
 800809a:	4b1b      	ldr	r3, [pc, #108]	@ (8008108 <HAL_PCD_MspInit+0xa0>)
 800809c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80080aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ac:	2302      	movs	r3, #2
 80080ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080b4:	2303      	movs	r3, #3
 80080b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080b8:	230a      	movs	r3, #10
 80080ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080bc:	f107 0314 	add.w	r3, r7, #20
 80080c0:	4619      	mov	r1, r3
 80080c2:	4812      	ldr	r0, [pc, #72]	@ (800810c <HAL_PCD_MspInit+0xa4>)
 80080c4:	f7f9 ff4a 	bl	8001f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008108 <HAL_PCD_MspInit+0xa0>)
 80080ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080cc:	4a0e      	ldr	r2, [pc, #56]	@ (8008108 <HAL_PCD_MspInit+0xa0>)
 80080ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008108 <HAL_PCD_MspInit+0xa0>)
 80080da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008108 <HAL_PCD_MspInit+0xa0>)
 80080de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80080e4:	4b08      	ldr	r3, [pc, #32]	@ (8008108 <HAL_PCD_MspInit+0xa0>)
 80080e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	2043      	movs	r0, #67	@ 0x43
 80080f6:	f7f9 fb8a 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080fa:	2043      	movs	r0, #67	@ 0x43
 80080fc:	f7f9 fba3 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008100:	bf00      	nop
 8008102:	3728      	adds	r7, #40	@ 0x28
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40023800 	.word	0x40023800
 800810c:	40020000 	.word	0x40020000

08008110 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fe fb7b 	bl	8006822 <USBD_LL_SetupStage>
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	4619      	mov	r1, r3
 800815e:	f7fe fbb5 	bl	80068cc <USBD_LL_DataOutStage>
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	3320      	adds	r3, #32
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	4619      	mov	r1, r3
 8008192:	f7fe fc4e 	bl	8006a32 <USBD_LL_DataInStage>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe fd88 	bl	8006cc2 <USBD_LL_SOF>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081c2:	2301      	movs	r3, #1
 80081c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	79db      	ldrb	r3, [r3, #7]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d001      	beq.n	80081d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081ce:	f7f8 fb55 	bl	800087c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081d8:	7bfa      	ldrb	r2, [r7, #15]
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fd2c 	bl	8006c3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fcd4 	bl	8006b96 <USBD_LL_Reset>
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe fd27 	bl	8006c5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6812      	ldr	r2, [r2, #0]
 800821a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800821e:	f043 0301 	orr.w	r3, r3, #1
 8008222:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7adb      	ldrb	r3, [r3, #11]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800822c:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <HAL_PCD_SuspendCallback+0x48>)
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	4a03      	ldr	r2, [pc, #12]	@ (8008240 <HAL_PCD_SuspendCallback+0x48>)
 8008232:	f043 0306 	orr.w	r3, r3, #6
 8008236:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	e000ed00 	.word	0xe000ed00

08008244 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fd1d 	bl	8006c92 <USBD_LL_Resume>
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fd75 	bl	8006d66 <USBD_LL_IsoOUTIncomplete>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fd31 	bl	8006d02 <USBD_LL_IsoINIncomplete>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fd87 	bl	8006dca <USBD_LL_DevConnected>
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe fd84 	bl	8006de0 <USBD_LL_DevDisconnected>
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d13c      	bne.n	800836a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082f0:	4a20      	ldr	r2, [pc, #128]	@ (8008374 <USBD_LL_Init+0x94>)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008374 <USBD_LL_Init+0x94>)
 80082fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008300:	4b1c      	ldr	r3, [pc, #112]	@ (8008374 <USBD_LL_Init+0x94>)
 8008302:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008306:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008308:	4b1a      	ldr	r3, [pc, #104]	@ (8008374 <USBD_LL_Init+0x94>)
 800830a:	2204      	movs	r2, #4
 800830c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800830e:	4b19      	ldr	r3, [pc, #100]	@ (8008374 <USBD_LL_Init+0x94>)
 8008310:	2202      	movs	r2, #2
 8008312:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008314:	4b17      	ldr	r3, [pc, #92]	@ (8008374 <USBD_LL_Init+0x94>)
 8008316:	2200      	movs	r2, #0
 8008318:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800831a:	4b16      	ldr	r3, [pc, #88]	@ (8008374 <USBD_LL_Init+0x94>)
 800831c:	2202      	movs	r2, #2
 800831e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008320:	4b14      	ldr	r3, [pc, #80]	@ (8008374 <USBD_LL_Init+0x94>)
 8008322:	2200      	movs	r2, #0
 8008324:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008326:	4b13      	ldr	r3, [pc, #76]	@ (8008374 <USBD_LL_Init+0x94>)
 8008328:	2200      	movs	r2, #0
 800832a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800832c:	4b11      	ldr	r3, [pc, #68]	@ (8008374 <USBD_LL_Init+0x94>)
 800832e:	2200      	movs	r2, #0
 8008330:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008332:	4b10      	ldr	r3, [pc, #64]	@ (8008374 <USBD_LL_Init+0x94>)
 8008334:	2200      	movs	r2, #0
 8008336:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008338:	4b0e      	ldr	r3, [pc, #56]	@ (8008374 <USBD_LL_Init+0x94>)
 800833a:	2200      	movs	r2, #0
 800833c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800833e:	480d      	ldr	r0, [pc, #52]	@ (8008374 <USBD_LL_Init+0x94>)
 8008340:	f7f9 ff90 	bl	8002264 <HAL_PCD_Init>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800834a:	f7f8 fa97 	bl	800087c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800834e:	2180      	movs	r1, #128	@ 0x80
 8008350:	4808      	ldr	r0, [pc, #32]	@ (8008374 <USBD_LL_Init+0x94>)
 8008352:	f7fb f9ba 	bl	80036ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008356:	2240      	movs	r2, #64	@ 0x40
 8008358:	2100      	movs	r1, #0
 800835a:	4806      	ldr	r0, [pc, #24]	@ (8008374 <USBD_LL_Init+0x94>)
 800835c:	f7fb f96e 	bl	800363c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008360:	2280      	movs	r2, #128	@ 0x80
 8008362:	2101      	movs	r1, #1
 8008364:	4803      	ldr	r0, [pc, #12]	@ (8008374 <USBD_LL_Init+0x94>)
 8008366:	f7fb f969 	bl	800363c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	200016f0 	.word	0x200016f0

08008378 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800838e:	4618      	mov	r0, r3
 8008390:	f7fa f877 	bl	8002482 <HAL_PCD_Start>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f942 	bl	8008624 <USBD_Get_USB_Status>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	4608      	mov	r0, r1
 80083b8:	4611      	mov	r1, r2
 80083ba:	461a      	mov	r2, r3
 80083bc:	4603      	mov	r3, r0
 80083be:	70fb      	strb	r3, [r7, #3]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70bb      	strb	r3, [r7, #2]
 80083c4:	4613      	mov	r3, r2
 80083c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083d6:	78bb      	ldrb	r3, [r7, #2]
 80083d8:	883a      	ldrh	r2, [r7, #0]
 80083da:	78f9      	ldrb	r1, [r7, #3]
 80083dc:	f7fa fd4b 	bl	8002e76 <HAL_PCD_EP_Open>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f91c 	bl	8008624 <USBD_Get_USB_Status>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008414:	78fa      	ldrb	r2, [r7, #3]
 8008416:	4611      	mov	r1, r2
 8008418:	4618      	mov	r0, r3
 800841a:	f7fa fd94 	bl	8002f46 <HAL_PCD_EP_Close>
 800841e:	4603      	mov	r3, r0
 8008420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 f8fd 	bl	8008624 <USBD_Get_USB_Status>
 800842a:	4603      	mov	r3, r0
 800842c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f7fa fe4c 	bl	80030f4 <HAL_PCD_EP_SetStall>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f8de 	bl	8008624 <USBD_Get_USB_Status>
 8008468:	4603      	mov	r3, r0
 800846a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800846c:	7bbb      	ldrb	r3, [r7, #14]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f7fa fe90 	bl	80031ba <HAL_PCD_EP_ClrStall>
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f8bf 	bl	8008624 <USBD_Get_USB_Status>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	da0b      	bge.n	80084e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084d6:	68f9      	ldr	r1, [r7, #12]
 80084d8:	4613      	mov	r3, r2
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	440b      	add	r3, r1
 80084e2:	3316      	adds	r3, #22
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	e00b      	b.n	8008500 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ee:	68f9      	ldr	r1, [r7, #12]
 80084f0:	4613      	mov	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	440b      	add	r3, r1
 80084fa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80084fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	4611      	mov	r1, r2
 800852a:	4618      	mov	r0, r3
 800852c:	f7fa fc7f 	bl	8002e2e <HAL_PCD_SetAddress>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f874 	bl	8008624 <USBD_Get_USB_Status>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008540:	7bbb      	ldrb	r3, [r7, #14]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
 8008556:	460b      	mov	r3, r1
 8008558:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008568:	7af9      	ldrb	r1, [r7, #11]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	f7fa fd87 	bl	8003080 <HAL_PCD_EP_Transmit>
 8008572:	4603      	mov	r3, r0
 8008574:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008576:	7dfb      	ldrb	r3, [r7, #23]
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f853 	bl	8008624 <USBD_Get_USB_Status>
 800857e:	4603      	mov	r3, r0
 8008580:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008582:	7dbb      	ldrb	r3, [r7, #22]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	460b      	mov	r3, r1
 800859a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085aa:	7af9      	ldrb	r1, [r7, #11]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	f7fa fd13 	bl	8002fda <HAL_PCD_EP_Receive>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f832 	bl	8008624 <USBD_Get_USB_Status>
 80085c0:	4603      	mov	r3, r0
 80085c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085e0:	78fa      	ldrb	r2, [r7, #3]
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fa fd33 	bl	8003050 <HAL_PCD_EP_GetRxCount>
 80085ea:	4603      	mov	r3, r0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085fc:	4b03      	ldr	r3, [pc, #12]	@ (800860c <USBD_static_malloc+0x18>)
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20001bd4 	.word	0x20001bd4

08008610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]

}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	2b03      	cmp	r3, #3
 8008636:	d817      	bhi.n	8008668 <USBD_Get_USB_Status+0x44>
 8008638:	a201      	add	r2, pc, #4	@ (adr r2, 8008640 <USBD_Get_USB_Status+0x1c>)
 800863a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863e:	bf00      	nop
 8008640:	08008651 	.word	0x08008651
 8008644:	08008657 	.word	0x08008657
 8008648:	0800865d 	.word	0x0800865d
 800864c:	08008663 	.word	0x08008663
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73fb      	strb	r3, [r7, #15]
    break;
 8008654:	e00b      	b.n	800866e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	73fb      	strb	r3, [r7, #15]
    break;
 800865a:	e008      	b.n	800866e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800865c:	2301      	movs	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
    break;
 8008660:	e005      	b.n	800866e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008662:	2303      	movs	r3, #3
 8008664:	73fb      	strb	r3, [r7, #15]
    break;
 8008666:	e002      	b.n	800866e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008668:	2303      	movs	r3, #3
 800866a:	73fb      	strb	r3, [r7, #15]
    break;
 800866c:	bf00      	nop
  }
  return usb_status;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <memset>:
 800867c:	4402      	add	r2, r0
 800867e:	4603      	mov	r3, r0
 8008680:	4293      	cmp	r3, r2
 8008682:	d100      	bne.n	8008686 <memset+0xa>
 8008684:	4770      	bx	lr
 8008686:	f803 1b01 	strb.w	r1, [r3], #1
 800868a:	e7f9      	b.n	8008680 <memset+0x4>

0800868c <__libc_init_array>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4d0d      	ldr	r5, [pc, #52]	@ (80086c4 <__libc_init_array+0x38>)
 8008690:	4c0d      	ldr	r4, [pc, #52]	@ (80086c8 <__libc_init_array+0x3c>)
 8008692:	1b64      	subs	r4, r4, r5
 8008694:	10a4      	asrs	r4, r4, #2
 8008696:	2600      	movs	r6, #0
 8008698:	42a6      	cmp	r6, r4
 800869a:	d109      	bne.n	80086b0 <__libc_init_array+0x24>
 800869c:	4d0b      	ldr	r5, [pc, #44]	@ (80086cc <__libc_init_array+0x40>)
 800869e:	4c0c      	ldr	r4, [pc, #48]	@ (80086d0 <__libc_init_array+0x44>)
 80086a0:	f000 f818 	bl	80086d4 <_init>
 80086a4:	1b64      	subs	r4, r4, r5
 80086a6:	10a4      	asrs	r4, r4, #2
 80086a8:	2600      	movs	r6, #0
 80086aa:	42a6      	cmp	r6, r4
 80086ac:	d105      	bne.n	80086ba <__libc_init_array+0x2e>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b4:	4798      	blx	r3
 80086b6:	3601      	adds	r6, #1
 80086b8:	e7ee      	b.n	8008698 <__libc_init_array+0xc>
 80086ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80086be:	4798      	blx	r3
 80086c0:	3601      	adds	r6, #1
 80086c2:	e7f2      	b.n	80086aa <__libc_init_array+0x1e>
 80086c4:	08008754 	.word	0x08008754
 80086c8:	08008754 	.word	0x08008754
 80086cc:	08008754 	.word	0x08008754
 80086d0:	08008758 	.word	0x08008758

080086d4 <_init>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr

080086e0 <_fini>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr
