
Joy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800883c  0800883c  0000983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800889c  0800889c  0000a108  2**0
                  CONTENTS
  4 .ARM          00000008  0800889c  0800889c  0000989c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a4  080088a4  0000a108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a4  080088a4  000098a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088a8  080088a8  000098a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  080088ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf8  20000108  080089b4  0000a108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e00  080089b4  0000ae00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016818  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9e  00000000  00000000  00020950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  000247f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb5  00000000  00000000  00025b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db28  00000000  00000000  00026a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae7a  00000000  00000000  00044535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df7f  00000000  00000000  0005f3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd32e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f34  00000000  00000000  000fd374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001022a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008824 	.word	0x08008824

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	08008824 	.word	0x08008824

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvCpltCallback>:
#define ADC_BUF_LEN 2
uint16_t joyBuf[ADC_BUF_LEN];
bool _btnState = true;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS(buffer, sizeof(buffer));
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d10a      	bne.n	8000502 <HAL_GPIO_EXTI_Callback+0x26>
	{
		CDC_Transmit_FS(bufferBtn, sizeof(bufferBtn));
 80004ec:	2109      	movs	r1, #9
 80004ee:	4807      	ldr	r0, [pc, #28]	@ (800050c <HAL_GPIO_EXTI_Callback+0x30>)
 80004f0:	f007 fd1a 	bl	8007f28 <CDC_Transmit_FS>
		_btnState = !_btnState;
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <HAL_GPIO_EXTI_Callback+0x34>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f083 0301 	eor.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <HAL_GPIO_EXTI_Callback+0x34>)
 8000500:	701a      	strb	r2, [r3, #0]
	}
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000000 	.word	0x20000000
 8000510:	20000009 	.word	0x20000009

08000514 <_Z12EventLoopCppv>:
void EventLoopCpp() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)joyBuf, ADC_BUF_LEN);
 8000518:	2202      	movs	r2, #2
 800051a:	4904      	ldr	r1, [pc, #16]	@ (800052c <_Z12EventLoopCppv+0x18>)
 800051c:	4804      	ldr	r0, [pc, #16]	@ (8000530 <_Z12EventLoopCppv+0x1c>)
 800051e:	f000 fcfd 	bl	8000f1c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8000522:	4804      	ldr	r0, [pc, #16]	@ (8000534 <_Z12EventLoopCppv+0x20>)
 8000524:	f003 fdb0 	bl	8004088 <HAL_TIM_Base_Start>
	while (1) {
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <_Z12EventLoopCppv+0x14>
 800052c:	20000124 	.word	0x20000124
 8000530:	20000128 	.word	0x20000128
 8000534:	200001d0 	.word	0x200001d0

08000538 <EventLoopC>:
	}
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	EventLoopCpp();
 800053c:	f7ff ffea 	bl	8000514 <_Z12EventLoopCppv>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000556:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <MX_ADC1_Init+0xb8>)
 8000558:	4a29      	ldr	r2, [pc, #164]	@ (8000600 <MX_ADC1_Init+0xbc>)
 800055a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800055c:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <MX_ADC1_Init+0xb8>)
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000562:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <MX_ADC1_Init+0xb8>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000568:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <MX_ADC1_Init+0xb8>)
 800056a:	2201      	movs	r2, #1
 800056c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800056e:	4b23      	ldr	r3, [pc, #140]	@ (80005fc <MX_ADC1_Init+0xb8>)
 8000570:	2201      	movs	r2, #1
 8000572:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <MX_ADC1_Init+0xb8>)
 8000576:	2200      	movs	r2, #0
 8000578:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <MX_ADC1_Init+0xb8>)
 800057e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <MX_ADC1_Init+0xb8>)
 8000586:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800058a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_ADC1_Init+0xb8>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000592:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <MX_ADC1_Init+0xb8>)
 8000594:	2202      	movs	r2, #2
 8000596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_ADC1_Init+0xb8>)
 800059a:	2201      	movs	r2, #1
 800059c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005a0:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <MX_ADC1_Init+0xb8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a6:	4815      	ldr	r0, [pc, #84]	@ (80005fc <MX_ADC1_Init+0xb8>)
 80005a8:	f000 fb64 	bl	8000c74 <HAL_ADC_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80005b2:	f000 f987 	bl	80008c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4619      	mov	r1, r3
 80005c6:	480d      	ldr	r0, [pc, #52]	@ (80005fc <MX_ADC1_Init+0xb8>)
 80005c8:	f000 fdb6 	bl	8001138 <HAL_ADC_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005d2:	f000 f977 	bl	80008c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	4619      	mov	r1, r3
 80005e2:	4806      	ldr	r0, [pc, #24]	@ (80005fc <MX_ADC1_Init+0xb8>)
 80005e4:	f000 fda8 	bl	8001138 <HAL_ADC_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80005ee:	f000 f969 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000128 	.word	0x20000128
 8000600:	40012000 	.word	0x40012000

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a33      	ldr	r2, [pc, #204]	@ (80006f0 <HAL_ADC_MspInit+0xec>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d15f      	bne.n	80006e6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b32      	ldr	r3, [pc, #200]	@ (80006f4 <HAL_ADC_MspInit+0xf0>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062e:	4a31      	ldr	r2, [pc, #196]	@ (80006f4 <HAL_ADC_MspInit+0xf0>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6453      	str	r3, [r2, #68]	@ 0x44
 8000636:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <HAL_ADC_MspInit+0xf0>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <HAL_ADC_MspInit+0xf0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <HAL_ADC_MspInit+0xf0>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <HAL_ADC_MspInit+0xf0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 800065e:	2303      	movs	r3, #3
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <HAL_ADC_MspInit+0xf4>)
 8000672:	f001 fc9d 	bl	8001fb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000676:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <HAL_ADC_MspInit+0xfc>)
 800067a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000688:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 8000690:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000694:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000696:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 8000698:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800069c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 80006a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 80006a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ba:	4810      	ldr	r0, [pc, #64]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 80006bc:	f001 f908 	bl	80018d0 <HAL_DMA_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006c6:	f000 f8fd 	bl	80008c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 80006ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80006d0:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <HAL_ADC_MspInit+0xf8>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2012      	movs	r0, #18
 80006dc:	f001 f8c1 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006e0:	2012      	movs	r0, #18
 80006e2:	f001 f8da 	bl	800189a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	@ 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20000170 	.word	0x20000170
 8000700:	40026410 	.word	0x40026410

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_DMA_Init+0x3c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <MX_DMA_Init+0x3c>)
 8000714:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_DMA_Init+0x3c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2038      	movs	r0, #56	@ 0x38
 800072c:	f001 f899 	bl	8001862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000730:	2038      	movs	r0, #56	@ 0x38
 8000732:	f001 f8b2 	bl	800189a <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_GPIO_Init+0x80>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_GPIO_Init+0x80>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_GPIO_Init+0x80>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_GPIO_Init+0x80>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a11      	ldr	r2, [pc, #68]	@ (80007c4 <MX_GPIO_Init+0x80>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_GPIO_Init+0x80>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 8000792:	2304      	movs	r3, #4
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000796:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079c:	2301      	movs	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <MX_GPIO_Init+0x84>)
 80007a8:	f001 fc02 	bl	8001fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2008      	movs	r0, #8
 80007b2:	f001 f856 	bl	8001862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007b6:	2008      	movs	r0, #8
 80007b8:	f001 f86f 	bl	800189a <HAL_NVIC_EnableIRQ>

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 f9ba 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f80e 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f7ff ffb4 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 80007dc:	f7ff ff92 	bl	8000704 <MX_DMA_Init>
  MX_ADC1_Init();
 80007e0:	f7ff feb0 	bl	8000544 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80007e4:	f007 fae2 	bl	8007dac <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80007e8:	f000 f900 	bl	80009ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  EventLoopC();
 80007ec:	f7ff fea4 	bl	8000538 <EventLoopC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <main+0x24>

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	@ 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	@ 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f007 ffe2 	bl	80087cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <SystemClock_Config+0xc8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a26      	ldr	r2, [pc, #152]	@ (80008bc <SystemClock_Config+0xc8>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <SystemClock_Config+0xc8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <SystemClock_Config+0xcc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a20      	ldr	r2, [pc, #128]	@ (80008c0 <SystemClock_Config+0xcc>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <SystemClock_Config+0xcc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000864:	230f      	movs	r3, #15
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000868:	2390      	movs	r3, #144	@ 0x90
 800086a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086c:	2304      	movs	r3, #4
 800086e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000870:	2305      	movs	r3, #5
 8000872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f002 ff85 	bl	8003788 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000884:	f000 f81e 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 f9e7 	bl	8003c78 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008b0:	f000 f808 	bl	80008c4 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	@ 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a0f      	ldr	r2, [pc, #60]	@ (800091c <HAL_MspInit+0x4c>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	@ (800091c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <NMI_Handler+0x4>

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <MemManage_Handler+0x4>

08000938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <UsageFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000976:	f000 f939 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}

0800097e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_BTN_Pin);
 8000982:	2004      	movs	r0, #4
 8000984:	f001 fc98 	bl	80022b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <ADC_IRQHandler+0x10>)
 8000992:	f000 f9b2 	bl	8000cfa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000128 	.word	0x20000128

080009a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009a4:	4802      	ldr	r0, [pc, #8]	@ (80009b0 <DMA2_Stream0_IRQHandler+0x10>)
 80009a6:	f001 f899 	bl	8001adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000170 	.word	0x20000170

080009b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <OTG_FS_IRQHandler+0x10>)
 80009ba:	f001 fdd9 	bl	8002570 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200016fc 	.word	0x200016fc

080009c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	@ 0x30
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a18:	4b25      	ldr	r3, [pc, #148]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 8000a20:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a22:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a30:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a42:	481b      	ldr	r0, [pc, #108]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a44:	f003 fad0 	bl	8003fe8 <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a4e:	f7ff ff39 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a56:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4814      	ldr	r0, [pc, #80]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a60:	f003 fb6c 	bl	800413c <HAL_TIM_ConfigClockSource>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a6a:	f7ff ff2b 	bl	80008c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a7e:	f003 fc24 	bl	80042ca <HAL_TIM_SlaveConfigSynchro>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a88:	f7ff ff1c 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_TIM2_Init+0xc4>)
 8000a9a:	f003 fe11 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000aa4:	f7ff ff0e 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	@ 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200001d0 	.word	0x200001d0

08000ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ac4:	d10d      	bne.n	8000ae2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_TIM_Base_MspInit+0x3c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af8:	f7ff ff66 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	@ (8000b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f007 fe5b 	bl	80087dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fe51 	bl	80007cc <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000b38:	080088ac 	.word	0x080088ac
  ldr r2, =_sbss
 8000b3c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000b40:	20001e00 	.word	0x20001e00

08000b44 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <DMA1_Stream0_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 fe6b 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fea8 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fe83 	bl	80018b6 <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 fe4b 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000000c 	.word	0x2000000c
 8000be4:	20000014 	.word	0x20000014
 8000be8:	20000010 	.word	0x20000010

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000014 	.word	0x20000014
 8000c10:	20000218 	.word	0x20000218

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000218 	.word	0x20000218

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000014 	.word	0x20000014

08000c74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e033      	b.n	8000cf2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d109      	bne.n	8000ca6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fcb6 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d118      	bne.n	8000ce4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cba:	f023 0302 	bic.w	r3, r3, #2
 8000cbe:	f043 0202 	orr.w	r2, r3, #2
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 fb68 	bl	800139c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f023 0303 	bic.w	r3, r3, #3
 8000cda:	f043 0201 	orr.w	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ce2:	e001      	b.n	8000ce8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	f003 0320 	and.w	r3, r3, #32
 8000d28:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d049      	beq.n	8000dc4 <HAL_ADC_IRQHandler+0xca>
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d046      	beq.n	8000dc4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d105      	bne.n	8000d4e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d12b      	bne.n	8000db4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d127      	bne.n	8000db4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d006      	beq.n	8000d80 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d119      	bne.n	8000db4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0220 	bic.w	r2, r2, #32
 8000d8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d105      	bne.n	8000db4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f043 0201 	orr.w	r2, r3, #1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fb87 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f06f 0212 	mvn.w	r2, #18
 8000dc2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d057      	beq.n	8000e8a <HAL_ADC_IRQHandler+0x190>
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d054      	beq.n	8000e8a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d105      	bne.n	8000df8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d139      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e0c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d12b      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d124      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d11d      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d119      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e54:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d105      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fc0c 	bl	8001698 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f06f 020c 	mvn.w	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e98:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d017      	beq.n	8000ed0 <HAL_ADC_IRQHandler+0x1d6>
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d014      	beq.n	8000ed0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d10d      	bne.n	8000ed0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f000 f925 	bl	8001110 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f06f 0201 	mvn.w	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0320 	and.w	r3, r3, #32
 8000ed6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ede:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d015      	beq.n	8000f12 <HAL_ADC_IRQHandler+0x218>
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d012      	beq.n	8000f12 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef0:	f043 0202 	orr.w	r2, r3, #2
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f06f 0220 	mvn.w	r2, #32
 8000f00:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f90e 	bl	8001124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f06f 0220 	mvn.w	r2, #32
 8000f10:	601a      	str	r2, [r3, #0]
  }
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_Start_DMA+0x1e>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e0ce      	b.n	80010d8 <HAL_ADC_Start_DMA+0x1bc>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d018      	beq.n	8000f82 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f60:	4b5f      	ldr	r3, [pc, #380]	@ (80010e0 <HAL_ADC_Start_DMA+0x1c4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a5f      	ldr	r2, [pc, #380]	@ (80010e4 <HAL_ADC_Start_DMA+0x1c8>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0c9a      	lsrs	r2, r3, #18
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f74:	e002      	b.n	8000f7c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f9      	bne.n	8000f76 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f90:	d107      	bne.n	8000fa2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fa0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	f040 8086 	bne.w	80010be <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d007      	beq.n	8000fe4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fdc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ff0:	d106      	bne.n	8001000 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f023 0206 	bic.w	r2, r3, #6
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ffe:	e002      	b.n	8001006 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800100e:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <HAL_ADC_Start_DMA+0x1cc>)
 8001010:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001016:	4a35      	ldr	r2, [pc, #212]	@ (80010ec <HAL_ADC_Start_DMA+0x1d0>)
 8001018:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101e:	4a34      	ldr	r2, [pc, #208]	@ (80010f0 <HAL_ADC_Start_DMA+0x1d4>)
 8001020:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001026:	4a33      	ldr	r2, [pc, #204]	@ (80010f4 <HAL_ADC_Start_DMA+0x1d8>)
 8001028:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001032:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001042:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001052:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	334c      	adds	r3, #76	@ 0x4c
 800105e:	4619      	mov	r1, r3
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f000 fce2 	bl	8001a2c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10f      	bne.n	8001094 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d129      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	e020      	b.n	80010d6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <HAL_ADC_Start_DMA+0x1dc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d11b      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x1ba>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d114      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	e00b      	b.n	80010d6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	f043 0210 	orr.w	r2, r3, #16
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	431bde83 	.word	0x431bde83
 80010e8:	40012300 	.word	0x40012300
 80010ec:	08001595 	.word	0x08001595
 80010f0:	0800164f 	.word	0x0800164f
 80010f4:	0800166b 	.word	0x0800166b
 80010f8:	40012000 	.word	0x40012000

080010fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800114c:	2b01      	cmp	r3, #1
 800114e:	d101      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1c>
 8001150:	2302      	movs	r3, #2
 8001152:	e113      	b.n	800137c <HAL_ADC_ConfigChannel+0x244>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b09      	cmp	r3, #9
 8001162:	d925      	bls.n	80011b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68d9      	ldr	r1, [r3, #12]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	3b1e      	subs	r3, #30
 800117a:	2207      	movs	r2, #7
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43da      	mvns	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	400a      	ands	r2, r1
 8001188:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68d9      	ldr	r1, [r3, #12]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	4603      	mov	r3, r0
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4403      	add	r3, r0
 80011a2:	3b1e      	subs	r3, #30
 80011a4:	409a      	lsls	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	e022      	b.n	80011f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6919      	ldr	r1, [r3, #16]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	2207      	movs	r2, #7
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	400a      	ands	r2, r1
 80011d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6919      	ldr	r1, [r3, #16]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4403      	add	r3, r0
 80011ec:	409a      	lsls	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d824      	bhi.n	8001248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b05      	subs	r3, #5
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	400a      	ands	r2, r1
 800121e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b05      	subs	r3, #5
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	635a      	str	r2, [r3, #52]	@ 0x34
 8001246:	e04c      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d824      	bhi.n	800129a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b23      	subs	r3, #35	@ 0x23
 8001262:	221f      	movs	r2, #31
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43da      	mvns	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	400a      	ands	r2, r1
 8001270:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	3b23      	subs	r3, #35	@ 0x23
 800128c:	fa00 f203 	lsl.w	r2, r0, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	631a      	str	r2, [r3, #48]	@ 0x30
 8001298:	e023      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	3b41      	subs	r3, #65	@ 0x41
 80012ac:	221f      	movs	r2, #31
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	400a      	ands	r2, r1
 80012ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b41      	subs	r3, #65	@ 0x41
 80012d6:	fa00 f203 	lsl.w	r2, r0, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e2:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <HAL_ADC_ConfigChannel+0x250>)
 80012e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a28      	ldr	r2, [pc, #160]	@ (800138c <HAL_ADC_ConfigChannel+0x254>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d10f      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1d8>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b12      	cmp	r3, #18
 80012f6:	d10b      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <HAL_ADC_ConfigChannel+0x254>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12b      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x23a>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <HAL_ADC_ConfigChannel+0x258>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d003      	beq.n	800132c <HAL_ADC_ConfigChannel+0x1f4>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b11      	cmp	r3, #17
 800132a:	d122      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <HAL_ADC_ConfigChannel+0x258>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d111      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <HAL_ADC_ConfigChannel+0x25c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a11      	ldr	r2, [pc, #68]	@ (8001398 <HAL_ADC_ConfigChannel+0x260>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9a      	lsrs	r2, r3, #18
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001364:	e002      	b.n	800136c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3b01      	subs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40012300 	.word	0x40012300
 800138c:	40012000 	.word	0x40012000
 8001390:	10000012 	.word	0x10000012
 8001394:	2000000c 	.word	0x2000000c
 8001398:	431bde83 	.word	0x431bde83

0800139c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a4:	4b79      	ldr	r3, [pc, #484]	@ (800158c <ADC_Init+0x1f0>)
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	431a      	orrs	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	021a      	lsls	r2, r3, #8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6899      	ldr	r1, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142e:	4a58      	ldr	r2, [pc, #352]	@ (8001590 <ADC_Init+0x1f4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d022      	beq.n	800147a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6899      	ldr	r1, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6899      	ldr	r1, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	e00f      	b.n	800149a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001498:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0202 	bic.w	r2, r2, #2
 80014a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6899      	ldr	r1, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7e1b      	ldrb	r3, [r3, #24]
 80014b4:	005a      	lsls	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01b      	beq.n	8001500 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	3b01      	subs	r3, #1
 80014f4:	035a      	lsls	r2, r3, #13
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	e007      	b.n	8001510 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800150e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	3b01      	subs	r3, #1
 800152c:	051a      	lsls	r2, r3, #20
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6899      	ldr	r1, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001552:	025a      	lsls	r2, r3, #9
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800156a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6899      	ldr	r1, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	029a      	lsls	r2, r3, #10
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	609a      	str	r2, [r3, #8]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40012300 	.word	0x40012300
 8001590:	0f000001 	.word	0x0f000001

08001594 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d13c      	bne.n	8001628 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d12b      	bne.n	8001620 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d127      	bne.n	8001620 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d119      	bne.n	8001620 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0220 	bic.w	r2, r2, #32
 80015fa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7fe ff51 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001626:	e00e      	b.n	8001646 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff fd75 	bl	8001124 <HAL_ADC_ErrorCallback>
}
 800163a:	e004      	b.n	8001646 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800165a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff fd4d 	bl	80010fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001676:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2240      	movs	r2, #64	@ 0x40
 800167c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f043 0204 	orr.w	r2, r3, #4
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff fd4a 	bl	8001124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	@ (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff29 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff3e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff31 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffa2 	bl	8001808 <SysTick_Config>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff f99a 	bl	8000c14 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e099      	b.n	8001a20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800190c:	e00f      	b.n	800192e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800190e:	f7ff f981 	bl	8000c14 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b05      	cmp	r3, #5
 800191a:	d908      	bls.n	800192e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2203      	movs	r2, #3
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e078      	b.n	8001a20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e8      	bne.n	800190e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4b38      	ldr	r3, [pc, #224]	@ (8001a28 <HAL_DMA_Init+0x158>)
 8001948:	4013      	ands	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800195a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	2b04      	cmp	r3, #4
 8001986:	d107      	bne.n	8001998 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001990:	4313      	orrs	r3, r2
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f023 0307 	bic.w	r3, r3, #7
 80019ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d117      	bne.n	80019f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00e      	beq.n	80019f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fa6f 	bl	8001eb8 <DMA_CheckFifoParam>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2240      	movs	r2, #64	@ 0x40
 80019e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019ee:	2301      	movs	r3, #1
 80019f0:	e016      	b.n	8001a20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fa26 	bl	8001e4c <DMA_CalcBaseAndBitshift>
 8001a00:	4603      	mov	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a08:	223f      	movs	r2, #63	@ 0x3f
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	f010803f 	.word	0xf010803f

08001a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_DMA_Start_IT+0x26>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e040      	b.n	8001ad4 <HAL_DMA_Start_IT+0xa8>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d12f      	bne.n	8001ac6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f9b8 	bl	8001df0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a84:	223f      	movs	r2, #63	@ 0x3f
 8001a86:	409a      	lsls	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0216 	orr.w	r2, r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0208 	orr.w	r2, r2, #8
 8001ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e005      	b.n	8001ad2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8001d24 <HAL_DMA_IRQHandler+0x248>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a8e      	ldr	r2, [pc, #568]	@ (8001d28 <HAL_DMA_IRQHandler+0x24c>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0a9b      	lsrs	r3, r3, #10
 8001af4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b06:	2208      	movs	r2, #8
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d01a      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0204 	bic.w	r2, r2, #4
 8001b2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	2208      	movs	r2, #8
 8001b36:	409a      	lsls	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d012      	beq.n	8001b7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b76:	f043 0202 	orr.w	r2, r3, #2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	2204      	movs	r2, #4
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d012      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bac:	f043 0204 	orr.w	r2, r3, #4
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb8:	2210      	movs	r2, #16
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d043      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d03c      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d018      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d108      	bne.n	8001c0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d024      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
 8001c0a:	e01f      	b.n	8001c4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	4798      	blx	r3
 8001c1c:	e016      	b.n	8001c4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d107      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0208 	bic.w	r2, r2, #8
 8001c3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c50:	2220      	movs	r2, #32
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 808f 	beq.w	8001d7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8087 	beq.w	8001d7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	2220      	movs	r2, #32
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d136      	bne.n	8001cf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0216 	bic.w	r2, r2, #22
 8001c94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ca4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <HAL_DMA_IRQHandler+0x1da>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cca:	223f      	movs	r2, #63	@ 0x3f
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d07e      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
        }
        return;
 8001cf2:	e079      	b.n	8001de8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d01d      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10d      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d031      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
 8001d20:	e02c      	b.n	8001d7c <HAL_DMA_IRQHandler+0x2a0>
 8001d22:	bf00      	nop
 8001d24:	2000000c 	.word	0x2000000c
 8001d28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
 8001d3c:	e01e      	b.n	8001d7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10f      	bne.n	8001d6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0210 	bic.w	r2, r2, #16
 8001d5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d032      	beq.n	8001dea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d022      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2205      	movs	r2, #5
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d307      	bcc.n	8001dc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f2      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x2cc>
 8001dc2:	e000      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
 8001de6:	e000      	b.n	8001dea <HAL_DMA_IRQHandler+0x30e>
        return;
 8001de8:	bf00      	nop
    }
  }
}
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b40      	cmp	r3, #64	@ 0x40
 8001e1c:	d108      	bne.n	8001e30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e2e:	e007      	b.n	8001e40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	60da      	str	r2, [r3, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3b10      	subs	r3, #16
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <DMA_CalcBaseAndBitshift+0x64>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e66:	4a13      	ldr	r2, [pc, #76]	@ (8001eb4 <DMA_CalcBaseAndBitshift+0x68>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d909      	bls.n	8001e8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	1d1a      	adds	r2, r3, #4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e8c:	e007      	b.n	8001e9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e96:	f023 0303 	bic.w	r3, r3, #3
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	aaaaaaab 	.word	0xaaaaaaab
 8001eb4:	08008894 	.word	0x08008894

08001eb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11f      	bne.n	8001f12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d856      	bhi.n	8001f86 <DMA_CheckFifoParam+0xce>
 8001ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee0 <DMA_CheckFifoParam+0x28>)
 8001eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ede:	bf00      	nop
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08001f03 	.word	0x08001f03
 8001ee8:	08001ef1 	.word	0x08001ef1
 8001eec:	08001f87 	.word	0x08001f87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d046      	beq.n	8001f8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f00:	e043      	b.n	8001f8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f0a:	d140      	bne.n	8001f8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f10:	e03d      	b.n	8001f8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f1a:	d121      	bne.n	8001f60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d837      	bhi.n	8001f92 <DMA_CheckFifoParam+0xda>
 8001f22:	a201      	add	r2, pc, #4	@ (adr r2, 8001f28 <DMA_CheckFifoParam+0x70>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f39 	.word	0x08001f39
 8001f2c:	08001f3f 	.word	0x08001f3f
 8001f30:	08001f39 	.word	0x08001f39
 8001f34:	08001f51 	.word	0x08001f51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f3c:	e030      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d025      	beq.n	8001f96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4e:	e022      	b.n	8001f96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f58:	d11f      	bne.n	8001f9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f5e:	e01c      	b.n	8001f9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d903      	bls.n	8001f6e <DMA_CheckFifoParam+0xb6>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d003      	beq.n	8001f74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f6c:	e018      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
      break;
 8001f72:	e015      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00e      	beq.n	8001f9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      break;
 8001f84:	e00b      	b.n	8001f9e <DMA_CheckFifoParam+0xe6>
      break;
 8001f86:	bf00      	nop
 8001f88:	e00a      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e008      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f8e:	bf00      	nop
 8001f90:	e006      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f92:	bf00      	nop
 8001f94:	e004      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f96:	bf00      	nop
 8001f98:	e002      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f9a:	bf00      	nop
 8001f9c:	e000      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f9e:	bf00      	nop
    }
  } 
  
  return status; 
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e159      	b.n	8002280 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 8148 	bne.w	800227a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d005      	beq.n	8002002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d130      	bne.n	8002064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b03      	cmp	r3, #3
 800206e:	d017      	beq.n	80020a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d123      	bne.n	80020f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a2 	beq.w	800227a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b57      	ldr	r3, [pc, #348]	@ (8002298 <HAL_GPIO_Init+0x2e8>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	4a56      	ldr	r2, [pc, #344]	@ (8002298 <HAL_GPIO_Init+0x2e8>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002144:	6453      	str	r3, [r2, #68]	@ 0x44
 8002146:	4b54      	ldr	r3, [pc, #336]	@ (8002298 <HAL_GPIO_Init+0x2e8>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002152:	4a52      	ldr	r2, [pc, #328]	@ (800229c <HAL_GPIO_Init+0x2ec>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a49      	ldr	r2, [pc, #292]	@ (80022a0 <HAL_GPIO_Init+0x2f0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x202>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a48      	ldr	r2, [pc, #288]	@ (80022a4 <HAL_GPIO_Init+0x2f4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x1fe>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a47      	ldr	r2, [pc, #284]	@ (80022a8 <HAL_GPIO_Init+0x2f8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x1fa>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a46      	ldr	r2, [pc, #280]	@ (80022ac <HAL_GPIO_Init+0x2fc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x1f6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a45      	ldr	r2, [pc, #276]	@ (80022b0 <HAL_GPIO_Init+0x300>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x1f2>
 800219e:	2304      	movs	r3, #4
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x204>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4935      	ldr	r1, [pc, #212]	@ (800229c <HAL_GPIO_Init+0x2ec>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a2f      	ldr	r2, [pc, #188]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b2d      	ldr	r3, [pc, #180]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a24      	ldr	r2, [pc, #144]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002226:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224a:	4a1a      	ldr	r2, [pc, #104]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002250:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002274:	4a0f      	ldr	r2, [pc, #60]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f aea2 	bls.w	8001fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f900 	bl	80004dc <HAL_GPIO_EXTI_Callback>
  }
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40013c00 	.word	0x40013c00

080022e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e101      	b.n	80024fe <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f005 ff4f 	bl	80081b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002328:	d102      	bne.n	8002330 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f002 fb48 	bl	80049ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7c1a      	ldrb	r2, [r3, #16]
 8002342:	f88d 2000 	strb.w	r2, [sp]
 8002346:	3304      	adds	r3, #4
 8002348:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234a:	f002 fa27 	bl	800479c <USB_CoreInit>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0ce      	b.n	80024fe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f002 fb40 	bl	80049ec <USB_SetCurrentMode>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0bf      	b.n	80024fe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	e04a      	b.n	800241a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3315      	adds	r3, #21
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3314      	adds	r3, #20
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	b298      	uxth	r0, r3
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	332e      	adds	r3, #46	@ 0x2e
 80023c0:	4602      	mov	r2, r0
 80023c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3318      	adds	r3, #24
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	331c      	adds	r3, #28
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3320      	adds	r3, #32
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3324      	adds	r3, #36	@ 0x24
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	3301      	adds	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	791b      	ldrb	r3, [r3, #4]
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	429a      	cmp	r2, r3
 8002422:	d3af      	bcc.n	8002384 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	e044      	b.n	80024b4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	3301      	adds	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d3b5      	bcc.n	800242a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7c1a      	ldrb	r2, [r3, #16]
 80024c6:	f88d 2000 	strb.w	r2, [sp]
 80024ca:	3304      	adds	r3, #4
 80024cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ce:	f002 fad9 	bl	8004a84 <USB_DevInit>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e00c      	b.n	80024fe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fb1d 	bl	8005b36 <USB_DevDisconnect>

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_PCD_Start+0x1c>
 800251e:	2302      	movs	r3, #2
 8002520:	e022      	b.n	8002568 <HAL_PCD_Start+0x62>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800253a:	2b01      	cmp	r3, #1
 800253c:	d105      	bne.n	800254a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002542:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f002 fa2a 	bl	80049a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f003 facb 	bl	8005af4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b08d      	sub	sp, #52	@ 0x34
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fb89 	bl	8005c9e <USB_GetMode>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 848c 	bne.w	8002eac <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 faed 	bl	8005b78 <USB_ReadInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8482 	beq.w	8002eaa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fada 	bl	8005b78 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d107      	bne.n	80025de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f002 0202 	and.w	r2, r2, #2
 80025dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fac8 	bl	8005b78 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d161      	bne.n	80026b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0210 	bic.w	r2, r2, #16
 8002600:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f003 020f 	and.w	r2, r3, #15
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	3304      	adds	r3, #4
 8002620:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	0c5b      	lsrs	r3, r3, #17
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	2b02      	cmp	r3, #2
 800262c:	d124      	bne.n	8002678 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d035      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6a38      	ldr	r0, [r7, #32]
 800264e:	f003 f8ff 	bl	8005850 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800265e:	441a      	add	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002670:	441a      	add	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	615a      	str	r2, [r3, #20]
 8002676:	e016      	b.n	80026a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	0c5b      	lsrs	r3, r3, #17
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	2b06      	cmp	r3, #6
 8002682:	d110      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800268a:	2208      	movs	r2, #8
 800268c:	4619      	mov	r1, r3
 800268e:	6a38      	ldr	r0, [r7, #32]
 8002690:	f003 f8de 	bl	8005850 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a0:	441a      	add	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0210 	orr.w	r2, r2, #16
 80026b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 fa5c 	bl	8005b78 <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026ca:	f040 80a7 	bne.w	800281c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fa61 	bl	8005b9e <USB_ReadDevAllOutEpInterrupt>
 80026dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80026de:	e099      	b.n	8002814 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 808e 	beq.w	8002808 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fa85 	bl	8005c06 <USB_ReadDevOutEPInterrupt>
 80026fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	2301      	movs	r3, #1
 8002718:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800271a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fea1 	bl	8003464 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00c      	beq.n	8002746 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2308      	movs	r3, #8
 800273c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800273e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 ff77 	bl	8003634 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	2310      	movs	r3, #16
 8002760:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d030      	beq.n	80027ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002774:	2b80      	cmp	r3, #128	@ 0x80
 8002776:	d109      	bne.n	800278c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002786:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800278a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800278c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	3304      	adds	r3, #4
 80027a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	78db      	ldrb	r3, [r3, #3]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d108      	bne.n	80027bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f005 fdfa 	bl	80083b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c8:	461a      	mov	r2, r3
 80027ca:	2302      	movs	r3, #2
 80027cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e4:	461a      	mov	r2, r3
 80027e6:	2320      	movs	r3, #32
 80027e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d009      	beq.n	8002808 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002800:	461a      	mov	r2, r3
 8002802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002806:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	3301      	adds	r3, #1
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800280e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	f47f af62 	bne.w	80026e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f003 f9a9 	bl	8005b78 <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002830:	f040 80db 	bne.w	80029ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f003 f9ca 	bl	8005bd2 <USB_ReadDevAllInEpInterrupt>
 800283e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002844:	e0cd      	b.n	80029e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80c2 	beq.w	80029d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f003 f9f0 	bl	8005c42 <USB_ReadDevInEPInterrupt>
 8002862:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d057      	beq.n	800291e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	2201      	movs	r2, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	69f9      	ldr	r1, [r7, #28]
 800288a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800288e:	4013      	ands	r3, r2
 8002890:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800289e:	461a      	mov	r2, r3
 80028a0:	2301      	movs	r3, #1
 80028a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	799b      	ldrb	r3, [r3, #6]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d132      	bne.n	8002912 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3320      	adds	r3, #32
 80028bc:	6819      	ldr	r1, [r3, #0]
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4403      	add	r3, r0
 80028cc:	331c      	adds	r3, #28
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4419      	add	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4403      	add	r3, r0
 80028e0:	3320      	adds	r3, #32
 80028e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <HAL_PCD_IRQHandler+0x3a2>
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3324      	adds	r3, #36	@ 0x24
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d108      	bne.n	8002912 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800290a:	461a      	mov	r2, r3
 800290c:	2101      	movs	r1, #1
 800290e:	f003 f9f7 	bl	8005d00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	b2db      	uxtb	r3, r3
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f005 fcce 	bl	80082ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002934:	461a      	mov	r2, r3
 8002936:	2308      	movs	r3, #8
 8002938:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002950:	461a      	mov	r2, r3
 8002952:	2310      	movs	r3, #16
 8002954:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800296c:	461a      	mov	r2, r3
 800296e:	2340      	movs	r3, #64	@ 0x40
 8002970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d023      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800297c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800297e:	6a38      	ldr	r0, [r7, #32]
 8002980:	f002 f9e4 	bl	8004d4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	3310      	adds	r3, #16
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	78db      	ldrb	r3, [r3, #3]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2200      	movs	r2, #0
 80029a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f005 fd11 	bl	80083d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029be:	461a      	mov	r2, r3
 80029c0:	2302      	movs	r3, #2
 80029c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fcbb 	bl	800334c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	3301      	adds	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f af2e 	bne.w	8002846 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f8c2 	bl	8005b78 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029fe:	d122      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a26:	2100      	movs	r1, #0
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fea1 	bl	8003770 <HAL_PCDEx_LPM_Callback>
 8002a2e:	e002      	b.n	8002a36 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f005 fcaf 	bl	8008394 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 f894 	bl	8005b78 <USB_ReadInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a5a:	d112      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d102      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f005 fc6b 	bl	8008348 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a80:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 f876 	bl	8005b78 <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a96:	f040 80b7 	bne.w	8002c08 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 f949 	bl	8004d4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002abe:	e046      	b.n	8002b4e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002acc:	461a      	mov	r2, r3
 8002ace:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ad2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ae4:	0151      	lsls	r1, r2, #5
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	440a      	add	r2, r1
 8002aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002aee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002af2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b00:	461a      	mov	r2, r3
 8002b02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b18:	0151      	lsls	r1, r2, #5
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b38:	0151      	lsls	r1, r2, #5
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	791b      	ldrb	r3, [r3, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d3b2      	bcc.n	8002ac0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b68:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7bdb      	ldrb	r3, [r3, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b86:	f043 030b 	orr.w	r3, r3, #11
 8002b8a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b9c:	f043 030b 	orr.w	r3, r3, #11
 8002ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba2:	e015      	b.n	8002bd0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bb6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002bba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bca:	f043 030b 	orr.w	r3, r3, #11
 8002bce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bde:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002be2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f003 f884 	bl	8005d00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 ffb3 	bl	8005b78 <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c1c:	d123      	bne.n	8002c66 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 f849 	bl	8005cba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 f906 	bl	8004e3e <USB_GetDevSpeed>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681c      	ldr	r4, [r3, #0]
 8002c3e:	f001 f9c7 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8002c42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f001 fe0a 	bl	8004864 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f005 fb5a 	bl	800830a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 ff84 	bl	8005b78 <USB_ReadInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d10a      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f005 fb37 	bl	80082ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f002 0208 	and.w	r2, r2, #8
 8002c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 ff6f 	bl	8005b78 <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca0:	2b80      	cmp	r3, #128	@ 0x80
 8002ca2:	d123      	bne.n	8002cec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb4:	e014      	b.n	8002ce0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fb08 	bl	80032ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	3301      	adds	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	791b      	ldrb	r3, [r3, #4]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d3e4      	bcc.n	8002cb6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 ff41 	bl	8005b78 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d00:	d13c      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d02:	2301      	movs	r3, #1
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d06:	e02b      	b.n	8002d60 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	3318      	adds	r3, #24
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d115      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da12      	bge.n	8002d5a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3317      	adds	r3, #23
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fac8 	bl	80032ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	791b      	ldrb	r3, [r3, #4]
 8002d64:	461a      	mov	r2, r3
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d3cd      	bcc.n	8002d08 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f002 fef9 	bl	8005b78 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d90:	d156      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d92:	2301      	movs	r3, #1
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d96:	e045      	b.n	8002e24 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d12e      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dc0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	da2b      	bge.n	8002e1e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002dd2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d121      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e1a:	6053      	str	r3, [r2, #4]
            break;
 8002e1c:	e008      	b.n	8002e30 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	3301      	adds	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	791b      	ldrb	r3, [r3, #4]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d3b3      	bcc.n	8002d98 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fe97 	bl	8005b78 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e54:	d10a      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f005 face 	bl	80083f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 fe81 	bl	8005b78 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d115      	bne.n	8002eac <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f005 fabe 	bl	8008414 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	e000      	b.n	8002eac <HAL_PCD_IRQHandler+0x93c>
      return;
 8002eaa:	bf00      	nop
    }
  }
}
 8002eac:	3734      	adds	r7, #52	@ 0x34
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_PCD_SetAddress+0x1a>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e012      	b.n	8002ef2 <HAL_PCD_SetAddress+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fde0 	bl	8005aa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	4608      	mov	r0, r1
 8002f04:	4611      	mov	r1, r2
 8002f06:	461a      	mov	r2, r3
 8002f08:	4603      	mov	r3, r0
 8002f0a:	70fb      	strb	r3, [r7, #3]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	803b      	strh	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da0f      	bge.n	8002f40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 020f 	and.w	r2, r3, #15
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	3310      	adds	r3, #16
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
 8002f3e:	e00f      	b.n	8002f60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 020f 	and.w	r2, r3, #15
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f6c:	883a      	ldrh	r2, [r7, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	78ba      	ldrb	r2, [r7, #2]
 8002f76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f8a:	78bb      	ldrb	r3, [r7, #2]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d102      	bne.n	8002f96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_PCD_EP_Open+0xaa>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e00e      	b.n	8002fc2 <HAL_PCD_EP_Open+0xc8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 ff68 	bl	8004e88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da0f      	bge.n	8002ffe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	3310      	adds	r3, #16
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	705a      	strb	r2, [r3, #1]
 8002ffc:	e00f      	b.n	800301e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f003 020f 	and.w	r2, r3, #15
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	3304      	adds	r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	b2da      	uxtb	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_PCD_EP_Close+0x6e>
 8003034:	2302      	movs	r3, #2
 8003036:	e00e      	b.n	8003056 <HAL_PCD_EP_Close+0x8c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	4618      	mov	r0, r3
 8003048:	f001 ffa6 	bl	8004f98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	460b      	mov	r3, r1
 800306c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306e:	7afb      	ldrb	r3, [r7, #11]
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	3304      	adds	r3, #4
 8003086:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a0:	7afb      	ldrb	r3, [r7, #11]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	799b      	ldrb	r3, [r3, #6]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	799b      	ldrb	r3, [r3, #6]
 80030c2:	461a      	mov	r2, r3
 80030c4:	6979      	ldr	r1, [r7, #20]
 80030c6:	f002 f843 	bl	8005150 <USB_EPStartXfer>

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 020f 	and.w	r2, r3, #15
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	460b      	mov	r3, r1
 8003112:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003114:	7afb      	ldrb	r3, [r7, #11]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	3310      	adds	r3, #16
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2200      	movs	r2, #0
 800313c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2201      	movs	r2, #1
 8003142:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003144:	7afb      	ldrb	r3, [r7, #11]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	b2da      	uxtb	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	799b      	ldrb	r3, [r3, #6]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d102      	bne.n	800315e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	799b      	ldrb	r3, [r3, #6]
 8003166:	461a      	mov	r2, r3
 8003168:	6979      	ldr	r1, [r7, #20]
 800316a:	f001 fff1 	bl	8005150 <USB_EPStartXfer>

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	7912      	ldrb	r2, [r2, #4]
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e04f      	b.n	8003236 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319a:	2b00      	cmp	r3, #0
 800319c:	da0f      	bge.n	80031be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	3310      	adds	r3, #16
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
 80031bc:	e00d      	b.n	80031da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_EP_SetStall+0x82>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e01d      	b.n	8003236 <HAL_PCD_EP_SetStall+0xbe>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4618      	mov	r0, r3
 800320a:	f002 fb79 	bl	8005900 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7999      	ldrb	r1, [r3, #6]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003226:	461a      	mov	r2, r3
 8003228:	f002 fd6a 	bl	8005d00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	7912      	ldrb	r2, [r2, #4]
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e042      	b.n	80032e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800325c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003260:	2b00      	cmp	r3, #0
 8003262:	da0f      	bge.n	8003284 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 020f 	and.w	r2, r3, #15
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	3310      	adds	r3, #16
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	705a      	strb	r2, [r3, #1]
 8003282:	e00f      	b.n	80032a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f003 020f 	and.w	r2, r3, #15
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_PCD_EP_ClrStall+0x86>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e00e      	b.n	80032e2 <HAL_PCD_EP_ClrStall+0xa4>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68f9      	ldr	r1, [r7, #12]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fb82 	bl	80059dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	da0c      	bge.n	8003318 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	f003 020f 	and.w	r2, r3, #15
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3310      	adds	r3, #16
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e00c      	b.n	8003332 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	4618      	mov	r0, r3
 800333a:	f002 f9a1 	bl	8005680 <USB_EPStopXfer>
 800333e:	4603      	mov	r3, r0
 8003340:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003342:	7afb      	ldrb	r3, [r7, #11]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	@ 0x28
 8003350:	af02      	add	r7, sp, #8
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	3310      	adds	r3, #16
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	3304      	adds	r3, #4
 8003372:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	429a      	cmp	r2, r3
 800337e:	d901      	bls.n	8003384 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e06b      	b.n	800345c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	429a      	cmp	r2, r3
 8003398:	d902      	bls.n	80033a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3303      	adds	r3, #3
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a8:	e02a      	b.n	8003400 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d902      	bls.n	80033c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3303      	adds	r3, #3
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	4603      	mov	r3, r0
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f002 f9f6 	bl	80057d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	441a      	add	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	441a      	add	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	429a      	cmp	r2, r3
 8003414:	d809      	bhi.n	800342a <PCD_WriteEmptyTxFifo+0xde>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800341e:	429a      	cmp	r2, r3
 8003420:	d203      	bcs.n	800342a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1bf      	bne.n	80033aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	429a      	cmp	r2, r3
 8003434:	d811      	bhi.n	800345a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	2201      	movs	r2, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800344a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	43db      	mvns	r3, r3
 8003450:	6939      	ldr	r1, [r7, #16]
 8003452:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003456:	4013      	ands	r3, r2
 8003458:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	333c      	adds	r3, #60	@ 0x3c
 800347c:	3304      	adds	r3, #4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	799b      	ldrb	r3, [r3, #6]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d17b      	bne.n	8003592 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4a61      	ldr	r2, [pc, #388]	@ (800362c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	f240 80b9 	bls.w	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80b3 	beq.w	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034cc:	6093      	str	r3, [r2, #8]
 80034ce:	e0a7      	b.n	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e6:	461a      	mov	r2, r3
 80034e8:	2320      	movs	r3, #32
 80034ea:	6093      	str	r3, [r2, #8]
 80034ec:	e098      	b.n	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 8093 	bne.w	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	@ (800362c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d90f      	bls.n	8003522 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003518:	461a      	mov	r2, r3
 800351a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800351e:	6093      	str	r3, [r2, #8]
 8003520:	e07e      	b.n	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1a      	ldr	r2, [r3, #32]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	0159      	lsls	r1, r3, #5
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	440b      	add	r3, r1
 8003544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d114      	bne.n	8003584 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800356c:	461a      	mov	r2, r3
 800356e:	2101      	movs	r1, #1
 8003570:	f002 fbc6 	bl	8005d00 <USB_EP0_OutStart>
 8003574:	e006      	b.n	8003584 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	441a      	add	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f004 fe7a 	bl	8008284 <HAL_PCD_DataOutStageCallback>
 8003590:	e046      	b.n	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d124      	bne.n	80035e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b0:	461a      	mov	r2, r3
 80035b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035b6:	6093      	str	r3, [r2, #8]
 80035b8:	e032      	b.n	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d0:	461a      	mov	r2, r3
 80035d2:	2320      	movs	r3, #32
 80035d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f004 fe51 	bl	8008284 <HAL_PCD_DataOutStageCallback>
 80035e2:	e01d      	b.n	8003620 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d114      	bne.n	8003614 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d108      	bne.n	8003614 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800360c:	461a      	mov	r2, r3
 800360e:	2100      	movs	r1, #0
 8003610:	f002 fb76 	bl	8005d00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f004 fe32 	bl	8008284 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	4f54300a 	.word	0x4f54300a
 8003630:	4f54310a 	.word	0x4f54310a

08003634 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	333c      	adds	r3, #60	@ 0x3c
 800364c:	3304      	adds	r3, #4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4a15      	ldr	r2, [pc, #84]	@ (80036bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d90e      	bls.n	8003688 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003686:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f004 fde9 	bl	8008260 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a0a      	ldr	r2, [pc, #40]	@ (80036bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d90c      	bls.n	80036b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	799b      	ldrb	r3, [r3, #6]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036a8:	461a      	mov	r2, r3
 80036aa:	2101      	movs	r1, #1
 80036ac:	f002 fb28 	bl	8005d00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	4f54300a 	.word	0x4f54300a

080036c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
 80036cc:	4613      	mov	r3, r2
 80036ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d107      	bne.n	80036ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036de:	883b      	ldrh	r3, [r7, #0]
 80036e0:	0419      	lsls	r1, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80036ec:	e028      	b.n	8003740 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4413      	add	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e00d      	b.n	800371e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	3340      	adds	r3, #64	@ 0x40
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4413      	add	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	3301      	adds	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	3b01      	subs	r3, #1
 8003724:	429a      	cmp	r2, r3
 8003726:	d3ec      	bcc.n	8003702 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003728:	883b      	ldrh	r3, [r7, #0]
 800372a:	0418      	lsls	r0, r3, #16
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	3b01      	subs	r3, #1
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	4302      	orrs	r2, r0
 8003738:	3340      	adds	r3, #64	@ 0x40
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e267      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d075      	beq.n	8003892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037a6:	4b88      	ldr	r3, [pc, #544]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d00c      	beq.n	80037cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b2:	4b85      	ldr	r3, [pc, #532]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d112      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b82      	ldr	r3, [pc, #520]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	4b7e      	ldr	r3, [pc, #504]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d05b      	beq.n	8003890 <HAL_RCC_OscConfig+0x108>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d157      	bne.n	8003890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e242      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ec:	d106      	bne.n	80037fc <HAL_RCC_OscConfig+0x74>
 80037ee:	4b76      	ldr	r3, [pc, #472]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a75      	ldr	r2, [pc, #468]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x98>
 8003806:	4b70      	ldr	r3, [pc, #448]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6f      	ldr	r2, [pc, #444]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b6d      	ldr	r3, [pc, #436]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6c      	ldr	r2, [pc, #432]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 8003820:	4b69      	ldr	r3, [pc, #420]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a68      	ldr	r2, [pc, #416]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b66      	ldr	r3, [pc, #408]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a65      	ldr	r2, [pc, #404]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fd f9e8 	bl	8000c14 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7fd f9e4 	bl	8000c14 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	@ 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e207      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b5b      	ldr	r3, [pc, #364]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xc0>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fd f9d4 	bl	8000c14 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003870:	f7fd f9d0 	bl	8000c14 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1f3      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b51      	ldr	r3, [pc, #324]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0xe8>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800389e:	4b4a      	ldr	r3, [pc, #296]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038aa:	4b47      	ldr	r3, [pc, #284]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d11c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b44      	ldr	r3, [pc, #272]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	4b41      	ldr	r3, [pc, #260]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCC_OscConfig+0x152>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1c7      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4937      	ldr	r1, [pc, #220]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	e03a      	b.n	8003966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f8:	4b34      	ldr	r3, [pc, #208]	@ (80039cc <HAL_RCC_OscConfig+0x244>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fd f989 	bl	8000c14 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003906:	f7fd f985 	bl	8000c14 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1a8      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	4b2b      	ldr	r3, [pc, #172]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4925      	ldr	r1, [pc, #148]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b24      	ldr	r3, [pc, #144]	@ (80039cc <HAL_RCC_OscConfig+0x244>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd f968 	bl	8000c14 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003948:	f7fd f964 	bl	8000c14 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e187      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d036      	beq.n	80039e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <HAL_RCC_OscConfig+0x248>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd f948 	bl	8000c14 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003988:	f7fd f944 	bl	8000c14 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e167      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x200>
 80039a6:	e01b      	b.n	80039e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a8:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <HAL_RCC_OscConfig+0x248>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ae:	f7fd f931 	bl	8000c14 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	e00e      	b.n	80039d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fd f92d 	bl	8000c14 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d907      	bls.n	80039d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e150      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
 80039c8:	40023800 	.word	0x40023800
 80039cc:	42470000 	.word	0x42470000
 80039d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	4b88      	ldr	r3, [pc, #544]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 80039d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ea      	bne.n	80039b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8097 	beq.w	8003b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b81      	ldr	r3, [pc, #516]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	4b7d      	ldr	r3, [pc, #500]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	4a7c      	ldr	r2, [pc, #496]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4b77      	ldr	r3, [pc, #476]	@ (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4b74      	ldr	r3, [pc, #464]	@ (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a73      	ldr	r2, [pc, #460]	@ (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fd f8ed 	bl	8000c14 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fd f8e9 	bl	8000c14 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e10c      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	4b6a      	ldr	r3, [pc, #424]	@ (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2ea>
 8003a64:	4b64      	ldr	r3, [pc, #400]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a68:	4a63      	ldr	r2, [pc, #396]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a70:	e01c      	b.n	8003aac <HAL_RCC_OscConfig+0x324>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x30c>
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a86:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0x324>
 8003a94:	4b58      	ldr	r3, [pc, #352]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a98:	4a57      	ldr	r2, [pc, #348]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa0:	4b55      	ldr	r3, [pc, #340]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa4:	4a54      	ldr	r2, [pc, #336]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 0304 	bic.w	r3, r3, #4
 8003aaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fd f8ae 	bl	8000c14 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003abc:	f7fd f8aa 	bl	8000c14 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e0cb      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad2:	4b49      	ldr	r3, [pc, #292]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ee      	beq.n	8003abc <HAL_RCC_OscConfig+0x334>
 8003ade:	e014      	b.n	8003b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae0:	f7fd f898 	bl	8000c14 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fd f894 	bl	8000c14 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0b5      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afe:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ee      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b10:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	4a38      	ldr	r2, [pc, #224]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80a1 	beq.w	8003c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b26:	4b34      	ldr	r3, [pc, #208]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d05c      	beq.n	8003bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d141      	bne.n	8003bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b31      	ldr	r3, [pc, #196]	@ (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd f868 	bl	8000c14 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd f864 	bl	8000c14 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e087      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b27      	ldr	r3, [pc, #156]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	491b      	ldr	r1, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fd f83d 	bl	8000c14 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fd f839 	bl	8000c14 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e05c      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x416>
 8003bbc:	e054      	b.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fd f826 	bl	8000c14 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fd f822 	bl	8000c14 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e045      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x444>
 8003bea:	e03d      	b.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e038      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_RCC_OscConfig+0x4ec>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d028      	beq.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d121      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d11a      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d111      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800

08003c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0cc      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b68      	ldr	r3, [pc, #416]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d90c      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b65      	ldr	r3, [pc, #404]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b63      	ldr	r3, [pc, #396]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0b8      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d020      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ccc:	4b59      	ldr	r3, [pc, #356]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a58      	ldr	r2, [pc, #352]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce4:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b50      	ldr	r3, [pc, #320]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	494d      	ldr	r1, [pc, #308]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d044      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b47      	ldr	r3, [pc, #284]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d119      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b3f      	ldr	r3, [pc, #252]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b3b      	ldr	r3, [pc, #236]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e067      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b37      	ldr	r3, [pc, #220]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4934      	ldr	r1, [pc, #208]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fc ff54 	bl	8000c14 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fc ff50 	bl	8000c14 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e04f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b2b      	ldr	r3, [pc, #172]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d20c      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b22      	ldr	r3, [pc, #136]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b20      	ldr	r3, [pc, #128]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e032      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4916      	ldr	r1, [pc, #88]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	490e      	ldr	r1, [pc, #56]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dfe:	f000 f821 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003e02:	4602      	mov	r2, r0
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	490a      	ldr	r1, [pc, #40]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	5ccb      	ldrb	r3, [r1, r3]
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	4a09      	ldr	r2, [pc, #36]	@ (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e1a:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fc feb4 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023c00 	.word	0x40023c00
 8003e34:	40023800 	.word	0x40023800
 8003e38:	08008884 	.word	0x08008884
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	20000010 	.word	0x20000010

08003e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e48:	b090      	sub	sp, #64	@ 0x40
 8003e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e50:	2300      	movs	r3, #0
 8003e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e54:	2300      	movs	r3, #0
 8003e56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5c:	4b59      	ldr	r3, [pc, #356]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d00d      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x40>
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	f200 80a1 	bhi.w	8003fb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x34>
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e76:	e09b      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e78:	4b53      	ldr	r3, [pc, #332]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003e7c:	e09b      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7e:	4b53      	ldr	r3, [pc, #332]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003e80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e82:	e098      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e84:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d028      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eac:	2100      	movs	r1, #0
 8003eae:	4b47      	ldr	r3, [pc, #284]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003eb0:	fb03 f201 	mul.w	r2, r3, r1
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	fb00 f303 	mul.w	r3, r0, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	4a43      	ldr	r2, [pc, #268]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ebe:	fba0 1202 	umull	r1, r2, r0, r2
 8003ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eca:	4413      	add	r3, r2
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	61fa      	str	r2, [r7, #28]
 8003ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ede:	f7fc f97b 	bl	80001d8 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eea:	e053      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eec:	4b35      	ldr	r3, [pc, #212]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	617a      	str	r2, [r7, #20]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003efe:	f04f 0b00 	mov.w	fp, #0
 8003f02:	4652      	mov	r2, sl
 8003f04:	465b      	mov	r3, fp
 8003f06:	f04f 0000 	mov.w	r0, #0
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	0159      	lsls	r1, r3, #5
 8003f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f14:	0150      	lsls	r0, r2, #5
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f1e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f36:	ebb2 0408 	subs.w	r4, r2, r8
 8003f3a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	00eb      	lsls	r3, r5, #3
 8003f48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f4c:	00e2      	lsls	r2, r4, #3
 8003f4e:	4614      	mov	r4, r2
 8003f50:	461d      	mov	r5, r3
 8003f52:	eb14 030a 	adds.w	r3, r4, sl
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	eb45 030b 	adc.w	r3, r5, fp
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	028b      	lsls	r3, r1, #10
 8003f6e:	4621      	mov	r1, r4
 8003f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f74:	4621      	mov	r1, r4
 8003f76:	028a      	lsls	r2, r1, #10
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7e:	2200      	movs	r2, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	60fa      	str	r2, [r7, #12]
 8003f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f88:	f7fc f926 	bl	80001d8 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f94:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003fa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3740      	adds	r7, #64	@ 0x40
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	00f42400 	.word	0x00f42400
 8003fcc:	017d7840 	.word	0x017d7840

08003fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	@ (8003fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000000c 	.word	0x2000000c

08003fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e041      	b.n	800407e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fc fd50 	bl	8000ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f000 f992 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d001      	beq.n	80040a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e03c      	b.n	800411a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_TIM_Base_Start+0xa0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d018      	beq.n	80040e4 <HAL_TIM_Base_Start+0x5c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ba:	d013      	beq.n	80040e4 <HAL_TIM_Base_Start+0x5c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1a      	ldr	r2, [pc, #104]	@ (800412c <HAL_TIM_Base_Start+0xa4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <HAL_TIM_Base_Start+0x5c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <HAL_TIM_Base_Start+0xa8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d009      	beq.n	80040e4 <HAL_TIM_Base_Start+0x5c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <HAL_TIM_Base_Start+0xac>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_TIM_Base_Start+0x5c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a16      	ldr	r2, [pc, #88]	@ (8004138 <HAL_TIM_Base_Start+0xb0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d111      	bne.n	8004108 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	d010      	beq.n	8004118 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	e007      	b.n	8004118 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
 8004138:	40014000 	.word	0x40014000

0800413c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIM_ConfigClockSource+0x1c>
 8004154:	2302      	movs	r3, #2
 8004156:	e0b4      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x186>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800417e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004190:	d03e      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0xd4>
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004196:	f200 8087 	bhi.w	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419e:	f000 8086 	beq.w	80042ae <HAL_TIM_ConfigClockSource+0x172>
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a6:	d87f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b70      	cmp	r3, #112	@ 0x70
 80041aa:	d01a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0xa6>
 80041ac:	2b70      	cmp	r3, #112	@ 0x70
 80041ae:	d87b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b60      	cmp	r3, #96	@ 0x60
 80041b2:	d050      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x11a>
 80041b4:	2b60      	cmp	r3, #96	@ 0x60
 80041b6:	d877      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b50      	cmp	r3, #80	@ 0x50
 80041ba:	d03c      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xfa>
 80041bc:	2b50      	cmp	r3, #80	@ 0x50
 80041be:	d873      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b40      	cmp	r3, #64	@ 0x40
 80041c2:	d058      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x13a>
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d86f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b30      	cmp	r3, #48	@ 0x30
 80041ca:	d064      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041cc:	2b30      	cmp	r3, #48	@ 0x30
 80041ce:	d86b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d060      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d867      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05c      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d05a      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041e0:	e062      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	f000 fa44 	bl	800467e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	609a      	str	r2, [r3, #8]
      break;
 800420e:	e04f      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004220:	f000 fa2d 	bl	800467e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e03c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004242:	461a      	mov	r2, r3
 8004244:	f000 f9a1 	bl	800458a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2150      	movs	r1, #80	@ 0x50
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f9fa 	bl	8004648 <TIM_ITRx_SetConfig>
      break;
 8004254:	e02c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004262:	461a      	mov	r2, r3
 8004264:	f000 f9c0 	bl	80045e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2160      	movs	r1, #96	@ 0x60
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f9ea 	bl	8004648 <TIM_ITRx_SetConfig>
      break;
 8004274:	e01c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	461a      	mov	r2, r3
 8004284:	f000 f981 	bl	800458a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2140      	movs	r1, #64	@ 0x40
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f9da 	bl	8004648 <TIM_ITRx_SetConfig>
      break;
 8004294:	e00c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f000 f9d1 	bl	8004648 <TIM_ITRx_SetConfig>
      break;
 80042a6:	e003      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80042de:	2302      	movs	r3, #2
 80042e0:	e031      	b.n	8004346 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8b7 	bl	8004468 <TIM_SlaveTimer_SetConfig>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e018      	b.n	8004346 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004322:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004332:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a3a      	ldr	r2, [pc, #232]	@ (800444c <TIM_Base_SetConfig+0xfc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00f      	beq.n	8004388 <TIM_Base_SetConfig+0x38>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436e:	d00b      	beq.n	8004388 <TIM_Base_SetConfig+0x38>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a37      	ldr	r2, [pc, #220]	@ (8004450 <TIM_Base_SetConfig+0x100>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0x38>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a36      	ldr	r2, [pc, #216]	@ (8004454 <TIM_Base_SetConfig+0x104>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0x38>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a35      	ldr	r2, [pc, #212]	@ (8004458 <TIM_Base_SetConfig+0x108>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2b      	ldr	r2, [pc, #172]	@ (800444c <TIM_Base_SetConfig+0xfc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01b      	beq.n	80043da <TIM_Base_SetConfig+0x8a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a8:	d017      	beq.n	80043da <TIM_Base_SetConfig+0x8a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a28      	ldr	r2, [pc, #160]	@ (8004450 <TIM_Base_SetConfig+0x100>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <TIM_Base_SetConfig+0x8a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a27      	ldr	r2, [pc, #156]	@ (8004454 <TIM_Base_SetConfig+0x104>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00f      	beq.n	80043da <TIM_Base_SetConfig+0x8a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <TIM_Base_SetConfig+0x108>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_Base_SetConfig+0x8a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a25      	ldr	r2, [pc, #148]	@ (800445c <TIM_Base_SetConfig+0x10c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0x8a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a24      	ldr	r2, [pc, #144]	@ (8004460 <TIM_Base_SetConfig+0x110>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0x8a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a23      	ldr	r2, [pc, #140]	@ (8004464 <TIM_Base_SetConfig+0x114>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0e      	ldr	r2, [pc, #56]	@ (800444c <TIM_Base_SetConfig+0xfc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f023 0201 	bic.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	611a      	str	r2, [r3, #16]
  }
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40014000 	.word	0x40014000
 8004460:	40014400 	.word	0x40014400
 8004464:	40014800 	.word	0x40014800

08004468 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004484:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f023 0307 	bic.w	r3, r3, #7
 8004496:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b70      	cmp	r3, #112	@ 0x70
 80044b0:	d01a      	beq.n	80044e8 <TIM_SlaveTimer_SetConfig+0x80>
 80044b2:	2b70      	cmp	r3, #112	@ 0x70
 80044b4:	d860      	bhi.n	8004578 <TIM_SlaveTimer_SetConfig+0x110>
 80044b6:	2b60      	cmp	r3, #96	@ 0x60
 80044b8:	d054      	beq.n	8004564 <TIM_SlaveTimer_SetConfig+0xfc>
 80044ba:	2b60      	cmp	r3, #96	@ 0x60
 80044bc:	d85c      	bhi.n	8004578 <TIM_SlaveTimer_SetConfig+0x110>
 80044be:	2b50      	cmp	r3, #80	@ 0x50
 80044c0:	d046      	beq.n	8004550 <TIM_SlaveTimer_SetConfig+0xe8>
 80044c2:	2b50      	cmp	r3, #80	@ 0x50
 80044c4:	d858      	bhi.n	8004578 <TIM_SlaveTimer_SetConfig+0x110>
 80044c6:	2b40      	cmp	r3, #64	@ 0x40
 80044c8:	d019      	beq.n	80044fe <TIM_SlaveTimer_SetConfig+0x96>
 80044ca:	2b40      	cmp	r3, #64	@ 0x40
 80044cc:	d854      	bhi.n	8004578 <TIM_SlaveTimer_SetConfig+0x110>
 80044ce:	2b30      	cmp	r3, #48	@ 0x30
 80044d0:	d055      	beq.n	800457e <TIM_SlaveTimer_SetConfig+0x116>
 80044d2:	2b30      	cmp	r3, #48	@ 0x30
 80044d4:	d850      	bhi.n	8004578 <TIM_SlaveTimer_SetConfig+0x110>
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d051      	beq.n	800457e <TIM_SlaveTimer_SetConfig+0x116>
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d84c      	bhi.n	8004578 <TIM_SlaveTimer_SetConfig+0x110>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d04d      	beq.n	800457e <TIM_SlaveTimer_SetConfig+0x116>
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d04b      	beq.n	800457e <TIM_SlaveTimer_SetConfig+0x116>
 80044e6:	e047      	b.n	8004578 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	f000 f8c1 	bl	800467e <TIM_ETR_SetConfig>
      break;
 80044fc:	e040      	b.n	8004580 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b05      	cmp	r3, #5
 8004504:	d101      	bne.n	800450a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e03b      	b.n	8004582 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004530:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
      break;
 800454e:	e017      	b.n	8004580 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455c:	461a      	mov	r2, r3
 800455e:	f000 f814 	bl	800458a <TIM_TI1_ConfigInputStage>
      break;
 8004562:	e00d      	b.n	8004580 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004570:	461a      	mov	r2, r3
 8004572:	f000 f839 	bl	80045e8 <TIM_TI2_ConfigInputStage>
      break;
 8004576:	e003      	b.n	8004580 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
      break;
 800457c:	e000      	b.n	8004580 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800457e:	bf00      	nop
  }

  return status;
 8004580:	7dfb      	ldrb	r3, [r7, #23]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f023 0201 	bic.w	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 030a 	bic.w	r3, r3, #10
 80045c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	621a      	str	r2, [r3, #32]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0210 	bic.w	r2, r3, #16
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	031b      	lsls	r3, r3, #12
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004624:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	621a      	str	r2, [r3, #32]
}
 800463c:	bf00      	nop
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	f043 0307 	orr.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	609a      	str	r2, [r3, #8]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800467e:	b480      	push	{r7}
 8004680:	b087      	sub	sp, #28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004698:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	021a      	lsls	r2, r3, #8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	609a      	str	r2, [r3, #8]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e050      	b.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1c      	ldr	r2, [pc, #112]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d018      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004724:	d013      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a18      	ldr	r2, [pc, #96]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00e      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a16      	ldr	r2, [pc, #88]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a15      	ldr	r2, [pc, #84]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a13      	ldr	r2, [pc, #76]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10c      	bne.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40014000 	.word	0x40014000

0800479c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800479c:	b084      	sub	sp, #16
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	f107 001c 	add.w	r0, r7, #28
 80047aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d123      	bne.n	80047fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80047ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d105      	bne.n	80047f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f001 fae2 	bl	8005dbc <USB_CoreReset>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	e01b      	b.n	8004836 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f001 fad6 	bl	8005dbc <USB_CoreReset>
 8004810:	4603      	mov	r3, r0
 8004812:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004814:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	@ 0x38
 8004828:	e005      	b.n	8004836 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004836:	7fbb      	ldrb	r3, [r7, #30]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10b      	bne.n	8004854 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f043 0206 	orr.w	r2, r3, #6
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f043 0220 	orr.w	r2, r3, #32
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004860:	b004      	add	sp, #16
 8004862:	4770      	bx	lr

08004864 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d165      	bne.n	8004944 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a41      	ldr	r2, [pc, #260]	@ (8004980 <USB_SetTurnaroundTime+0x11c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d906      	bls.n	800488e <USB_SetTurnaroundTime+0x2a>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4a40      	ldr	r2, [pc, #256]	@ (8004984 <USB_SetTurnaroundTime+0x120>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d202      	bcs.n	800488e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004888:	230f      	movs	r3, #15
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e062      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4a3c      	ldr	r2, [pc, #240]	@ (8004984 <USB_SetTurnaroundTime+0x120>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d306      	bcc.n	80048a4 <USB_SetTurnaroundTime+0x40>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4a3b      	ldr	r2, [pc, #236]	@ (8004988 <USB_SetTurnaroundTime+0x124>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d202      	bcs.n	80048a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800489e:	230e      	movs	r3, #14
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e057      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4a38      	ldr	r2, [pc, #224]	@ (8004988 <USB_SetTurnaroundTime+0x124>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d306      	bcc.n	80048ba <USB_SetTurnaroundTime+0x56>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4a37      	ldr	r2, [pc, #220]	@ (800498c <USB_SetTurnaroundTime+0x128>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d202      	bcs.n	80048ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048b4:	230d      	movs	r3, #13
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e04c      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4a33      	ldr	r2, [pc, #204]	@ (800498c <USB_SetTurnaroundTime+0x128>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d306      	bcc.n	80048d0 <USB_SetTurnaroundTime+0x6c>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a32      	ldr	r2, [pc, #200]	@ (8004990 <USB_SetTurnaroundTime+0x12c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d802      	bhi.n	80048d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048ca:	230c      	movs	r3, #12
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	e041      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004990 <USB_SetTurnaroundTime+0x12c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d906      	bls.n	80048e6 <USB_SetTurnaroundTime+0x82>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4a2e      	ldr	r2, [pc, #184]	@ (8004994 <USB_SetTurnaroundTime+0x130>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d802      	bhi.n	80048e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048e0:	230b      	movs	r3, #11
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e036      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004994 <USB_SetTurnaroundTime+0x130>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d906      	bls.n	80048fc <USB_SetTurnaroundTime+0x98>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4a29      	ldr	r2, [pc, #164]	@ (8004998 <USB_SetTurnaroundTime+0x134>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d802      	bhi.n	80048fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048f6:	230a      	movs	r3, #10
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e02b      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4a26      	ldr	r2, [pc, #152]	@ (8004998 <USB_SetTurnaroundTime+0x134>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d906      	bls.n	8004912 <USB_SetTurnaroundTime+0xae>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4a25      	ldr	r2, [pc, #148]	@ (800499c <USB_SetTurnaroundTime+0x138>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d202      	bcs.n	8004912 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800490c:	2309      	movs	r3, #9
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e020      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4a21      	ldr	r2, [pc, #132]	@ (800499c <USB_SetTurnaroundTime+0x138>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d306      	bcc.n	8004928 <USB_SetTurnaroundTime+0xc4>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4a20      	ldr	r2, [pc, #128]	@ (80049a0 <USB_SetTurnaroundTime+0x13c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d802      	bhi.n	8004928 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004922:	2308      	movs	r3, #8
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e015      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4a1d      	ldr	r2, [pc, #116]	@ (80049a0 <USB_SetTurnaroundTime+0x13c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d906      	bls.n	800493e <USB_SetTurnaroundTime+0xda>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4a1c      	ldr	r2, [pc, #112]	@ (80049a4 <USB_SetTurnaroundTime+0x140>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d202      	bcs.n	800493e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004938:	2307      	movs	r3, #7
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	e00a      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800493e:	2306      	movs	r3, #6
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e007      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800494a:	2309      	movs	r3, #9
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e001      	b.n	8004954 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004950:	2309      	movs	r3, #9
 8004952:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	029b      	lsls	r3, r3, #10
 8004968:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	00d8acbf 	.word	0x00d8acbf
 8004984:	00e4e1c0 	.word	0x00e4e1c0
 8004988:	00f42400 	.word	0x00f42400
 800498c:	01067380 	.word	0x01067380
 8004990:	011a499f 	.word	0x011a499f
 8004994:	01312cff 	.word	0x01312cff
 8004998:	014ca43f 	.word	0x014ca43f
 800499c:	016e3600 	.word	0x016e3600
 80049a0:	01a6ab1f 	.word	0x01a6ab1f
 80049a4:	01e84800 	.word	0x01e84800

080049a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 0201 	bic.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d115      	bne.n	8004a3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a1a:	200a      	movs	r0, #10
 8004a1c:	f7fc f906 	bl	8000c2c <HAL_Delay>
      ms += 10U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	330a      	adds	r3, #10
 8004a24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 f939 	bl	8005c9e <USB_GetMode>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d01e      	beq.n	8004a70 <USB_SetCurrentMode+0x84>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a36:	d9f0      	bls.n	8004a1a <USB_SetCurrentMode+0x2e>
 8004a38:	e01a      	b.n	8004a70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d115      	bne.n	8004a6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a4c:	200a      	movs	r0, #10
 8004a4e:	f7fc f8ed 	bl	8000c2c <HAL_Delay>
      ms += 10U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	330a      	adds	r3, #10
 8004a56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 f920 	bl	8005c9e <USB_GetMode>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <USB_SetCurrentMode+0x84>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a68:	d9f0      	bls.n	8004a4c <USB_SetCurrentMode+0x60>
 8004a6a:	e001      	b.n	8004a70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e005      	b.n	8004a7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a74:	d101      	bne.n	8004a7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a84:	b084      	sub	sp, #16
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	e009      	b.n	8004ab8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	3340      	adds	r3, #64	@ 0x40
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b0e      	cmp	r3, #14
 8004abc:	d9f2      	bls.n	8004aa4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004abe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d11c      	bne.n	8004b00 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ad4:	f043 0302 	orr.w	r3, r3, #2
 8004ad8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	639a      	str	r2, [r3, #56]	@ 0x38
 8004afe:	e00b      	b.n	8004b18 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2300      	movs	r3, #0
 8004b22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10d      	bne.n	8004b48 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b34:	2100      	movs	r1, #0
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f968 	bl	8004e0c <USB_SetDevSpeed>
 8004b3c:	e008      	b.n	8004b50 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b3e:	2101      	movs	r1, #1
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f963 	bl	8004e0c <USB_SetDevSpeed>
 8004b46:	e003      	b.n	8004b50 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b48:	2103      	movs	r1, #3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f95e 	bl	8004e0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b50:	2110      	movs	r1, #16
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8fa 	bl	8004d4c <USB_FlushTxFifo>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f924 	bl	8004db0 <USB_FlushRxFifo>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b84:	461a      	mov	r2, r3
 8004b86:	2300      	movs	r3, #0
 8004b88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e043      	b.n	8004c24 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bb2:	d118      	bne.n	8004be6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e013      	b.n	8004bf8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e008      	b.n	8004bf8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c04:	461a      	mov	r2, r3
 8004c06:	2300      	movs	r3, #0
 8004c08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c16:	461a      	mov	r2, r3
 8004c18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3301      	adds	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c28:	461a      	mov	r2, r3
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d3b5      	bcc.n	8004b9c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	e043      	b.n	8004cbe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c4c:	d118      	bne.n	8004c80 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c60:	461a      	mov	r2, r3
 8004c62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e013      	b.n	8004c92 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c76:	461a      	mov	r2, r3
 8004c78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e008      	b.n	8004c92 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d3b5      	bcc.n	8004c36 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004cea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f043 0210 	orr.w	r2, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699a      	ldr	r2, [r3, #24]
 8004d04:	4b10      	ldr	r3, [pc, #64]	@ (8004d48 <USB_DevInit+0x2c4>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f043 0208 	orr.w	r2, r3, #8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d107      	bne.n	8004d38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d30:	f043 0304 	orr.w	r3, r3, #4
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d44:	b004      	add	sp, #16
 8004d46:	4770      	bx	lr
 8004d48:	803c3800 	.word	0x803c3800

08004d4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d66:	d901      	bls.n	8004d6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e01b      	b.n	8004da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	daf2      	bge.n	8004d5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	019b      	lsls	r3, r3, #6
 8004d7c:	f043 0220 	orr.w	r2, r3, #32
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d90:	d901      	bls.n	8004d96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e006      	b.n	8004da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d0f0      	beq.n	8004d84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dc8:	d901      	bls.n	8004dce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e018      	b.n	8004e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	daf2      	bge.n	8004dbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2210      	movs	r2, #16
 8004dde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dec:	d901      	bls.n	8004df2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e006      	b.n	8004e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d0f0      	beq.n	8004de0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 0306 	and.w	r3, r3, #6
 8004e56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
 8004e62:	e00a      	b.n	8004e7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d002      	beq.n	8004e70 <USB_GetDevSpeed+0x32>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d102      	bne.n	8004e76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e70:	2302      	movs	r3, #2
 8004e72:	75fb      	strb	r3, [r7, #23]
 8004e74:	e001      	b.n	8004e7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e76:	230f      	movs	r3, #15
 8004e78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d13a      	bne.n	8004f1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d155      	bne.n	8004f88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	791b      	ldrb	r3, [r3, #4]
 8004ef6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ef8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	059b      	lsls	r3, r3, #22
 8004efe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f00:	4313      	orrs	r3, r2
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	e036      	b.n	8004f88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d11a      	bne.n	8004f88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	791b      	ldrb	r3, [r3, #4]
 8004f6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	4313      	orrs	r3, r2
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d161      	bne.n	8005078 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fca:	d11f      	bne.n	800500c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	440a      	add	r2, r1
 8005002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005006:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800500a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f303 	lsl.w	r3, r1, r3
 8005022:	b29b      	uxth	r3, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800502c:	4013      	ands	r3, r2
 800502e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005050:	4013      	ands	r3, r2
 8005052:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	0159      	lsls	r1, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	440b      	add	r3, r1
 800506a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506e:	4619      	mov	r1, r3
 8005070:	4b35      	ldr	r3, [pc, #212]	@ (8005148 <USB_DeactivateEndpoint+0x1b0>)
 8005072:	4013      	ands	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
 8005076:	e060      	b.n	800513a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800508a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800508e:	d11f      	bne.n	80050d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f303 	lsl.w	r3, r1, r3
 80050e6:	041b      	lsls	r3, r3, #16
 80050e8:	43db      	mvns	r3, r3
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050f0:	4013      	ands	r3, r2
 80050f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050fa:	69da      	ldr	r2, [r3, #28]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2101      	movs	r1, #1
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	43db      	mvns	r3, r3
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005114:	4013      	ands	r3, r2
 8005116:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	0159      	lsls	r1, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	440b      	add	r3, r1
 800512e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005132:	4619      	mov	r1, r3
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <USB_DeactivateEndpoint+0x1b4>)
 8005136:	4013      	ands	r3, r2
 8005138:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	ec337800 	.word	0xec337800
 800514c:	eff37800 	.word	0xeff37800

08005150 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	@ 0x28
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	f040 817a 	bne.w	8005466 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d132      	bne.n	80051e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005194:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005198:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800519c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d8:	0cdb      	lsrs	r3, r3, #19
 80051da:	04db      	lsls	r3, r3, #19
 80051dc:	6113      	str	r3, [r2, #16]
 80051de:	e092      	b.n	8005306 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051fa:	0cdb      	lsrs	r3, r3, #19
 80051fc:	04db      	lsls	r3, r3, #19
 80051fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800521a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800521e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005222:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11a      	bne.n	8005260 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	d903      	bls.n	800523e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	0151      	lsls	r1, r2, #5
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	440a      	add	r2, r1
 8005254:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005258:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800525c:	6113      	str	r3, [r2, #16]
 800525e:	e01b      	b.n	8005298 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	440b      	add	r3, r1
 8005278:	1e59      	subs	r1, r3, #1
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005282:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005284:	4ba2      	ldr	r3, [pc, #648]	@ (8005510 <USB_EPStartXfer+0x3c0>)
 8005286:	400b      	ands	r3, r1
 8005288:	69b9      	ldr	r1, [r7, #24]
 800528a:	0148      	lsls	r0, r1, #5
 800528c:	69f9      	ldr	r1, [r7, #28]
 800528e:	4401      	add	r1, r0
 8005290:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005294:	4313      	orrs	r3, r2
 8005296:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ae:	69b9      	ldr	r1, [r7, #24]
 80052b0:	0148      	lsls	r0, r1, #5
 80052b2:	69f9      	ldr	r1, [r7, #28]
 80052b4:	4401      	add	r1, r0
 80052b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	791b      	ldrb	r3, [r3, #4]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d11f      	bne.n	8005306 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052e0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80052e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005300:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005304:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d14b      	bne.n	80053a4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d009      	beq.n	8005328 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005320:	461a      	mov	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	791b      	ldrb	r3, [r3, #4]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d128      	bne.n	8005382 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d110      	bne.n	8005362 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800535a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e00f      	b.n	8005382 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005380:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e165      	b.n	8005670 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	791b      	ldrb	r3, [r3, #4]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d015      	beq.n	80053f8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 814d 	beq.w	8005670 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	69f9      	ldr	r1, [r7, #28]
 80053ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f2:	4313      	orrs	r3, r2
 80053f4:	634b      	str	r3, [r1, #52]	@ 0x34
 80053f6:	e13b      	b.n	8005670 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d110      	bne.n	800542a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005422:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e00f      	b.n	800544a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005448:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	b298      	uxth	r0, r3
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	4603      	mov	r3, r0
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f9b8 	bl	80057d4 <USB_WritePacket>
 8005464:	e104      	b.n	8005670 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	440a      	add	r2, r1
 800547c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005480:	0cdb      	lsrs	r3, r3, #19
 8005482:	04db      	lsls	r3, r3, #19
 8005484:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054a0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80054a4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054a8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d131      	bne.n	8005514 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	0148      	lsls	r0, r1, #5
 80054e2:	69f9      	ldr	r1, [r7, #28]
 80054e4:	4401      	add	r1, r0
 80054e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054ea:	4313      	orrs	r3, r2
 80054ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005508:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800550c:	6113      	str	r3, [r2, #16]
 800550e:	e061      	b.n	80055d4 <USB_EPStartXfer+0x484>
 8005510:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d123      	bne.n	8005564 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005532:	69b9      	ldr	r1, [r7, #24]
 8005534:	0148      	lsls	r0, r1, #5
 8005536:	69f9      	ldr	r1, [r7, #28]
 8005538:	4401      	add	r1, r0
 800553a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800553e:	4313      	orrs	r3, r2
 8005540:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800555c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005560:	6113      	str	r3, [r2, #16]
 8005562:	e037      	b.n	80055d4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	4413      	add	r3, r2
 800556e:	1e5a      	subs	r2, r3, #1
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	8afa      	ldrh	r2, [r7, #22]
 8005580:	fb03 f202 	mul.w	r2, r3, r2
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	8afb      	ldrh	r3, [r7, #22]
 8005598:	04d9      	lsls	r1, r3, #19
 800559a:	4b38      	ldr	r3, [pc, #224]	@ (800567c <USB_EPStartXfer+0x52c>)
 800559c:	400b      	ands	r3, r1
 800559e:	69b9      	ldr	r1, [r7, #24]
 80055a0:	0148      	lsls	r0, r1, #5
 80055a2:	69f9      	ldr	r1, [r7, #28]
 80055a4:	4401      	add	r1, r0
 80055a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055aa:	4313      	orrs	r3, r2
 80055ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c4:	69b9      	ldr	r1, [r7, #24]
 80055c6:	0148      	lsls	r0, r1, #5
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	4401      	add	r1, r0
 80055cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055d0:	4313      	orrs	r3, r2
 80055d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d10d      	bne.n	80055f6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	68d9      	ldr	r1, [r3, #12]
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f2:	460a      	mov	r2, r1
 80055f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	791b      	ldrb	r3, [r3, #4]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d128      	bne.n	8005650 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	d110      	bne.n	8005630 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	440a      	add	r2, r1
 8005624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005628:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e00f      	b.n	8005650 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	440a      	add	r2, r1
 8005646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800564e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800566a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800566e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	1ff80000 	.word	0x1ff80000

08005680 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d14a      	bne.n	8005734 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056b6:	f040 8086 	bne.w	80057c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	7812      	ldrb	r2, [r2, #0]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005700:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3301      	adds	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800570e:	4293      	cmp	r3, r2
 8005710:	d902      	bls.n	8005718 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
          break;
 8005716:	e056      	b.n	80057c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005730:	d0e7      	beq.n	8005702 <USB_EPStopXfer+0x82>
 8005732:	e048      	b.n	80057c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800574c:	d13b      	bne.n	80057c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	440a      	add	r2, r1
 8005768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800576c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005770:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005794:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3301      	adds	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d902      	bls.n	80057ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	75fb      	strb	r3, [r7, #23]
          break;
 80057aa:	e00c      	b.n	80057c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c4:	d0e7      	beq.n	8005796 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	@ 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4611      	mov	r1, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	460b      	mov	r3, r1
 80057e4:	71fb      	strb	r3, [r7, #7]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d123      	bne.n	8005842 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057fa:	88bb      	ldrh	r3, [r7, #4]
 80057fc:	3303      	adds	r3, #3
 80057fe:	089b      	lsrs	r3, r3, #2
 8005800:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005802:	2300      	movs	r3, #0
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e018      	b.n	800583a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	031a      	lsls	r2, r3, #12
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	4413      	add	r3, r2
 8005810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005814:	461a      	mov	r2, r3
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3301      	adds	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3301      	adds	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	3301      	adds	r3, #1
 800582c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	3301      	adds	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3301      	adds	r3, #1
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	429a      	cmp	r2, r3
 8005840:	d3e2      	bcc.n	8005808 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3724      	adds	r7, #36	@ 0x24
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005850:	b480      	push	{r7}
 8005852:	b08b      	sub	sp, #44	@ 0x2c
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	089b      	lsrs	r3, r3, #2
 800586a:	b29b      	uxth	r3, r3
 800586c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005876:	2300      	movs	r3, #0
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	e014      	b.n	80058a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	601a      	str	r2, [r3, #0]
    pDest++;
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	3301      	adds	r3, #1
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	3301      	adds	r3, #1
 8005892:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	3301      	adds	r3, #1
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	3301      	adds	r3, #1
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	3301      	adds	r3, #1
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d3e6      	bcc.n	800587c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058ae:	8bfb      	ldrh	r3, [r7, #30]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01e      	beq.n	80058f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058be:	461a      	mov	r2, r3
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	701a      	strb	r2, [r3, #0]
      i++;
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	3301      	adds	r3, #1
 80058de:	623b      	str	r3, [r7, #32]
      pDest++;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	3301      	adds	r3, #1
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058e6:	8bfb      	ldrh	r3, [r7, #30]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058ec:	8bfb      	ldrh	r3, [r7, #30]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1ea      	bne.n	80058c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	372c      	adds	r7, #44	@ 0x2c
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d12c      	bne.n	8005976 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	db12      	blt.n	8005954 <USB_EPSetStall+0x54>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00f      	beq.n	8005954 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005952:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800596e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	e02b      	b.n	80059ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	db12      	blt.n	80059ae <USB_EPSetStall+0xae>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00f      	beq.n	80059ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d128      	bne.n	8005a4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	791b      	ldrb	r3, [r3, #4]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d003      	beq.n	8005a28 <USB_EPClearStall+0x4c>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	791b      	ldrb	r3, [r3, #4]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d138      	bne.n	8005a9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	e027      	b.n	8005a9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	791b      	ldrb	r3, [r3, #4]
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d003      	beq.n	8005a7a <USB_EPClearStall+0x9e>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	791b      	ldrb	r3, [r3, #4]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d10f      	bne.n	8005a9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	0151      	lsls	r1, r2, #5
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	440a      	add	r2, r1
 8005a90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ac6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005aca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005adc:	68f9      	ldr	r1, [r7, #12]
 8005ade:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b22:	f023 0302 	bic.w	r3, r3, #2
 8005b26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b50:	f023 0303 	bic.w	r3, r3, #3
 8005b54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b90:	68fb      	ldr	r3, [r7, #12]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	0c1b      	lsrs	r3, r3, #16
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	b29b      	uxth	r3, r3
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4013      	ands	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c34:	68bb      	ldr	r3, [r7, #8]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b087      	sub	sp, #28
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c72:	01db      	lsls	r3, r3, #7
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c90:	68bb      	ldr	r3, [r7, #8]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0301 	and.w	r3, r3, #1
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cd4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cd8:	f023 0307 	bic.w	r3, r3, #7
 8005cdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	333c      	adds	r3, #60	@ 0x3c
 8005d16:	3304      	adds	r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4a26      	ldr	r2, [pc, #152]	@ (8005db8 <USB_EP0_OutStart+0xb8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d90a      	bls.n	8005d3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d34:	d101      	bne.n	8005d3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e037      	b.n	8005daa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d40:	461a      	mov	r2, r3
 8005d42:	2300      	movs	r3, #0
 8005d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d68:	f043 0318 	orr.w	r3, r3, #24
 8005d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d7c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005d80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10f      	bne.n	8005da8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8e:	461a      	mov	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005da6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	4f54300a 	.word	0x4f54300a

08005dbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dd4:	d901      	bls.n	8005dda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e01b      	b.n	8005e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	daf2      	bge.n	8005dc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f043 0201 	orr.w	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dfe:	d901      	bls.n	8005e04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e006      	b.n	8005e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d0f0      	beq.n	8005df2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e2c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e30:	f002 fc88 	bl	8008744 <USBD_static_malloc>
 8005e34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	32b0      	adds	r2, #176	@ 0xb0
 8005e46:	2100      	movs	r1, #0
 8005e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0d4      	b.n	8005ffa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e50:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e54:	2100      	movs	r1, #0
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f002 fcb8 	bl	80087cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	32b0      	adds	r2, #176	@ 0xb0
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	32b0      	adds	r2, #176	@ 0xb0
 8005e76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	7c1b      	ldrb	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d138      	bne.n	8005efa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e88:	4b5e      	ldr	r3, [pc, #376]	@ (8006004 <USBD_CDC_Init+0x1e4>)
 8005e8a:	7819      	ldrb	r1, [r3, #0]
 8005e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e90:	2202      	movs	r2, #2
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f002 fb33 	bl	80084fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e98:	4b5a      	ldr	r3, [pc, #360]	@ (8006004 <USBD_CDC_Init+0x1e4>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f003 020f 	and.w	r2, r3, #15
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	3324      	adds	r3, #36	@ 0x24
 8005eae:	2201      	movs	r2, #1
 8005eb0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005eb2:	4b55      	ldr	r3, [pc, #340]	@ (8006008 <USBD_CDC_Init+0x1e8>)
 8005eb4:	7819      	ldrb	r1, [r3, #0]
 8005eb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005eba:	2202      	movs	r2, #2
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f002 fb1e 	bl	80084fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ec2:	4b51      	ldr	r3, [pc, #324]	@ (8006008 <USBD_CDC_Init+0x1e8>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005eda:	2201      	movs	r2, #1
 8005edc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ede:	4b4b      	ldr	r3, [pc, #300]	@ (800600c <USBD_CDC_Init+0x1ec>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3326      	adds	r3, #38	@ 0x26
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	e035      	b.n	8005f66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005efa:	4b42      	ldr	r3, [pc, #264]	@ (8006004 <USBD_CDC_Init+0x1e4>)
 8005efc:	7819      	ldrb	r1, [r3, #0]
 8005efe:	2340      	movs	r3, #64	@ 0x40
 8005f00:	2202      	movs	r2, #2
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f002 fafb 	bl	80084fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f08:	4b3e      	ldr	r3, [pc, #248]	@ (8006004 <USBD_CDC_Init+0x1e4>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	f003 020f 	and.w	r2, r3, #15
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3324      	adds	r3, #36	@ 0x24
 8005f1e:	2201      	movs	r2, #1
 8005f20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f22:	4b39      	ldr	r3, [pc, #228]	@ (8006008 <USBD_CDC_Init+0x1e8>)
 8005f24:	7819      	ldrb	r1, [r3, #0]
 8005f26:	2340      	movs	r3, #64	@ 0x40
 8005f28:	2202      	movs	r2, #2
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f002 fae7 	bl	80084fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f30:	4b35      	ldr	r3, [pc, #212]	@ (8006008 <USBD_CDC_Init+0x1e8>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f48:	2201      	movs	r2, #1
 8005f4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800600c <USBD_CDC_Init+0x1ec>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	3326      	adds	r3, #38	@ 0x26
 8005f62:	2210      	movs	r2, #16
 8005f64:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f66:	4b29      	ldr	r3, [pc, #164]	@ (800600c <USBD_CDC_Init+0x1ec>)
 8005f68:	7819      	ldrb	r1, [r3, #0]
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f002 fac5 	bl	80084fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f74:	4b25      	ldr	r3, [pc, #148]	@ (800600c <USBD_CDC_Init+0x1ec>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f003 020f 	and.w	r2, r3, #15
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	3324      	adds	r3, #36	@ 0x24
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	33b0      	adds	r3, #176	@ 0xb0
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e018      	b.n	8005ffa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	7c1b      	ldrb	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8006008 <USBD_CDC_Init+0x1e8>)
 8005fd2:	7819      	ldrb	r1, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fb7c 	bl	80086dc <USBD_LL_PrepareReceive>
 8005fe4:	e008      	b.n	8005ff8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fe6:	4b08      	ldr	r3, [pc, #32]	@ (8006008 <USBD_CDC_Init+0x1e8>)
 8005fe8:	7819      	ldrb	r1, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ff0:	2340      	movs	r3, #64	@ 0x40
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f002 fb72 	bl	80086dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	2000009f 	.word	0x2000009f
 8006008:	200000a0 	.word	0x200000a0
 800600c:	200000a1 	.word	0x200000a1

08006010 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800601c:	4b3a      	ldr	r3, [pc, #232]	@ (8006108 <USBD_CDC_DeInit+0xf8>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f002 fa91 	bl	800854a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006028:	4b37      	ldr	r3, [pc, #220]	@ (8006108 <USBD_CDC_DeInit+0xf8>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f003 020f 	and.w	r2, r3, #15
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	3324      	adds	r3, #36	@ 0x24
 800603e:	2200      	movs	r2, #0
 8006040:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006042:	4b32      	ldr	r3, [pc, #200]	@ (800610c <USBD_CDC_DeInit+0xfc>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f002 fa7e 	bl	800854a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800604e:	4b2f      	ldr	r3, [pc, #188]	@ (800610c <USBD_CDC_DeInit+0xfc>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006066:	2200      	movs	r2, #0
 8006068:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800606a:	4b29      	ldr	r3, [pc, #164]	@ (8006110 <USBD_CDC_DeInit+0x100>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f002 fa6a 	bl	800854a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006076:	4b26      	ldr	r3, [pc, #152]	@ (8006110 <USBD_CDC_DeInit+0x100>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3324      	adds	r3, #36	@ 0x24
 800608c:	2200      	movs	r2, #0
 800608e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006090:	4b1f      	ldr	r3, [pc, #124]	@ (8006110 <USBD_CDC_DeInit+0x100>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 020f 	and.w	r2, r3, #15
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	3326      	adds	r3, #38	@ 0x26
 80060a6:	2200      	movs	r2, #0
 80060a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	32b0      	adds	r2, #176	@ 0xb0
 80060b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01f      	beq.n	80060fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	33b0      	adds	r3, #176	@ 0xb0
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	32b0      	adds	r2, #176	@ 0xb0
 80060da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 fb3e 	bl	8008760 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	32b0      	adds	r2, #176	@ 0xb0
 80060ee:	2100      	movs	r1, #0
 80060f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	2000009f 	.word	0x2000009f
 800610c:	200000a0 	.word	0x200000a0
 8006110:	200000a1 	.word	0x200000a1

08006114 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	32b0      	adds	r2, #176	@ 0xb0
 8006128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006140:	2303      	movs	r3, #3
 8006142:	e0bf      	b.n	80062c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800614c:	2b00      	cmp	r3, #0
 800614e:	d050      	beq.n	80061f2 <USBD_CDC_Setup+0xde>
 8006150:	2b20      	cmp	r3, #32
 8006152:	f040 80af 	bne.w	80062b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	88db      	ldrh	r3, [r3, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d03a      	beq.n	80061d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	b25b      	sxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	da1b      	bge.n	80061a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	33b0      	adds	r3, #176	@ 0xb0
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800617e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	88d2      	ldrh	r2, [r2, #6]
 8006184:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	88db      	ldrh	r3, [r3, #6]
 800618a:	2b07      	cmp	r3, #7
 800618c:	bf28      	it	cs
 800618e:	2307      	movcs	r3, #7
 8006190:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	89fa      	ldrh	r2, [r7, #14]
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 fd87 	bl	8007cac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800619e:	e090      	b.n	80062c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	785a      	ldrb	r2, [r3, #1]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	88db      	ldrh	r3, [r3, #6]
 80061ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80061b0:	d803      	bhi.n	80061ba <USBD_CDC_Setup+0xa6>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	88db      	ldrh	r3, [r3, #6]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	e000      	b.n	80061bc <USBD_CDC_Setup+0xa8>
 80061ba:	2240      	movs	r2, #64	@ 0x40
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80061c2:	6939      	ldr	r1, [r7, #16]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80061ca:	461a      	mov	r2, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fd99 	bl	8007d04 <USBD_CtlPrepareRx>
      break;
 80061d2:	e076      	b.n	80062c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	33b0      	adds	r3, #176	@ 0xb0
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	7850      	ldrb	r0, [r2, #1]
 80061ea:	2200      	movs	r2, #0
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	4798      	blx	r3
      break;
 80061f0:	e067      	b.n	80062c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b0b      	cmp	r3, #11
 80061f8:	d851      	bhi.n	800629e <USBD_CDC_Setup+0x18a>
 80061fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <USBD_CDC_Setup+0xec>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006231 	.word	0x08006231
 8006204:	080062ad 	.word	0x080062ad
 8006208:	0800629f 	.word	0x0800629f
 800620c:	0800629f 	.word	0x0800629f
 8006210:	0800629f 	.word	0x0800629f
 8006214:	0800629f 	.word	0x0800629f
 8006218:	0800629f 	.word	0x0800629f
 800621c:	0800629f 	.word	0x0800629f
 8006220:	0800629f 	.word	0x0800629f
 8006224:	0800629f 	.word	0x0800629f
 8006228:	0800625b 	.word	0x0800625b
 800622c:	08006285 	.word	0x08006285
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b03      	cmp	r3, #3
 800623a:	d107      	bne.n	800624c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800623c:	f107 030a 	add.w	r3, r7, #10
 8006240:	2202      	movs	r2, #2
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 fd31 	bl	8007cac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800624a:	e032      	b.n	80062b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 fcbb 	bl	8007bca <USBD_CtlError>
            ret = USBD_FAIL;
 8006254:	2303      	movs	r3, #3
 8006256:	75fb      	strb	r3, [r7, #23]
          break;
 8006258:	e02b      	b.n	80062b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b03      	cmp	r3, #3
 8006264:	d107      	bne.n	8006276 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006266:	f107 030d 	add.w	r3, r7, #13
 800626a:	2201      	movs	r2, #1
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fd1c 	bl	8007cac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006274:	e01d      	b.n	80062b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fca6 	bl	8007bca <USBD_CtlError>
            ret = USBD_FAIL;
 800627e:	2303      	movs	r3, #3
 8006280:	75fb      	strb	r3, [r7, #23]
          break;
 8006282:	e016      	b.n	80062b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b03      	cmp	r3, #3
 800628e:	d00f      	beq.n	80062b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fc99 	bl	8007bca <USBD_CtlError>
            ret = USBD_FAIL;
 8006298:	2303      	movs	r3, #3
 800629a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800629c:	e008      	b.n	80062b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 fc92 	bl	8007bca <USBD_CtlError>
          ret = USBD_FAIL;
 80062a6:	2303      	movs	r3, #3
 80062a8:	75fb      	strb	r3, [r7, #23]
          break;
 80062aa:	e002      	b.n	80062b2 <USBD_CDC_Setup+0x19e>
          break;
 80062ac:	bf00      	nop
 80062ae:	e008      	b.n	80062c2 <USBD_CDC_Setup+0x1ae>
          break;
 80062b0:	bf00      	nop
      }
      break;
 80062b2:	e006      	b.n	80062c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fc87 	bl	8007bca <USBD_CtlError>
      ret = USBD_FAIL;
 80062bc:	2303      	movs	r3, #3
 80062be:	75fb      	strb	r3, [r7, #23]
      break;
 80062c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80062de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	32b0      	adds	r2, #176	@ 0xb0
 80062ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e065      	b.n	80063c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	32b0      	adds	r2, #176	@ 0xb0
 8006300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006304:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	f003 020f 	and.w	r2, r3, #15
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	440b      	add	r3, r1
 8006318:	3318      	adds	r3, #24
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d02f      	beq.n	8006380 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	f003 020f 	and.w	r2, r3, #15
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	440b      	add	r3, r1
 8006332:	3318      	adds	r3, #24
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	f003 010f 	and.w	r1, r3, #15
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	460b      	mov	r3, r1
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	440b      	add	r3, r1
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4403      	add	r3, r0
 8006348:	331c      	adds	r3, #28
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006356:	2b00      	cmp	r3, #0
 8006358:	d112      	bne.n	8006380 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	f003 020f 	and.w	r2, r3, #15
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	3318      	adds	r3, #24
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006372:	78f9      	ldrb	r1, [r7, #3]
 8006374:	2300      	movs	r3, #0
 8006376:	2200      	movs	r2, #0
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f002 f98e 	bl	800869a <USBD_LL_Transmit>
 800637e:	e01f      	b.n	80063c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	33b0      	adds	r3, #176	@ 0xb0
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d010      	beq.n	80063c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	33b0      	adds	r3, #176	@ 0xb0
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80063bc:	78fa      	ldrb	r2, [r7, #3]
 80063be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	32b0      	adds	r2, #176	@ 0xb0
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	32b0      	adds	r2, #176	@ 0xb0
 80063f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e01a      	b.n	8006432 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 f98c 	bl	800871e <USBD_LL_GetRxDataSize>
 8006406:	4602      	mov	r2, r0
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	33b0      	adds	r3, #176	@ 0xb0
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800642c:	4611      	mov	r1, r2
 800642e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	32b0      	adds	r2, #176	@ 0xb0
 800644c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006450:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	e024      	b.n	80064a6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	33b0      	adds	r3, #176	@ 0xb0
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d019      	beq.n	80064a4 <USBD_CDC_EP0_RxReady+0x6a>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006476:	2bff      	cmp	r3, #255	@ 0xff
 8006478:	d014      	beq.n	80064a4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	33b0      	adds	r3, #176	@ 0xb0
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006492:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800649a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	22ff      	movs	r2, #255	@ 0xff
 80064a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064b8:	2182      	movs	r1, #130	@ 0x82
 80064ba:	4818      	ldr	r0, [pc, #96]	@ (800651c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064bc:	f000 fd4f 	bl	8006f5e <USBD_GetEpDesc>
 80064c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064c2:	2101      	movs	r1, #1
 80064c4:	4815      	ldr	r0, [pc, #84]	@ (800651c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064c6:	f000 fd4a 	bl	8006f5e <USBD_GetEpDesc>
 80064ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064cc:	2181      	movs	r1, #129	@ 0x81
 80064ce:	4813      	ldr	r0, [pc, #76]	@ (800651c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064d0:	f000 fd45 	bl	8006f5e <USBD_GetEpDesc>
 80064d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2210      	movs	r2, #16
 80064e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d006      	beq.n	80064f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064f0:	711a      	strb	r2, [r3, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d006      	beq.n	800650a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006504:	711a      	strb	r2, [r3, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2243      	movs	r2, #67	@ 0x43
 800650e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006510:	4b02      	ldr	r3, [pc, #8]	@ (800651c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	2000005c 	.word	0x2000005c

08006520 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006528:	2182      	movs	r1, #130	@ 0x82
 800652a:	4818      	ldr	r0, [pc, #96]	@ (800658c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800652c:	f000 fd17 	bl	8006f5e <USBD_GetEpDesc>
 8006530:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006532:	2101      	movs	r1, #1
 8006534:	4815      	ldr	r0, [pc, #84]	@ (800658c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006536:	f000 fd12 	bl	8006f5e <USBD_GetEpDesc>
 800653a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800653c:	2181      	movs	r1, #129	@ 0x81
 800653e:	4813      	ldr	r0, [pc, #76]	@ (800658c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006540:	f000 fd0d 	bl	8006f5e <USBD_GetEpDesc>
 8006544:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2210      	movs	r2, #16
 8006550:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2200      	movs	r2, #0
 800655c:	711a      	strb	r2, [r3, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f042 0202 	orr.w	r2, r2, #2
 8006564:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d006      	beq.n	800657a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	711a      	strb	r2, [r3, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f042 0202 	orr.w	r2, r2, #2
 8006578:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2243      	movs	r2, #67	@ 0x43
 800657e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006580:	4b02      	ldr	r3, [pc, #8]	@ (800658c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	2000005c 	.word	0x2000005c

08006590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006598:	2182      	movs	r1, #130	@ 0x82
 800659a:	4818      	ldr	r0, [pc, #96]	@ (80065fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800659c:	f000 fcdf 	bl	8006f5e <USBD_GetEpDesc>
 80065a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065a2:	2101      	movs	r1, #1
 80065a4:	4815      	ldr	r0, [pc, #84]	@ (80065fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065a6:	f000 fcda 	bl	8006f5e <USBD_GetEpDesc>
 80065aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065ac:	2181      	movs	r1, #129	@ 0x81
 80065ae:	4813      	ldr	r0, [pc, #76]	@ (80065fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065b0:	f000 fcd5 	bl	8006f5e <USBD_GetEpDesc>
 80065b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2210      	movs	r2, #16
 80065c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d006      	beq.n	80065d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d0:	711a      	strb	r2, [r3, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d006      	beq.n	80065ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065e4:	711a      	strb	r2, [r3, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2243      	movs	r2, #67	@ 0x43
 80065ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065f0:	4b02      	ldr	r3, [pc, #8]	@ (80065fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2000005c 	.word	0x2000005c

08006600 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	220a      	movs	r2, #10
 800660c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800660e:	4b03      	ldr	r3, [pc, #12]	@ (800661c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	20000018 	.word	0x20000018

08006620 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006630:	2303      	movs	r3, #3
 8006632:	e009      	b.n	8006648 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	33b0      	adds	r3, #176	@ 0xb0
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	32b0      	adds	r2, #176	@ 0xb0
 800666a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006676:	2303      	movs	r3, #3
 8006678:	e008      	b.n	800668c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	32b0      	adds	r2, #176	@ 0xb0
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e004      	b.n	80066c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	32b0      	adds	r2, #176	@ 0xb0
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80066ec:	2301      	movs	r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e025      	b.n	8006746 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11f      	bne.n	8006744 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2201      	movs	r2, #1
 8006708:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800670c:	4b10      	ldr	r3, [pc, #64]	@ (8006750 <USBD_CDC_TransmitPacket+0x7c>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4403      	add	r3, r0
 8006726:	3318      	adds	r3, #24
 8006728:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800672a:	4b09      	ldr	r3, [pc, #36]	@ (8006750 <USBD_CDC_TransmitPacket+0x7c>)
 800672c:	7819      	ldrb	r1, [r3, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 ffad 	bl	800869a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	2000009f 	.word	0x2000009f

08006754 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	32b0      	adds	r2, #176	@ 0xb0
 8006766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32b0      	adds	r2, #176	@ 0xb0
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800677e:	2303      	movs	r3, #3
 8006780:	e018      	b.n	80067b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7c1b      	ldrb	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800678a:	4b0c      	ldr	r3, [pc, #48]	@ (80067bc <USBD_CDC_ReceivePacket+0x68>)
 800678c:	7819      	ldrb	r1, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 ff9f 	bl	80086dc <USBD_LL_PrepareReceive>
 800679e:	e008      	b.n	80067b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a0:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <USBD_CDC_ReceivePacket+0x68>)
 80067a2:	7819      	ldrb	r1, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067aa:	2340      	movs	r3, #64	@ 0x40
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 ff95 	bl	80086dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	200000a0 	.word	0x200000a0

080067c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4613      	mov	r3, r2
 80067cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e01f      	b.n	8006818 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	79fa      	ldrb	r2, [r7, #7]
 800680a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f001 fe0f 	bl	8008430 <USBD_LL_Init>
 8006812:	4603      	mov	r3, r0
 8006814:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006834:	2303      	movs	r3, #3
 8006836:	e025      	b.n	8006884 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	32ae      	adds	r2, #174	@ 0xae
 800684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00f      	beq.n	8006874 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	@ 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	f107 020e 	add.w	r2, r7, #14
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	4602      	mov	r2, r0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fe17 	bl	80084c8 <USBD_LL_Start>
 800689a:	4603      	mov	r3, r0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d009      	beq.n	80068e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	4611      	mov	r1, r2
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	4603      	mov	r3, r0
 80068e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	4611      	mov	r1, r2
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f001 f90c 	bl	8007b56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800694c:	461a      	mov	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2b02      	cmp	r3, #2
 8006960:	d01a      	beq.n	8006998 <USBD_LL_SetupStage+0x72>
 8006962:	2b02      	cmp	r3, #2
 8006964:	d822      	bhi.n	80069ac <USBD_LL_SetupStage+0x86>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <USBD_LL_SetupStage+0x4a>
 800696a:	2b01      	cmp	r3, #1
 800696c:	d00a      	beq.n	8006984 <USBD_LL_SetupStage+0x5e>
 800696e:	e01d      	b.n	80069ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fb63 	bl	8007044 <USBD_StdDevReq>
 800697e:	4603      	mov	r3, r0
 8006980:	73fb      	strb	r3, [r7, #15]
      break;
 8006982:	e020      	b.n	80069c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fbcb 	bl	8007128 <USBD_StdItfReq>
 8006992:	4603      	mov	r3, r0
 8006994:	73fb      	strb	r3, [r7, #15]
      break;
 8006996:	e016      	b.n	80069c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fc2d 	bl	8007200 <USBD_StdEPReq>
 80069a6:	4603      	mov	r3, r0
 80069a8:	73fb      	strb	r3, [r7, #15]
      break;
 80069aa:	e00c      	b.n	80069c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fde4 	bl	8008588 <USBD_LL_StallEP>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
      break;
 80069c4:	bf00      	nop
  }

  return ret;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	460b      	mov	r3, r1
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069e2:	7afb      	ldrb	r3, [r7, #11]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d16e      	bne.n	8006ac6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80069ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	f040 8098 	bne.w	8006b2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d913      	bls.n	8006a30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	1ad2      	subs	r2, r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	bf28      	it	cs
 8006a22:	4613      	movcs	r3, r2
 8006a24:	461a      	mov	r2, r3
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f001 f988 	bl	8007d3e <USBD_CtlContinueRx>
 8006a2e:	e07d      	b.n	8006b2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d014      	beq.n	8006a68 <USBD_LL_DataOutStage+0x98>
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d81d      	bhi.n	8006a7e <USBD_LL_DataOutStage+0xae>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <USBD_LL_DataOutStage+0x7c>
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d003      	beq.n	8006a52 <USBD_LL_DataOutStage+0x82>
 8006a4a:	e018      	b.n	8006a7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	75bb      	strb	r3, [r7, #22]
            break;
 8006a50:	e018      	b.n	8006a84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fa64 	bl	8006f2a <USBD_CoreFindIF>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75bb      	strb	r3, [r7, #22]
            break;
 8006a66:	e00d      	b.n	8006a84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	4619      	mov	r1, r3
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 fa66 	bl	8006f44 <USBD_CoreFindEP>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75bb      	strb	r3, [r7, #22]
            break;
 8006a7c:	e002      	b.n	8006a84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75bb      	strb	r3, [r7, #22]
            break;
 8006a82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a84:	7dbb      	ldrb	r3, [r7, #22]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d119      	bne.n	8006abe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d113      	bne.n	8006abe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a96:	7dba      	ldrb	r2, [r7, #22]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	32ae      	adds	r2, #174	@ 0xae
 8006a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006aa6:	7dba      	ldrb	r2, [r7, #22]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006aae:	7dba      	ldrb	r2, [r7, #22]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	32ae      	adds	r2, #174	@ 0xae
 8006ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f001 f94e 	bl	8007d60 <USBD_CtlSendStatus>
 8006ac4:	e032      	b.n	8006b2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	4619      	mov	r1, r3
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fa37 	bl	8006f44 <USBD_CoreFindEP>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ada:	7dbb      	ldrb	r3, [r7, #22]
 8006adc:	2bff      	cmp	r3, #255	@ 0xff
 8006ade:	d025      	beq.n	8006b2c <USBD_LL_DataOutStage+0x15c>
 8006ae0:	7dbb      	ldrb	r3, [r7, #22]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d122      	bne.n	8006b2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d117      	bne.n	8006b22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006af2:	7dba      	ldrb	r2, [r7, #22]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	32ae      	adds	r2, #174	@ 0xae
 8006af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00f      	beq.n	8006b22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b02:	7dba      	ldrb	r2, [r7, #22]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b0a:	7dba      	ldrb	r2, [r7, #22]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	32ae      	adds	r2, #174	@ 0xae
 8006b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	7afa      	ldrb	r2, [r7, #11]
 8006b18:	4611      	mov	r1, r2
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	4798      	blx	r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	e000      	b.n	8006b2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b086      	sub	sp, #24
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d16f      	bne.n	8006c2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d15a      	bne.n	8006c10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d914      	bls.n	8006b90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f001 f8b0 	bl	8007ce2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b82:	2300      	movs	r3, #0
 8006b84:	2200      	movs	r2, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f001 fda7 	bl	80086dc <USBD_LL_PrepareReceive>
 8006b8e:	e03f      	b.n	8006c10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d11c      	bne.n	8006bd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d316      	bcc.n	8006bd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d20f      	bcs.n	8006bd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f001 f891 	bl	8007ce2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2100      	movs	r1, #0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f001 fd84 	bl	80086dc <USBD_LL_PrepareReceive>
 8006bd4:	e01c      	b.n	8006c10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d10f      	bne.n	8006c02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c02:	2180      	movs	r1, #128	@ 0x80
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f001 fcbf 	bl	8008588 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f001 f8bb 	bl	8007d86 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d03a      	beq.n	8006c90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff fe42 	bl	80068a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006c28:	e032      	b.n	8006c90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	4619      	mov	r1, r3
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f985 	bl	8006f44 <USBD_CoreFindEP>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	2bff      	cmp	r3, #255	@ 0xff
 8006c42:	d025      	beq.n	8006c90 <USBD_LL_DataInStage+0x15a>
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d122      	bne.n	8006c90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d11c      	bne.n	8006c90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c56:	7dfa      	ldrb	r2, [r7, #23]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	32ae      	adds	r2, #174	@ 0xae
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d014      	beq.n	8006c90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c66:	7dfa      	ldrb	r2, [r7, #23]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c6e:	7dfa      	ldrb	r2, [r7, #23]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	32ae      	adds	r2, #174	@ 0xae
 8006c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	7afa      	ldrb	r2, [r7, #11]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c86:	7dbb      	ldrb	r3, [r7, #22]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c8c:	7dbb      	ldrb	r3, [r7, #22]
 8006c8e:	e000      	b.n	8006c92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d014      	beq.n	8006d00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6852      	ldr	r2, [r2, #4]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d00:	2340      	movs	r3, #64	@ 0x40
 8006d02:	2200      	movs	r2, #0
 8006d04:	2100      	movs	r1, #0
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fbf9 	bl	80084fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2240      	movs	r2, #64	@ 0x40
 8006d18:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d1c:	2340      	movs	r3, #64	@ 0x40
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2180      	movs	r1, #128	@ 0x80
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fbeb 	bl	80084fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2240      	movs	r2, #64	@ 0x40
 8006d32:	621a      	str	r2, [r3, #32]

  return ret;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	460b      	mov	r3, r1
 8006d48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	78fa      	ldrb	r2, [r7, #3]
 8006d4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d006      	beq.n	8006d80 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2204      	movs	r2, #4
 8006d84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d106      	bne.n	8006db8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d110      	bne.n	8006dfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	32ae      	adds	r2, #174	@ 0xae
 8006e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e01c      	b.n	8006e62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d115      	bne.n	8006e60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32ae      	adds	r2, #174	@ 0xae
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32ae      	adds	r2, #174	@ 0xae
 8006e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	78fa      	ldrb	r2, [r7, #3]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	32ae      	adds	r2, #174	@ 0xae
 8006e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e01c      	b.n	8006ec6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d115      	bne.n	8006ec4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32ae      	adds	r2, #174	@ 0xae
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32ae      	adds	r2, #174	@ 0xae
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6852      	ldr	r2, [r2, #4]
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	4611      	mov	r1, r2
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	885b      	ldrh	r3, [r3, #2]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d91f      	bls.n	8006fc4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f8a:	e013      	b.n	8006fb4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f8c:	f107 030a 	add.w	r3, r7, #10
 8006f90:	4619      	mov	r1, r3
 8006f92:	6978      	ldr	r0, [r7, #20]
 8006f94:	f000 f81b 	bl	8006fce <USBD_GetNextDesc>
 8006f98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d108      	bne.n	8006fb4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	789b      	ldrb	r3, [r3, #2]
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d008      	beq.n	8006fc2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	885b      	ldrh	r3, [r3, #2]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	897b      	ldrh	r3, [r7, #10]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d8e5      	bhi.n	8006f8c <USBD_GetEpDesc+0x2e>
 8006fc0:	e000      	b.n	8006fc4 <USBD_GetEpDesc+0x66>
          break;
 8006fc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006fc4:	693b      	ldr	r3, [r7, #16]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	7812      	ldrb	r2, [r2, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007006:	b480      	push	{r7}
 8007008:	b087      	sub	sp, #28
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3301      	adds	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007024:	8a3b      	ldrh	r3, [r7, #16]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	b21a      	sxth	r2, r3
 800702a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800702e:	4313      	orrs	r3, r2
 8007030:	b21b      	sxth	r3, r3
 8007032:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007034:	89fb      	ldrh	r3, [r7, #14]
}
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800705a:	2b40      	cmp	r3, #64	@ 0x40
 800705c:	d005      	beq.n	800706a <USBD_StdDevReq+0x26>
 800705e:	2b40      	cmp	r3, #64	@ 0x40
 8007060:	d857      	bhi.n	8007112 <USBD_StdDevReq+0xce>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00f      	beq.n	8007086 <USBD_StdDevReq+0x42>
 8007066:	2b20      	cmp	r3, #32
 8007068:	d153      	bne.n	8007112 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	32ae      	adds	r2, #174	@ 0xae
 8007074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
      break;
 8007084:	e04a      	b.n	800711c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b09      	cmp	r3, #9
 800708c:	d83b      	bhi.n	8007106 <USBD_StdDevReq+0xc2>
 800708e:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <USBD_StdDevReq+0x50>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070e9 	.word	0x080070e9
 8007098:	080070fd 	.word	0x080070fd
 800709c:	08007107 	.word	0x08007107
 80070a0:	080070f3 	.word	0x080070f3
 80070a4:	08007107 	.word	0x08007107
 80070a8:	080070c7 	.word	0x080070c7
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	08007107 	.word	0x08007107
 80070b4:	080070df 	.word	0x080070df
 80070b8:	080070d1 	.word	0x080070d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa3c 	bl	800753c <USBD_GetDescriptor>
          break;
 80070c4:	e024      	b.n	8007110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fba1 	bl	8007810 <USBD_SetAddress>
          break;
 80070ce:	e01f      	b.n	8007110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fbe0 	bl	8007898 <USBD_SetConfig>
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]
          break;
 80070dc:	e018      	b.n	8007110 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fc83 	bl	80079ec <USBD_GetConfig>
          break;
 80070e6:	e013      	b.n	8007110 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fcb4 	bl	8007a58 <USBD_GetStatus>
          break;
 80070f0:	e00e      	b.n	8007110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fce3 	bl	8007ac0 <USBD_SetFeature>
          break;
 80070fa:	e009      	b.n	8007110 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fd07 	bl	8007b12 <USBD_ClrFeature>
          break;
 8007104:	e004      	b.n	8007110 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fd5e 	bl	8007bca <USBD_CtlError>
          break;
 800710e:	bf00      	nop
      }
      break;
 8007110:	e004      	b.n	800711c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fd58 	bl	8007bca <USBD_CtlError>
      break;
 800711a:	bf00      	nop
  }

  return ret;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop

08007128 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800713e:	2b40      	cmp	r3, #64	@ 0x40
 8007140:	d005      	beq.n	800714e <USBD_StdItfReq+0x26>
 8007142:	2b40      	cmp	r3, #64	@ 0x40
 8007144:	d852      	bhi.n	80071ec <USBD_StdItfReq+0xc4>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <USBD_StdItfReq+0x26>
 800714a:	2b20      	cmp	r3, #32
 800714c:	d14e      	bne.n	80071ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007154:	b2db      	uxtb	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	2b02      	cmp	r3, #2
 800715a:	d840      	bhi.n	80071de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	889b      	ldrh	r3, [r3, #4]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b01      	cmp	r3, #1
 8007164:	d836      	bhi.n	80071d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	889b      	ldrh	r3, [r3, #4]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff fedb 	bl	8006f2a <USBD_CoreFindIF>
 8007174:	4603      	mov	r3, r0
 8007176:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	2bff      	cmp	r3, #255	@ 0xff
 800717c:	d01d      	beq.n	80071ba <USBD_StdItfReq+0x92>
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d11a      	bne.n	80071ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007184:	7bba      	ldrb	r2, [r7, #14]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	32ae      	adds	r2, #174	@ 0xae
 800718a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00f      	beq.n	80071b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007194:	7bba      	ldrb	r2, [r7, #14]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800719c:	7bba      	ldrb	r2, [r7, #14]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	32ae      	adds	r2, #174	@ 0xae
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071b2:	e004      	b.n	80071be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071b8:	e001      	b.n	80071be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80071ba:	2303      	movs	r3, #3
 80071bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	88db      	ldrh	r3, [r3, #6]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d110      	bne.n	80071e8 <USBD_StdItfReq+0xc0>
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10d      	bne.n	80071e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fdc7 	bl	8007d60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071d2:	e009      	b.n	80071e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fcf7 	bl	8007bca <USBD_CtlError>
          break;
 80071dc:	e004      	b.n	80071e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fcf2 	bl	8007bca <USBD_CtlError>
          break;
 80071e6:	e000      	b.n	80071ea <USBD_StdItfReq+0xc2>
          break;
 80071e8:	bf00      	nop
      }
      break;
 80071ea:	e004      	b.n	80071f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fceb 	bl	8007bca <USBD_CtlError>
      break;
 80071f4:	bf00      	nop
  }

  return ret;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	889b      	ldrh	r3, [r3, #4]
 8007212:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800721c:	2b40      	cmp	r3, #64	@ 0x40
 800721e:	d007      	beq.n	8007230 <USBD_StdEPReq+0x30>
 8007220:	2b40      	cmp	r3, #64	@ 0x40
 8007222:	f200 817f 	bhi.w	8007524 <USBD_StdEPReq+0x324>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d02a      	beq.n	8007280 <USBD_StdEPReq+0x80>
 800722a:	2b20      	cmp	r3, #32
 800722c:	f040 817a 	bne.w	8007524 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fe85 	bl	8006f44 <USBD_CoreFindEP>
 800723a:	4603      	mov	r3, r0
 800723c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800723e:	7b7b      	ldrb	r3, [r7, #13]
 8007240:	2bff      	cmp	r3, #255	@ 0xff
 8007242:	f000 8174 	beq.w	800752e <USBD_StdEPReq+0x32e>
 8007246:	7b7b      	ldrb	r3, [r7, #13]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f040 8170 	bne.w	800752e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800724e:	7b7a      	ldrb	r2, [r7, #13]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007256:	7b7a      	ldrb	r2, [r7, #13]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	32ae      	adds	r2, #174	@ 0xae
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8163 	beq.w	800752e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007268:	7b7a      	ldrb	r2, [r7, #13]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	32ae      	adds	r2, #174	@ 0xae
 800726e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
 800727a:	4603      	mov	r3, r0
 800727c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800727e:	e156      	b.n	800752e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b03      	cmp	r3, #3
 8007286:	d008      	beq.n	800729a <USBD_StdEPReq+0x9a>
 8007288:	2b03      	cmp	r3, #3
 800728a:	f300 8145 	bgt.w	8007518 <USBD_StdEPReq+0x318>
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 809b 	beq.w	80073ca <USBD_StdEPReq+0x1ca>
 8007294:	2b01      	cmp	r3, #1
 8007296:	d03c      	beq.n	8007312 <USBD_StdEPReq+0x112>
 8007298:	e13e      	b.n	8007518 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d002      	beq.n	80072ac <USBD_StdEPReq+0xac>
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d016      	beq.n	80072d8 <USBD_StdEPReq+0xd8>
 80072aa:	e02c      	b.n	8007306 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00d      	beq.n	80072ce <USBD_StdEPReq+0xce>
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b80      	cmp	r3, #128	@ 0x80
 80072b6:	d00a      	beq.n	80072ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 f963 	bl	8008588 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072c2:	2180      	movs	r1, #128	@ 0x80
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f95f 	bl	8008588 <USBD_LL_StallEP>
 80072ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072cc:	e020      	b.n	8007310 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc7a 	bl	8007bca <USBD_CtlError>
              break;
 80072d6:	e01b      	b.n	8007310 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	885b      	ldrh	r3, [r3, #2]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10e      	bne.n	80072fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00b      	beq.n	80072fe <USBD_StdEPReq+0xfe>
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b80      	cmp	r3, #128	@ 0x80
 80072ea:	d008      	beq.n	80072fe <USBD_StdEPReq+0xfe>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	88db      	ldrh	r3, [r3, #6]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 f945 	bl	8008588 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fd2e 	bl	8007d60 <USBD_CtlSendStatus>

              break;
 8007304:	e004      	b.n	8007310 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fc5e 	bl	8007bca <USBD_CtlError>
              break;
 800730e:	bf00      	nop
          }
          break;
 8007310:	e107      	b.n	8007522 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d002      	beq.n	8007324 <USBD_StdEPReq+0x124>
 800731e:	2b03      	cmp	r3, #3
 8007320:	d016      	beq.n	8007350 <USBD_StdEPReq+0x150>
 8007322:	e04b      	b.n	80073bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <USBD_StdEPReq+0x146>
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	2b80      	cmp	r3, #128	@ 0x80
 800732e:	d00a      	beq.n	8007346 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 f927 	bl	8008588 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800733a:	2180      	movs	r1, #128	@ 0x80
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 f923 	bl	8008588 <USBD_LL_StallEP>
 8007342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007344:	e040      	b.n	80073c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fc3e 	bl	8007bca <USBD_CtlError>
              break;
 800734e:	e03b      	b.n	80073c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	885b      	ldrh	r3, [r3, #2]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d136      	bne.n	80073c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735e:	2b00      	cmp	r3, #0
 8007360:	d004      	beq.n	800736c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f92d 	bl	80085c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fcf7 	bl	8007d60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff fde4 	bl	8006f44 <USBD_CoreFindEP>
 800737c:	4603      	mov	r3, r0
 800737e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007380:	7b7b      	ldrb	r3, [r7, #13]
 8007382:	2bff      	cmp	r3, #255	@ 0xff
 8007384:	d01f      	beq.n	80073c6 <USBD_StdEPReq+0x1c6>
 8007386:	7b7b      	ldrb	r3, [r7, #13]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d11c      	bne.n	80073c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800738c:	7b7a      	ldrb	r2, [r7, #13]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007394:	7b7a      	ldrb	r2, [r7, #13]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	32ae      	adds	r2, #174	@ 0xae
 800739a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d010      	beq.n	80073c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073a4:	7b7a      	ldrb	r2, [r7, #13]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	32ae      	adds	r2, #174	@ 0xae
 80073aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80073ba:	e004      	b.n	80073c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fc03 	bl	8007bca <USBD_CtlError>
              break;
 80073c4:	e000      	b.n	80073c8 <USBD_StdEPReq+0x1c8>
              break;
 80073c6:	bf00      	nop
          }
          break;
 80073c8:	e0ab      	b.n	8007522 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d002      	beq.n	80073dc <USBD_StdEPReq+0x1dc>
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d032      	beq.n	8007440 <USBD_StdEPReq+0x240>
 80073da:	e097      	b.n	800750c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <USBD_StdEPReq+0x1f2>
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b80      	cmp	r3, #128	@ 0x80
 80073e6:	d004      	beq.n	80073f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fbed 	bl	8007bca <USBD_CtlError>
                break;
 80073f0:	e091      	b.n	8007516 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da0b      	bge.n	8007412 <USBD_StdEPReq+0x212>
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	3310      	adds	r3, #16
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	3304      	adds	r3, #4
 8007410:	e00b      	b.n	800742a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4413      	add	r3, r2
 8007428:	3304      	adds	r3, #4
 800742a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2202      	movs	r2, #2
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fc37 	bl	8007cac <USBD_CtlSendData>
              break;
 800743e:	e06a      	b.n	8007516 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007444:	2b00      	cmp	r3, #0
 8007446:	da11      	bge.n	800746c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	f003 020f 	and.w	r2, r3, #15
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	3324      	adds	r3, #36	@ 0x24
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d117      	bne.n	8007492 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fbb0 	bl	8007bca <USBD_CtlError>
                  break;
 800746a:	e054      	b.n	8007516 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	f003 020f 	and.w	r2, r3, #15
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fb9d 	bl	8007bca <USBD_CtlError>
                  break;
 8007490:	e041      	b.n	8007516 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	da0b      	bge.n	80074b2 <USBD_StdEPReq+0x2b2>
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	3310      	adds	r3, #16
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	3304      	adds	r3, #4
 80074b0:	e00b      	b.n	80074ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	4413      	add	r3, r2
 80074c8:	3304      	adds	r3, #4
 80074ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <USBD_StdEPReq+0x2d8>
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b80      	cmp	r3, #128	@ 0x80
 80074d6:	d103      	bne.n	80074e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	e00e      	b.n	80074fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 f88d 	bl	8008604 <USBD_LL_IsStallEP>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2201      	movs	r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	e002      	b.n	80074fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2202      	movs	r2, #2
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fbd1 	bl	8007cac <USBD_CtlSendData>
              break;
 800750a:	e004      	b.n	8007516 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fb5b 	bl	8007bca <USBD_CtlError>
              break;
 8007514:	bf00      	nop
          }
          break;
 8007516:	e004      	b.n	8007522 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fb55 	bl	8007bca <USBD_CtlError>
          break;
 8007520:	bf00      	nop
      }
      break;
 8007522:	e005      	b.n	8007530 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fb4f 	bl	8007bca <USBD_CtlError>
      break;
 800752c:	e000      	b.n	8007530 <USBD_StdEPReq+0x330>
      break;
 800752e:	bf00      	nop
  }

  return ret;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	885b      	ldrh	r3, [r3, #2]
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	2b06      	cmp	r3, #6
 800755e:	f200 8128 	bhi.w	80077b2 <USBD_GetDescriptor+0x276>
 8007562:	a201      	add	r2, pc, #4	@ (adr r2, 8007568 <USBD_GetDescriptor+0x2c>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	08007585 	.word	0x08007585
 800756c:	0800759d 	.word	0x0800759d
 8007570:	080075dd 	.word	0x080075dd
 8007574:	080077b3 	.word	0x080077b3
 8007578:	080077b3 	.word	0x080077b3
 800757c:	08007753 	.word	0x08007753
 8007580:	0800777f 	.word	0x0800777f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	7c12      	ldrb	r2, [r2, #16]
 8007590:	f107 0108 	add.w	r1, r7, #8
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
 8007598:	60f8      	str	r0, [r7, #12]
      break;
 800759a:	e112      	b.n	80077c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	7c1b      	ldrb	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10d      	bne.n	80075c0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	f107 0208 	add.w	r2, r7, #8
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	2202      	movs	r2, #2
 80075bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075be:	e100      	b.n	80077c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	f107 0208 	add.w	r2, r7, #8
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3301      	adds	r3, #1
 80075d6:	2202      	movs	r2, #2
 80075d8:	701a      	strb	r2, [r3, #0]
      break;
 80075da:	e0f2      	b.n	80077c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	885b      	ldrh	r3, [r3, #2]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	f200 80ac 	bhi.w	8007740 <USBD_GetDescriptor+0x204>
 80075e8:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <USBD_GetDescriptor+0xb4>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007609 	.word	0x08007609
 80075f4:	0800763d 	.word	0x0800763d
 80075f8:	08007671 	.word	0x08007671
 80075fc:	080076a5 	.word	0x080076a5
 8007600:	080076d9 	.word	0x080076d9
 8007604:	0800770d 	.word	0x0800770d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7c12      	ldrb	r2, [r2, #16]
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762a:	e091      	b.n	8007750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 facb 	bl	8007bca <USBD_CtlError>
            err++;
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	3301      	adds	r3, #1
 8007638:	72fb      	strb	r3, [r7, #11]
          break;
 800763a:	e089      	b.n	8007750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765e:	e077      	b.n	8007750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fab1 	bl	8007bca <USBD_CtlError>
            err++;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
          break;
 800766e:	e06f      	b.n	8007750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	7c12      	ldrb	r2, [r2, #16]
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007692:	e05d      	b.n	8007750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa97 	bl	8007bca <USBD_CtlError>
            err++;
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	3301      	adds	r3, #1
 80076a0:	72fb      	strb	r3, [r7, #11]
          break;
 80076a2:	e055      	b.n	8007750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7c12      	ldrb	r2, [r2, #16]
 80076bc:	f107 0108 	add.w	r1, r7, #8
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
 80076c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076c6:	e043      	b.n	8007750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa7d 	bl	8007bca <USBD_CtlError>
            err++;
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	3301      	adds	r3, #1
 80076d4:	72fb      	strb	r3, [r7, #11]
          break;
 80076d6:	e03b      	b.n	8007750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	7c12      	ldrb	r2, [r2, #16]
 80076f0:	f107 0108 	add.w	r1, r7, #8
 80076f4:	4610      	mov	r0, r2
 80076f6:	4798      	blx	r3
 80076f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076fa:	e029      	b.n	8007750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa63 	bl	8007bca <USBD_CtlError>
            err++;
 8007704:	7afb      	ldrb	r3, [r7, #11]
 8007706:	3301      	adds	r3, #1
 8007708:	72fb      	strb	r3, [r7, #11]
          break;
 800770a:	e021      	b.n	8007750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7c12      	ldrb	r2, [r2, #16]
 8007724:	f107 0108 	add.w	r1, r7, #8
 8007728:	4610      	mov	r0, r2
 800772a:	4798      	blx	r3
 800772c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800772e:	e00f      	b.n	8007750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa49 	bl	8007bca <USBD_CtlError>
            err++;
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	3301      	adds	r3, #1
 800773c:	72fb      	strb	r3, [r7, #11]
          break;
 800773e:	e007      	b.n	8007750 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa41 	bl	8007bca <USBD_CtlError>
          err++;
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	3301      	adds	r3, #1
 800774c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800774e:	bf00      	nop
      }
      break;
 8007750:	e037      	b.n	80077c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	7c1b      	ldrb	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d109      	bne.n	800776e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007762:	f107 0208 	add.w	r2, r7, #8
 8007766:	4610      	mov	r0, r2
 8007768:	4798      	blx	r3
 800776a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800776c:	e029      	b.n	80077c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa2a 	bl	8007bca <USBD_CtlError>
        err++;
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	3301      	adds	r3, #1
 800777a:	72fb      	strb	r3, [r7, #11]
      break;
 800777c:	e021      	b.n	80077c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	7c1b      	ldrb	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10d      	bne.n	80077a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800778c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778e:	f107 0208 	add.w	r2, r7, #8
 8007792:	4610      	mov	r0, r2
 8007794:	4798      	blx	r3
 8007796:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3301      	adds	r3, #1
 800779c:	2207      	movs	r2, #7
 800779e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077a0:	e00f      	b.n	80077c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fa10 	bl	8007bca <USBD_CtlError>
        err++;
 80077aa:	7afb      	ldrb	r3, [r7, #11]
 80077ac:	3301      	adds	r3, #1
 80077ae:	72fb      	strb	r3, [r7, #11]
      break;
 80077b0:	e007      	b.n	80077c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa08 	bl	8007bca <USBD_CtlError>
      err++;
 80077ba:	7afb      	ldrb	r3, [r7, #11]
 80077bc:	3301      	adds	r3, #1
 80077be:	72fb      	strb	r3, [r7, #11]
      break;
 80077c0:	bf00      	nop
  }

  if (err != 0U)
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d11e      	bne.n	8007806 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	88db      	ldrh	r3, [r3, #6]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d016      	beq.n	80077fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80077d0:	893b      	ldrh	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00e      	beq.n	80077f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	88da      	ldrh	r2, [r3, #6]
 80077da:	893b      	ldrh	r3, [r7, #8]
 80077dc:	4293      	cmp	r3, r2
 80077de:	bf28      	it	cs
 80077e0:	4613      	movcs	r3, r2
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077e6:	893b      	ldrh	r3, [r7, #8]
 80077e8:	461a      	mov	r2, r3
 80077ea:	68f9      	ldr	r1, [r7, #12]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa5d 	bl	8007cac <USBD_CtlSendData>
 80077f2:	e009      	b.n	8007808 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9e7 	bl	8007bca <USBD_CtlError>
 80077fc:	e004      	b.n	8007808 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 faae 	bl	8007d60 <USBD_CtlSendStatus>
 8007804:	e000      	b.n	8007808 <USBD_GetDescriptor+0x2cc>
    return;
 8007806:	bf00      	nop
  }
}
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop

08007810 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	889b      	ldrh	r3, [r3, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d131      	bne.n	8007886 <USBD_SetAddress+0x76>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	88db      	ldrh	r3, [r3, #6]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d12d      	bne.n	8007886 <USBD_SetAddress+0x76>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	885b      	ldrh	r3, [r3, #2]
 800782e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007830:	d829      	bhi.n	8007886 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	885b      	ldrh	r3, [r3, #2]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800783c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b03      	cmp	r3, #3
 8007848:	d104      	bne.n	8007854 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f9bc 	bl	8007bca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007852:	e01d      	b.n	8007890 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	7bfa      	ldrb	r2, [r7, #15]
 8007858:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fefb 	bl	800865c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa7a 	bl	8007d60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787a:	e009      	b.n	8007890 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007884:	e004      	b.n	8007890 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f99e 	bl	8007bca <USBD_CtlError>
  }
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	4b4e      	ldr	r3, [pc, #312]	@ (80079e8 <USBD_SetConfig+0x150>)
 80078ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078b0:	4b4d      	ldr	r3, [pc, #308]	@ (80079e8 <USBD_SetConfig+0x150>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d905      	bls.n	80078c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f985 	bl	8007bca <USBD_CtlError>
    return USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e08c      	b.n	80079de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d002      	beq.n	80078d6 <USBD_SetConfig+0x3e>
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d029      	beq.n	8007928 <USBD_SetConfig+0x90>
 80078d4:	e075      	b.n	80079c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80078d6:	4b44      	ldr	r3, [pc, #272]	@ (80079e8 <USBD_SetConfig+0x150>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d020      	beq.n	8007920 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80078de:	4b42      	ldr	r3, [pc, #264]	@ (80079e8 <USBD_SetConfig+0x150>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078e8:	4b3f      	ldr	r3, [pc, #252]	@ (80079e8 <USBD_SetConfig+0x150>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fe ffe3 	bl	80068ba <USBD_SetClassConfig>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f962 	bl	8007bca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2202      	movs	r2, #2
 800790a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800790e:	e065      	b.n	80079dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fa25 	bl	8007d60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2203      	movs	r2, #3
 800791a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800791e:	e05d      	b.n	80079dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fa1d 	bl	8007d60 <USBD_CtlSendStatus>
      break;
 8007926:	e059      	b.n	80079dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007928:	4b2f      	ldr	r3, [pc, #188]	@ (80079e8 <USBD_SetConfig+0x150>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d112      	bne.n	8007956 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007938:	4b2b      	ldr	r3, [pc, #172]	@ (80079e8 <USBD_SetConfig+0x150>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007942:	4b29      	ldr	r3, [pc, #164]	@ (80079e8 <USBD_SetConfig+0x150>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fe ffd2 	bl	80068f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fa06 	bl	8007d60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007954:	e042      	b.n	80079dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007956:	4b24      	ldr	r3, [pc, #144]	@ (80079e8 <USBD_SetConfig+0x150>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d02a      	beq.n	80079ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fe ffc0 	bl	80068f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007972:	4b1d      	ldr	r3, [pc, #116]	@ (80079e8 <USBD_SetConfig+0x150>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800797c:	4b1a      	ldr	r3, [pc, #104]	@ (80079e8 <USBD_SetConfig+0x150>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fe ff99 	bl	80068ba <USBD_SetClassConfig>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00f      	beq.n	80079b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f918 	bl	8007bca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fe ffa5 	bl	80068f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079b0:	e014      	b.n	80079dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9d4 	bl	8007d60 <USBD_CtlSendStatus>
      break;
 80079b8:	e010      	b.n	80079dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f9d0 	bl	8007d60 <USBD_CtlSendStatus>
      break;
 80079c0:	e00c      	b.n	80079dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f900 	bl	8007bca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079ca:	4b07      	ldr	r3, [pc, #28]	@ (80079e8 <USBD_SetConfig+0x150>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7fe ff8e 	bl	80068f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079d6:	2303      	movs	r3, #3
 80079d8:	73fb      	strb	r3, [r7, #15]
      break;
 80079da:	bf00      	nop
  }

  return ret;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	2000021c 	.word	0x2000021c

080079ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	88db      	ldrh	r3, [r3, #6]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d004      	beq.n	8007a08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f8e2 	bl	8007bca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a06:	e023      	b.n	8007a50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	dc02      	bgt.n	8007a1a <USBD_GetConfig+0x2e>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dc03      	bgt.n	8007a20 <USBD_GetConfig+0x34>
 8007a18:	e015      	b.n	8007a46 <USBD_GetConfig+0x5a>
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d00b      	beq.n	8007a36 <USBD_GetConfig+0x4a>
 8007a1e:	e012      	b.n	8007a46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f93c 	bl	8007cac <USBD_CtlSendData>
        break;
 8007a34:	e00c      	b.n	8007a50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f934 	bl	8007cac <USBD_CtlSendData>
        break;
 8007a44:	e004      	b.n	8007a50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f8be 	bl	8007bca <USBD_CtlError>
        break;
 8007a4e:	bf00      	nop
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d81e      	bhi.n	8007aae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	88db      	ldrh	r3, [r3, #6]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d004      	beq.n	8007a82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8a5 	bl	8007bca <USBD_CtlError>
        break;
 8007a80:	e01a      	b.n	8007ab8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f043 0202 	orr.w	r2, r3, #2
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f900 	bl	8007cac <USBD_CtlSendData>
      break;
 8007aac:	e004      	b.n	8007ab8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f88a 	bl	8007bca <USBD_CtlError>
      break;
 8007ab6:	bf00      	nop
  }
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	885b      	ldrh	r3, [r3, #2]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d107      	bne.n	8007ae2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f940 	bl	8007d60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ae0:	e013      	b.n	8007b0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d10b      	bne.n	8007b02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	889b      	ldrh	r3, [r3, #4]
 8007aee:	0a1b      	lsrs	r3, r3, #8
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f930 	bl	8007d60 <USBD_CtlSendStatus>
}
 8007b00:	e003      	b.n	8007b0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f860 	bl	8007bca <USBD_CtlError>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d80b      	bhi.n	8007b42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d10c      	bne.n	8007b4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f910 	bl	8007d60 <USBD_CtlSendStatus>
      }
      break;
 8007b40:	e004      	b.n	8007b4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f840 	bl	8007bca <USBD_CtlError>
      break;
 8007b4a:	e000      	b.n	8007b4e <USBD_ClrFeature+0x3c>
      break;
 8007b4c:	bf00      	nop
  }
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	781a      	ldrb	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fa40 	bl	8007006 <SWAPBYTE>
 8007b86:	4603      	mov	r3, r0
 8007b88:	461a      	mov	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3301      	adds	r3, #1
 8007b92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff fa33 	bl	8007006 <SWAPBYTE>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3301      	adds	r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7ff fa26 	bl	8007006 <SWAPBYTE>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	80da      	strh	r2, [r3, #6]
}
 8007bc2:	bf00      	nop
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bd4:	2180      	movs	r1, #128	@ 0x80
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fcd6 	bl	8008588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007bdc:	2100      	movs	r1, #0
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fcd2 	bl	8008588 <USBD_LL_StallEP>
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d036      	beq.n	8007c70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c06:	6938      	ldr	r0, [r7, #16]
 8007c08:	f000 f836 	bl	8007c78 <USBD_GetLen>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	3301      	adds	r3, #1
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	4413      	add	r3, r2
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	2203      	movs	r2, #3
 8007c34:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c3c:	e013      	b.n	8007c66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	4413      	add	r3, r2
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	613b      	str	r3, [r7, #16]
    idx++;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	3301      	adds	r3, #1
 8007c54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	3301      	adds	r3, #1
 8007c64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e7      	bne.n	8007c3e <USBD_GetString+0x52>
 8007c6e:	e000      	b.n	8007c72 <USBD_GetString+0x86>
    return;
 8007c70:	bf00      	nop
  }
}
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c88:	e005      	b.n	8007c96 <USBD_GetLen+0x1e>
  {
    len++;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1f5      	bne.n	8007c8a <USBD_GetLen+0x12>
  }

  return len;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fce1 	bl	800869a <USBD_LL_Transmit>

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fcd0 	bl	800869a <USBD_LL_Transmit>

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2203      	movs	r2, #3
 8007d14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fcd4 	bl	80086dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	2100      	movs	r1, #0
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fcc3 	bl	80086dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d70:	2300      	movs	r3, #0
 8007d72:	2200      	movs	r2, #0
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fc8f 	bl	800869a <USBD_LL_Transmit>

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2205      	movs	r2, #5
 8007d92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d96:	2300      	movs	r3, #0
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fc9d 	bl	80086dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007db0:	2200      	movs	r2, #0
 8007db2:	4912      	ldr	r1, [pc, #72]	@ (8007dfc <MX_USB_DEVICE_Init+0x50>)
 8007db4:	4812      	ldr	r0, [pc, #72]	@ (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007db6:	f7fe fd03 	bl	80067c0 <USBD_Init>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dc0:	f7f8 fd80 	bl	80008c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007dc4:	490f      	ldr	r1, [pc, #60]	@ (8007e04 <MX_USB_DEVICE_Init+0x58>)
 8007dc6:	480e      	ldr	r0, [pc, #56]	@ (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dc8:	f7fe fd2a 	bl	8006820 <USBD_RegisterClass>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dd2:	f7f8 fd77 	bl	80008c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dd6:	490c      	ldr	r1, [pc, #48]	@ (8007e08 <MX_USB_DEVICE_Init+0x5c>)
 8007dd8:	4809      	ldr	r0, [pc, #36]	@ (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dda:	f7fe fc21 	bl	8006620 <USBD_CDC_RegisterInterface>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007de4:	f7f8 fd6e 	bl	80008c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007de8:	4805      	ldr	r0, [pc, #20]	@ (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dea:	f7fe fd4f 	bl	800688c <USBD_Start>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007df4:	f7f8 fd66 	bl	80008c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007df8:	bf00      	nop
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	200000b8 	.word	0x200000b8
 8007e00:	20000220 	.word	0x20000220
 8007e04:	20000024 	.word	0x20000024
 8007e08:	200000a4 	.word	0x200000a4

08007e0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e10:	2200      	movs	r2, #0
 8007e12:	4905      	ldr	r1, [pc, #20]	@ (8007e28 <CDC_Init_FS+0x1c>)
 8007e14:	4805      	ldr	r0, [pc, #20]	@ (8007e2c <CDC_Init_FS+0x20>)
 8007e16:	f7fe fc1d 	bl	8006654 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e1a:	4905      	ldr	r1, [pc, #20]	@ (8007e30 <CDC_Init_FS+0x24>)
 8007e1c:	4803      	ldr	r0, [pc, #12]	@ (8007e2c <CDC_Init_FS+0x20>)
 8007e1e:	f7fe fc3b 	bl	8006698 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000cfc 	.word	0x20000cfc
 8007e2c:	20000220 	.word	0x20000220
 8007e30:	200004fc 	.word	0x200004fc

08007e34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	2b23      	cmp	r3, #35	@ 0x23
 8007e58:	d84a      	bhi.n	8007ef0 <CDC_Control_FS+0xac>
 8007e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <CDC_Control_FS+0x1c>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007ef1 	.word	0x08007ef1
 8007e64:	08007ef1 	.word	0x08007ef1
 8007e68:	08007ef1 	.word	0x08007ef1
 8007e6c:	08007ef1 	.word	0x08007ef1
 8007e70:	08007ef1 	.word	0x08007ef1
 8007e74:	08007ef1 	.word	0x08007ef1
 8007e78:	08007ef1 	.word	0x08007ef1
 8007e7c:	08007ef1 	.word	0x08007ef1
 8007e80:	08007ef1 	.word	0x08007ef1
 8007e84:	08007ef1 	.word	0x08007ef1
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007ef1 	.word	0x08007ef1
 8007e90:	08007ef1 	.word	0x08007ef1
 8007e94:	08007ef1 	.word	0x08007ef1
 8007e98:	08007ef1 	.word	0x08007ef1
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007ef1 	.word	0x08007ef1
 8007ea4:	08007ef1 	.word	0x08007ef1
 8007ea8:	08007ef1 	.word	0x08007ef1
 8007eac:	08007ef1 	.word	0x08007ef1
 8007eb0:	08007ef1 	.word	0x08007ef1
 8007eb4:	08007ef1 	.word	0x08007ef1
 8007eb8:	08007ef1 	.word	0x08007ef1
 8007ebc:	08007ef1 	.word	0x08007ef1
 8007ec0:	08007ef1 	.word	0x08007ef1
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ef1 	.word	0x08007ef1
 8007ed0:	08007ef1 	.word	0x08007ef1
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007ef1 	.word	0x08007ef1
 8007edc:	08007ef1 	.word	0x08007ef1
 8007ee0:	08007ef1 	.word	0x08007ef1
 8007ee4:	08007ef1 	.word	0x08007ef1
 8007ee8:	08007ef1 	.word	0x08007ef1
 8007eec:	08007ef1 	.word	0x08007ef1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ef0:	bf00      	nop
  }

  return (USBD_OK);
 8007ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4805      	ldr	r0, [pc, #20]	@ (8007f24 <CDC_Receive_FS+0x24>)
 8007f0e:	f7fe fbc3 	bl	8006698 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f12:	4804      	ldr	r0, [pc, #16]	@ (8007f24 <CDC_Receive_FS+0x24>)
 8007f14:	f7fe fc1e 	bl	8006754 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000220 	.word	0x20000220

08007f28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f38:	4b0d      	ldr	r3, [pc, #52]	@ (8007f70 <CDC_Transmit_FS+0x48>)
 8007f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e00b      	b.n	8007f66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f4e:	887b      	ldrh	r3, [r7, #2]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4806      	ldr	r0, [pc, #24]	@ (8007f70 <CDC_Transmit_FS+0x48>)
 8007f56:	f7fe fb7d 	bl	8006654 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f5a:	4805      	ldr	r0, [pc, #20]	@ (8007f70 <CDC_Transmit_FS+0x48>)
 8007f5c:	f7fe fbba 	bl	80066d4 <USBD_CDC_TransmitPacket>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000220 	.word	0x20000220

08007f74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
	...

08007f98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	6039      	str	r1, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2212      	movs	r2, #18
 8007fa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	@ (8007fb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	200000d4 	.word	0x200000d4

08007fbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	6039      	str	r1, [r7, #0]
 8007fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2204      	movs	r2, #4
 8007fcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fce:	4b03      	ldr	r3, [pc, #12]	@ (8007fdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	200000e8 	.word	0x200000e8

08007fe0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	6039      	str	r1, [r7, #0]
 8007fea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d105      	bne.n	8007ffe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	4907      	ldr	r1, [pc, #28]	@ (8008014 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ff6:	4808      	ldr	r0, [pc, #32]	@ (8008018 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ff8:	f7ff fdf8 	bl	8007bec <USBD_GetString>
 8007ffc:	e004      	b.n	8008008 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	4904      	ldr	r1, [pc, #16]	@ (8008014 <USBD_FS_ProductStrDescriptor+0x34>)
 8008002:	4805      	ldr	r0, [pc, #20]	@ (8008018 <USBD_FS_ProductStrDescriptor+0x38>)
 8008004:	f7ff fdf2 	bl	8007bec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008008:	4b02      	ldr	r3, [pc, #8]	@ (8008014 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200014fc 	.word	0x200014fc
 8008018:	0800883c 	.word	0x0800883c

0800801c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	4904      	ldr	r1, [pc, #16]	@ (800803c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800802c:	4804      	ldr	r0, [pc, #16]	@ (8008040 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800802e:	f7ff fddd 	bl	8007bec <USBD_GetString>
  return USBD_StrDesc;
 8008032:	4b02      	ldr	r3, [pc, #8]	@ (800803c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	200014fc 	.word	0x200014fc
 8008040:	08008854 	.word	0x08008854

08008044 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	221a      	movs	r2, #26
 8008054:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008056:	f000 f843 	bl	80080e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800805a:	4b02      	ldr	r3, [pc, #8]	@ (8008064 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	200000ec 	.word	0x200000ec

08008068 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d105      	bne.n	8008086 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	4907      	ldr	r1, [pc, #28]	@ (800809c <USBD_FS_ConfigStrDescriptor+0x34>)
 800807e:	4808      	ldr	r0, [pc, #32]	@ (80080a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008080:	f7ff fdb4 	bl	8007bec <USBD_GetString>
 8008084:	e004      	b.n	8008090 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	4904      	ldr	r1, [pc, #16]	@ (800809c <USBD_FS_ConfigStrDescriptor+0x34>)
 800808a:	4805      	ldr	r0, [pc, #20]	@ (80080a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800808c:	f7ff fdae 	bl	8007bec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008090:	4b02      	ldr	r3, [pc, #8]	@ (800809c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200014fc 	.word	0x200014fc
 80080a0:	08008868 	.word	0x08008868

080080a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d105      	bne.n	80080c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	4907      	ldr	r1, [pc, #28]	@ (80080d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080ba:	4808      	ldr	r0, [pc, #32]	@ (80080dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080bc:	f7ff fd96 	bl	8007bec <USBD_GetString>
 80080c0:	e004      	b.n	80080cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	4904      	ldr	r1, [pc, #16]	@ (80080d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080c6:	4805      	ldr	r0, [pc, #20]	@ (80080dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080c8:	f7ff fd90 	bl	8007bec <USBD_GetString>
  }
  return USBD_StrDesc;
 80080cc:	4b02      	ldr	r3, [pc, #8]	@ (80080d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	200014fc 	.word	0x200014fc
 80080dc:	08008874 	.word	0x08008874

080080e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008124 <Get_SerialNum+0x44>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008128 <Get_SerialNum+0x48>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080f2:	4b0e      	ldr	r3, [pc, #56]	@ (800812c <Get_SerialNum+0x4c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008106:	2208      	movs	r2, #8
 8008108:	4909      	ldr	r1, [pc, #36]	@ (8008130 <Get_SerialNum+0x50>)
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 f814 	bl	8008138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008110:	2204      	movs	r2, #4
 8008112:	4908      	ldr	r1, [pc, #32]	@ (8008134 <Get_SerialNum+0x54>)
 8008114:	68b8      	ldr	r0, [r7, #8]
 8008116:	f000 f80f 	bl	8008138 <IntToUnicode>
  }
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	1fff7a10 	.word	0x1fff7a10
 8008128:	1fff7a14 	.word	0x1fff7a14
 800812c:	1fff7a18 	.word	0x1fff7a18
 8008130:	200000ee 	.word	0x200000ee
 8008134:	200000fe 	.word	0x200000fe

08008138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800814a:	2300      	movs	r3, #0
 800814c:	75fb      	strb	r3, [r7, #23]
 800814e:	e027      	b.n	80081a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	0f1b      	lsrs	r3, r3, #28
 8008154:	2b09      	cmp	r3, #9
 8008156:	d80b      	bhi.n	8008170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	0f1b      	lsrs	r3, r3, #28
 800815c:	b2da      	uxtb	r2, r3
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	4619      	mov	r1, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	440b      	add	r3, r1
 8008168:	3230      	adds	r2, #48	@ 0x30
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e00a      	b.n	8008186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	0f1b      	lsrs	r3, r3, #28
 8008174:	b2da      	uxtb	r2, r3
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	4619      	mov	r1, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	440b      	add	r3, r1
 8008180:	3237      	adds	r2, #55	@ 0x37
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	3301      	adds	r3, #1
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4413      	add	r3, r2
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	3301      	adds	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]
 80081a0:	7dfa      	ldrb	r2, [r7, #23]
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d3d3      	bcc.n	8008150 <IntToUnicode+0x18>
  }
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
	...

080081b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	@ 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c0:	f107 0314 	add.w	r3, r7, #20
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	605a      	str	r2, [r3, #4]
 80081ca:	609a      	str	r2, [r3, #8]
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081d8:	d13a      	bne.n	8008250 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081da:	2300      	movs	r3, #0
 80081dc:	613b      	str	r3, [r7, #16]
 80081de:	4b1e      	ldr	r3, [pc, #120]	@ (8008258 <HAL_PCD_MspInit+0xa0>)
 80081e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008258 <HAL_PCD_MspInit+0xa0>)
 80081e4:	f043 0301 	orr.w	r3, r3, #1
 80081e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80081ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008258 <HAL_PCD_MspInit+0xa0>)
 80081ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80081f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80081fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081fc:	2302      	movs	r3, #2
 80081fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008204:	2303      	movs	r3, #3
 8008206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008208:	230a      	movs	r3, #10
 800820a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	4619      	mov	r1, r3
 8008212:	4812      	ldr	r0, [pc, #72]	@ (800825c <HAL_PCD_MspInit+0xa4>)
 8008214:	f7f9 fecc 	bl	8001fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008218:	4b0f      	ldr	r3, [pc, #60]	@ (8008258 <HAL_PCD_MspInit+0xa0>)
 800821a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800821c:	4a0e      	ldr	r2, [pc, #56]	@ (8008258 <HAL_PCD_MspInit+0xa0>)
 800821e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008222:	6353      	str	r3, [r2, #52]	@ 0x34
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	4b0b      	ldr	r3, [pc, #44]	@ (8008258 <HAL_PCD_MspInit+0xa0>)
 800822a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800822c:	4a0a      	ldr	r2, [pc, #40]	@ (8008258 <HAL_PCD_MspInit+0xa0>)
 800822e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008232:	6453      	str	r3, [r2, #68]	@ 0x44
 8008234:	4b08      	ldr	r3, [pc, #32]	@ (8008258 <HAL_PCD_MspInit+0xa0>)
 8008236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008240:	2200      	movs	r2, #0
 8008242:	2100      	movs	r1, #0
 8008244:	2043      	movs	r0, #67	@ 0x43
 8008246:	f7f9 fb0c 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800824a:	2043      	movs	r0, #67	@ 0x43
 800824c:	f7f9 fb25 	bl	800189a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008250:	bf00      	nop
 8008252:	3728      	adds	r7, #40	@ 0x28
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	40023800 	.word	0x40023800
 800825c:	40020000 	.word	0x40020000

08008260 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe fb55 	bl	8006926 <USBD_LL_SetupStage>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	4619      	mov	r1, r3
 80082ae:	f7fe fb8f 	bl	80069d0 <USBD_LL_DataOutStage>
}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	4613      	mov	r3, r2
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	440b      	add	r3, r1
 80082da:	3320      	adds	r3, #32
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	4619      	mov	r1, r3
 80082e2:	f7fe fc28 	bl	8006b36 <USBD_LL_DataInStage>
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fd62 	bl	8006dc6 <USBD_LL_SOF>
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008312:	2301      	movs	r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	79db      	ldrb	r3, [r3, #7]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d001      	beq.n	8008322 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800831e:	f7f8 fad1 	bl	80008c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008328:	7bfa      	ldrb	r2, [r7, #15]
 800832a:	4611      	mov	r1, r2
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fd06 	bl	8006d3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe fcae 	bl	8006c9a <USBD_LL_Reset>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe fd01 	bl	8006d5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6812      	ldr	r2, [r2, #0]
 800836a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800836e:	f043 0301 	orr.w	r3, r3, #1
 8008372:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7adb      	ldrb	r3, [r3, #11]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800837c:	4b04      	ldr	r3, [pc, #16]	@ (8008390 <HAL_PCD_SuspendCallback+0x48>)
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	4a03      	ldr	r2, [pc, #12]	@ (8008390 <HAL_PCD_SuspendCallback+0x48>)
 8008382:	f043 0306 	orr.w	r3, r3, #6
 8008386:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	e000ed00 	.word	0xe000ed00

08008394 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe fcf7 	bl	8006d96 <USBD_LL_Resume>
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083c2:	78fa      	ldrb	r2, [r7, #3]
 80083c4:	4611      	mov	r1, r2
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe fd4f 	bl	8006e6a <USBD_LL_IsoOUTIncomplete>
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fd0b 	bl	8006e06 <USBD_LL_IsoINIncomplete>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fd61 	bl	8006ece <USBD_LL_DevConnected>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fd5e 	bl	8006ee4 <USBD_LL_DevDisconnected>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d13c      	bne.n	80084ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008440:	4a20      	ldr	r2, [pc, #128]	@ (80084c4 <USBD_LL_Init+0x94>)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a1e      	ldr	r2, [pc, #120]	@ (80084c4 <USBD_LL_Init+0x94>)
 800844c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008450:	4b1c      	ldr	r3, [pc, #112]	@ (80084c4 <USBD_LL_Init+0x94>)
 8008452:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008456:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008458:	4b1a      	ldr	r3, [pc, #104]	@ (80084c4 <USBD_LL_Init+0x94>)
 800845a:	2204      	movs	r2, #4
 800845c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800845e:	4b19      	ldr	r3, [pc, #100]	@ (80084c4 <USBD_LL_Init+0x94>)
 8008460:	2202      	movs	r2, #2
 8008462:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008464:	4b17      	ldr	r3, [pc, #92]	@ (80084c4 <USBD_LL_Init+0x94>)
 8008466:	2200      	movs	r2, #0
 8008468:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800846a:	4b16      	ldr	r3, [pc, #88]	@ (80084c4 <USBD_LL_Init+0x94>)
 800846c:	2202      	movs	r2, #2
 800846e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008470:	4b14      	ldr	r3, [pc, #80]	@ (80084c4 <USBD_LL_Init+0x94>)
 8008472:	2200      	movs	r2, #0
 8008474:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008476:	4b13      	ldr	r3, [pc, #76]	@ (80084c4 <USBD_LL_Init+0x94>)
 8008478:	2200      	movs	r2, #0
 800847a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800847c:	4b11      	ldr	r3, [pc, #68]	@ (80084c4 <USBD_LL_Init+0x94>)
 800847e:	2200      	movs	r2, #0
 8008480:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008482:	4b10      	ldr	r3, [pc, #64]	@ (80084c4 <USBD_LL_Init+0x94>)
 8008484:	2200      	movs	r2, #0
 8008486:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008488:	4b0e      	ldr	r3, [pc, #56]	@ (80084c4 <USBD_LL_Init+0x94>)
 800848a:	2200      	movs	r2, #0
 800848c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800848e:	480d      	ldr	r0, [pc, #52]	@ (80084c4 <USBD_LL_Init+0x94>)
 8008490:	f7f9 ff2a 	bl	80022e8 <HAL_PCD_Init>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800849a:	f7f8 fa13 	bl	80008c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800849e:	2180      	movs	r1, #128	@ 0x80
 80084a0:	4808      	ldr	r0, [pc, #32]	@ (80084c4 <USBD_LL_Init+0x94>)
 80084a2:	f7fb f954 	bl	800374e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80084a6:	2240      	movs	r2, #64	@ 0x40
 80084a8:	2100      	movs	r1, #0
 80084aa:	4806      	ldr	r0, [pc, #24]	@ (80084c4 <USBD_LL_Init+0x94>)
 80084ac:	f7fb f908 	bl	80036c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80084b0:	2280      	movs	r2, #128	@ 0x80
 80084b2:	2101      	movs	r1, #1
 80084b4:	4803      	ldr	r0, [pc, #12]	@ (80084c4 <USBD_LL_Init+0x94>)
 80084b6:	f7fb f903 	bl	80036c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	200016fc 	.word	0x200016fc

080084c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fa f811 	bl	8002506 <HAL_PCD_Start>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f942 	bl	8008774 <USBD_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	4608      	mov	r0, r1
 8008508:	4611      	mov	r1, r2
 800850a:	461a      	mov	r2, r3
 800850c:	4603      	mov	r3, r0
 800850e:	70fb      	strb	r3, [r7, #3]
 8008510:	460b      	mov	r3, r1
 8008512:	70bb      	strb	r3, [r7, #2]
 8008514:	4613      	mov	r3, r2
 8008516:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008526:	78bb      	ldrb	r3, [r7, #2]
 8008528:	883a      	ldrh	r2, [r7, #0]
 800852a:	78f9      	ldrb	r1, [r7, #3]
 800852c:	f7fa fce5 	bl	8002efa <HAL_PCD_EP_Open>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f91c 	bl	8008774 <USBD_Get_USB_Status>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008540:	7bbb      	ldrb	r3, [r7, #14]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7fa fd2e 	bl	8002fca <HAL_PCD_EP_Close>
 800856e:	4603      	mov	r3, r0
 8008570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 f8fd 	bl	8008774 <USBD_Get_USB_Status>
 800857a:	4603      	mov	r3, r0
 800857c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800857e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fa fde6 	bl	8003178 <HAL_PCD_EP_SetStall>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f8de 	bl	8008774 <USBD_Get_USB_Status>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085e0:	78fa      	ldrb	r2, [r7, #3]
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fa fe2a 	bl	800323e <HAL_PCD_EP_ClrStall>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f8bf 	bl	8008774 <USBD_Get_USB_Status>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008616:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800861c:	2b00      	cmp	r3, #0
 800861e:	da0b      	bge.n	8008638 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008626:	68f9      	ldr	r1, [r7, #12]
 8008628:	4613      	mov	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	440b      	add	r3, r1
 8008632:	3316      	adds	r3, #22
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	e00b      	b.n	8008650 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	4613      	mov	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	440b      	add	r3, r1
 800864a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800864e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008676:	78fa      	ldrb	r2, [r7, #3]
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f7fa fc19 	bl	8002eb2 <HAL_PCD_SetAddress>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f874 	bl	8008774 <USBD_Get_USB_Status>
 800868c:	4603      	mov	r3, r0
 800868e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008690:	7bbb      	ldrb	r3, [r7, #14]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b086      	sub	sp, #24
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	460b      	mov	r3, r1
 80086a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086b8:	7af9      	ldrb	r1, [r7, #11]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	f7fa fd21 	bl	8003104 <HAL_PCD_EP_Transmit>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 f853 	bl	8008774 <USBD_Get_USB_Status>
 80086ce:	4603      	mov	r3, r0
 80086d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	460b      	mov	r3, r1
 80086ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086fa:	7af9      	ldrb	r1, [r7, #11]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	f7fa fcad 	bl	800305e <HAL_PCD_EP_Receive>
 8008704:	4603      	mov	r3, r0
 8008706:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f832 	bl	8008774 <USBD_Get_USB_Status>
 8008710:	4603      	mov	r3, r0
 8008712:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008714:	7dbb      	ldrb	r3, [r7, #22]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008730:	78fa      	ldrb	r2, [r7, #3]
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f7fa fccd 	bl	80030d4 <HAL_PCD_EP_GetRxCount>
 800873a:	4603      	mov	r3, r0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800874c:	4b03      	ldr	r3, [pc, #12]	@ (800875c <USBD_static_malloc+0x18>)
}
 800874e:	4618      	mov	r0, r3
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	20001be0 	.word	0x20001be0

08008760 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	2b03      	cmp	r3, #3
 8008786:	d817      	bhi.n	80087b8 <USBD_Get_USB_Status+0x44>
 8008788:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <USBD_Get_USB_Status+0x1c>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a7 	.word	0x080087a7
 8008798:	080087ad 	.word	0x080087ad
 800879c:	080087b3 	.word	0x080087b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
    break;
 80087a4:	e00b      	b.n	80087be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087a6:	2303      	movs	r3, #3
 80087a8:	73fb      	strb	r3, [r7, #15]
    break;
 80087aa:	e008      	b.n	80087be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
    break;
 80087b0:	e005      	b.n	80087be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087b2:	2303      	movs	r3, #3
 80087b4:	73fb      	strb	r3, [r7, #15]
    break;
 80087b6:	e002      	b.n	80087be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087b8:	2303      	movs	r3, #3
 80087ba:	73fb      	strb	r3, [r7, #15]
    break;
 80087bc:	bf00      	nop
  }
  return usb_status;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <memset>:
 80087cc:	4402      	add	r2, r0
 80087ce:	4603      	mov	r3, r0
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d100      	bne.n	80087d6 <memset+0xa>
 80087d4:	4770      	bx	lr
 80087d6:	f803 1b01 	strb.w	r1, [r3], #1
 80087da:	e7f9      	b.n	80087d0 <memset+0x4>

080087dc <__libc_init_array>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4d0d      	ldr	r5, [pc, #52]	@ (8008814 <__libc_init_array+0x38>)
 80087e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008818 <__libc_init_array+0x3c>)
 80087e2:	1b64      	subs	r4, r4, r5
 80087e4:	10a4      	asrs	r4, r4, #2
 80087e6:	2600      	movs	r6, #0
 80087e8:	42a6      	cmp	r6, r4
 80087ea:	d109      	bne.n	8008800 <__libc_init_array+0x24>
 80087ec:	4d0b      	ldr	r5, [pc, #44]	@ (800881c <__libc_init_array+0x40>)
 80087ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008820 <__libc_init_array+0x44>)
 80087f0:	f000 f818 	bl	8008824 <_init>
 80087f4:	1b64      	subs	r4, r4, r5
 80087f6:	10a4      	asrs	r4, r4, #2
 80087f8:	2600      	movs	r6, #0
 80087fa:	42a6      	cmp	r6, r4
 80087fc:	d105      	bne.n	800880a <__libc_init_array+0x2e>
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f855 3b04 	ldr.w	r3, [r5], #4
 8008804:	4798      	blx	r3
 8008806:	3601      	adds	r6, #1
 8008808:	e7ee      	b.n	80087e8 <__libc_init_array+0xc>
 800880a:	f855 3b04 	ldr.w	r3, [r5], #4
 800880e:	4798      	blx	r3
 8008810:	3601      	adds	r6, #1
 8008812:	e7f2      	b.n	80087fa <__libc_init_array+0x1e>
 8008814:	080088a4 	.word	0x080088a4
 8008818:	080088a4 	.word	0x080088a4
 800881c:	080088a4 	.word	0x080088a4
 8008820:	080088a8 	.word	0x080088a8

08008824 <_init>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr

08008830 <_fini>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	bf00      	nop
 8008834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008836:	bc08      	pop	{r3}
 8008838:	469e      	mov	lr, r3
 800883a:	4770      	bx	lr
