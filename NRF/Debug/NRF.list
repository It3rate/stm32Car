
NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003368  08003368  00004368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033cc  080033cc  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  080033cc  080033cc  000043cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033d4  080033d4  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080033d4  080033d4  000043d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080033dc  080033dc  000043dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080033e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000060  08003444  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08003444  000052e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e27  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9a  00000000  00000000  0000deb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0000fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000641  00000000  00000000  000105d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184b5  00000000  00000000  00010c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d32  00000000  00000000  000290ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a8f  00000000  00000000  00032e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b988f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d4  00000000  00000000  000b98d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000bbca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003350 	.word	0x08003350

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08003350 	.word	0x08003350

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_Z12EventLoopCppv>:
	}
}

//#define IS_TX

void EventLoopCpp() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0
	tmDevice.test();
 80004ce:	4836      	ldr	r0, [pc, #216]	@ (80005a8 <_Z12EventLoopCppv+0xe0>)
 80004d0:	f000 fd6a 	bl	8000fa8 <_ZN6Tm16384testEv>
	nrfDevice.Init();
 80004d4:	4835      	ldr	r0, [pc, #212]	@ (80005ac <_Z12EventLoopCppv+0xe4>)
 80004d6:	f000 fa1f 	bl	8000918 <_ZN6NRF24L4InitEv>
	nrfDevice.Check();
 80004da:	4834      	ldr	r0, [pc, #208]	@ (80005ac <_Z12EventLoopCppv+0xe4>)
 80004dc:	f000 fa80 	bl	80009e0 <_ZN6NRF24L5CheckEv>
	uint8_t payload_length = 5;
 80004e0:	2305      	movs	r3, #5
 80004e2:	f887 3020 	strb.w	r3, [r7, #32]
#ifdef IS_TX
	uint32_t count = 0;
	NRF24L::TXResult tx_res;
	nrfDevice.InitTX();
#else
	nrfDevice.InitRX(nRF24_payload, payload_length);
 80004e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004ea:	463b      	mov	r3, r7
 80004ec:	4619      	mov	r1, r3
 80004ee:	482f      	ldr	r0, [pc, #188]	@ (80005ac <_Z12EventLoopCppv+0xe4>)
 80004f0:	f000 fce0 	bl	8000eb4 <_ZN6NRF24L6InitRXEPhh>
#endif

	while (1) {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
 80004f4:	4b2e      	ldr	r3, [pc, #184]	@ (80005b0 <_Z12EventLoopCppv+0xe8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	461a      	mov	r2, r3
 80004fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fe:	482d      	ldr	r0, [pc, #180]	@ (80005b4 <_Z12EventLoopCppv+0xec>)
 8000500:	f001 fc82 	bl	8001e08 <HAL_GPIO_WritePin>

		uint8_t btns = tmDevice.readButtons();
 8000504:	4828      	ldr	r0, [pc, #160]	@ (80005a8 <_Z12EventLoopCppv+0xe0>)
 8000506:	f000 fe4f 	bl	80011a8 <_ZN6Tm163811readButtonsEv>
 800050a:	4603      	mov	r3, r0
 800050c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		for (int i = 0; i < 8; i++) {
 8000510:	2300      	movs	r3, #0
 8000512:	627b      	str	r3, [r7, #36]	@ 0x24
 8000514:	e017      	b.n	8000546 <_Z12EventLoopCppv+0x7e>
			bool val = (btns & (1 << i)) > 0 ? true : false;
 8000516:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800051a:	2101      	movs	r1, #1
 800051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	4013      	ands	r3, r2
 8000524:	2b00      	cmp	r3, #0
 8000526:	bfcc      	ite	gt
 8000528:	2301      	movgt	r3, #1
 800052a:	2300      	movle	r3, #0
 800052c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			tmDevice.writeLed(i, val);
 8000530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000532:	b2db      	uxtb	r3, r3
 8000534:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8000538:	4619      	mov	r1, r3
 800053a:	481b      	ldr	r0, [pc, #108]	@ (80005a8 <_Z12EventLoopCppv+0xe0>)
 800053c:	f000 fdf4 	bl	8001128 <_ZN6Tm16388writeLedEhb>
		for (int i = 0; i < 8; i++) {
 8000540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000542:	3301      	adds	r3, #1
 8000544:	627b      	str	r3, [r7, #36]	@ 0x24
 8000546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000548:	2b07      	cmp	r3, #7
 800054a:	dde4      	ble.n	8000516 <_Z12EventLoopCppv+0x4e>
		default:
			break;
	}
	count++;
#else // RX
		uint8_t status = nrfDevice.GetStatus_RXFIFO();
 800054c:	4817      	ldr	r0, [pc, #92]	@ (80005ac <_Z12EventLoopCppv+0xe4>)
 800054e:	f000 fbfa 	bl	8000d46 <_ZN6NRF24L16GetStatus_RXFIFOEv>
 8000552:	4603      	mov	r3, r0
 8000554:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		if (status != NRF24L::FifoStatus::EMPTY) {
 8000558:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800055c:	2b01      	cmp	r3, #1
 800055e:	d0c9      	beq.n	80004f4 <_Z12EventLoopCppv+0x2c>
			nrfDevice.ReadPayload(nRF24_payload, &payload_length);
 8000560:	f107 0220 	add.w	r2, r7, #32
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	4810      	ldr	r0, [pc, #64]	@ (80005ac <_Z12EventLoopCppv+0xe4>)
 800056a:	f000 fc91 	bl	8000e90 <_ZN6NRF24L11ReadPayloadEPhS0_>
			nrfDevice.ClearIRQFlags();
 800056e:	480f      	ldr	r0, [pc, #60]	@ (80005ac <_Z12EventLoopCppv+0xe4>)
 8000570:	f000 fc13 	bl	8000d9a <_ZN6NRF24L13ClearIRQFlagsEv>

			tmDevice.writeHexTo(6, 2, nRF24_payload[0]);
 8000574:	783b      	ldrb	r3, [r7, #0]
 8000576:	2202      	movs	r2, #2
 8000578:	2106      	movs	r1, #6
 800057a:	480b      	ldr	r0, [pc, #44]	@ (80005a8 <_Z12EventLoopCppv+0xe0>)
 800057c:	f000 fdef 	bl	800115e <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(4, 2, nRF24_payload[1]);
 8000580:	787b      	ldrb	r3, [r7, #1]
 8000582:	2202      	movs	r2, #2
 8000584:	2104      	movs	r1, #4
 8000586:	4808      	ldr	r0, [pc, #32]	@ (80005a8 <_Z12EventLoopCppv+0xe0>)
 8000588:	f000 fde9 	bl	800115e <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(2, 2, nRF24_payload[2]);
 800058c:	78bb      	ldrb	r3, [r7, #2]
 800058e:	2202      	movs	r2, #2
 8000590:	2102      	movs	r1, #2
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <_Z12EventLoopCppv+0xe0>)
 8000594:	f000 fde3 	bl	800115e <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(0, 2, nRF24_payload[3]);
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	2202      	movs	r2, #2
 800059c:	2100      	movs	r1, #0
 800059e:	4802      	ldr	r0, [pc, #8]	@ (80005a8 <_Z12EventLoopCppv+0xe0>)
 80005a0:	f000 fddd 	bl	800115e <_ZN6Tm163810writeHexToEhhm>
		}
#endif
	}
 80005a4:	e7a6      	b.n	80004f4 <_Z12EventLoopCppv+0x2c>
 80005a6:	bf00      	nop
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	200000b8 	.word	0x200000b8
 80005b0:	20000000 	.word	0x20000000
 80005b4:	40020800 	.word	0x40020800

080005b8 <EventLoopC>:
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	EventLoopCpp();
 80005bc:	f7ff ff84 	bl	80004c8 <_Z12EventLoopCppv>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d11a      	bne.n	800060a <_Z41__static_initialization_and_destruction_0ii+0x46>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005da:	4293      	cmp	r3, r2
 80005dc:	d115      	bne.n	800060a <_Z41__static_initialization_and_destruction_0ii+0x46>
Tm1638 tmDevice = Tm1638(&hspi1, TM_STB_GPIO_Port, TM_STB_Pin,
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2340      	movs	r3, #64	@ 0x40
 80005e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000628 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80005ea:	4910      	ldr	r1, [pc, #64]	@ (800062c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80005ec:	4810      	ldr	r0, [pc, #64]	@ (8000630 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80005ee:	f000 fc99 	bl	8000f24 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
NRF24L nrfDevice = NRF24L(&hspi2, NRF_CE_GPIO_Port, NRF_CE_Pin, NRF_CSN_GPIO_Port, NRF_CSN_Pin);
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000602:	490d      	ldr	r1, [pc, #52]	@ (8000638 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000606:	f000 f82b 	bl	8000660 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000616:	4293      	cmp	r3, r2
 8000618:	d102      	bne.n	8000620 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 800061a:	4808      	ldr	r0, [pc, #32]	@ (800063c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800061c:	f000 f858 	bl	80006d0 <_ZN6NRF24LD1Ev>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40020000 	.word	0x40020000
 800062c:	200000f4 	.word	0x200000f4
 8000630:	2000007c 	.word	0x2000007c
 8000634:	40020400 	.word	0x40020400
 8000638:	2000014c 	.word	0x2000014c
 800063c:	200000b8 	.word	0x200000b8

08000640 <_GLOBAL__sub_I_led_state>:
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
 8000644:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ffbb 	bl	80005c4 <_Z41__static_initialization_and_destruction_0ii>
 800064e:	bd80      	pop	{r7, pc}

08000650 <_GLOBAL__sub_D_led_state>:
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
 8000654:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff ffb3 	bl	80005c4 <_Z41__static_initialization_and_destruction_0ii>
 800065e:	bd80      	pop	{r7, pc}

08000660 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:

// Functions to manage the nRF24L01+ transceiver

#define nRF24_WAIT_TIMEOUT         (uint32_t)100;//0x000FFFFF

NRF24L::NRF24L(SPI_HandleTypeDef *spi, GPIO_TypeDef* CEPort, uint16_t CEPin, GPIO_TypeDef* CSNPort, uint16_t CSNPin):
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	807b      	strh	r3, [r7, #2]
				_spi(spi),
				_CEPort(CEPort),
				_CEPin(CEPin),
				_CSNPort(CSNPort),
				_CSNPin(CSNPin)
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x64>)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	601a      	str	r2, [r3, #0]
				_spi(spi),
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	605a      	str	r2, [r3, #4]
				_CEPort(CEPort),
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	609a      	str	r2, [r3, #8]
				_CEPin(CEPin),
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	887a      	ldrh	r2, [r7, #2]
 8000684:	819a      	strh	r2, [r3, #12]
				_CSNPort(CSNPort),
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	69ba      	ldr	r2, [r7, #24]
 800068a:	611a      	str	r2, [r3, #16]
				_CSNPin(CSNPin)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	8bba      	ldrh	r2, [r7, #28]
 8000690:	829a      	strh	r2, [r3, #20]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x68>)
 8000696:	3316      	adds	r3, #22
 8000698:	6810      	ldr	r0, [r2, #0]
 800069a:	6018      	str	r0, [r3, #0]
 800069c:	8892      	ldrh	r2, [r2, #4]
 800069e:	809a      	strh	r2, [r3, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x6c>)
 80006a4:	331c      	adds	r3, #28
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	6018      	str	r0, [r3, #0]
 80006ac:	3304      	adds	r3, #4
 80006ae:	8019      	strh	r1, [r3, #0]
 80006b0:	3302      	adds	r3, #2
 80006b2:	0c0a      	lsrs	r2, r1, #16
 80006b4:	701a      	strb	r2, [r3, #0]
{}
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	080033b4 	.word	0x080033b4
 80006c8:	08003368 	.word	0x08003368
 80006cc:	08003370 	.word	0x08003370

080006d0 <_ZN6NRF24LD1Ev>:

NRF24L::~NRF24L(){}
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <_ZN6NRF24LD1Ev+0x1c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	080033b4 	.word	0x080033b4

080006f0 <_ZN6NRF24LD0Ev>:
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ffe9 	bl	80006d0 <_ZN6NRF24LD1Ev>
 80006fe:	2124      	movs	r1, #36	@ 0x24
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f002 fd95 	bl	8003230 <_ZdlPvj>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN6NRF24L10nRF24_CE_HEv>:

void NRF24L::nRF24_CE_L() {
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_RESET);
}

void NRF24L::nRF24_CE_H() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_SET);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6898      	ldr	r0, [r3, #8]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	899b      	ldrh	r3, [r3, #12]
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	f001 fb70 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN6NRF24L11nRF24_CSN_LEv>:

void NRF24L::nRF24_CSN_L() {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_RESET);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6918      	ldr	r0, [r3, #16]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	8a9b      	ldrh	r3, [r3, #20]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	f001 fb60 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_ZN6NRF24L11nRF24_CSN_HEv>:

void NRF24L::nRF24_CSN_H() {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_SET);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	8a9b      	ldrh	r3, [r3, #20]
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	f001 fb50 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <_ZN6NRF24L11nRF24_LL_RWEh>:

uint8_t NRF24L::nRF24_LL_RW(uint8_t data) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af02      	add	r7, sp, #8
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(_spi, &data, &result, 1, 2000)!=HAL_OK) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6858      	ldr	r0, [r3, #4]
 8000780:	f107 020f 	add.w	r2, r7, #15
 8000784:	1cf9      	adds	r1, r7, #3
 8000786:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	f002 fa5d 	bl	8002c4c <HAL_SPI_TransmitReceive>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	bf14      	ite	ne
 8000798:	2301      	movne	r3, #1
 800079a:	2300      	moveq	r3, #0
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <_ZN6NRF24L11nRF24_LL_RWEh+0x36>
        Error_Handler();
 80007a2:	f000 fecf 	bl	8001544 <Error_Handler>
    };
    return result;
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZN6NRF24L7ReadRegEh>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
uint8_t NRF24L::ReadReg(uint8_t reg) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	nRF24_CSN_L();
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ffb7 	bl	8000730 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	f003 031f 	and.w	r3, r3, #31
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	4619      	mov	r1, r3
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffcf 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80007d2:	21ff      	movs	r1, #255	@ 0xff
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ffcb 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffb6 	bl	8000750 <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_ZN6NRF24L8WriteRegEhh>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
void NRF24L::WriteReg(uint8_t reg, uint8_t value) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	70fb      	strb	r3, [r7, #3]
 80007fa:	4613      	mov	r3, r2
 80007fc:	70bb      	strb	r3, [r7, #2]
	nRF24_CSN_L();
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ff96 	bl	8000730 <_ZN6NRF24L11nRF24_CSN_LEv>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b1f      	cmp	r3, #31
 8000808:	d810      	bhi.n	800082c <_ZN6NRF24L8WriteRegEhh+0x3e>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP ));
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	f003 031f 	and.w	r3, r3, #31
 8000810:	b2db      	uxtb	r3, r3
 8000812:	f043 0320 	orr.w	r3, r3, #32
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4619      	mov	r1, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffa8 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
		nRF24_LL_RW(value);
 8000820:	78bb      	ldrb	r3, [r7, #2]
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ffa3 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
 800082a:	e015      	b.n	8000858 <_ZN6NRF24L8WriteRegEhh+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	4619      	mov	r1, r3
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff9d 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
		if ((reg != nRF24_CMD_FLUSH_TX ) && (reg != nRF24_CMD_FLUSH_RX )
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2be1      	cmp	r3, #225	@ 0xe1
 800083a:	d00d      	beq.n	8000858 <_ZN6NRF24L8WriteRegEhh+0x6a>
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2be2      	cmp	r3, #226	@ 0xe2
 8000840:	d00a      	beq.n	8000858 <_ZN6NRF24L8WriteRegEhh+0x6a>
				&& (reg != nRF24_CMD_REUSE_TX_PL ) && (reg != nRF24_CMD_NOP )) {
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	2be3      	cmp	r3, #227	@ 0xe3
 8000846:	d007      	beq.n	8000858 <_ZN6NRF24L8WriteRegEhh+0x6a>
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2bff      	cmp	r3, #255	@ 0xff
 800084c:	d004      	beq.n	8000858 <_ZN6NRF24L8WriteRegEhh+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 800084e:	78bb      	ldrb	r3, [r7, #2]
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff8c 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
		}
	}
	nRF24_CSN_H();
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff79 	bl	8000750 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <_ZN6NRF24L9ReadMBRegEhPhh>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
void NRF24L::ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000866:	b590      	push	{r4, r7, lr}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	461a      	mov	r2, r3
 8000872:	460b      	mov	r3, r1
 8000874:	72fb      	strb	r3, [r7, #11]
 8000876:	4613      	mov	r3, r2
 8000878:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f7ff ff58 	bl	8000730 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 8000880:	7afb      	ldrb	r3, [r7, #11]
 8000882:	4619      	mov	r1, r3
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ff73 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 800088a:	e008      	b.n	800089e <_ZN6NRF24L9ReadMBRegEhPhh+0x38>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800088c:	687c      	ldr	r4, [r7, #4]
 800088e:	1c63      	adds	r3, r4, #1
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	21ff      	movs	r1, #255	@ 0xff
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f7ff ff6b 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
 800089a:	4603      	mov	r3, r0
 800089c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 800089e:	7abb      	ldrb	r3, [r7, #10]
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	72ba      	strb	r2, [r7, #10]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf14      	ite	ne
 80008a8:	2301      	movne	r3, #1
 80008aa:	2300      	moveq	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1ec      	bne.n	800088c <_ZN6NRF24L9ReadMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f7ff ff4c 	bl	8000750 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}

080008c0 <_ZN6NRF24L10WriteMBRegEhPhh>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
void NRF24L::WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	461a      	mov	r2, r3
 80008cc:	460b      	mov	r3, r1
 80008ce:	72fb      	strb	r3, [r7, #11]
 80008d0:	4613      	mov	r3, r2
 80008d2:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f7ff ff2b 	bl	8000730 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	4619      	mov	r1, r3
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f7ff ff46 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 80008e4:	e007      	b.n	80008f6 <_ZN6NRF24L10WriteMBRegEhPhh+0x36>
		nRF24_LL_RW(*pBuf++);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f7ff ff3d 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 80008f6:	7abb      	ldrb	r3, [r7, #10]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	72ba      	strb	r2, [r7, #10]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ed      	bne.n	80008e6 <_ZN6NRF24L10WriteMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f7ff ff20 	bl	8000750 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_ZN6NRF24L4InitEv>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void NRF24L::Init(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	// Write to registers their initial values
	WriteReg(nRF24_REG_CONFIG, 0x08);
 8000920:	2208      	movs	r2, #8
 8000922:	2100      	movs	r1, #0
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff62 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_AA, 0x3F);
 800092a:	223f      	movs	r2, #63	@ 0x3f
 800092c:	2101      	movs	r1, #1
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ff5d 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000934:	2203      	movs	r2, #3
 8000936:	2102      	movs	r1, #2
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff58 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800093e:	2203      	movs	r2, #3
 8000940:	2103      	movs	r1, #3
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff53 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000948:	2203      	movs	r2, #3
 800094a:	2104      	movs	r1, #4
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff4e 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_CH, 0x02);
 8000952:	2202      	movs	r2, #2
 8000954:	2105      	movs	r1, #5
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ff49 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800095c:	220e      	movs	r2, #14
 800095e:	2106      	movs	r1, #6
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff44 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_STATUS, 0x00);
 8000966:	2200      	movs	r2, #0
 8000968:	2107      	movs	r1, #7
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ff3f 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000970:	2200      	movs	r2, #0
 8000972:	2111      	movs	r1, #17
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff3a 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800097a:	2200      	movs	r2, #0
 800097c:	2112      	movs	r1, #18
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff35 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000984:	2200      	movs	r2, #0
 8000986:	2113      	movs	r1, #19
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff30 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800098e:	2200      	movs	r2, #0
 8000990:	2114      	movs	r1, #20
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ff2b 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000998:	2200      	movs	r2, #0
 800099a:	2115      	movs	r1, #21
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff26 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2116      	movs	r1, #22
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ff21 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_DYNPD, 0x00);
 80009ac:	2200      	movs	r2, #0
 80009ae:	211c      	movs	r1, #28
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff1c 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_FEATURE, 0x00);
 80009b6:	2200      	movs	r2, #0
 80009b8:	211d      	movs	r1, #29
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ff17 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>

	// Clear the FIFO's
	FlushRX();
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f9dd 	bl	8000d80 <_ZN6NRF24L7FlushRXEv>
	FlushTX();
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f9cd 	bl	8000d66 <_ZN6NRF24L7FlushTXEv>

	// Clear any pending interrupt flags
	ClearIRQFlags();
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f9e4 	bl	8000d9a <_ZN6NRF24L13ClearIRQFlagsEv>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff febc 	bl	8000750 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_ZN6NRF24L5CheckEv>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t NRF24L::Check(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t*) nRF24_TEST_ADDR;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <_ZN6NRF24L5CheckEv+0x68>)
 80009ea:	613b      	str	r3, [r7, #16]

	// Write test TX address and read TX_ADDR register
	WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80009ec:	2305      	movs	r3, #5
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	2130      	movs	r1, #48	@ 0x30
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ff64 	bl	80008c0 <_ZN6NRF24L10WriteMBRegEhPhh>
	ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80009f8:	f107 0208 	add.w	r2, r7, #8
 80009fc:	2305      	movs	r3, #5
 80009fe:	2110      	movs	r1, #16
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff30 	bl	8000866 <_ZN6NRF24L9ReadMBRegEhPhh>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	75fb      	strb	r3, [r7, #23]
 8000a0a:	e014      	b.n	8000a36 <_ZN6NRF24L5CheckEv+0x56>
		if (rxbuf[i] != *ptr++)
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	3318      	adds	r3, #24
 8000a10:	443b      	add	r3, r7
 8000a12:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	1c59      	adds	r1, r3, #1
 8000a1a:	6139      	str	r1, [r7, #16]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <_ZN6NRF24L5CheckEv+0x50>
			return 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e006      	b.n	8000a3e <_ZN6NRF24L5CheckEv+0x5e>
	for (i = 0; i < 5; i++) {
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	3301      	adds	r3, #1
 8000a34:	75fb      	strb	r3, [r7, #23]
 8000a36:	7dfb      	ldrb	r3, [r7, #23]
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	d9e7      	bls.n	8000a0c <_ZN6NRF24L5CheckEv+0x2c>
	}

	return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08003378 	.word	0x08003378

08000a4c <_ZN6NRF24L12SetPowerModeEh>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void NRF24L::SetPowerMode(uint8_t mode) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	reg = ReadReg(nRF24_REG_CONFIG);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fea8 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000a60:	4603      	mov	r3, r0
 8000a62:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d104      	bne.n	8000a74 <_ZN6NRF24L12SetPowerModeEh+0x28>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e003      	b.n	8000a7c <_ZN6NRF24L12SetPowerModeEh+0x30>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	f023 0302 	bic.w	r3, r3, #2
 8000a7a:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_CONFIG, reg);
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff feb3 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_ZN6NRF24L18SetOperationalModeEh>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void NRF24L::SetOperationalMode(uint8_t mode) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fe86 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX );
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fe92 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_ZN6NRF24L12SetCRCSchemeEh>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void NRF24L::SetCRCScheme(uint8_t scheme) {
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	460b      	mov	r3, r1
 8000adc:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fe65 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	f023 030c 	bic.w	r3, r3, #12
 8000af0:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC );
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	f003 030c 	and.w	r3, r3, #12
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	461a      	mov	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff fe71 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZN6NRF24L12SetRFChannelEh>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void NRF24L::SetRFChannel(uint8_t channel) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_RF_CH, channel);
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	461a      	mov	r2, r3
 8000b24:	2105      	movs	r1, #5
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fe61 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZN6NRF24L12SetAddrWidthEh>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void NRF24L::SetAddrWidth(uint8_t addr_width) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	3b02      	subs	r3, #2
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	2103      	movs	r1, #3
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fe4f 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_ZN6NRF24L7SetAddrEhPKh>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void NRF24L::SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	460b      	mov	r3, r1
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	72fb      	strb	r3, [r7, #11]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000b66:	7afb      	ldrb	r3, [r7, #11]
 8000b68:	2b06      	cmp	r3, #6
 8000b6a:	d00a      	beq.n	8000b82 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
 8000b6c:	2b06      	cmp	r3, #6
 8000b6e:	dc42      	bgt.n	8000bf6 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	dc02      	bgt.n	8000b7a <_ZN6NRF24L7SetAddrEhPKh+0x22>
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da04      	bge.n	8000b82 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
		// Write address LSBbyte (only first byte from the addr buffer)
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
		break;
	default:
		// Incorrect pipe number -> do nothing
		break;
 8000b78:	e03d      	b.n	8000bf6 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000b7a:	3b02      	subs	r3, #2
	switch (pipe) {
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d83a      	bhi.n	8000bf6 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000b80:	e02e      	b.n	8000be0 <_ZN6NRF24L7SetAddrEhPKh+0x88>
		addr_width = ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000b82:	2103      	movs	r1, #3
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff fe13 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	75fb      	strb	r3, [r7, #23]
		addr += addr_width;
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
		nRF24_CSN_L();
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fdc9 	bl	8000730 <_ZN6NRF24L11nRF24_CSN_LEv>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | NRF24L::ADDR_REGS[pipe]);
 8000b9e:	7afb      	ldrb	r3, [r7, #11]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	7f1b      	ldrb	r3, [r3, #28]
 8000ba6:	f043 0320 	orr.w	r3, r3, #32
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4619      	mov	r1, r3
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fdde 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
			nRF24_LL_RW(*addr--);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff fdd6 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
		} while (addr_width--);
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	75fa      	strb	r2, [r7, #23]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1ed      	bne.n	8000bb4 <_ZN6NRF24L7SetAddrEhPKh+0x5c>
		nRF24_CSN_H();
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f7ff fdb9 	bl	8000750 <_ZN6NRF24L11nRF24_CSN_HEv>
		break;
 8000bde:	e00b      	b.n	8000bf8 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
 8000be0:	7afb      	ldrb	r3, [r7, #11]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	7f19      	ldrb	r1, [r3, #28]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff fdfd 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
		break;
 8000bf4:	e000      	b.n	8000bf8 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		break;
 8000bf6:	bf00      	nop
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_ZN6NRF24L11SetDataRateEh>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void NRF24L::SetDataRate(uint8_t data_rate) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = ReadReg(nRF24_REG_RF_SETUP);
 8000c0c:	2106      	movs	r1, #6
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fdce 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000c1e:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_RF_SETUP, reg);
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2106      	movs	r1, #6
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fddd 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZN6NRF24L9SetRXPipeEhhh>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void NRF24L::SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	70fb      	strb	r3, [r7, #3]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	70bb      	strb	r3, [r7, #2]
 8000c52:	4613      	mov	r3, r2
 8000c54:	707b      	strb	r3, [r7, #1]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000c56:	2102      	movs	r1, #2
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fda9 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b25a      	sxtb	r2, r3
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	2101      	movs	r1, #1
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c76:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fdb5 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>

	// Set RX payload length (RX_PW_Px register)
	WriteReg(NRF24L::RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	7d99      	ldrb	r1, [r3, #22]
 8000c8c:	787b      	ldrb	r3, [r7, #1]
 8000c8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fda9 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = ReadReg(nRF24_REG_EN_AA);
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fd86 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d10a      	bne.n	8000cc4 <_ZN6NRF24L9SetRXPipeEhhh+0x88>
		reg |= (1 << pipe);
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	b25a      	sxtb	r2, r3
 8000cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e00b      	b.n	8000cdc <_ZN6NRF24L9SetRXPipeEhhh+0xa0>
	} else {
		reg &= ~(1 << pipe);
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	b25a      	sxtb	r2, r3
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_EN_AA, reg);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fd83 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_ZN6NRF24L9DisableAAEh>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void NRF24L::DisableAA(uint8_t pipe) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	if (pipe > 5) {
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d905      	bls.n	8000d0e <_ZN6NRF24L9DisableAAEh+0x1e>
		// Disable Auto-ACK for ALL pipes
		WriteReg(nRF24_REG_EN_AA, 0x00);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2101      	movs	r1, #1
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fd71 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
		// Clear bit in the EN_AA register
		reg = ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8000d0c:	e017      	b.n	8000d3e <_ZN6NRF24L9DisableAAEh+0x4e>
		reg = ReadReg(nRF24_REG_EN_AA);
 8000d0e:	2101      	movs	r1, #1
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fd4d 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000d16:	4603      	mov	r3, r0
 8000d18:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	73fb      	strb	r3, [r7, #15]
		WriteReg(nRF24_REG_EN_AA, reg);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2101      	movs	r1, #1
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fd58 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_ZN6NRF24L16GetStatus_RXFIFOEv>:
	return (ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ );
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t NRF24L::GetStatus_RXFIFO(void) {
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	return (ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO );
 8000d4e:	2117      	movs	r1, #23
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fd2d 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	b2db      	uxtb	r3, r3
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_ZN6NRF24L7FlushTXEv>:
	reg = ReadReg(nRF24_REG_RF_CH);
	WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void NRF24L::FlushTX(void) {
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8000d6e:	22ff      	movs	r2, #255	@ 0xff
 8000d70:	21e1      	movs	r1, #225	@ 0xe1
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fd3b 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_ZN6NRF24L7FlushRXEv>:

// Flush the RX FIFO
void NRF24L::FlushRX(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000d88:	22ff      	movs	r2, #255	@ 0xff
 8000d8a:	21e2      	movs	r1, #226	@ 0xe2
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fd2e 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_ZN6NRF24L13ClearIRQFlagsEv>:

// Clear any pending IRQ flags
void NRF24L::ClearIRQFlags(void) {
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = ReadReg(nRF24_REG_STATUS);
 8000da2:	2107      	movs	r1, #7
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fd03 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000db4:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_STATUS, reg);
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	461a      	mov	r2, r3
 8000dba:	2107      	movs	r1, #7
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fd16 	bl	80007ee <_ZN6NRF24L8WriteRegEhh>
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_ZN6NRF24L20GetRxDplPayloadWidthEv>:
//   length - payload length in bytes
void NRF24L::WritePayload(uint8_t *pBuf, uint8_t length) {
	WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

uint8_t NRF24L::GetRxDplPayloadWidth() {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	uint8_t value;

	nRF24_CSN_L();
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fcac 	bl	8000730 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8000dd8:	2160      	movs	r1, #96	@ 0x60
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fcc8 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000de0:	21ff      	movs	r1, #255	@ 0xff
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fcc4 	bl	8000770 <_ZN6NRF24L11nRF24_LL_RWEh>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fcaf 	bl	8000750 <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]

}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_ZN6NRF24L18ReadPayloadGenericEPhS0_h>:

NRF24L::RXResult NRF24L::ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length,
		uint8_t dpl) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	70fb      	strb	r3, [r7, #3]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO ) >> 1;
 8000e0a:	2107      	movs	r1, #7
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff fccf 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000e12:	4603      	mov	r3, r0
 8000e14:	085b      	lsrs	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d82d      	bhi.n	8000e80 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x84>
		// Get payload length
		if (dpl) {
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d011      	beq.n	8000e4e <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x52>
			*length = GetRxDplPayloadWidth();
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f7ff ffcd 	bl	8000dca <_ZN6NRF24L20GetRxDplPayloadWidthEv>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	701a      	strb	r2, [r3, #0]
			if (*length > 32) { //broken packet
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b20      	cmp	r3, #32
 8000e3e:	d912      	bls.n	8000e66 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x6a>
				*length = 0;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
				FlushRX();
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff ff9a 	bl	8000d80 <_ZN6NRF24L7FlushRXEv>
 8000e4c:	e00b      	b.n	8000e66 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x6a>
			}
		} else {
			*length = ReadReg(NRF24L::RX_PW_PIPE[pipe]);
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	7d9b      	ldrb	r3, [r3, #22]
 8000e56:	4619      	mov	r1, r3
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff fca9 	bl	80007b0 <_ZN6NRF24L7ReadRegEh>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x80>
			ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	2161      	movs	r1, #97	@ 0x61
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff fcf5 	bl	8000866 <_ZN6NRF24L9ReadMBRegEhPhh>
		}

		return ((RXResult) pipe);
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
 8000e7e:	e003      	b.n	8000e88 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x8c>
	}

	// The RX FIFO is empty
	*length = 0;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]

	return RX_EMPTY;
 8000e86:	23ff      	movs	r3, #255	@ 0xff
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_ZN6NRF24L11ReadPayloadEPhS0_>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
NRF24L::RXResult NRF24L::ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	return ReadPayloadGeneric(pBuf, length, 0);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff ffaa 	bl	8000dfc <_ZN6NRF24L18ReadPayloadGenericEPhS0_h>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <_ZN6NRF24L6InitRXEPhh>:
	ClearIRQFlags();
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
}

void NRF24L::InitRX(uint8_t *dest, uint8_t len) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	71fb      	strb	r3, [r7, #7]
	// Disable ShockBurst for all RX pipes
	DisableAA(0xFF);
 8000ec2:	21ff      	movs	r1, #255	@ 0xff
 8000ec4:	68f8      	ldr	r0, [r7, #12]
 8000ec6:	f7ff ff13 	bl	8000cf0 <_ZN6NRF24L9DisableAAEh>
	// Set RF channel
	SetRFChannel(115);
 8000eca:	2173      	movs	r1, #115	@ 0x73
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff fe21 	bl	8000b14 <_ZN6NRF24L12SetRFChannelEh>
	// Set data rate
	SetDataRate(nRF24_DR_250kbps);
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff fe93 	bl	8000c00 <_ZN6NRF24L11SetDataRateEh>
	// Set CRC scheme
	SetCRCScheme(nRF24_CRC_2byte);
 8000eda:	210c      	movs	r1, #12
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f7ff fdf8 	bl	8000ad2 <_ZN6NRF24L12SetCRCSchemeEh>
	// Set address width, its common for all pipes (RX and TX)
	SetAddrWidth(3);
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff fe25 	bl	8000b34 <_ZN6NRF24L12SetAddrWidthEh>
	// Configure RX PIPE#1
	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 8000eea:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <_ZN6NRF24L6InitRXEPhh+0x6c>)
 8000eec:	2101      	movs	r1, #1
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff fe32 	bl	8000b58 <_ZN6NRF24L7SetAddrEhPKh>
	SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, len); // Auto-ACK: disabled, payload length in bytes
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2101      	movs	r1, #1
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff fe9e 	bl	8000c3c <_ZN6NRF24L9SetRXPipeEhhh>
	// Set operational mode (PRX == receiver)
	SetOperationalMode(nRF24_MODE_RX);
 8000f00:	2101      	movs	r1, #1
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff fdc4 	bl	8000a90 <_ZN6NRF24L18SetOperationalModeEh>
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
 8000f08:	2102      	movs	r1, #2
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff fd9e 	bl	8000a4c <_ZN6NRF24L12SetPowerModeEh>
	// Put the transceiver to the RX mode
	nRF24_CE_H();
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff fbfd 	bl	8000710 <_ZN6NRF24L10nRF24_CE_HEv>
//	nRF24_SetAddrWidth(5); // address width is 5 bytes
//	nRF24_SetAddr(nRF24_PIPE1, dest); // program pipe address
//	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 10); // enable RX pipe#1 with Auto-ACK: disabled, payload length: 10 bytes
//	nRF24_SetOperationalMode(nRF24_MODE_RX); // switch transceiver to the RX mode
//	nRF24_SetPowerMode(nRF24_PWR_UP); // wake-up transceiver (in case if it sleeping)
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	080033a8 	.word	0x080033a8

08000f24 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
#define SPI_TIMEOUT 20

char spi_buf[17];
char button_buf[4];

Tm1638::Tm1638 (SPI_HandleTypeDef *spi,
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef *stbPort,
		uint16_t stbPin,
		GPIO_TypeDef *mosiPort,
		uint16_t mosiPin):
    _spi(spi), _stbPort(stbPort), _stbPin(stbPin), _mosiPort(mosiPort), _mosiPin(mosiPin)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	887a      	ldrh	r2, [r7, #2]
 8000f42:	811a      	strh	r2, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000f4e:	821a      	strh	r2, [r3, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	749a      	strb	r2, [r3, #18]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2240      	movs	r2, #64	@ 0x40
 8000f5a:	74da      	strb	r2, [r3, #19]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2244      	movs	r2, #68	@ 0x44
 8000f60:	751a      	strb	r2, [r3, #20]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	22c0      	movs	r2, #192	@ 0xc0
 8000f66:	755a      	strb	r2, [r3, #21]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x80>)
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	f103 0c16 	add.w	ip, r3, #22
 8000f72:	f104 0e20 	add.w	lr, r4, #32
 8000f76:	4665      	mov	r5, ip
 8000f78:	4626      	mov	r6, r4
 8000f7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f7c:	6028      	str	r0, [r5, #0]
 8000f7e:	6069      	str	r1, [r5, #4]
 8000f80:	60aa      	str	r2, [r5, #8]
 8000f82:	60eb      	str	r3, [r5, #12]
 8000f84:	3410      	adds	r4, #16
 8000f86:	f10c 0c10 	add.w	ip, ip, #16
 8000f8a:	4574      	cmp	r4, lr
 8000f8c:	d1f3      	bne.n	8000f76 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x52>
 8000f8e:	4663      	mov	r3, ip
 8000f90:	4622      	mov	r2, r4
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	6018      	str	r0, [r3, #0]
 8000f96:	7912      	ldrb	r2, [r2, #4]
 8000f98:	711a      	strb	r2, [r3, #4]
{
}
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa4:	08003380 	.word	0x08003380

08000fa8 <_ZN6Tm16384testEv>:

void Tm1638::test(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  turnOnFull();
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f82f 	bl	8001014 <_ZN6Tm163810turnOnFullEv>
  clear();
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f840 	bl	800103c <_ZN6Tm16385clearEv>

  writeCharTo(0, 'L');
 8000fbc:	224c      	movs	r2, #76	@ 0x4c
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f875 	bl	80010b0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(1, 'e');
 8000fc6:	2265      	movs	r2, #101	@ 0x65
 8000fc8:	2101      	movs	r1, #1
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f870 	bl	80010b0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(2, 'o');
 8000fd0:	226f      	movs	r2, #111	@ 0x6f
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f86b 	bl	80010b0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(3, 'n');
 8000fda:	226e      	movs	r2, #110	@ 0x6e
 8000fdc:	2103      	movs	r1, #3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f866 	bl	80010b0 <_ZN6Tm163811writeCharToEhc>

  writeCharTo(4,'E');
 8000fe4:	2245      	movs	r2, #69	@ 0x45
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f861 	bl	80010b0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(5,'m');
 8000fee:	226d      	movs	r2, #109	@ 0x6d
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f85c 	bl	80010b0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(6,'m');
 8000ff8:	226d      	movs	r2, #109	@ 0x6d
 8000ffa:	2106      	movs	r1, #6
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f857 	bl	80010b0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(7,'a');
 8001002:	2261      	movs	r2, #97	@ 0x61
 8001004:	2107      	movs	r1, #7
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f852 	bl	80010b0 <_ZN6Tm163811writeCharToEhc>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_ZN6Tm163810turnOnFullEv>:

void Tm1638::turnOnFull(){
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint8_t brightness = enable | 0x0F;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7c9b      	ldrb	r3, [r3, #18]
 8001020:	f043 030f 	orr.w	r3, r3, #15
 8001024:	b2db      	uxtb	r3, r3
 8001026:	73fb      	strb	r3, [r7, #15]
  setMode(&brightness);
 8001028:	f107 030f 	add.w	r3, r7, #15
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f900 	bl	8001234 <_ZN6Tm16387setModeEPKh>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_ZN6Tm16385clearEv>:
void Tm1638::turnOn(uint8_t val){ // 0 to 15
  uint8_t brightness = enable | (val & 0x0F);
  setMode(&brightness);
}

void Tm1638::clear(){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  setMode(&seriesOut);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3313      	adds	r3, #19
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f8f2 	bl	8001234 <_ZN6Tm16387setModeEPKh>

  for(int i = 0; i < 18; i++) { spi_buf[i] = 0; }
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	e007      	b.n	8001066 <_ZN6Tm16385clearEv+0x2a>
 8001056:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <_ZN6Tm16385clearEv+0x70>)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b11      	cmp	r3, #17
 800106a:	ddf4      	ble.n	8001056 <_ZN6Tm16385clearEv+0x1a>
  spi_buf[0] = startAddr;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7d5a      	ldrb	r2, [r3, #21]
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <_ZN6Tm16385clearEv+0x70>)
 8001072:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6858      	ldr	r0, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	891b      	ldrh	r3, [r3, #8]
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	f000 fec2 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)spi_buf, 17, SPI_TIMEOUT);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	2314      	movs	r3, #20
 800108a:	2211      	movs	r2, #17
 800108c:	4907      	ldr	r1, [pc, #28]	@ (80010ac <_ZN6Tm16385clearEv+0x70>)
 800108e:	f001 fb82 	bl	8002796 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6858      	ldr	r0, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	891b      	ldrh	r3, [r3, #8]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	f000 feb3 	bl	8001e08 <HAL_GPIO_WritePin>
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000dc 	.word	0x200000dc

080010b0 <_ZN6Tm163811writeCharToEhc>:

void Tm1638::writeCharTo(uint8_t pos, char val){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
 80010bc:	4613      	mov	r3, r2
 80010be:	70bb      	strb	r3, [r7, #2]
  char result = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
  if(val >= '0' && val <= '9')
 80010c4:	78bb      	ldrb	r3, [r7, #2]
 80010c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80010c8:	d909      	bls.n	80010de <_ZN6Tm163811writeCharToEhc+0x2e>
 80010ca:	78bb      	ldrb	r3, [r7, #2]
 80010cc:	2b39      	cmp	r3, #57	@ 0x39
 80010ce:	d806      	bhi.n	80010de <_ZN6Tm163811writeCharToEhc+0x2e>
  {
    result = letterMap[0 + (val - '0')];
 80010d0:	78bb      	ldrb	r3, [r7, #2]
 80010d2:	3b30      	subs	r3, #48	@ 0x30
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	7d9b      	ldrb	r3, [r3, #22]
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e018      	b.n	8001110 <_ZN6Tm163811writeCharToEhc+0x60>
  }
  else if(val >= 'a' && val <= 'z')
 80010de:	78bb      	ldrb	r3, [r7, #2]
 80010e0:	2b60      	cmp	r3, #96	@ 0x60
 80010e2:	d909      	bls.n	80010f8 <_ZN6Tm163811writeCharToEhc+0x48>
 80010e4:	78bb      	ldrb	r3, [r7, #2]
 80010e6:	2b7a      	cmp	r3, #122	@ 0x7a
 80010e8:	d806      	bhi.n	80010f8 <_ZN6Tm163811writeCharToEhc+0x48>
  {
    result = letterMap[10 + (val - 'a')];
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	3b57      	subs	r3, #87	@ 0x57
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	7d9b      	ldrb	r3, [r3, #22]
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e00b      	b.n	8001110 <_ZN6Tm163811writeCharToEhc+0x60>
  }
  else if(val >= 'A' && val <= 'Z')
 80010f8:	78bb      	ldrb	r3, [r7, #2]
 80010fa:	2b40      	cmp	r3, #64	@ 0x40
 80010fc:	d908      	bls.n	8001110 <_ZN6Tm163811writeCharToEhc+0x60>
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b5a      	cmp	r3, #90	@ 0x5a
 8001102:	d805      	bhi.n	8001110 <_ZN6Tm163811writeCharToEhc+0x60>
  {
    result = letterMap[10 + (val - 'A')];
 8001104:	78bb      	ldrb	r3, [r7, #2]
 8001106:	3b37      	subs	r3, #55	@ 0x37
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	7d9b      	ldrb	r3, [r3, #22]
 800110e:	73fb      	strb	r3, [r7, #15]
  }
  writeTo(pos * 2, result);
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f8aa 	bl	8001274 <_ZN6Tm16387writeToEhh>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZN6Tm16388writeLedEhb>:

void Tm1638::writeLed(uint8_t pos, bool val)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
 8001134:	4613      	mov	r3, r2
 8001136:	70bb      	strb	r3, [r7, #2]
  writeTo(pos * 2 + 1, val ? 1 : 0);
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3301      	adds	r3, #1
 8001140:	b2d9      	uxtb	r1, r3
 8001142:	78bb      	ldrb	r3, [r7, #2]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <_ZN6Tm16388writeLedEhb+0x24>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <_ZN6Tm16388writeLedEhb+0x26>
 800114c:	2300      	movs	r3, #0
 800114e:	461a      	mov	r2, r3
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f88f 	bl	8001274 <_ZN6Tm16387writeToEhh>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN6Tm163810writeHexToEhhm>:

void Tm1638::writeHexTo(uint8_t startPos, uint8_t digits, uint32_t val){
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	72fb      	strb	r3, [r7, #11]
 800116c:	4613      	mov	r3, r2
 800116e:	72bb      	strb	r3, [r7, #10]
  while(digits != 0){
 8001170:	e012      	b.n	8001198 <_ZN6Tm163810writeHexToEhhm+0x3a>
    hexTo(2 * (startPos + digits - 1), val);
 8001172:	7afa      	ldrb	r2, [r7, #11]
 8001174:	7abb      	ldrb	r3, [r7, #10]
 8001176:	4413      	add	r3, r2
 8001178:	3b01      	subs	r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	4619      	mov	r1, r3
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f8aa 	bl	80012e0 <_ZN6Tm16385hexToEch>
    val = val >> 4;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	607b      	str	r3, [r7, #4]
    digits--;
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	3b01      	subs	r3, #1
 8001196:	72bb      	strb	r3, [r7, #10]
  while(digits != 0){
 8001198:	7abb      	ldrb	r3, [r7, #10]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1e9      	bne.n	8001172 <_ZN6Tm163810writeHexToEhhm+0x14>
  }
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZN6Tm163811readButtonsEv>:
uint8_t Tm1638::readButtons(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  uint8_t readMode = 0x42;
 80011b0:	2342      	movs	r3, #66	@ 0x42
 80011b2:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6858      	ldr	r0, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	891b      	ldrh	r3, [r3, #8]
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	f000 fe22 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)&readMode, 1, SPI_TIMEOUT);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f107 010f 	add.w	r1, r7, #15
 80011cc:	2314      	movs	r3, #20
 80011ce:	2201      	movs	r2, #1
 80011d0:	f001 fae1 	bl	8002796 <HAL_SPI_Transmit>
  HAL_SPI_Receive(_spi, (uint8_t *)button_buf, 4, SPI_TIMEOUT);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	2314      	movs	r3, #20
 80011da:	2204      	movs	r2, #4
 80011dc:	4914      	ldr	r1, [pc, #80]	@ (8001230 <_ZN6Tm163811readButtonsEv+0x88>)
 80011de:	f001 fc1d 	bl	8002a1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6858      	ldr	r0, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	891b      	ldrh	r3, [r3, #8]
 80011ea:	2201      	movs	r2, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	f000 fe0b 	bl	8001e08 <HAL_GPIO_WritePin>

  uint8_t result = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]
  for(int i = 0; i < 4; i++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	e011      	b.n	8001220 <_ZN6Tm163811readButtonsEv+0x78>
	  result |= ((button_buf[i] & 0x11) << i);
 80011fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001230 <_ZN6Tm163811readButtonsEv+0x88>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f003 0211 	and.w	r2, r3, #17
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	b25a      	sxtb	r2, r3
 8001210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001214:	4313      	orrs	r3, r2
 8001216:	b25b      	sxtb	r3, r3
 8001218:	75fb      	strb	r3, [r7, #23]
  for(int i = 0; i < 4; i++){
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	3301      	adds	r3, #1
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	2b03      	cmp	r3, #3
 8001224:	ddea      	ble.n	80011fc <_ZN6Tm163811readButtonsEv+0x54>
  }
  return result;
 8001226:	7dfb      	ldrb	r3, [r7, #23]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000f0 	.word	0x200000f0

08001234 <_ZN6Tm16387setModeEPKh>:

// private

void Tm1638::setMode(const uint8_t *mode){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6858      	ldr	r0, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	891b      	ldrh	r3, [r3, #8]
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	f000 fddd 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)mode, 1, SPI_TIMEOUT);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	2314      	movs	r3, #20
 8001254:	2201      	movs	r2, #1
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	f001 fa9d 	bl	8002796 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6858      	ldr	r0, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	891b      	ldrh	r3, [r3, #8]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	f000 fdce 	bl	8001e08 <HAL_GPIO_WritePin>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_ZN6Tm16387writeToEhh>:

void Tm1638::writeTo(uint8_t reg, uint8_t val){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
 8001280:	4613      	mov	r3, r2
 8001282:	70bb      	strb	r3, [r7, #2]
  setMode(&charOut);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3314      	adds	r3, #20
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffd2 	bl	8001234 <_ZN6Tm16387setModeEPKh>
  spi_buf[0] = startAddr | reg;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7d5a      	ldrb	r2, [r3, #21]
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	4313      	orrs	r3, r2
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <_ZN6Tm16387writeToEhh+0x68>)
 800129c:	701a      	strb	r2, [r3, #0]
  spi_buf[1] = val;
 800129e:	4a0f      	ldr	r2, [pc, #60]	@ (80012dc <_ZN6Tm16387writeToEhh+0x68>)
 80012a0:	78bb      	ldrb	r3, [r7, #2]
 80012a2:	7053      	strb	r3, [r2, #1]

  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6858      	ldr	r0, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	891b      	ldrh	r3, [r3, #8]
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f000 fdaa 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)spi_buf, 2, SPI_TIMEOUT);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	2314      	movs	r3, #20
 80012ba:	2202      	movs	r2, #2
 80012bc:	4907      	ldr	r1, [pc, #28]	@ (80012dc <_ZN6Tm16387writeToEhh+0x68>)
 80012be:	f001 fa6a 	bl	8002796 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6858      	ldr	r0, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	891b      	ldrh	r3, [r3, #8]
 80012ca:	2201      	movs	r2, #1
 80012cc:	4619      	mov	r1, r3
 80012ce:	f000 fd9b 	bl	8001e08 <HAL_GPIO_WritePin>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000dc 	.word	0x200000dc

080012e0 <_ZN6Tm16385hexToEch>:

void Tm1638::hexTo(char pos, uint8_t val){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
 80012ec:	4613      	mov	r3, r2
 80012ee:	70bb      	strb	r3, [r7, #2]
  char result  = letterMap[val & 0x0F];
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	7d9b      	ldrb	r3, [r3, #22]
 80012fc:	73fb      	strb	r3, [r7, #15]
  writeTo(pos, result);
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	4619      	mov	r1, r3
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffb5 	bl	8001274 <_ZN6Tm16387writeToEhh>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b45      	ldr	r3, [pc, #276]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a44      	ldr	r2, [pc, #272]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b42      	ldr	r3, [pc, #264]	@ (8001444 <MX_GPIO_Init+0x130>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b3e      	ldr	r3, [pc, #248]	@ (8001444 <MX_GPIO_Init+0x130>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a3d      	ldr	r2, [pc, #244]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b3b      	ldr	r3, [pc, #236]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a36      	ldr	r2, [pc, #216]	@ (8001444 <MX_GPIO_Init+0x130>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a2f      	ldr	r2, [pc, #188]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <MX_GPIO_Init+0x130>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a0:	4829      	ldr	r0, [pc, #164]	@ (8001448 <MX_GPIO_Init+0x134>)
 80013a2:	f000 fd31 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2101      	movs	r1, #1
 80013aa:	4828      	ldr	r0, [pc, #160]	@ (800144c <MX_GPIO_Init+0x138>)
 80013ac:	f000 fd2c 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TM_STB_GPIO_Port, TM_STB_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2140      	movs	r1, #64	@ 0x40
 80013b4:	4825      	ldr	r0, [pc, #148]	@ (800144c <MX_GPIO_Init+0x138>)
 80013b6:	f000 fd27 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_IRQ_Pin|NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f243 0104 	movw	r1, #12292	@ 0x3004
 80013c0:	4823      	ldr	r0, [pc, #140]	@ (8001450 <MX_GPIO_Init+0x13c>)
 80013c2:	f000 fd21 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	481a      	ldr	r0, [pc, #104]	@ (8001448 <MX_GPIO_Init+0x134>)
 80013e0:	f000 fb8e 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4814      	ldr	r0, [pc, #80]	@ (800144c <MX_GPIO_Init+0x138>)
 80013fc:	f000 fb80 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TM_STB_Pin;
 8001400:	2340      	movs	r3, #64	@ 0x40
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TM_STB_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	@ (800144c <MX_GPIO_Init+0x138>)
 8001418:	f000 fb72 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin|NRF_CE_Pin|NRF_CSN_Pin;
 800141c:	f243 0304 	movw	r3, #12292	@ 0x3004
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4806      	ldr	r0, [pc, #24]	@ (8001450 <MX_GPIO_Init+0x13c>)
 8001436:	f000 fb63 	bl	8001b00 <HAL_GPIO_Init>

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40020800 	.word	0x40020800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001458:	f000 f9fa 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145c:	f000 f80a 	bl	8001474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001460:	f7ff ff58 	bl	8001314 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001464:	f000 f8ac 	bl	80015c0 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001468:	f000 f872 	bl	8001550 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  EventLoopC();
 800146c:	f7ff f8a4 	bl	80005b8 <EventLoopC>

  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <main+0x1c>

08001474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	@ 0x50
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	2230      	movs	r2, #48	@ 0x30
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f001 feec 	bl	8003260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	4b27      	ldr	r3, [pc, #156]	@ (800153c <SystemClock_Config+0xc8>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	4a26      	ldr	r2, [pc, #152]	@ (800153c <SystemClock_Config+0xc8>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <SystemClock_Config+0xc8>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <SystemClock_Config+0xcc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a20      	ldr	r2, [pc, #128]	@ (8001540 <SystemClock_Config+0xcc>)
 80014be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <SystemClock_Config+0xcc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014da:	2302      	movs	r3, #2
 80014dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014e4:	2319      	movs	r3, #25
 80014e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014e8:	23a8      	movs	r3, #168	@ 0xa8
 80014ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014f0:	2304      	movs	r3, #4
 80014f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fc9f 	bl	8001e3c <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001504:	f000 f81e 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	2302      	movs	r3, #2
 800150e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	2102      	movs	r1, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f000 ff01 	bl	800232c <HAL_RCC_ClockConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001530:	f000 f808 	bl	8001544 <Error_Handler>
  }
}
 8001534:	bf00      	nop
 8001536:	3750      	adds	r7, #80	@ 0x50
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <Error_Handler+0x8>

08001550 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <MX_SPI1_Init+0x68>)
 8001556:	4a19      	ldr	r2, [pc, #100]	@ (80015bc <MX_SPI1_Init+0x6c>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_SPI1_Init+0x68>)
 800155c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <MX_SPI1_Init+0x68>)
 8001564:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001568:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_SPI1_Init+0x68>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_SPI1_Init+0x68>)
 8001572:	2202      	movs	r2, #2
 8001574:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_SPI1_Init+0x68>)
 8001578:	2201      	movs	r2, #1
 800157a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_SPI1_Init+0x68>)
 800157e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001582:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_SPI1_Init+0x68>)
 8001586:	2230      	movs	r2, #48	@ 0x30
 8001588:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_SPI1_Init+0x68>)
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_SPI1_Init+0x68>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_SPI1_Init+0x68>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_SPI1_Init+0x68>)
 800159e:	220a      	movs	r2, #10
 80015a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_SPI1_Init+0x68>)
 80015a4:	f001 f86e 	bl	8002684 <HAL_SPI_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80015ae:	f7ff ffc9 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000f4 	.word	0x200000f4
 80015bc:	40013000 	.word	0x40013000

080015c0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015c6:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <MX_SPI2_Init+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <MX_SPI2_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_SPI2_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <MX_SPI2_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <MX_SPI2_Init+0x64>)
 800160c:	220a      	movs	r2, #10
 800160e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	@ (8001624 <MX_SPI2_Init+0x64>)
 8001612:	f001 f837 	bl	8002684 <HAL_SPI_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800161c:	f7ff ff92 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000014c 	.word	0x2000014c
 8001628:	40003800 	.word	0x40003800

0800162c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	@ 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a32      	ldr	r2, [pc, #200]	@ (8001714 <HAL_SPI_MspInit+0xe8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d12c      	bne.n	80016a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	4b31      	ldr	r3, [pc, #196]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	4a30      	ldr	r2, [pc, #192]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 8001658:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800165c:	6453      	str	r3, [r2, #68]	@ 0x44
 800165e:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a29      	ldr	r2, [pc, #164]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TM_SCK_Pin|TM_MOSI_Pin;
 8001686:	23a0      	movs	r3, #160	@ 0xa0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001696:	2305      	movs	r3, #5
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	481e      	ldr	r0, [pc, #120]	@ (800171c <HAL_SPI_MspInit+0xf0>)
 80016a2:	f000 fa2d 	bl	8001b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016a6:	e031      	b.n	800170c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001720 <HAL_SPI_MspInit+0xf4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12c      	bne.n	800170c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a17      	ldr	r2, [pc, #92]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <HAL_SPI_MspInit+0xec>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 80016ea:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016fc:	2305      	movs	r3, #5
 80016fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	@ (8001724 <HAL_SPI_MspInit+0xf8>)
 8001708:	f000 f9fa 	bl	8001b00 <HAL_GPIO_Init>
}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	@ 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40013000 	.word	0x40013000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40003800 	.word	0x40003800
 8001724:	40020400 	.word	0x40020400

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	4a0f      	ldr	r2, [pc, #60]	@ (8001774 <HAL_MspInit+0x4c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173c:	6453      	str	r3, [r2, #68]	@ 0x44
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	4a08      	ldr	r2, [pc, #32]	@ (8001774 <HAL_MspInit+0x4c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	@ 0x40
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ce:	f000 f891 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001834 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001800:	f7ff ffea 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	@ (8001848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f001 fd21 	bl	8003270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7ff fe11 	bl	8001454 <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001840:	080033e4 	.word	0x080033e4
  ldr r2, =_sbss
 8001844:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001848:	200002e8 	.word	0x200002e8

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <HAL_Init+0x40>)
 800185a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <HAL_Init+0x40>)
 8001866:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_Init+0x40>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f90d 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	200f      	movs	r0, #15
 8001880:	f000 f808 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff ff50 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f917 	bl	8001ae6 <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f000 f8ed 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000004 	.word	0x20000004
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c
 8001918:	200001a4 	.word	0x200001a4

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200001a4 	.word	0x200001a4

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	@ (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff47 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff5c 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffb0 	bl	8001a54 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e159      	b.n	8001dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 8148 	bne.w	8001dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d005      	beq.n	8001b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d130      	bne.n	8001bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 0201 	and.w	r2, r3, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d017      	beq.n	8001bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d123      	bne.n	8001c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80a2 	beq.w	8001dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b57      	ldr	r3, [pc, #348]	@ (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a56      	ldr	r2, [pc, #344]	@ (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b54      	ldr	r3, [pc, #336]	@ (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca2:	4a52      	ldr	r2, [pc, #328]	@ (8001dec <HAL_GPIO_Init+0x2ec>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a49      	ldr	r2, [pc, #292]	@ (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_GPIO_Init+0x202>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a48      	ldr	r2, [pc, #288]	@ (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0x1fe>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a47      	ldr	r2, [pc, #284]	@ (8001df8 <HAL_GPIO_Init+0x2f8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a46      	ldr	r2, [pc, #280]	@ (8001dfc <HAL_GPIO_Init+0x2fc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_GPIO_Init+0x1f6>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a45      	ldr	r2, [pc, #276]	@ (8001e00 <HAL_GPIO_Init+0x300>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_GPIO_Init+0x1f2>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001d02:	2300      	movs	r3, #0
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d14:	4935      	ldr	r1, [pc, #212]	@ (8001dec <HAL_GPIO_Init+0x2ec>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d22:	4b38      	ldr	r3, [pc, #224]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d46:	4a2f      	ldr	r2, [pc, #188]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d70:	4a24      	ldr	r2, [pc, #144]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d76:	4b23      	ldr	r3, [pc, #140]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da0:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	f67f aea2 	bls.w	8001b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3724      	adds	r7, #36	@ 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e267      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d075      	beq.n	8001f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5a:	4b88      	ldr	r3, [pc, #544]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d00c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e66:	4b85      	ldr	r3, [pc, #532]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d112      	bne.n	8001e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e72:	4b82      	ldr	r3, [pc, #520]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e7e:	d10b      	bne.n	8001e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	4b7e      	ldr	r3, [pc, #504]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d05b      	beq.n	8001f44 <HAL_RCC_OscConfig+0x108>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d157      	bne.n	8001f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e242      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x74>
 8001ea2:	4b76      	ldr	r3, [pc, #472]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a75      	ldr	r2, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e01d      	b.n	8001eec <HAL_RCC_OscConfig+0xb0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x98>
 8001eba:	4b70      	ldr	r3, [pc, #448]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6f      	ldr	r2, [pc, #444]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6c      	ldr	r2, [pc, #432]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0xb0>
 8001ed4:	4b69      	ldr	r3, [pc, #420]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a68      	ldr	r2, [pc, #416]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b66      	ldr	r3, [pc, #408]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a65      	ldr	r2, [pc, #404]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fd12 	bl	800191c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fd0e 	bl	800191c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	@ 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e207      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0xc0>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fcfe 	bl	800191c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fcfa 	bl	800191c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1f3      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	4b51      	ldr	r3, [pc, #324]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0xe8>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d063      	beq.n	800201a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f52:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5e:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d11c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d116      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	4b41      	ldr	r3, [pc, #260]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x152>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e1c7      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4937      	ldr	r1, [pc, #220]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	e03a      	b.n	800201a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fac:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <HAL_RCC_OscConfig+0x244>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fcb3 	bl	800191c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff fcaf 	bl	800191c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1a8      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b28      	ldr	r3, [pc, #160]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4925      	ldr	r1, [pc, #148]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b24      	ldr	r3, [pc, #144]	@ (8002080 <HAL_RCC_OscConfig+0x244>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fc92 	bl	800191c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fc8e 	bl	800191c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e187      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d036      	beq.n	8002094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_RCC_OscConfig+0x248>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff fc72 	bl	800191c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff fc6e 	bl	800191c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e167      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8002050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x200>
 800205a:	e01b      	b.n	8002094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_OscConfig+0x248>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff fc5b 	bl	800191c <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	e00e      	b.n	8002088 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206a:	f7ff fc57 	bl	800191c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d907      	bls.n	8002088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e150      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
 800207c:	40023800 	.word	0x40023800
 8002080:	42470000 	.word	0x42470000
 8002084:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b88      	ldr	r3, [pc, #544]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ea      	bne.n	800206a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8097 	beq.w	80021d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b81      	ldr	r3, [pc, #516]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b7d      	ldr	r3, [pc, #500]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a7c      	ldr	r2, [pc, #496]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b7a      	ldr	r3, [pc, #488]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b77      	ldr	r3, [pc, #476]	@ (80022b0 <HAL_RCC_OscConfig+0x474>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b74      	ldr	r3, [pc, #464]	@ (80022b0 <HAL_RCC_OscConfig+0x474>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a73      	ldr	r2, [pc, #460]	@ (80022b0 <HAL_RCC_OscConfig+0x474>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7ff fc17 	bl	800191c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7ff fc13 	bl	800191c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e10c      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b6a      	ldr	r3, [pc, #424]	@ (80022b0 <HAL_RCC_OscConfig+0x474>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x2ea>
 8002118:	4b64      	ldr	r3, [pc, #400]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	4a63      	ldr	r2, [pc, #396]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	@ 0x70
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x324>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x30c>
 800212e:	4b5f      	ldr	r3, [pc, #380]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	4a5e      	ldr	r2, [pc, #376]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	@ 0x70
 800213a:	4b5c      	ldr	r3, [pc, #368]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213e:	4a5b      	ldr	r2, [pc, #364]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6713      	str	r3, [r2, #112]	@ 0x70
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x324>
 8002148:	4b58      	ldr	r3, [pc, #352]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214c:	4a57      	ldr	r2, [pc, #348]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6713      	str	r3, [r2, #112]	@ 0x70
 8002154:	4b55      	ldr	r3, [pc, #340]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002158:	4a54      	ldr	r2, [pc, #336]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff fbd8 	bl	800191c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff fbd4 	bl	800191c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0cb      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	4b49      	ldr	r3, [pc, #292]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0ee      	beq.n	8002170 <HAL_RCC_OscConfig+0x334>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7ff fbc2 	bl	800191c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff fbbe 	bl	800191c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0b5      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	4b3e      	ldr	r3, [pc, #248]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ee      	bne.n	800219c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	4a38      	ldr	r2, [pc, #224]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80021ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a1 	beq.w	800231c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021da:	4b34      	ldr	r3, [pc, #208]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d05c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d141      	bne.n	8002272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b31      	ldr	r3, [pc, #196]	@ (80022b4 <HAL_RCC_OscConfig+0x478>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fb92 	bl	800191c <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff fb8e 	bl	800191c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e087      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	3b01      	subs	r3, #1
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	491b      	ldr	r1, [pc, #108]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_RCC_OscConfig+0x478>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7ff fb67 	bl	800191c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002252:	f7ff fb63 	bl	800191c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e05c      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x416>
 8002270:	e054      	b.n	800231c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_RCC_OscConfig+0x478>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fb50 	bl	800191c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff fb4c 	bl	800191c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e045      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x444>
 800229e:	e03d      	b.n	800231c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e038      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000
 80022b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_RCC_OscConfig+0x4ec>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d028      	beq.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d121      	bne.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d11a      	bne.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022e8:	4013      	ands	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d111      	bne.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	3b01      	subs	r3, #1
 8002302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800

0800232c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0cc      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b68      	ldr	r3, [pc, #416]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d90c      	bls.n	8002368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b65      	ldr	r3, [pc, #404]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a58      	ldr	r2, [pc, #352]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800238a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d044      	beq.n	800244c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d119      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e067      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b37      	ldr	r3, [pc, #220]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4934      	ldr	r1, [pc, #208]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800241c:	f7ff fa7e 	bl	800191c <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7ff fa7a 	bl	800191c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e04f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d20c      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	@ (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f9de 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	40023800 	.word	0x40023800
 80024ec:	080033bc 	.word	0x080033bc
 80024f0:	20000004 	.word	0x20000004
 80024f4:	20000008 	.word	0x20000008

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b090      	sub	sp, #64	@ 0x40
 80024fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
 8002504:	2300      	movs	r3, #0
 8002506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002508:	2300      	movs	r3, #0
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002510:	4b59      	ldr	r3, [pc, #356]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d00d      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x40>
 800251c:	2b08      	cmp	r3, #8
 800251e:	f200 80a1 	bhi.w	8002664 <HAL_RCC_GetSysClockFreq+0x16c>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x34>
 8002526:	2b04      	cmp	r3, #4
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x3a>
 800252a:	e09b      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b53      	ldr	r3, [pc, #332]	@ (800267c <HAL_RCC_GetSysClockFreq+0x184>)
 800252e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002530:	e09b      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002532:	4b53      	ldr	r3, [pc, #332]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x188>)
 8002534:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002536:	e098      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002538:	4b4f      	ldr	r3, [pc, #316]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002542:	4b4d      	ldr	r3, [pc, #308]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d028      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254e:	4b4a      	ldr	r3, [pc, #296]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	2200      	movs	r2, #0
 8002556:	623b      	str	r3, [r7, #32]
 8002558:	627a      	str	r2, [r7, #36]	@ 0x24
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002560:	2100      	movs	r1, #0
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x188>)
 8002564:	fb03 f201 	mul.w	r2, r3, r1
 8002568:	2300      	movs	r3, #0
 800256a:	fb00 f303 	mul.w	r3, r0, r3
 800256e:	4413      	add	r3, r2
 8002570:	4a43      	ldr	r2, [pc, #268]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x188>)
 8002572:	fba0 1202 	umull	r1, r2, r0, r2
 8002576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002578:	460a      	mov	r2, r1
 800257a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800257c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800257e:	4413      	add	r3, r2
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002584:	2200      	movs	r2, #0
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	61fa      	str	r2, [r7, #28]
 800258a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800258e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002592:	f7fd fe21 	bl	80001d8 <__aeabi_uldivmod>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4613      	mov	r3, r2
 800259c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800259e:	e053      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a0:	4b35      	ldr	r3, [pc, #212]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	2200      	movs	r2, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	617a      	str	r2, [r7, #20]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025b2:	f04f 0b00 	mov.w	fp, #0
 80025b6:	4652      	mov	r2, sl
 80025b8:	465b      	mov	r3, fp
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	ebb2 080a 	subs.w	r8, r2, sl
 80025d2:	eb63 090b 	sbc.w	r9, r3, fp
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ea:	ebb2 0408 	subs.w	r4, r2, r8
 80025ee:	eb63 0509 	sbc.w	r5, r3, r9
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	00eb      	lsls	r3, r5, #3
 80025fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002600:	00e2      	lsls	r2, r4, #3
 8002602:	4614      	mov	r4, r2
 8002604:	461d      	mov	r5, r3
 8002606:	eb14 030a 	adds.w	r3, r4, sl
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	eb45 030b 	adc.w	r3, r5, fp
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800261e:	4629      	mov	r1, r5
 8002620:	028b      	lsls	r3, r1, #10
 8002622:	4621      	mov	r1, r4
 8002624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002628:	4621      	mov	r1, r4
 800262a:	028a      	lsls	r2, r1, #10
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002632:	2200      	movs	r2, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	60fa      	str	r2, [r7, #12]
 8002638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800263c:	f7fd fdcc 	bl	80001d8 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	3301      	adds	r3, #1
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002658:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800265a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_RCC_GetSysClockFreq+0x184>)
 8002666:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800266c:	4618      	mov	r0, r3
 800266e:	3740      	adds	r7, #64	@ 0x40
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	00f42400 	.word	0x00f42400
 8002680:	017d7840 	.word	0x017d7840

08002684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07b      	b.n	800278e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026a6:	d009      	beq.n	80026bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
 80026ae:	e005      	b.n	80026bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe ffa8 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002740:	ea42 0103 	orr.w	r1, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 0104 	and.w	r1, r3, #4
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	f003 0210 	and.w	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b088      	sub	sp, #32
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_SPI_Transmit+0x22>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e12d      	b.n	8002a14 <HAL_SPI_Transmit+0x27e>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c0:	f7ff f8ac 	bl	800191c <HAL_GetTick>
 80027c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d002      	beq.n	80027dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027da:	e116      	b.n	8002a0a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_SPI_Transmit+0x52>
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027ec:	e10d      	b.n	8002a0a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002834:	d10f      	bne.n	8002856 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002844:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002854:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002860:	2b40      	cmp	r3, #64	@ 0x40
 8002862:	d007      	beq.n	8002874 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002872:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800287c:	d14f      	bne.n	800291e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_SPI_Transmit+0xf6>
 8002886:	8afb      	ldrh	r3, [r7, #22]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d142      	bne.n	8002912 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028b0:	e02f      	b.n	8002912 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d112      	bne.n	80028e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	881a      	ldrh	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d0:	1c9a      	adds	r2, r3, #2
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80028e4:	e015      	b.n	8002912 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028e6:	f7ff f819 	bl	800191c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d803      	bhi.n	80028fe <HAL_SPI_Transmit+0x168>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d102      	bne.n	8002904 <HAL_SPI_Transmit+0x16e>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002910:	e07b      	b.n	8002a0a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ca      	bne.n	80028b2 <HAL_SPI_Transmit+0x11c>
 800291c:	e050      	b.n	80029c0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_SPI_Transmit+0x196>
 8002926:	8afb      	ldrh	r3, [r7, #22]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d144      	bne.n	80029b6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002952:	e030      	b.n	80029b6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	d113      	bne.n	800298a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002988:	e015      	b.n	80029b6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800298a:	f7fe ffc7 	bl	800191c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d803      	bhi.n	80029a2 <HAL_SPI_Transmit+0x20c>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d102      	bne.n	80029a8 <HAL_SPI_Transmit+0x212>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80029b4:	e029      	b.n	8002a0a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1c9      	bne.n	8002954 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fbdf 	bl	8003188 <SPI_EndRxTxTransaction>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e003      	b.n	8002a0a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002a12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d002      	beq.n	8002a42 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a40:	e0fb      	b.n	8002c3a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a4a:	d112      	bne.n	8002a72 <HAL_SPI_Receive+0x56>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10e      	bne.n	8002a72 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2204      	movs	r2, #4
 8002a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f8ef 	bl	8002c4c <HAL_SPI_TransmitReceive>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	e0e8      	b.n	8002c44 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_SPI_Receive+0x64>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e0e1      	b.n	8002c44 <HAL_SPI_Receive+0x228>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a88:	f7fe ff48 	bl	800191c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_SPI_Receive+0x7e>
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a9e:	e0cc      	b.n	8002c3a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ae6:	d10f      	bne.n	8002b08 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002af6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b12:	2b40      	cmp	r3, #64	@ 0x40
 8002b14:	d007      	beq.n	8002b26 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d16a      	bne.n	8002c04 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b2e:	e032      	b.n	8002b96 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d115      	bne.n	8002b6a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f103 020c 	add.w	r2, r3, #12
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b68:	e015      	b.n	8002b96 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b6a:	f7fe fed7 	bl	800191c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d803      	bhi.n	8002b82 <HAL_SPI_Receive+0x166>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d102      	bne.n	8002b88 <HAL_SPI_Receive+0x16c>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002b94:	e051      	b.n	8002c3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1c7      	bne.n	8002b30 <HAL_SPI_Receive+0x114>
 8002ba0:	e035      	b.n	8002c0e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d113      	bne.n	8002bd8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc2:	1c9a      	adds	r2, r3, #2
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bd6:	e015      	b.n	8002c04 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bd8:	f7fe fea0 	bl	800191c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d803      	bhi.n	8002bf0 <HAL_SPI_Receive+0x1d4>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d102      	bne.n	8002bf6 <HAL_SPI_Receive+0x1da>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002c02:	e01a      	b.n	8002c3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1c9      	bne.n	8002ba2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fa52 	bl	80030bc <SPI_EndRxTransaction>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	75fb      	strb	r3, [r7, #23]
 8002c30:	e003      	b.n	8002c3a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08c      	sub	sp, #48	@ 0x30
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_SPI_TransmitReceive+0x26>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e198      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x358>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c7a:	f7fe fe4f 	bl	800191c <HAL_GetTick>
 8002c7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d00f      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x70>
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ca2:	d107      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d103      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x68>
 8002cac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d003      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002cba:	e16d      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_SPI_TransmitReceive+0x82>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_SPI_TransmitReceive+0x82>
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002cd4:	e160      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d003      	beq.n	8002cea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	887a      	ldrh	r2, [r7, #2]
 8002cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	887a      	ldrh	r2, [r7, #2]
 8002d12:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2a:	2b40      	cmp	r3, #64	@ 0x40
 8002d2c:	d007      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d46:	d17c      	bne.n	8002e42 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_TransmitReceive+0x10a>
 8002d50:	8b7b      	ldrh	r3, [r7, #26]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d16a      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	1c9a      	adds	r2, r3, #2
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d7a:	e057      	b.n	8002e2c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d11b      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x176>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x176>
 8002d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d113      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d119      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x1b8>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d014      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	b292      	uxth	r2, r2
 8002de6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dec:	1c9a      	adds	r2, r3, #2
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e00:	2301      	movs	r3, #1
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e04:	f7fe fd8a 	bl	800191c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d80b      	bhi.n	8002e2c <HAL_SPI_TransmitReceive+0x1e0>
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d007      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002e2a:	e0b5      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1a2      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x130>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d19d      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x130>
 8002e40:	e080      	b.n	8002f44 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_SPI_TransmitReceive+0x204>
 8002e4a:	8b7b      	ldrh	r3, [r7, #26]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d16f      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	7812      	ldrb	r2, [r2, #0]
 8002e5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e76:	e05b      	b.n	8002f30 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d11c      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x274>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d017      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x274>
 8002e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d114      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	330c      	adds	r3, #12
 8002ea0:	7812      	ldrb	r2, [r2, #0]
 8002ea2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d119      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x2b6>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d014      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002efe:	2301      	movs	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f02:	f7fe fd0b 	bl	800191c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d803      	bhi.n	8002f1a <HAL_SPI_TransmitReceive+0x2ce>
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x2d4>
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002f2e:	e033      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d19e      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x22c>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d199      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f91d 	bl	8003188 <SPI_EndRxTxTransaction>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002f60:	e01a      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8e:	e003      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002fa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3730      	adds	r7, #48	@ 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fbc:	f7fe fcae 	bl	800191c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fcc:	f7fe fca6 	bl	800191c <HAL_GetTick>
 8002fd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fd2:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	015b      	lsls	r3, r3, #5
 8002fd8:	0d1b      	lsrs	r3, r3, #20
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fe2:	e054      	b.n	800308e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d050      	beq.n	800308e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fec:	f7fe fc96 	bl	800191c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d902      	bls.n	8003002 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d13d      	bne.n	800307e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003010:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800301a:	d111      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x94>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003024:	d004      	beq.n	8003030 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302e:	d107      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003048:	d10f      	bne.n	800306a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e017      	b.n	80030ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3b01      	subs	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4013      	ands	r3, r2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	bf0c      	ite	eq
 800309e:	2301      	moveq	r3, #1
 80030a0:	2300      	movne	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d19b      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000004 	.word	0x20000004

080030bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030d0:	d111      	bne.n	80030f6 <SPI_EndRxTransaction+0x3a>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030da:	d004      	beq.n	80030e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e4:	d107      	bne.n	80030f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030fe:	d12a      	bne.n	8003156 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003108:	d012      	beq.n	8003130 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	2180      	movs	r1, #128	@ 0x80
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff ff49 	bl	8002fac <SPI_WaitFlagStateUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02d      	beq.n	800317c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e026      	b.n	800317e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	2101      	movs	r1, #1
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff ff36 	bl	8002fac <SPI_WaitFlagStateUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01a      	beq.n	800317c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e013      	b.n	800317e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2200      	movs	r2, #0
 800315e:	2101      	movs	r1, #1
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ff23 	bl	8002fac <SPI_WaitFlagStateUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e000      	b.n	800317e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2201      	movs	r2, #1
 800319c:	2102      	movs	r1, #2
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff ff04 	bl	8002fac <SPI_WaitFlagStateUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e032      	b.n	8003220 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <SPI_EndRxTxTransaction+0xa0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <SPI_EndRxTxTransaction+0xa4>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	0d5b      	lsrs	r3, r3, #21
 80031c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d8:	d112      	bne.n	8003200 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2180      	movs	r1, #128	@ 0x80
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff fee1 	bl	8002fac <SPI_WaitFlagStateUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d016      	beq.n	800321e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e00f      	b.n	8003220 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3b01      	subs	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	2b80      	cmp	r3, #128	@ 0x80
 8003218:	d0f2      	beq.n	8003200 <SPI_EndRxTxTransaction+0x78>
 800321a:	e000      	b.n	800321e <SPI_EndRxTxTransaction+0x96>
        break;
 800321c:	bf00      	nop
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000004 	.word	0x20000004
 800322c:	165e9f81 	.word	0x165e9f81

08003230 <_ZdlPvj>:
 8003230:	f000 b800 	b.w	8003234 <_ZdlPv>

08003234 <_ZdlPv>:
 8003234:	f000 b800 	b.w	8003238 <free>

08003238 <free>:
 8003238:	4b02      	ldr	r3, [pc, #8]	@ (8003244 <free+0xc>)
 800323a:	4601      	mov	r1, r0
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	f000 b83d 	b.w	80032bc <_free_r>
 8003242:	bf00      	nop
 8003244:	20000010 	.word	0x20000010

08003248 <__malloc_lock>:
 8003248:	4801      	ldr	r0, [pc, #4]	@ (8003250 <__malloc_lock+0x8>)
 800324a:	f000 b835 	b.w	80032b8 <__retarget_lock_acquire_recursive>
 800324e:	bf00      	nop
 8003250:	200002e4 	.word	0x200002e4

08003254 <__malloc_unlock>:
 8003254:	4801      	ldr	r0, [pc, #4]	@ (800325c <__malloc_unlock+0x8>)
 8003256:	f000 b830 	b.w	80032ba <__retarget_lock_release_recursive>
 800325a:	bf00      	nop
 800325c:	200002e4 	.word	0x200002e4

08003260 <memset>:
 8003260:	4402      	add	r2, r0
 8003262:	4603      	mov	r3, r0
 8003264:	4293      	cmp	r3, r2
 8003266:	d100      	bne.n	800326a <memset+0xa>
 8003268:	4770      	bx	lr
 800326a:	f803 1b01 	strb.w	r1, [r3], #1
 800326e:	e7f9      	b.n	8003264 <memset+0x4>

08003270 <__libc_init_array>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4d0d      	ldr	r5, [pc, #52]	@ (80032a8 <__libc_init_array+0x38>)
 8003274:	4c0d      	ldr	r4, [pc, #52]	@ (80032ac <__libc_init_array+0x3c>)
 8003276:	1b64      	subs	r4, r4, r5
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	2600      	movs	r6, #0
 800327c:	42a6      	cmp	r6, r4
 800327e:	d109      	bne.n	8003294 <__libc_init_array+0x24>
 8003280:	4d0b      	ldr	r5, [pc, #44]	@ (80032b0 <__libc_init_array+0x40>)
 8003282:	4c0c      	ldr	r4, [pc, #48]	@ (80032b4 <__libc_init_array+0x44>)
 8003284:	f000 f864 	bl	8003350 <_init>
 8003288:	1b64      	subs	r4, r4, r5
 800328a:	10a4      	asrs	r4, r4, #2
 800328c:	2600      	movs	r6, #0
 800328e:	42a6      	cmp	r6, r4
 8003290:	d105      	bne.n	800329e <__libc_init_array+0x2e>
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	f855 3b04 	ldr.w	r3, [r5], #4
 8003298:	4798      	blx	r3
 800329a:	3601      	adds	r6, #1
 800329c:	e7ee      	b.n	800327c <__libc_init_array+0xc>
 800329e:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a2:	4798      	blx	r3
 80032a4:	3601      	adds	r6, #1
 80032a6:	e7f2      	b.n	800328e <__libc_init_array+0x1e>
 80032a8:	080033d4 	.word	0x080033d4
 80032ac:	080033d4 	.word	0x080033d4
 80032b0:	080033d4 	.word	0x080033d4
 80032b4:	080033dc 	.word	0x080033dc

080032b8 <__retarget_lock_acquire_recursive>:
 80032b8:	4770      	bx	lr

080032ba <__retarget_lock_release_recursive>:
 80032ba:	4770      	bx	lr

080032bc <_free_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	4605      	mov	r5, r0
 80032c0:	2900      	cmp	r1, #0
 80032c2:	d041      	beq.n	8003348 <_free_r+0x8c>
 80032c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c8:	1f0c      	subs	r4, r1, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bfb8      	it	lt
 80032ce:	18e4      	addlt	r4, r4, r3
 80032d0:	f7ff ffba 	bl	8003248 <__malloc_lock>
 80032d4:	4a1d      	ldr	r2, [pc, #116]	@ (800334c <_free_r+0x90>)
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	b933      	cbnz	r3, 80032e8 <_free_r+0x2c>
 80032da:	6063      	str	r3, [r4, #4]
 80032dc:	6014      	str	r4, [r2, #0]
 80032de:	4628      	mov	r0, r5
 80032e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e4:	f7ff bfb6 	b.w	8003254 <__malloc_unlock>
 80032e8:	42a3      	cmp	r3, r4
 80032ea:	d908      	bls.n	80032fe <_free_r+0x42>
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	1821      	adds	r1, r4, r0
 80032f0:	428b      	cmp	r3, r1
 80032f2:	bf01      	itttt	eq
 80032f4:	6819      	ldreq	r1, [r3, #0]
 80032f6:	685b      	ldreq	r3, [r3, #4]
 80032f8:	1809      	addeq	r1, r1, r0
 80032fa:	6021      	streq	r1, [r4, #0]
 80032fc:	e7ed      	b.n	80032da <_free_r+0x1e>
 80032fe:	461a      	mov	r2, r3
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	b10b      	cbz	r3, 8003308 <_free_r+0x4c>
 8003304:	42a3      	cmp	r3, r4
 8003306:	d9fa      	bls.n	80032fe <_free_r+0x42>
 8003308:	6811      	ldr	r1, [r2, #0]
 800330a:	1850      	adds	r0, r2, r1
 800330c:	42a0      	cmp	r0, r4
 800330e:	d10b      	bne.n	8003328 <_free_r+0x6c>
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	4401      	add	r1, r0
 8003314:	1850      	adds	r0, r2, r1
 8003316:	4283      	cmp	r3, r0
 8003318:	6011      	str	r1, [r2, #0]
 800331a:	d1e0      	bne.n	80032de <_free_r+0x22>
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	6053      	str	r3, [r2, #4]
 8003322:	4408      	add	r0, r1
 8003324:	6010      	str	r0, [r2, #0]
 8003326:	e7da      	b.n	80032de <_free_r+0x22>
 8003328:	d902      	bls.n	8003330 <_free_r+0x74>
 800332a:	230c      	movs	r3, #12
 800332c:	602b      	str	r3, [r5, #0]
 800332e:	e7d6      	b.n	80032de <_free_r+0x22>
 8003330:	6820      	ldr	r0, [r4, #0]
 8003332:	1821      	adds	r1, r4, r0
 8003334:	428b      	cmp	r3, r1
 8003336:	bf04      	itt	eq
 8003338:	6819      	ldreq	r1, [r3, #0]
 800333a:	685b      	ldreq	r3, [r3, #4]
 800333c:	6063      	str	r3, [r4, #4]
 800333e:	bf04      	itt	eq
 8003340:	1809      	addeq	r1, r1, r0
 8003342:	6021      	streq	r1, [r4, #0]
 8003344:	6054      	str	r4, [r2, #4]
 8003346:	e7ca      	b.n	80032de <_free_r+0x22>
 8003348:	bd38      	pop	{r3, r4, r5, pc}
 800334a:	bf00      	nop
 800334c:	200001a8 	.word	0x200001a8

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
