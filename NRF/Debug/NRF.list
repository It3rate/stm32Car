
NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800aa4c  0800aa4c  0000ba4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab24  0800ab24  0000c160  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab24  0800ab24  0000bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab2c  0800ab2c  0000c160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ab2c  0800ab2c  0000bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ab34  0800ab34  0000bb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800ab3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa0  20000160  0800ac9c  0000c160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002100  0800ac9c  0000d100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019db0  00000000  00000000  0000c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000473f  00000000  00000000  00025f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0002a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f16  00000000  00000000  0002ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e10f  00000000  00000000  0002c99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b893  00000000  00000000  0004aaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b082  00000000  00000000  00066340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001013c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f8  00000000  00000000  00101408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00106800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800aa34 	.word	0x0800aa34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	0800aa34 	.word	0x0800aa34

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_UART_RxCpltCallback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == KEY_Pin) {
		led_state = HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(RX_BUF, sizeof(RX_BUF));
 80004d0:	2140      	movs	r1, #64	@ 0x40
 80004d2:	4803      	ldr	r0, [pc, #12]	@ (80004e0 <HAL_UART_RxCpltCallback+0x18>)
 80004d4:	f009 fdcc 	bl	800a070 <CDC_Transmit_FS>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000017c 	.word	0x2000017c

080004e4 <_Z9inter_cmdv>:

void inter_cmd(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
    uint8_t cmd[]={0xfd,0xfc,0xfb,0xfa,0x04,0x00,0xff,0x00,0x01,0x00,0x04,0x03,0x02,0x01};
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <_Z9inter_cmdv+0x3c>)
 80004ec:	463c      	mov	r4, r7
 80004ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f0:	c407      	stmia	r4!, {r0, r1, r2}
 80004f2:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart1,(uint8_t *)&cmd,sizeof(cmd),0xFFFF);
 80004f4:	4639      	mov	r1, r7
 80004f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004fa:	220e      	movs	r2, #14
 80004fc:	4809      	ldr	r0, [pc, #36]	@ (8000524 <_Z9inter_cmdv+0x40>)
 80004fe:	f005 f9eb 	bl	80058d8 <HAL_UART_Transmit>
    HAL_Delay(150);
 8000502:	2096      	movs	r0, #150	@ 0x96
 8000504:	f001 fc58 	bl	8001db8 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t *)&cmd,sizeof(cmd),0xFFFF);
 8000508:	4639      	mov	r1, r7
 800050a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800050e:	220e      	movs	r2, #14
 8000510:	4804      	ldr	r0, [pc, #16]	@ (8000524 <_Z9inter_cmdv+0x40>)
 8000512:	f005 f9e1 	bl	80058d8 <HAL_UART_Transmit>
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	bf00      	nop
 8000520:	0800aa4c 	.word	0x0800aa4c
 8000524:	20000390 	.word	0x20000390

08000528 <_Z9close_cmdv>:

void close_cmd(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
    uint8_t close_cmd[]={0xfd,0xfc,0xfb,0xfa,0x02,0x00,0xfe,0x00,0x04,0x03,0x02,0x01};
 800052e:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <_Z9close_cmdv+0x28>)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	ca07      	ldmia	r2, {r0, r1, r2}
 8000534:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_UART_Transmit(&huart1,(uint8_t *)&close_cmd,sizeof(close_cmd),0xFFFF);
 8000538:	1d39      	adds	r1, r7, #4
 800053a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800053e:	220c      	movs	r2, #12
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <_Z9close_cmdv+0x2c>)
 8000542:	f005 f9c9 	bl	80058d8 <HAL_UART_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	0800aa5c 	.word	0x0800aa5c
 8000554:	20000390 	.word	0x20000390

08000558 <_Z15RD_03_Write_cmdhh>:

void RD_03_Write_cmd(uint8_t parameter,uint8_t data)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
    inter_cmd();
 8000568:	f7ff ffbc 	bl	80004e4 <_Z9inter_cmdv>
    uint8_t Write_cmd[]={0xfd,0xfc,0xfb,0xfa,0x08,0x00,0x07,0x00,parameter,0x00,data,0x00,0x00,0x00,0x04,0x03,0x02,0x01};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	821a      	strh	r2, [r3, #16]
 800057c:	23fd      	movs	r3, #253	@ 0xfd
 800057e:	733b      	strb	r3, [r7, #12]
 8000580:	23fc      	movs	r3, #252	@ 0xfc
 8000582:	737b      	strb	r3, [r7, #13]
 8000584:	23fb      	movs	r3, #251	@ 0xfb
 8000586:	73bb      	strb	r3, [r7, #14]
 8000588:	23fa      	movs	r3, #250	@ 0xfa
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	2308      	movs	r3, #8
 800058e:	743b      	strb	r3, [r7, #16]
 8000590:	2307      	movs	r3, #7
 8000592:	74bb      	strb	r3, [r7, #18]
 8000594:	2304      	movs	r3, #4
 8000596:	76bb      	strb	r3, [r7, #26]
 8000598:	2303      	movs	r3, #3
 800059a:	76fb      	strb	r3, [r7, #27]
 800059c:	2302      	movs	r3, #2
 800059e:	773b      	strb	r3, [r7, #28]
 80005a0:	2301      	movs	r3, #1
 80005a2:	777b      	strb	r3, [r7, #29]
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	753b      	strb	r3, [r7, #20]
 80005a8:	79bb      	ldrb	r3, [r7, #6]
 80005aa:	75bb      	strb	r3, [r7, #22]
    HAL_UART_Transmit(&huart1,(uint8_t *)&Write_cmd,sizeof(Write_cmd),0xFFFF);
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005b4:	2212      	movs	r2, #18
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <_Z15RD_03_Write_cmdhh+0x70>)
 80005b8:	f005 f98e 	bl	80058d8 <HAL_UART_Transmit>
    close_cmd();
 80005bc:	f7ff ffb4 	bl	8000528 <_Z9close_cmdv>
}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000390 	.word	0x20000390

080005cc <_Z12EventLoopCppv>:

//#define IS_TX

void EventLoopCpp() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0
	tmDevice.test();
 80005d2:	483e      	ldr	r0, [pc, #248]	@ (80006cc <_Z12EventLoopCppv+0x100>)
 80005d4:	f000 fd80 	bl	80010d8 <_ZN6Tm16384testEv>
	nrfDevice.Init();
 80005d8:	483d      	ldr	r0, [pc, #244]	@ (80006d0 <_Z12EventLoopCppv+0x104>)
 80005da:	f000 fa35 	bl	8000a48 <_ZN6NRF24L4InitEv>
	nrfDevice.Check();
 80005de:	483c      	ldr	r0, [pc, #240]	@ (80006d0 <_Z12EventLoopCppv+0x104>)
 80005e0:	f000 fa96 	bl	8000b10 <_ZN6NRF24L5CheckEv>
	uint8_t payload_length = 5;
 80005e4:	2305      	movs	r3, #5
 80005e6:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t nRF24_payload[32];

	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)_adcBuf, ADC_BUF_LEN);
	RD_03_Write_cmd(1,2);
 80005ea:	2102      	movs	r1, #2
 80005ec:	2001      	movs	r0, #1
 80005ee:	f7ff ffb3 	bl	8000558 <_Z15RD_03_Write_cmdhh>
	HAL_UART_Receive_IT(&huart1,&RX_temp,1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	4937      	ldr	r1, [pc, #220]	@ (80006d4 <_Z12EventLoopCppv+0x108>)
 80005f6:	4838      	ldr	r0, [pc, #224]	@ (80006d8 <_Z12EventLoopCppv+0x10c>)
 80005f8:	f005 f9f9 	bl	80059ee <HAL_UART_Receive_IT>
#ifdef IS_TX
	uint32_t count = 0;
	NRF24L::TXResult tx_res;
	nrfDevice.InitTX();
#else
	nrfDevice.InitRX(nRF24_payload, payload_length);
 80005fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4832      	ldr	r0, [pc, #200]	@ (80006d0 <_Z12EventLoopCppv+0x104>)
 8000606:	f000 fced 	bl	8000fe4 <_ZN6NRF24L6InitRXEPhh>
#endif

	while (1) {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
 800060a:	4b34      	ldr	r3, [pc, #208]	@ (80006dc <_Z12EventLoopCppv+0x110>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000614:	4832      	ldr	r0, [pc, #200]	@ (80006e0 <_Z12EventLoopCppv+0x114>)
 8000616:	f002 fc77 	bl	8002f08 <HAL_GPIO_WritePin>
	CDC_Transmit_FS(buffer, sizeof(buffer));
 800061a:	210d      	movs	r1, #13
 800061c:	4831      	ldr	r0, [pc, #196]	@ (80006e4 <_Z12EventLoopCppv+0x118>)
 800061e:	f009 fd27 	bl	800a070 <CDC_Transmit_FS>
		HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	@ 0x64
 8000624:	f001 fbc8 	bl	8001db8 <HAL_Delay>

		uint8_t btns = tmDevice.readButtons();
 8000628:	4828      	ldr	r0, [pc, #160]	@ (80006cc <_Z12EventLoopCppv+0x100>)
 800062a:	f000 fe55 	bl	80012d8 <_ZN6Tm163811readButtonsEv>
 800062e:	4603      	mov	r3, r0
 8000630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		for (int i = 0; i < 8; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
 8000638:	e017      	b.n	800066a <_Z12EventLoopCppv+0x9e>
			bool val = (btns & (1 << i)) > 0 ? true : false;
 800063a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800063e:	2101      	movs	r1, #1
 8000640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	4013      	ands	r3, r2
 8000648:	2b00      	cmp	r3, #0
 800064a:	bfcc      	ite	gt
 800064c:	2301      	movgt	r3, #1
 800064e:	2300      	movle	r3, #0
 8000650:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			tmDevice.writeLed(i, val);
 8000654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800065c:	4619      	mov	r1, r3
 800065e:	481b      	ldr	r0, [pc, #108]	@ (80006cc <_Z12EventLoopCppv+0x100>)
 8000660:	f000 fdfa 	bl	8001258 <_ZN6Tm16388writeLedEhb>
		for (int i = 0; i < 8; i++) {
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	3301      	adds	r3, #1
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
 800066a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066c:	2b07      	cmp	r3, #7
 800066e:	dde4      	ble.n	800063a <_Z12EventLoopCppv+0x6e>
		default:
			break;
	}
	count++;
#else // RX
		uint8_t status = nrfDevice.GetStatus_RXFIFO();
 8000670:	4817      	ldr	r0, [pc, #92]	@ (80006d0 <_Z12EventLoopCppv+0x104>)
 8000672:	f000 fc00 	bl	8000e76 <_ZN6NRF24L16GetStatus_RXFIFOEv>
 8000676:	4603      	mov	r3, r0
 8000678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		if (status != NRF24L::FifoStatus::EMPTY) {
 800067c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000680:	2b01      	cmp	r3, #1
 8000682:	d0c2      	beq.n	800060a <_Z12EventLoopCppv+0x3e>
			nrfDevice.ReadPayload(nRF24_payload, &payload_length);
 8000684:	f107 0220 	add.w	r2, r7, #32
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4810      	ldr	r0, [pc, #64]	@ (80006d0 <_Z12EventLoopCppv+0x104>)
 800068e:	f000 fc97 	bl	8000fc0 <_ZN6NRF24L11ReadPayloadEPhS0_>
			nrfDevice.ClearIRQFlags();
 8000692:	480f      	ldr	r0, [pc, #60]	@ (80006d0 <_Z12EventLoopCppv+0x104>)
 8000694:	f000 fc19 	bl	8000eca <_ZN6NRF24L13ClearIRQFlagsEv>

			tmDevice.writeHexTo(6, 2, nRF24_payload[0]);
 8000698:	783b      	ldrb	r3, [r7, #0]
 800069a:	2202      	movs	r2, #2
 800069c:	2106      	movs	r1, #6
 800069e:	480b      	ldr	r0, [pc, #44]	@ (80006cc <_Z12EventLoopCppv+0x100>)
 80006a0:	f000 fdf5 	bl	800128e <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(4, 2, nRF24_payload[1]);
 80006a4:	787b      	ldrb	r3, [r7, #1]
 80006a6:	2202      	movs	r2, #2
 80006a8:	2104      	movs	r1, #4
 80006aa:	4808      	ldr	r0, [pc, #32]	@ (80006cc <_Z12EventLoopCppv+0x100>)
 80006ac:	f000 fdef 	bl	800128e <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(2, 2, nRF24_payload[2]);
 80006b0:	78bb      	ldrb	r3, [r7, #2]
 80006b2:	2202      	movs	r2, #2
 80006b4:	2102      	movs	r1, #2
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <_Z12EventLoopCppv+0x100>)
 80006b8:	f000 fde9 	bl	800128e <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(0, 2, nRF24_payload[3]);
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2202      	movs	r2, #2
 80006c0:	2100      	movs	r1, #0
 80006c2:	4802      	ldr	r0, [pc, #8]	@ (80006cc <_Z12EventLoopCppv+0x100>)
 80006c4:	f000 fde3 	bl	800128e <_ZN6Tm163810writeHexToEhhm>
		}
#endif
	}
 80006c8:	e79f      	b.n	800060a <_Z12EventLoopCppv+0x3e>
 80006ca:	bf00      	nop
 80006cc:	200001c0 	.word	0x200001c0
 80006d0:	200001fc 	.word	0x200001fc
 80006d4:	200001bc 	.word	0x200001bc
 80006d8:	20000390 	.word	0x20000390
 80006dc:	20000000 	.word	0x20000000
 80006e0:	40020800 	.word	0x40020800
 80006e4:	20000004 	.word	0x20000004

080006e8 <EventLoopC>:
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	EventLoopCpp();
 80006ec:	f7ff ff6e 	bl	80005cc <_Z12EventLoopCppv>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d11a      	bne.n	800073a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800070a:	4293      	cmp	r3, r2
 800070c:	d115      	bne.n	800073a <_Z41__static_initialization_and_destruction_0ii+0x46>
Tm1638 tmDevice = Tm1638(&hspi1, TM_STB_GPIO_Port, TM_STB_Pin, TM_MOSI_GPIO_Port, TM_MOSI_Pin);
 800070e:	2380      	movs	r3, #128	@ 0x80
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2340      	movs	r3, #64	@ 0x40
 8000718:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800071a:	4910      	ldr	r1, [pc, #64]	@ (800075c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800071c:	4810      	ldr	r0, [pc, #64]	@ (8000760 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800071e:	f000 fc99 	bl	8001054 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
NRF24L nrfDevice = NRF24L(&hspi2, NRF_CE_GPIO_Port, NRF_CE_Pin, NRF_CSN_GPIO_Port, NRF_CSN_Pin);
 8000722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000732:	490d      	ldr	r1, [pc, #52]	@ (8000768 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000734:	480d      	ldr	r0, [pc, #52]	@ (800076c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000736:	f000 f82b 	bl	8000790 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d107      	bne.n	8000750 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000746:	4293      	cmp	r3, r2
 8000748:	d102      	bne.n	8000750 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 800074a:	4808      	ldr	r0, [pc, #32]	@ (800076c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800074c:	f000 f858 	bl	8000800 <_ZN6NRF24LD1Ev>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40020000 	.word	0x40020000
 800075c:	200002e0 	.word	0x200002e0
 8000760:	200001c0 	.word	0x200001c0
 8000764:	40020400 	.word	0x40020400
 8000768:	20000338 	.word	0x20000338
 800076c:	200001fc 	.word	0x200001fc

08000770 <_GLOBAL__sub_I_led_state>:
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
 8000774:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ffbb 	bl	80006f4 <_Z41__static_initialization_and_destruction_0ii>
 800077e:	bd80      	pop	{r7, pc}

08000780 <_GLOBAL__sub_D_led_state>:
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
 8000784:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff ffb3 	bl	80006f4 <_Z41__static_initialization_and_destruction_0ii>
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:

// Functions to manage the nRF24L01+ transceiver

#define nRF24_WAIT_TIMEOUT         (uint32_t)100;//0x000FFFFF

NRF24L::NRF24L(SPI_HandleTypeDef *spi, GPIO_TypeDef* CEPort, uint16_t CEPin, GPIO_TypeDef* CSNPort, uint16_t CSNPin):
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	807b      	strh	r3, [r7, #2]
				_spi(spi),
				_CEPort(CEPort),
				_CEPin(CEPin),
				_CSNPort(CSNPort),
				_CSNPin(CSNPin)
 800079e:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x64>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]
				_spi(spi),
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	605a      	str	r2, [r3, #4]
				_CEPort(CEPort),
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	609a      	str	r2, [r3, #8]
				_CEPin(CEPin),
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	887a      	ldrh	r2, [r7, #2]
 80007b4:	819a      	strh	r2, [r3, #12]
				_CSNPort(CSNPort),
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	611a      	str	r2, [r3, #16]
				_CSNPin(CSNPin)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	8bba      	ldrh	r2, [r7, #28]
 80007c0:	829a      	strh	r2, [r3, #20]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	4a0c      	ldr	r2, [pc, #48]	@ (80007f8 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x68>)
 80007c6:	3316      	adds	r3, #22
 80007c8:	6810      	ldr	r0, [r2, #0]
 80007ca:	6018      	str	r0, [r3, #0]
 80007cc:	8892      	ldrh	r2, [r2, #4]
 80007ce:	809a      	strh	r2, [r3, #4]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x6c>)
 80007d4:	331c      	adds	r3, #28
 80007d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007da:	6018      	str	r0, [r3, #0]
 80007dc:	3304      	adds	r3, #4
 80007de:	8019      	strh	r1, [r3, #0]
 80007e0:	3302      	adds	r3, #2
 80007e2:	0c0a      	lsrs	r2, r1, #16
 80007e4:	701a      	strb	r2, [r3, #0]
{}
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	0800aafc 	.word	0x0800aafc
 80007f8:	0800aa68 	.word	0x0800aa68
 80007fc:	0800aa70 	.word	0x0800aa70

08000800 <_ZN6NRF24LD1Ev>:

NRF24L::~NRF24L(){}
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <_ZN6NRF24LD1Ev+0x1c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	0800aafc 	.word	0x0800aafc

08000820 <_ZN6NRF24LD0Ev>:
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ffe9 	bl	8000800 <_ZN6NRF24LD1Ev>
 800082e:	2124      	movs	r1, #36	@ 0x24
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f00a f86f 	bl	800a914 <_ZdlPvj>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZN6NRF24L10nRF24_CE_HEv>:

void NRF24L::nRF24_CE_L() {
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_RESET);
}

void NRF24L::nRF24_CE_H() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_SET);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6898      	ldr	r0, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	899b      	ldrh	r3, [r3, #12]
 8000850:	2201      	movs	r2, #1
 8000852:	4619      	mov	r1, r3
 8000854:	f002 fb58 	bl	8002f08 <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <_ZN6NRF24L11nRF24_CSN_LEv>:

void NRF24L::nRF24_CSN_L() {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_RESET);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6918      	ldr	r0, [r3, #16]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	8a9b      	ldrh	r3, [r3, #20]
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	f002 fb48 	bl	8002f08 <HAL_GPIO_WritePin>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZN6NRF24L11nRF24_CSN_HEv>:

void NRF24L::nRF24_CSN_H() {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_SET);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6918      	ldr	r0, [r3, #16]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8a9b      	ldrh	r3, [r3, #20]
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f002 fb38 	bl	8002f08 <HAL_GPIO_WritePin>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_ZN6NRF24L11nRF24_LL_RWEh>:

uint8_t NRF24L::nRF24_LL_RW(uint8_t data) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(_spi, &data, &result, 1, 2000)!=HAL_OK) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6858      	ldr	r0, [r3, #4]
 80008b0:	f107 020f 	add.w	r2, r7, #15
 80008b4:	1cf9      	adds	r1, r7, #3
 80008b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	f004 fcc9 	bl	8005254 <HAL_SPI_TransmitReceive>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <_ZN6NRF24L11nRF24_LL_RWEh+0x36>
        Error_Handler();
 80008d2:	f000 ffc1 	bl	8001858 <Error_Handler>
    };
    return result;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_ZN6NRF24L7ReadRegEh>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
uint8_t NRF24L::ReadReg(uint8_t reg) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	nRF24_CSN_L();
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ffb7 	bl	8000860 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	f003 031f 	and.w	r3, r3, #31
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ffcf 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000902:	21ff      	movs	r1, #255	@ 0xff
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffcb 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
 800090a:	4603      	mov	r3, r0
 800090c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffb6 	bl	8000880 <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 8000914:	7bfb      	ldrb	r3, [r7, #15]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_ZN6NRF24L8WriteRegEhh>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
void NRF24L::WriteReg(uint8_t reg, uint8_t value) {
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	70fb      	strb	r3, [r7, #3]
 800092a:	4613      	mov	r3, r2
 800092c:	70bb      	strb	r3, [r7, #2]
	nRF24_CSN_L();
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ff96 	bl	8000860 <_ZN6NRF24L11nRF24_CSN_LEv>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b1f      	cmp	r3, #31
 8000938:	d810      	bhi.n	800095c <_ZN6NRF24L8WriteRegEhh+0x3e>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP ));
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	f003 031f 	and.w	r3, r3, #31
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f043 0320 	orr.w	r3, r3, #32
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffa8 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
		nRF24_LL_RW(value);
 8000950:	78bb      	ldrb	r3, [r7, #2]
 8000952:	4619      	mov	r1, r3
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ffa3 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
 800095a:	e015      	b.n	8000988 <_ZN6NRF24L8WriteRegEhh+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	4619      	mov	r1, r3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff9d 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
		if ((reg != nRF24_CMD_FLUSH_TX ) && (reg != nRF24_CMD_FLUSH_RX )
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	2be1      	cmp	r3, #225	@ 0xe1
 800096a:	d00d      	beq.n	8000988 <_ZN6NRF24L8WriteRegEhh+0x6a>
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2be2      	cmp	r3, #226	@ 0xe2
 8000970:	d00a      	beq.n	8000988 <_ZN6NRF24L8WriteRegEhh+0x6a>
				&& (reg != nRF24_CMD_REUSE_TX_PL ) && (reg != nRF24_CMD_NOP )) {
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2be3      	cmp	r3, #227	@ 0xe3
 8000976:	d007      	beq.n	8000988 <_ZN6NRF24L8WriteRegEhh+0x6a>
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2bff      	cmp	r3, #255	@ 0xff
 800097c:	d004      	beq.n	8000988 <_ZN6NRF24L8WriteRegEhh+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 800097e:	78bb      	ldrb	r3, [r7, #2]
 8000980:	4619      	mov	r1, r3
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff8c 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
		}
	}
	nRF24_CSN_H();
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff79 	bl	8000880 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN6NRF24L9ReadMBRegEhPhh>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
void NRF24L::ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000996:	b590      	push	{r4, r7, lr}
 8000998:	b085      	sub	sp, #20
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	461a      	mov	r2, r3
 80009a2:	460b      	mov	r3, r1
 80009a4:	72fb      	strb	r3, [r7, #11]
 80009a6:	4613      	mov	r3, r2
 80009a8:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff ff58 	bl	8000860 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 80009b0:	7afb      	ldrb	r3, [r7, #11]
 80009b2:	4619      	mov	r1, r3
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff ff73 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 80009ba:	e008      	b.n	80009ce <_ZN6NRF24L9ReadMBRegEhPhh+0x38>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80009bc:	687c      	ldr	r4, [r7, #4]
 80009be:	1c63      	adds	r3, r4, #1
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	21ff      	movs	r1, #255	@ 0xff
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff ff6b 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
 80009ca:	4603      	mov	r3, r0
 80009cc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80009ce:	7abb      	ldrb	r3, [r7, #10]
 80009d0:	1e5a      	subs	r2, r3, #1
 80009d2:	72ba      	strb	r2, [r7, #10]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1ec      	bne.n	80009bc <_ZN6NRF24L9ReadMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff ff4c 	bl	8000880 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}

080009f0 <_ZN6NRF24L10WriteMBRegEhPhh>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
void NRF24L::WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	461a      	mov	r2, r3
 80009fc:	460b      	mov	r3, r1
 80009fe:	72fb      	strb	r3, [r7, #11]
 8000a00:	4613      	mov	r3, r2
 8000a02:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff ff2b 	bl	8000860 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 8000a0a:	7afb      	ldrb	r3, [r7, #11]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f7ff ff46 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000a14:	e007      	b.n	8000a26 <_ZN6NRF24L10WriteMBRegEhPhh+0x36>
		nRF24_LL_RW(*pBuf++);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f7ff ff3d 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000a26:	7abb      	ldrb	r3, [r7, #10]
 8000a28:	1e5a      	subs	r2, r3, #1
 8000a2a:	72ba      	strb	r2, [r7, #10]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf14      	ite	ne
 8000a30:	2301      	movne	r3, #1
 8000a32:	2300      	moveq	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1ed      	bne.n	8000a16 <_ZN6NRF24L10WriteMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff ff20 	bl	8000880 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_ZN6NRF24L4InitEv>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void NRF24L::Init(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	// Write to registers their initial values
	WriteReg(nRF24_REG_CONFIG, 0x08);
 8000a50:	2208      	movs	r2, #8
 8000a52:	2100      	movs	r1, #0
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff62 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000a5a:	223f      	movs	r2, #63	@ 0x3f
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff5d 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000a64:	2203      	movs	r2, #3
 8000a66:	2102      	movs	r1, #2
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff58 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000a6e:	2203      	movs	r2, #3
 8000a70:	2103      	movs	r1, #3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ff53 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000a78:	2203      	movs	r2, #3
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff4e 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_CH, 0x02);
 8000a82:	2202      	movs	r2, #2
 8000a84:	2105      	movs	r1, #5
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ff49 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000a8c:	220e      	movs	r2, #14
 8000a8e:	2106      	movs	r1, #6
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff44 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_STATUS, 0x00);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2107      	movs	r1, #7
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ff3f 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2111      	movs	r1, #17
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff3a 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2112      	movs	r1, #18
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ff35 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2113      	movs	r1, #19
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff30 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2114      	movs	r1, #20
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff2b 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2115      	movs	r1, #21
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff26 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2116      	movs	r1, #22
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff21 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_DYNPD, 0x00);
 8000adc:	2200      	movs	r2, #0
 8000ade:	211c      	movs	r1, #28
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff1c 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_FEATURE, 0x00);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	211d      	movs	r1, #29
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ff17 	bl	800091e <_ZN6NRF24L8WriteRegEhh>

	// Clear the FIFO's
	FlushRX();
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f9dd 	bl	8000eb0 <_ZN6NRF24L7FlushRXEv>
	FlushTX();
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f9cd 	bl	8000e96 <_ZN6NRF24L7FlushTXEv>

	// Clear any pending interrupt flags
	ClearIRQFlags();
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f9e4 	bl	8000eca <_ZN6NRF24L13ClearIRQFlagsEv>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff febc 	bl	8000880 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_ZN6NRF24L5CheckEv>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t NRF24L::Check(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t*) nRF24_TEST_ADDR;
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <_ZN6NRF24L5CheckEv+0x68>)
 8000b1a:	613b      	str	r3, [r7, #16]

	// Write test TX address and read TX_ADDR register
	WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	2130      	movs	r1, #48	@ 0x30
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ff64 	bl	80009f0 <_ZN6NRF24L10WriteMBRegEhPhh>
	ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000b28:	f107 0208 	add.w	r2, r7, #8
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	2110      	movs	r1, #16
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff30 	bl	8000996 <_ZN6NRF24L9ReadMBRegEhPhh>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	75fb      	strb	r3, [r7, #23]
 8000b3a:	e014      	b.n	8000b66 <_ZN6NRF24L5CheckEv+0x56>
		if (rxbuf[i] != *ptr++)
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	3318      	adds	r3, #24
 8000b40:	443b      	add	r3, r7
 8000b42:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1c59      	adds	r1, r3, #1
 8000b4a:	6139      	str	r1, [r7, #16]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	bf14      	ite	ne
 8000b52:	2301      	movne	r3, #1
 8000b54:	2300      	moveq	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <_ZN6NRF24L5CheckEv+0x50>
			return 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e006      	b.n	8000b6e <_ZN6NRF24L5CheckEv+0x5e>
	for (i = 0; i < 5; i++) {
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	3301      	adds	r3, #1
 8000b64:	75fb      	strb	r3, [r7, #23]
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d9e7      	bls.n	8000b3c <_ZN6NRF24L5CheckEv+0x2c>
	}

	return 1;
 8000b6c:	2301      	movs	r3, #1
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800aa78 	.word	0x0800aa78

08000b7c <_ZN6NRF24L12SetPowerModeEh>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void NRF24L::SetPowerMode(uint8_t mode) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	reg = ReadReg(nRF24_REG_CONFIG);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fea8 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000b90:	4603      	mov	r3, r0
 8000b92:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d104      	bne.n	8000ba4 <_ZN6NRF24L12SetPowerModeEh+0x28>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e003      	b.n	8000bac <_ZN6NRF24L12SetPowerModeEh+0x30>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	f023 0302 	bic.w	r3, r3, #2
 8000baa:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_CONFIG, reg);
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff feb3 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_ZN6NRF24L18SetOperationalModeEh>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void NRF24L::SetOperationalMode(uint8_t mode) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fe86 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	f023 0301 	bic.w	r3, r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX );
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fe92 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_ZN6NRF24L12SetCRCSchemeEh>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void NRF24L::SetCRCScheme(uint8_t scheme) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fe65 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000c16:	4603      	mov	r3, r0
 8000c18:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	f023 030c 	bic.w	r3, r3, #12
 8000c20:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC );
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	f003 030c 	and.w	r3, r3, #12
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	461a      	mov	r2, r3
 8000c34:	2100      	movs	r1, #0
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fe71 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_ZN6NRF24L12SetRFChannelEh>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void NRF24L::SetRFChannel(uint8_t channel) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_RF_CH, channel);
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	461a      	mov	r2, r3
 8000c54:	2105      	movs	r1, #5
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fe61 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_ZN6NRF24L12SetAddrWidthEh>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void NRF24L::SetAddrWidth(uint8_t addr_width) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	3b02      	subs	r3, #2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	2103      	movs	r1, #3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fe4f 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_ZN6NRF24L7SetAddrEhPKh>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void NRF24L::SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	460b      	mov	r3, r1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	72fb      	strb	r3, [r7, #11]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000c96:	7afb      	ldrb	r3, [r7, #11]
 8000c98:	2b06      	cmp	r3, #6
 8000c9a:	d00a      	beq.n	8000cb2 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
 8000c9c:	2b06      	cmp	r3, #6
 8000c9e:	dc42      	bgt.n	8000d26 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	dc02      	bgt.n	8000caa <_ZN6NRF24L7SetAddrEhPKh+0x22>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	da04      	bge.n	8000cb2 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
		// Write address LSBbyte (only first byte from the addr buffer)
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
		break;
	default:
		// Incorrect pipe number -> do nothing
		break;
 8000ca8:	e03d      	b.n	8000d26 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000caa:	3b02      	subs	r3, #2
	switch (pipe) {
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d83a      	bhi.n	8000d26 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000cb0:	e02e      	b.n	8000d10 <_ZN6NRF24L7SetAddrEhPKh+0x88>
		addr_width = ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f7ff fe13 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	75fb      	strb	r3, [r7, #23]
		addr += addr_width;
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	607b      	str	r3, [r7, #4]
		nRF24_CSN_L();
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff fdc9 	bl	8000860 <_ZN6NRF24L11nRF24_CSN_LEv>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | NRF24L::ADDR_REGS[pipe]);
 8000cce:	7afb      	ldrb	r3, [r7, #11]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	7f1b      	ldrb	r3, [r3, #28]
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fdde 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
			nRF24_LL_RW(*addr--);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	1e5a      	subs	r2, r3, #1
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f7ff fdd6 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
		} while (addr_width--);
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	75fa      	strb	r2, [r7, #23]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf14      	ite	ne
 8000cfe:	2301      	movne	r3, #1
 8000d00:	2300      	moveq	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1ed      	bne.n	8000ce4 <_ZN6NRF24L7SetAddrEhPKh+0x5c>
		nRF24_CSN_H();
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fdb9 	bl	8000880 <_ZN6NRF24L11nRF24_CSN_HEv>
		break;
 8000d0e:	e00b      	b.n	8000d28 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4413      	add	r3, r2
 8000d16:	7f19      	ldrb	r1, [r3, #28]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f7ff fdfd 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
		break;
 8000d24:	e000      	b.n	8000d28 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		break;
 8000d26:	bf00      	nop
	}
}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_ZN6NRF24L11SetDataRateEh>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void NRF24L::SetDataRate(uint8_t data_rate) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = ReadReg(nRF24_REG_RF_SETUP);
 8000d3c:	2106      	movs	r1, #6
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fdce 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000d4e:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_RF_SETUP, reg);
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2106      	movs	r1, #6
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fddd 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN6NRF24L9SetRXPipeEhhh>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void NRF24L::SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	70fb      	strb	r3, [r7, #3]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70bb      	strb	r3, [r7, #2]
 8000d82:	4613      	mov	r3, r2
 8000d84:	707b      	strb	r3, [r7, #1]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000d86:	2102      	movs	r1, #2
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fda9 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	78fb      	ldrb	r3, [r7, #3]
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000da6:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	461a      	mov	r2, r3
 8000dac:	2102      	movs	r1, #2
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fdb5 	bl	800091e <_ZN6NRF24L8WriteRegEhh>

	// Set RX payload length (RX_PW_Px register)
	WriteReg(NRF24L::RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	7d99      	ldrb	r1, [r3, #22]
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fda9 	bl	800091e <_ZN6NRF24L8WriteRegEhh>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = ReadReg(nRF24_REG_EN_AA);
 8000dcc:	2101      	movs	r1, #1
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fd86 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000dd8:	78bb      	ldrb	r3, [r7, #2]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10a      	bne.n	8000df4 <_ZN6NRF24L9SetRXPipeEhhh+0x88>
		reg |= (1 << pipe);
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	2201      	movs	r2, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	b25a      	sxtb	r2, r3
 8000de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e00b      	b.n	8000e0c <_ZN6NRF24L9SetRXPipeEhhh+0xa0>
	} else {
		reg &= ~(1 << pipe);
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	2201      	movs	r2, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4013      	ands	r3, r2
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_EN_AA, reg);
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2101      	movs	r1, #1
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fd83 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_ZN6NRF24L9DisableAAEh>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void NRF24L::DisableAA(uint8_t pipe) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	if (pipe > 5) {
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d905      	bls.n	8000e3e <_ZN6NRF24L9DisableAAEh+0x1e>
		// Disable Auto-ACK for ALL pipes
		WriteReg(nRF24_REG_EN_AA, 0x00);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2101      	movs	r1, #1
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fd71 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
		// Clear bit in the EN_AA register
		reg = ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8000e3c:	e017      	b.n	8000e6e <_ZN6NRF24L9DisableAAEh+0x4e>
		reg = ReadReg(nRF24_REG_EN_AA);
 8000e3e:	2101      	movs	r1, #1
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fd4d 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	b25a      	sxtb	r2, r3
 8000e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	73fb      	strb	r3, [r7, #15]
		WriteReg(nRF24_REG_EN_AA, reg);
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	461a      	mov	r2, r3
 8000e66:	2101      	movs	r1, #1
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fd58 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_ZN6NRF24L16GetStatus_RXFIFOEv>:
	return (ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ );
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t NRF24L::GetStatus_RXFIFO(void) {
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	return (ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO );
 8000e7e:	2117      	movs	r1, #23
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fd2d 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	b2db      	uxtb	r3, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN6NRF24L7FlushTXEv>:
	reg = ReadReg(nRF24_REG_RF_CH);
	WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void NRF24L::FlushTX(void) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8000e9e:	22ff      	movs	r2, #255	@ 0xff
 8000ea0:	21e1      	movs	r1, #225	@ 0xe1
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fd3b 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_ZN6NRF24L7FlushRXEv>:

// Flush the RX FIFO
void NRF24L::FlushRX(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	21e2      	movs	r1, #226	@ 0xe2
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fd2e 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_ZN6NRF24L13ClearIRQFlagsEv>:

// Clear any pending IRQ flags
void NRF24L::ClearIRQFlags(void) {
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = ReadReg(nRF24_REG_STATUS);
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fd03 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000eda:	4603      	mov	r3, r0
 8000edc:	73fb      	strb	r3, [r7, #15]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000ee4:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_STATUS, reg);
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2107      	movs	r1, #7
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fd16 	bl	800091e <_ZN6NRF24L8WriteRegEhh>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_ZN6NRF24L20GetRxDplPayloadWidthEv>:
//   length - payload length in bytes
void NRF24L::WritePayload(uint8_t *pBuf, uint8_t length) {
	WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

uint8_t NRF24L::GetRxDplPayloadWidth() {
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	uint8_t value;

	nRF24_CSN_L();
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fcac 	bl	8000860 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8000f08:	2160      	movs	r1, #96	@ 0x60
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fcc8 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000f10:	21ff      	movs	r1, #255	@ 0xff
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fcc4 	bl	80008a0 <_ZN6NRF24L11nRF24_LL_RWEh>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fcaf 	bl	8000880 <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZN6NRF24L18ReadPayloadGenericEPhS0_h>:

NRF24L::RXResult NRF24L::ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length,
		uint8_t dpl) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	70fb      	strb	r3, [r7, #3]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO ) >> 1;
 8000f3a:	2107      	movs	r1, #7
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff fccf 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000f42:	4603      	mov	r3, r0
 8000f44:	085b      	lsrs	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d82d      	bhi.n	8000fb0 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x84>
		// Get payload length
		if (dpl) {
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d011      	beq.n	8000f7e <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x52>
			*length = GetRxDplPayloadWidth();
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff ffcd 	bl	8000efa <_ZN6NRF24L20GetRxDplPayloadWidthEv>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	701a      	strb	r2, [r3, #0]
			if (*length > 32) { //broken packet
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b20      	cmp	r3, #32
 8000f6e:	d912      	bls.n	8000f96 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x6a>
				*length = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
				FlushRX();
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f7ff ff9a 	bl	8000eb0 <_ZN6NRF24L7FlushRXEv>
 8000f7c:	e00b      	b.n	8000f96 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x6a>
			}
		} else {
			*length = ReadReg(NRF24L::RX_PW_PIPE[pipe]);
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	7d9b      	ldrb	r3, [r3, #22]
 8000f86:	4619      	mov	r1, r3
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f7ff fca9 	bl	80008e0 <_ZN6NRF24L7ReadRegEh>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x80>
			ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	2161      	movs	r1, #97	@ 0x61
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f7ff fcf5 	bl	8000996 <_ZN6NRF24L9ReadMBRegEhPhh>
		}

		return ((RXResult) pipe);
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	e003      	b.n	8000fb8 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x8c>
	}

	// The RX FIFO is empty
	*length = 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]

	return RX_EMPTY;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN6NRF24L11ReadPayloadEPhS0_>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
NRF24L::RXResult NRF24L::ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	return ReadPayloadGeneric(pBuf, length, 0);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f7ff ffaa 	bl	8000f2c <_ZN6NRF24L18ReadPayloadGenericEPhS0_h>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <_ZN6NRF24L6InitRXEPhh>:
	ClearIRQFlags();
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
}

void NRF24L::InitRX(uint8_t *dest, uint8_t len) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	71fb      	strb	r3, [r7, #7]
	// Disable ShockBurst for all RX pipes
	DisableAA(0xFF);
 8000ff2:	21ff      	movs	r1, #255	@ 0xff
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff ff13 	bl	8000e20 <_ZN6NRF24L9DisableAAEh>
	// Set RF channel
	SetRFChannel(115);
 8000ffa:	2173      	movs	r1, #115	@ 0x73
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff fe21 	bl	8000c44 <_ZN6NRF24L12SetRFChannelEh>
	// Set data rate
	SetDataRate(nRF24_DR_250kbps);
 8001002:	2120      	movs	r1, #32
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff fe93 	bl	8000d30 <_ZN6NRF24L11SetDataRateEh>
	// Set CRC scheme
	SetCRCScheme(nRF24_CRC_2byte);
 800100a:	210c      	movs	r1, #12
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff fdf8 	bl	8000c02 <_ZN6NRF24L12SetCRCSchemeEh>
	// Set address width, its common for all pipes (RX and TX)
	SetAddrWidth(3);
 8001012:	2103      	movs	r1, #3
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff fe25 	bl	8000c64 <_ZN6NRF24L12SetAddrWidthEh>
	// Configure RX PIPE#1
	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 800101a:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <_ZN6NRF24L6InitRXEPhh+0x6c>)
 800101c:	2101      	movs	r1, #1
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f7ff fe32 	bl	8000c88 <_ZN6NRF24L7SetAddrEhPKh>
	SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, len); // Auto-ACK: disabled, payload length in bytes
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f7ff fe9e 	bl	8000d6c <_ZN6NRF24L9SetRXPipeEhhh>
	// Set operational mode (PRX == receiver)
	SetOperationalMode(nRF24_MODE_RX);
 8001030:	2101      	movs	r1, #1
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff fdc4 	bl	8000bc0 <_ZN6NRF24L18SetOperationalModeEh>
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
 8001038:	2102      	movs	r1, #2
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fd9e 	bl	8000b7c <_ZN6NRF24L12SetPowerModeEh>
	// Put the transceiver to the RX mode
	nRF24_CE_H();
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff fbfd 	bl	8000840 <_ZN6NRF24L10nRF24_CE_HEv>
//	nRF24_SetAddrWidth(5); // address width is 5 bytes
//	nRF24_SetAddr(nRF24_PIPE1, dest); // program pipe address
//	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 10); // enable RX pipe#1 with Auto-ACK: disabled, payload length: 10 bytes
//	nRF24_SetOperationalMode(nRF24_MODE_RX); // switch transceiver to the RX mode
//	nRF24_SetPowerMode(nRF24_PWR_UP); // wake-up transceiver (in case if it sleeping)
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800aaf0 	.word	0x0800aaf0

08001054 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
#define SPI_TIMEOUT 20

char spi_buf[17];
char button_buf[4];

Tm1638::Tm1638 (SPI_HandleTypeDef *spi,
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef *stbPort,
		uint16_t stbPin,
		GPIO_TypeDef *mosiPort,
		uint16_t mosiPin):
    _spi(spi), _stbPort(stbPort), _stbPin(stbPin), _mosiPort(mosiPort), _mosiPin(mosiPin)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	811a      	strh	r2, [r3, #8]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800107e:	821a      	strh	r2, [r3, #16]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2280      	movs	r2, #128	@ 0x80
 8001084:	749a      	strb	r2, [r3, #18]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2240      	movs	r2, #64	@ 0x40
 800108a:	74da      	strb	r2, [r3, #19]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2244      	movs	r2, #68	@ 0x44
 8001090:	751a      	strb	r2, [r3, #20]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	22c0      	movs	r2, #192	@ 0xc0
 8001096:	755a      	strb	r2, [r3, #21]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x80>)
 800109c:	4614      	mov	r4, r2
 800109e:	f103 0c16 	add.w	ip, r3, #22
 80010a2:	f104 0e20 	add.w	lr, r4, #32
 80010a6:	4665      	mov	r5, ip
 80010a8:	4626      	mov	r6, r4
 80010aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010ac:	6028      	str	r0, [r5, #0]
 80010ae:	6069      	str	r1, [r5, #4]
 80010b0:	60aa      	str	r2, [r5, #8]
 80010b2:	60eb      	str	r3, [r5, #12]
 80010b4:	3410      	adds	r4, #16
 80010b6:	f10c 0c10 	add.w	ip, ip, #16
 80010ba:	4574      	cmp	r4, lr
 80010bc:	d1f3      	bne.n	80010a6 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x52>
 80010be:	4663      	mov	r3, ip
 80010c0:	4622      	mov	r2, r4
 80010c2:	6810      	ldr	r0, [r2, #0]
 80010c4:	6018      	str	r0, [r3, #0]
 80010c6:	7912      	ldrb	r2, [r2, #4]
 80010c8:	711a      	strb	r2, [r3, #4]
{
}
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d4:	0800aa80 	.word	0x0800aa80

080010d8 <_ZN6Tm16384testEv>:

void Tm1638::test(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  turnOnFull();
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f82f 	bl	8001144 <_ZN6Tm163810turnOnFullEv>
  clear();
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f840 	bl	800116c <_ZN6Tm16385clearEv>

  writeCharTo(0, 'L');
 80010ec:	224c      	movs	r2, #76	@ 0x4c
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f875 	bl	80011e0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(1, 'e');
 80010f6:	2265      	movs	r2, #101	@ 0x65
 80010f8:	2101      	movs	r1, #1
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f870 	bl	80011e0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(2, 'o');
 8001100:	226f      	movs	r2, #111	@ 0x6f
 8001102:	2102      	movs	r1, #2
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f86b 	bl	80011e0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(3, 'n');
 800110a:	226e      	movs	r2, #110	@ 0x6e
 800110c:	2103      	movs	r1, #3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f866 	bl	80011e0 <_ZN6Tm163811writeCharToEhc>

  writeCharTo(4,'E');
 8001114:	2245      	movs	r2, #69	@ 0x45
 8001116:	2104      	movs	r1, #4
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f861 	bl	80011e0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(5,'m');
 800111e:	226d      	movs	r2, #109	@ 0x6d
 8001120:	2105      	movs	r1, #5
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f85c 	bl	80011e0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(6,'m');
 8001128:	226d      	movs	r2, #109	@ 0x6d
 800112a:	2106      	movs	r1, #6
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f857 	bl	80011e0 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(7,'a');
 8001132:	2261      	movs	r2, #97	@ 0x61
 8001134:	2107      	movs	r1, #7
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f852 	bl	80011e0 <_ZN6Tm163811writeCharToEhc>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZN6Tm163810turnOnFullEv>:

void Tm1638::turnOnFull(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint8_t brightness = enable | 0x0F;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7c9b      	ldrb	r3, [r3, #18]
 8001150:	f043 030f 	orr.w	r3, r3, #15
 8001154:	b2db      	uxtb	r3, r3
 8001156:	73fb      	strb	r3, [r7, #15]
  setMode(&brightness);
 8001158:	f107 030f 	add.w	r3, r7, #15
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f900 	bl	8001364 <_ZN6Tm16387setModeEPKh>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN6Tm16385clearEv>:
void Tm1638::turnOn(uint8_t val){ // 0 to 15
  uint8_t brightness = enable | (val & 0x0F);
  setMode(&brightness);
}

void Tm1638::clear(){
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  setMode(&seriesOut);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3313      	adds	r3, #19
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f8f2 	bl	8001364 <_ZN6Tm16387setModeEPKh>

  for(int i = 0; i < 18; i++) { spi_buf[i] = 0; }
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e007      	b.n	8001196 <_ZN6Tm16385clearEv+0x2a>
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <_ZN6Tm16385clearEv+0x70>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b11      	cmp	r3, #17
 800119a:	ddf4      	ble.n	8001186 <_ZN6Tm16385clearEv+0x1a>
  spi_buf[0] = startAddr;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7d5a      	ldrb	r2, [r3, #21]
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <_ZN6Tm16385clearEv+0x70>)
 80011a2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6858      	ldr	r0, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	891b      	ldrh	r3, [r3, #8]
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	f001 feaa 	bl	8002f08 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)spi_buf, 17, SPI_TIMEOUT);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	2314      	movs	r3, #20
 80011ba:	2211      	movs	r2, #17
 80011bc:	4907      	ldr	r1, [pc, #28]	@ (80011dc <_ZN6Tm16385clearEv+0x70>)
 80011be:	f003 fdee 	bl	8004d9e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6858      	ldr	r0, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	891b      	ldrh	r3, [r3, #8]
 80011ca:	2201      	movs	r2, #1
 80011cc:	4619      	mov	r1, r3
 80011ce:	f001 fe9b 	bl	8002f08 <HAL_GPIO_WritePin>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000220 	.word	0x20000220

080011e0 <_ZN6Tm163811writeCharToEhc>:

void Tm1638::writeCharTo(uint8_t pos, char val){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
 80011ec:	4613      	mov	r3, r2
 80011ee:	70bb      	strb	r3, [r7, #2]
  char result = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  if(val >= '0' && val <= '9')
 80011f4:	78bb      	ldrb	r3, [r7, #2]
 80011f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80011f8:	d909      	bls.n	800120e <_ZN6Tm163811writeCharToEhc+0x2e>
 80011fa:	78bb      	ldrb	r3, [r7, #2]
 80011fc:	2b39      	cmp	r3, #57	@ 0x39
 80011fe:	d806      	bhi.n	800120e <_ZN6Tm163811writeCharToEhc+0x2e>
  {
    result = letterMap[0 + (val - '0')];
 8001200:	78bb      	ldrb	r3, [r7, #2]
 8001202:	3b30      	subs	r3, #48	@ 0x30
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	7d9b      	ldrb	r3, [r3, #22]
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e018      	b.n	8001240 <_ZN6Tm163811writeCharToEhc+0x60>
  }
  else if(val >= 'a' && val <= 'z')
 800120e:	78bb      	ldrb	r3, [r7, #2]
 8001210:	2b60      	cmp	r3, #96	@ 0x60
 8001212:	d909      	bls.n	8001228 <_ZN6Tm163811writeCharToEhc+0x48>
 8001214:	78bb      	ldrb	r3, [r7, #2]
 8001216:	2b7a      	cmp	r3, #122	@ 0x7a
 8001218:	d806      	bhi.n	8001228 <_ZN6Tm163811writeCharToEhc+0x48>
  {
    result = letterMap[10 + (val - 'a')];
 800121a:	78bb      	ldrb	r3, [r7, #2]
 800121c:	3b57      	subs	r3, #87	@ 0x57
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	7d9b      	ldrb	r3, [r3, #22]
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e00b      	b.n	8001240 <_ZN6Tm163811writeCharToEhc+0x60>
  }
  else if(val >= 'A' && val <= 'Z')
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	2b40      	cmp	r3, #64	@ 0x40
 800122c:	d908      	bls.n	8001240 <_ZN6Tm163811writeCharToEhc+0x60>
 800122e:	78bb      	ldrb	r3, [r7, #2]
 8001230:	2b5a      	cmp	r3, #90	@ 0x5a
 8001232:	d805      	bhi.n	8001240 <_ZN6Tm163811writeCharToEhc+0x60>
  {
    result = letterMap[10 + (val - 'A')];
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	3b37      	subs	r3, #55	@ 0x37
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	7d9b      	ldrb	r3, [r3, #22]
 800123e:	73fb      	strb	r3, [r7, #15]
  }
  writeTo(pos * 2, result);
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	4619      	mov	r1, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f8aa 	bl	80013a4 <_ZN6Tm16387writeToEhh>
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZN6Tm16388writeLedEhb>:

void Tm1638::writeLed(uint8_t pos, bool val)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
 8001264:	4613      	mov	r3, r2
 8001266:	70bb      	strb	r3, [r7, #2]
  writeTo(pos * 2 + 1, val ? 1 : 0);
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	3301      	adds	r3, #1
 8001270:	b2d9      	uxtb	r1, r3
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <_ZN6Tm16388writeLedEhb+0x24>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <_ZN6Tm16388writeLedEhb+0x26>
 800127c:	2300      	movs	r3, #0
 800127e:	461a      	mov	r2, r3
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f88f 	bl	80013a4 <_ZN6Tm16387writeToEhh>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_ZN6Tm163810writeHexToEhhm>:

void Tm1638::writeHexTo(uint8_t startPos, uint8_t digits, uint32_t val){
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	72fb      	strb	r3, [r7, #11]
 800129c:	4613      	mov	r3, r2
 800129e:	72bb      	strb	r3, [r7, #10]
  while(digits != 0){
 80012a0:	e012      	b.n	80012c8 <_ZN6Tm163810writeHexToEhhm+0x3a>
    hexTo(2 * (startPos + digits - 1), val);
 80012a2:	7afa      	ldrb	r2, [r7, #11]
 80012a4:	7abb      	ldrb	r3, [r7, #10]
 80012a6:	4413      	add	r3, r2
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f8aa 	bl	8001410 <_ZN6Tm16385hexToEch>
    val = val >> 4;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	607b      	str	r3, [r7, #4]
    digits--;
 80012c2:	7abb      	ldrb	r3, [r7, #10]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	72bb      	strb	r3, [r7, #10]
  while(digits != 0){
 80012c8:	7abb      	ldrb	r3, [r7, #10]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1e9      	bne.n	80012a2 <_ZN6Tm163810writeHexToEhhm+0x14>
  }
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN6Tm163811readButtonsEv>:
uint8_t Tm1638::readButtons(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  uint8_t readMode = 0x42;
 80012e0:	2342      	movs	r3, #66	@ 0x42
 80012e2:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6858      	ldr	r0, [r3, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	891b      	ldrh	r3, [r3, #8]
 80012ec:	2200      	movs	r2, #0
 80012ee:	4619      	mov	r1, r3
 80012f0:	f001 fe0a 	bl	8002f08 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)&readMode, 1, SPI_TIMEOUT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	f107 010f 	add.w	r1, r7, #15
 80012fc:	2314      	movs	r3, #20
 80012fe:	2201      	movs	r2, #1
 8001300:	f003 fd4d 	bl	8004d9e <HAL_SPI_Transmit>
  HAL_SPI_Receive(_spi, (uint8_t *)button_buf, 4, SPI_TIMEOUT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	2314      	movs	r3, #20
 800130a:	2204      	movs	r2, #4
 800130c:	4914      	ldr	r1, [pc, #80]	@ (8001360 <_ZN6Tm163811readButtonsEv+0x88>)
 800130e:	f003 fe89 	bl	8005024 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6858      	ldr	r0, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	891b      	ldrh	r3, [r3, #8]
 800131a:	2201      	movs	r2, #1
 800131c:	4619      	mov	r1, r3
 800131e:	f001 fdf3 	bl	8002f08 <HAL_GPIO_WritePin>

  uint8_t result = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	75fb      	strb	r3, [r7, #23]
  for(int i = 0; i < 4; i++){
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e011      	b.n	8001350 <_ZN6Tm163811readButtonsEv+0x78>
	  result |= ((button_buf[i] & 0x11) << i);
 800132c:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <_ZN6Tm163811readButtonsEv+0x88>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f003 0211 	and.w	r2, r3, #17
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	b25a      	sxtb	r2, r3
 8001340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001344:	4313      	orrs	r3, r2
 8001346:	b25b      	sxtb	r3, r3
 8001348:	75fb      	strb	r3, [r7, #23]
  for(int i = 0; i < 4; i++){
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3301      	adds	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b03      	cmp	r3, #3
 8001354:	ddea      	ble.n	800132c <_ZN6Tm163811readButtonsEv+0x54>
  }
  return result;
 8001356:	7dfb      	ldrb	r3, [r7, #23]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000234 	.word	0x20000234

08001364 <_ZN6Tm16387setModeEPKh>:

// private

void Tm1638::setMode(const uint8_t *mode){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6858      	ldr	r0, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	891b      	ldrh	r3, [r3, #8]
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	f001 fdc5 	bl	8002f08 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)mode, 1, SPI_TIMEOUT);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	2314      	movs	r3, #20
 8001384:	2201      	movs	r2, #1
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	f003 fd09 	bl	8004d9e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6858      	ldr	r0, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	891b      	ldrh	r3, [r3, #8]
 8001394:	2201      	movs	r2, #1
 8001396:	4619      	mov	r1, r3
 8001398:	f001 fdb6 	bl	8002f08 <HAL_GPIO_WritePin>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZN6Tm16387writeToEhh>:

void Tm1638::writeTo(uint8_t reg, uint8_t val){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
 80013b0:	4613      	mov	r3, r2
 80013b2:	70bb      	strb	r3, [r7, #2]
  setMode(&charOut);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3314      	adds	r3, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffd2 	bl	8001364 <_ZN6Tm16387setModeEPKh>
  spi_buf[0] = startAddr | reg;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7d5a      	ldrb	r2, [r3, #21]
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <_ZN6Tm16387writeToEhh+0x68>)
 80013cc:	701a      	strb	r2, [r3, #0]
  spi_buf[1] = val;
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <_ZN6Tm16387writeToEhh+0x68>)
 80013d0:	78bb      	ldrb	r3, [r7, #2]
 80013d2:	7053      	strb	r3, [r2, #1]

  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6858      	ldr	r0, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	891b      	ldrh	r3, [r3, #8]
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	f001 fd92 	bl	8002f08 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)spi_buf, 2, SPI_TIMEOUT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	2314      	movs	r3, #20
 80013ea:	2202      	movs	r2, #2
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <_ZN6Tm16387writeToEhh+0x68>)
 80013ee:	f003 fcd6 	bl	8004d9e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6858      	ldr	r0, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	891b      	ldrh	r3, [r3, #8]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4619      	mov	r1, r3
 80013fe:	f001 fd83 	bl	8002f08 <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000220 	.word	0x20000220

08001410 <_ZN6Tm16385hexToEch>:

void Tm1638::hexTo(char pos, uint8_t val){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
 800141c:	4613      	mov	r3, r2
 800141e:	70bb      	strb	r3, [r7, #2]
  char result  = letterMap[val & 0x0F];
 8001420:	78bb      	ldrb	r3, [r7, #2]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	7d9b      	ldrb	r3, [r3, #22]
 800142c:	73fb      	strb	r3, [r7, #15]
  writeTo(pos, result);
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffb5 	bl	80013a4 <_ZN6Tm16387writeToEhh>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001458:	4a21      	ldr	r2, [pc, #132]	@ (80014e0 <MX_ADC1_Init+0x9c>)
 800145a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <MX_ADC1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001462:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001468:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <MX_ADC1_Init+0x98>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001470:	2201      	movs	r2, #1
 8001472:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800147c:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <MX_ADC1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001484:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <MX_ADC1_Init+0xa0>)
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_ADC1_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001490:	2201      	movs	r2, #1
 8001492:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_ADC1_Init+0x98>)
 800149e:	2201      	movs	r2, #1
 80014a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a2:	480e      	ldr	r0, [pc, #56]	@ (80014dc <MX_ADC1_Init+0x98>)
 80014a4:	f000 fcac 	bl	8001e00 <HAL_ADC_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ae:	f000 f9d3 	bl	8001858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	@ (80014dc <MX_ADC1_Init+0x98>)
 80014c4:	f000 fce0 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014ce:	f000 f9c3 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000238 	.word	0x20000238
 80014e0:	40012000 	.word	0x40012000
 80014e4:	0f000001 	.word	0x0f000001

080014e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2f      	ldr	r2, [pc, #188]	@ (80015c4 <HAL_ADC_MspInit+0xdc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d157      	bne.n	80015ba <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <HAL_ADC_MspInit+0xe0>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	4a2d      	ldr	r2, [pc, #180]	@ (80015c8 <HAL_ADC_MspInit+0xe0>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001518:	6453      	str	r3, [r2, #68]	@ 0x44
 800151a:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <HAL_ADC_MspInit+0xe0>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <HAL_ADC_MspInit+0xe0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a26      	ldr	r2, [pc, #152]	@ (80015c8 <HAL_ADC_MspInit+0xe0>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <HAL_ADC_MspInit+0xe0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001542:	230e      	movs	r3, #14
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001546:	2303      	movs	r3, #3
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	481d      	ldr	r0, [pc, #116]	@ (80015cc <HAL_ADC_MspInit+0xe4>)
 8001556:	f001 fb53 	bl	8002c00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800155a:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 800155c:	4a1d      	ldr	r2, [pc, #116]	@ (80015d4 <HAL_ADC_MspInit+0xec>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001566:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001574:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001578:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 800157c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001580:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001588:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 800158c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001590:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001598:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800159e:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 80015a0:	f000 ffb2 	bl	8002508 <HAL_DMA_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015aa:	f000 f955 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 80015b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80015b4:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_ADC_MspInit+0xe8>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012000 	.word	0x40012000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	20000280 	.word	0x20000280
 80015d4:	40026410 	.word	0x40026410

080015d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_DMA_Init+0x3c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001614 <MX_DMA_Init+0x3c>)
 80015e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_DMA_Init+0x3c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2038      	movs	r0, #56	@ 0x38
 8001600:	f000 ff4b 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001604:	2038      	movs	r0, #56	@ 0x38
 8001606:	f000 ff64 	bl	80024d2 <HAL_NVIC_EnableIRQ>

}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a44      	ldr	r2, [pc, #272]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a3d      	ldr	r2, [pc, #244]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <MX_GPIO_Init+0x130>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <MX_GPIO_Init+0x130>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a36      	ldr	r2, [pc, #216]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a2f      	ldr	r2, [pc, #188]	@ (8001748 <MX_GPIO_Init+0x130>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <MX_GPIO_Init+0x130>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016a4:	4829      	ldr	r0, [pc, #164]	@ (800174c <MX_GPIO_Init+0x134>)
 80016a6:	f001 fc2f 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2101      	movs	r1, #1
 80016ae:	4828      	ldr	r0, [pc, #160]	@ (8001750 <MX_GPIO_Init+0x138>)
 80016b0:	f001 fc2a 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TM_STB_GPIO_Port, TM_STB_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2140      	movs	r1, #64	@ 0x40
 80016b8:	4825      	ldr	r0, [pc, #148]	@ (8001750 <MX_GPIO_Init+0x138>)
 80016ba:	f001 fc25 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f243 0104 	movw	r1, #12292	@ 0x3004
 80016c4:	4823      	ldr	r0, [pc, #140]	@ (8001754 <MX_GPIO_Init+0x13c>)
 80016c6:	f001 fc1f 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	481a      	ldr	r0, [pc, #104]	@ (800174c <MX_GPIO_Init+0x134>)
 80016e4:	f001 fa8c 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4814      	ldr	r0, [pc, #80]	@ (8001750 <MX_GPIO_Init+0x138>)
 8001700:	f001 fa7e 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TM_STB_Pin;
 8001704:	2340      	movs	r3, #64	@ 0x40
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TM_STB_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	@ (8001750 <MX_GPIO_Init+0x138>)
 800171c:	f001 fa70 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|NRF_CE_Pin|NRF_CSN_Pin;
 8001720:	f243 0304 	movw	r3, #12292	@ 0x3004
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4806      	ldr	r0, [pc, #24]	@ (8001754 <MX_GPIO_Init+0x13c>)
 800173a:	f001 fa61 	bl	8002c00 <HAL_GPIO_Init>

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	@ 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40020800 	.word	0x40020800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175c:	f000 faba 	bl	8001cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001760:	f000 f812 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001764:	f7ff ff58 	bl	8001618 <MX_GPIO_Init>
  MX_DMA_Init();
 8001768:	f7ff ff36 	bl	80015d8 <MX_DMA_Init>
  MX_SPI2_Init();
 800176c:	f000 f8b2 	bl	80018d4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001770:	f000 f878 	bl	8001864 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001774:	f7ff fe66 	bl	8001444 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001778:	f000 f9e8 	bl	8001b4c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800177c:	f008 fbba 	bl	8009ef4 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  EventLoopC();
 8001780:	f7fe ffb2 	bl	80006e8 <EventLoopC>

  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <main+0x2c>

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	@ 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f009 f8d4 	bl	800a944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <SystemClock_Config+0xc8>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	4a26      	ldr	r2, [pc, #152]	@ (8001850 <SystemClock_Config+0xc8>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <SystemClock_Config+0xc8>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <SystemClock_Config+0xcc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a20      	ldr	r2, [pc, #128]	@ (8001854 <SystemClock_Config+0xcc>)
 80017d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <SystemClock_Config+0xcc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80017f8:	230f      	movs	r3, #15
 80017fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017fc:	2390      	movs	r3, #144	@ 0x90
 80017fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001800:	2304      	movs	r3, #4
 8001802:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001804:	2305      	movs	r3, #5
 8001806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fde5 	bl	80043dc <HAL_RCC_OscConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001818:	f000 f81e 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181c:	230f      	movs	r3, #15
 800181e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001820:	2302      	movs	r3, #2
 8001822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800182c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	2101      	movs	r1, #1
 8001838:	4618      	mov	r0, r3
 800183a:	f003 f847 	bl	80048cc <HAL_RCC_ClockConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001844:	f000 f808 	bl	8001858 <Error_Handler>
  }
}
 8001848:	bf00      	nop
 800184a:	3750      	adds	r7, #80	@ 0x50
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40007000 	.word	0x40007000

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <Error_Handler+0x8>

08001864 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001868:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <MX_SPI1_Init+0x68>)
 800186a:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <MX_SPI1_Init+0x6c>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <MX_SPI1_Init+0x68>)
 8001870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <MX_SPI1_Init+0x68>)
 8001878:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800187c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <MX_SPI1_Init+0x68>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_SPI1_Init+0x68>)
 8001886:	2202      	movs	r2, #2
 8001888:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <MX_SPI1_Init+0x68>)
 800188c:	2201      	movs	r2, #1
 800188e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_SPI1_Init+0x68>)
 8001892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001896:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_SPI1_Init+0x68>)
 800189a:	2230      	movs	r2, #48	@ 0x30
 800189c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <MX_SPI1_Init+0x68>)
 80018a0:	2280      	movs	r2, #128	@ 0x80
 80018a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_SPI1_Init+0x68>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <MX_SPI1_Init+0x68>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_SPI1_Init+0x68>)
 80018b2:	220a      	movs	r2, #10
 80018b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	@ (80018cc <MX_SPI1_Init+0x68>)
 80018b8:	f003 f9e8 	bl	8004c8c <HAL_SPI_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018c2:	f7ff ffc9 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002e0 	.word	0x200002e0
 80018d0:	40013000 	.word	0x40013000

080018d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018d8:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <MX_SPI2_Init+0x64>)
 80018da:	4a18      	ldr	r2, [pc, #96]	@ (800193c <MX_SPI2_Init+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <MX_SPI2_Init+0x64>)
 80018e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_SPI2_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <MX_SPI2_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_SPI2_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_SPI2_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <MX_SPI2_Init+0x64>)
 8001900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001904:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <MX_SPI2_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <MX_SPI2_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <MX_SPI2_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <MX_SPI2_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_SPI2_Init+0x64>)
 8001920:	220a      	movs	r2, #10
 8001922:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	@ (8001938 <MX_SPI2_Init+0x64>)
 8001926:	f003 f9b1 	bl	8004c8c <HAL_SPI_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001930:	f7ff ff92 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000338 	.word	0x20000338
 800193c:	40003800 	.word	0x40003800

08001940 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	@ 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a32      	ldr	r2, [pc, #200]	@ (8001a28 <HAL_SPI_MspInit+0xe8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d12c      	bne.n	80019bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	4a30      	ldr	r2, [pc, #192]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 800196c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001970:	6453      	str	r3, [r2, #68]	@ 0x44
 8001972:	4b2e      	ldr	r3, [pc, #184]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a29      	ldr	r2, [pc, #164]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TM_SCK_Pin|TM_MOSI_Pin;
 800199a:	23a0      	movs	r3, #160	@ 0xa0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019aa:	2305      	movs	r3, #5
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	481e      	ldr	r0, [pc, #120]	@ (8001a30 <HAL_SPI_MspInit+0xf0>)
 80019b6:	f001 f923 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019ba:	e031      	b.n	8001a20 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <HAL_SPI_MspInit+0xf4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12c      	bne.n	8001a20 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_SPI_MspInit+0xec>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 80019fe:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a10:	2305      	movs	r3, #5
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <HAL_SPI_MspInit+0xf8>)
 8001a1c:	f001 f8f0 	bl	8002c00 <HAL_GPIO_Init>
}
 8001a20:	bf00      	nop
 8001a22:	3730      	adds	r7, #48	@ 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40013000 	.word	0x40013000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40003800 	.word	0x40003800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f000 f949 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <USART1_IRQHandler+0x10>)
 8001af2:	f003 ffa1 	bl	8005a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000390 	.word	0x20000390

08001b00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <DMA2_Stream0_IRQHandler+0x10>)
 8001b06:	f000 fe3f 	bl	8002788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000280 	.word	0x20000280

08001b14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <OTG_FS_IRQHandler+0x10>)
 8001b1a:	f001 fb52 	bl	80031c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200018bc 	.word	0x200018bc

08001b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <MX_USART1_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b84:	f003 fe58 	bl	8005838 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f7ff fe63 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000390 	.word	0x20000390
 8001b9c:	40011000 	.word	0x40011000

08001ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8001c70 <HAL_UART_MspInit+0xd0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d152      	bne.n	8001c68 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001bcc:	f043 0310 	orr.w	r3, r3, #16
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a23      	ldr	r2, [pc, #140]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <HAL_UART_MspInit+0xd4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4811      	ldr	r0, [pc, #68]	@ (8001c78 <HAL_UART_MspInit+0xd8>)
 8001c34:	f000 ffe4 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <HAL_UART_MspInit+0xdc>)
 8001c54:	f000 ffd4 	bl	8002c00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2025      	movs	r0, #37	@ 0x25
 8001c5e:	f000 fc1c 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c62:	2025      	movs	r0, #37	@ 0x25
 8001c64:	f000 fc35 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	@ 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c84:	f7ff ff50 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	@ (8001cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f008 fe51 	bl	800a954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff fd51 	bl	8001758 <main>
  bx  lr    
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001cc4:	0800ab3c 	.word	0x0800ab3c
  ldr r2, =_sbss
 8001cc8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001ccc:	20002100 	.word	0x20002100

08001cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC_IRQHandler>
	...

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <HAL_Init+0x40>)
 8001cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <HAL_Init+0x40>)
 8001cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	@ (8001d14 <HAL_Init+0x40>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 fbc1 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f000 f808 	bl	8001d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d08:	f7ff fe98 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023c00 	.word	0x40023c00

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_InitTick+0x54>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_InitTick+0x58>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fbd9 	bl	80024ee <HAL_SYSTICK_Config>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00e      	b.n	8001d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d80a      	bhi.n	8001d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 fba1 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d58:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <HAL_InitTick+0x5c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000014 	.word	0x20000014
 8001d70:	2000001c 	.word	0x2000001c
 8001d74:	20000018 	.word	0x20000018

08001d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_IncTick+0x20>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_IncTick+0x24>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <HAL_IncTick+0x24>)
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000001c 	.word	0x2000001c
 8001d9c:	200003d8 	.word	0x200003d8

08001da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <HAL_GetTick+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	200003d8 	.word	0x200003d8

08001db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff ffee 	bl	8001da0 <HAL_GetTick>
 8001dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd0:	d005      	beq.n	8001dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <HAL_Delay+0x44>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dde:	bf00      	nop
 8001de0:	f7ff ffde 	bl	8001da0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d8f7      	bhi.n	8001de0 <HAL_Delay+0x28>
  {
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000001c 	.word	0x2000001c

08001e00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e033      	b.n	8001e7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fb62 	bl	80014e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e46:	f023 0302 	bic.w	r3, r3, #2
 8001e4a:	f043 0202 	orr.w	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f94a 	bl	80020ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f023 0303 	bic.w	r3, r3, #3
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e6e:	e001      	b.n	8001e74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1c>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e113      	b.n	80020cc <HAL_ADC_ConfigChannel+0x244>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b09      	cmp	r3, #9
 8001eb2:	d925      	bls.n	8001f00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68d9      	ldr	r1, [r3, #12]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b1e      	subs	r3, #30
 8001eca:	2207      	movs	r2, #7
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68d9      	ldr	r1, [r3, #12]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	4603      	mov	r3, r0
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4403      	add	r3, r0
 8001ef2:	3b1e      	subs	r3, #30
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	e022      	b.n	8001f46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6919      	ldr	r1, [r3, #16]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	2207      	movs	r2, #7
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	400a      	ands	r2, r1
 8001f22:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6919      	ldr	r1, [r3, #16]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4403      	add	r3, r0
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d824      	bhi.n	8001f98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b05      	subs	r3, #5
 8001f60:	221f      	movs	r2, #31
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3b05      	subs	r3, #5
 8001f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f96:	e04c      	b.n	8002032 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d824      	bhi.n	8001fea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b23      	subs	r3, #35	@ 0x23
 8001fb2:	221f      	movs	r2, #31
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b23      	subs	r3, #35	@ 0x23
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fe8:	e023      	b.n	8002032 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b41      	subs	r3, #65	@ 0x41
 8001ffc:	221f      	movs	r2, #31
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	400a      	ands	r2, r1
 800200a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	4618      	mov	r0, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b41      	subs	r3, #65	@ 0x41
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002032:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <HAL_ADC_ConfigChannel+0x250>)
 8002034:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a28      	ldr	r2, [pc, #160]	@ (80020dc <HAL_ADC_ConfigChannel+0x254>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d10f      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1d8>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b12      	cmp	r3, #18
 8002046:	d10b      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <HAL_ADC_ConfigChannel+0x254>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d12b      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x23a>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1c      	ldr	r2, [pc, #112]	@ (80020e0 <HAL_ADC_ConfigChannel+0x258>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <HAL_ADC_ConfigChannel+0x1f4>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b11      	cmp	r3, #17
 800207a:	d122      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a11      	ldr	r2, [pc, #68]	@ (80020e0 <HAL_ADC_ConfigChannel+0x258>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d111      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_ADC_ConfigChannel+0x25c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a11      	ldr	r2, [pc, #68]	@ (80020e8 <HAL_ADC_ConfigChannel+0x260>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	0c9a      	lsrs	r2, r3, #18
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020b4:	e002      	b.n	80020bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f9      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40012300 	.word	0x40012300
 80020dc:	40012000 	.word	0x40012000
 80020e0:	10000012 	.word	0x10000012
 80020e4:	20000014 	.word	0x20000014
 80020e8:	431bde83 	.word	0x431bde83

080020ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f4:	4b79      	ldr	r3, [pc, #484]	@ (80022dc <ADC_Init+0x1f0>)
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	431a      	orrs	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	021a      	lsls	r2, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217e:	4a58      	ldr	r2, [pc, #352]	@ (80022e0 <ADC_Init+0x1f4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d022      	beq.n	80021ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002192:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6899      	ldr	r1, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e00f      	b.n	80021ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0202 	bic.w	r2, r2, #2
 80021f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e1b      	ldrb	r3, [r3, #24]
 8002204:	005a      	lsls	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01b      	beq.n	8002250 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002226:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002236:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	3b01      	subs	r3, #1
 8002244:	035a      	lsls	r2, r3, #13
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e007      	b.n	8002260 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800225e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800226e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	3b01      	subs	r3, #1
 800227c:	051a      	lsls	r2, r3, #20
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022a2:	025a      	lsls	r2, r3, #9
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6899      	ldr	r1, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	029a      	lsls	r2, r3, #10
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40012300 	.word	0x40012300
 80022e0:	0f000001 	.word	0x0f000001

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	@ (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	490c      	ldr	r1, [pc, #48]	@ (80023d0 <__NVIC_SetPriority+0x4c>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4908      	ldr	r1, [pc, #32]	@ (80023d4 <__NVIC_SetPriority+0x50>)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3b04      	subs	r3, #4
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	@ 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf28      	it	cs
 80023f6:	2304      	movcs	r3, #4
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b03      	subs	r3, #3
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43d9      	mvns	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	4313      	orrs	r3, r2
         );
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	@ 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f7ff ff8e 	bl	8002384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff29 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff3e 	bl	800232c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff8e 	bl	80023d8 <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5d 	bl	8002384 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff31 	bl	8002348 <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ffa2 	bl	8002440 <SysTick_Config>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff fc44 	bl	8001da0 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e099      	b.n	8002658 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002544:	e00f      	b.n	8002566 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002546:	f7ff fc2b 	bl	8001da0 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b05      	cmp	r3, #5
 8002552:	d908      	bls.n	8002566 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e078      	b.n	8002658 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e8      	bne.n	8002546 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_DMA_Init+0x158>)
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	4313      	orrs	r3, r2
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f023 0307 	bic.w	r3, r3, #7
 80025e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d117      	bne.n	800262a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fa7b 	bl	8002b08 <DMA_CheckFifoParam>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2240      	movs	r2, #64	@ 0x40
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002626:	2301      	movs	r3, #1
 8002628:	e016      	b.n	8002658 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa32 	bl	8002a9c <DMA_CalcBaseAndBitshift>
 8002638:	4603      	mov	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	223f      	movs	r2, #63	@ 0x3f
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	f010803f 	.word	0xf010803f

08002664 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002672:	f7ff fb95 	bl	8001da0 <HAL_GetTick>
 8002676:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d008      	beq.n	8002696 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2280      	movs	r2, #128	@ 0x80
 8002688:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e052      	b.n	800273c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0216 	bic.w	r2, r2, #22
 80026a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <HAL_DMA_Abort+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0208 	bic.w	r2, r2, #8
 80026d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e6:	e013      	b.n	8002710 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e8:	f7ff fb5a 	bl	8001da0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d90c      	bls.n	8002710 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2203      	movs	r2, #3
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e015      	b.n	800273c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e4      	bne.n	80026e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	223f      	movs	r2, #63	@ 0x3f
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d004      	beq.n	8002762 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2280      	movs	r2, #128	@ 0x80
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00c      	b.n	800277c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2205      	movs	r2, #5
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002794:	4b8e      	ldr	r3, [pc, #568]	@ (80029d0 <HAL_DMA_IRQHandler+0x248>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a8e      	ldr	r2, [pc, #568]	@ (80029d4 <HAL_DMA_IRQHandler+0x24c>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a9b      	lsrs	r3, r3, #10
 80027a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	2208      	movs	r2, #8
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01a      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0204 	bic.w	r2, r2, #4
 80027da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	2208      	movs	r2, #8
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f8:	2201      	movs	r2, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d012      	beq.n	800282a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	2201      	movs	r2, #1
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	2204      	movs	r2, #4
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	2204      	movs	r2, #4
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	2210      	movs	r2, #16
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d043      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03c      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	2210      	movs	r2, #16
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d018      	beq.n	80028ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d024      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
 80028b6:	e01f      	b.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
 80028c8:	e016      	b.n	80028f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0208 	bic.w	r2, r2, #8
 80028e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	2220      	movs	r2, #32
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 808f 	beq.w	8002a28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8087 	beq.w	8002a28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291e:	2220      	movs	r2, #32
 8002920:	409a      	lsls	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b05      	cmp	r3, #5
 8002930:	d136      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0216 	bic.w	r2, r2, #22
 8002940:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002950:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <HAL_DMA_IRQHandler+0x1da>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0208 	bic.w	r2, r2, #8
 8002970:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002976:	223f      	movs	r2, #63	@ 0x3f
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	d07e      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
        }
        return;
 800299e:	e079      	b.n	8002a94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01d      	beq.n	80029ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d031      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
 80029cc:	e02c      	b.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
 80029ce:	bf00      	nop
 80029d0:	20000014 	.word	0x20000014
 80029d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d023      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e01e      	b.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10f      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0210 	bic.w	r2, r2, #16
 8002a06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d032      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d022      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2205      	movs	r2, #5
 8002a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d307      	bcc.n	8002a70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f2      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x2cc>
 8002a6e:	e000      	b.n	8002a72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e000      	b.n	8002a96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a94:	bf00      	nop
    }
  }
}
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b10      	subs	r3, #16
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <DMA_CalcBaseAndBitshift+0x64>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ab6:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d909      	bls.n	8002ade <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	1d1a      	adds	r2, r3, #4
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	659a      	str	r2, [r3, #88]	@ 0x58
 8002adc:	e007      	b.n	8002aee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	aaaaaaab 	.word	0xaaaaaaab
 8002b04:	0800ab1c 	.word	0x0800ab1c

08002b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d856      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xce>
 8002b28:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <DMA_CheckFifoParam+0x28>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b41 	.word	0x08002b41
 8002b34:	08002b53 	.word	0x08002b53
 8002b38:	08002b41 	.word	0x08002b41
 8002b3c:	08002bd7 	.word	0x08002bd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d046      	beq.n	8002bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e043      	b.n	8002bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b5a:	d140      	bne.n	8002bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e03d      	b.n	8002bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b6a:	d121      	bne.n	8002bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d837      	bhi.n	8002be2 <DMA_CheckFifoParam+0xda>
 8002b72:	a201      	add	r2, pc, #4	@ (adr r2, 8002b78 <DMA_CheckFifoParam+0x70>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b8f 	.word	0x08002b8f
 8002b80:	08002b89 	.word	0x08002b89
 8002b84:	08002ba1 	.word	0x08002ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e030      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d025      	beq.n	8002be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9e:	e022      	b.n	8002be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bae:	e01c      	b.n	8002bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d903      	bls.n	8002bbe <DMA_CheckFifoParam+0xb6>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d003      	beq.n	8002bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bbc:	e018      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc2:	e015      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e00b      	b.n	8002bee <DMA_CheckFifoParam+0xe6>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e00a      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e008      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bde:	bf00      	nop
 8002be0:	e006      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
 8002be4:	e004      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
    }
  } 
  
  return status; 
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e159      	b.n	8002ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	f040 8148 	bne.w	8002eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d005      	beq.n	8002c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d130      	bne.n	8002cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c88:	2201      	movs	r2, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 0201 	and.w	r2, r3, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d017      	beq.n	8002cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d123      	bne.n	8002d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	08da      	lsrs	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3208      	adds	r2, #8
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0203 	and.w	r2, r3, #3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a2 	beq.w	8002eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b57      	ldr	r3, [pc, #348]	@ (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	4a56      	ldr	r2, [pc, #344]	@ (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d96:	4b54      	ldr	r3, [pc, #336]	@ (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da2:	4a52      	ldr	r2, [pc, #328]	@ (8002eec <HAL_GPIO_Init+0x2ec>)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a49      	ldr	r2, [pc, #292]	@ (8002ef0 <HAL_GPIO_Init+0x2f0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x202>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a48      	ldr	r2, [pc, #288]	@ (8002ef4 <HAL_GPIO_Init+0x2f4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x1fe>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a47      	ldr	r2, [pc, #284]	@ (8002ef8 <HAL_GPIO_Init+0x2f8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x1fa>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a46      	ldr	r2, [pc, #280]	@ (8002efc <HAL_GPIO_Init+0x2fc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x1f6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a45      	ldr	r2, [pc, #276]	@ (8002f00 <HAL_GPIO_Init+0x300>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x1f2>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e008      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002df6:	2303      	movs	r3, #3
 8002df8:	e004      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e002      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002e02:	2300      	movs	r3, #0
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	f002 0203 	and.w	r2, r2, #3
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	4093      	lsls	r3, r2
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e14:	4935      	ldr	r1, [pc, #212]	@ (8002eec <HAL_GPIO_Init+0x2ec>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e22:	4b38      	ldr	r3, [pc, #224]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e46:	4a2f      	ldr	r2, [pc, #188]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e70:	4a24      	ldr	r2, [pc, #144]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e76:	4b23      	ldr	r3, [pc, #140]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea0:	4b18      	ldr	r3, [pc, #96]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	f67f aea2 	bls.w	8002c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	3724      	adds	r7, #36	@ 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40013c00 	.word	0x40013c00

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af02      	add	r7, sp, #8
 8002f40:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e101      	b.n	8003150 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f007 f9ca 	bl	800a300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2203      	movs	r2, #3
 8002f70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f7a:	d102      	bne.n	8002f82 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 fdc3 	bl	8006b12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7c1a      	ldrb	r2, [r3, #16]
 8002f94:	f88d 2000 	strb.w	r2, [sp]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9c:	f003 fca2 	bl	80068e4 <USB_CoreInit>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0ce      	b.n	8003150 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fdbb 	bl	8006b34 <USB_SetCurrentMode>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0bf      	b.n	8003150 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e04a      	b.n	800306c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3315      	adds	r3, #21
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	b298      	uxth	r0, r3
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	332e      	adds	r3, #46	@ 0x2e
 8003012:	4602      	mov	r2, r0
 8003014:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3318      	adds	r3, #24
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	331c      	adds	r3, #28
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3320      	adds	r3, #32
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3324      	adds	r3, #36	@ 0x24
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	3301      	adds	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3af      	bcc.n	8002fd6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e044      	b.n	8003106 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	3301      	adds	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	429a      	cmp	r2, r3
 800310e:	d3b5      	bcc.n	800307c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7c1a      	ldrb	r2, [r3, #16]
 8003118:	f88d 2000 	strb.w	r2, [sp]
 800311c:	3304      	adds	r3, #4
 800311e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003120:	f003 fd54 	bl	8006bcc <USB_DevInit>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e00c      	b.n	8003150 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f004 fd98 	bl	8007c7e <USB_DevDisconnect>

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_PCD_Start+0x1c>
 8003170:	2302      	movs	r3, #2
 8003172:	e022      	b.n	80031ba <HAL_PCD_Start+0x62>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003194:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fca5 	bl	8006af0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f004 fd46 	bl	8007c3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031c2:	b590      	push	{r4, r7, lr}
 80031c4:	b08d      	sub	sp, #52	@ 0x34
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f004 fe04 	bl	8007de6 <USB_GetMode>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 848c 	bne.w	8003afe <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 fd68 	bl	8007cc0 <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8482 	beq.w	8003afc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f004 fd55 	bl	8007cc0 <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d107      	bne.n	8003230 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f002 0202 	and.w	r2, r2, #2
 800322e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fd43 	bl	8007cc0 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b10      	cmp	r3, #16
 8003242:	d161      	bne.n	8003308 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0210 	bic.w	r2, r2, #16
 8003252:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	0c5b      	lsrs	r3, r3, #17
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	2b02      	cmp	r3, #2
 800327e:	d124      	bne.n	80032ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d035      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	6a38      	ldr	r0, [r7, #32]
 80032a0:	f004 fb7a 	bl	8007998 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b0:	441a      	add	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c2:	441a      	add	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	615a      	str	r2, [r3, #20]
 80032c8:	e016      	b.n	80032f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	0c5b      	lsrs	r3, r3, #17
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d110      	bne.n	80032f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032dc:	2208      	movs	r2, #8
 80032de:	4619      	mov	r1, r3
 80032e0:	6a38      	ldr	r0, [r7, #32]
 80032e2:	f004 fb59 	bl	8007998 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f2:	441a      	add	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0210 	orr.w	r2, r2, #16
 8003306:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f004 fcd7 	bl	8007cc0 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003318:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800331c:	f040 80a7 	bne.w	800346e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f004 fcdc 	bl	8007ce6 <USB_ReadDevAllOutEpInterrupt>
 800332e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003330:	e099      	b.n	8003466 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 808e 	beq.w	800345a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f004 fd00 	bl	8007d4e <USB_ReadDevOutEPInterrupt>
 800334e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00c      	beq.n	8003374 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003366:	461a      	mov	r2, r3
 8003368:	2301      	movs	r3, #1
 800336a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800336c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fea2 	bl	80040b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00c      	beq.n	8003398 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338a:	461a      	mov	r2, r3
 800338c:	2308      	movs	r3, #8
 800338e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 ff78 	bl	8004288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ae:	461a      	mov	r2, r3
 80033b0:	2310      	movs	r3, #16
 80033b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d030      	beq.n	8003420 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c6:	2b80      	cmp	r3, #128	@ 0x80
 80033c8:	d109      	bne.n	80033de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	78db      	ldrb	r3, [r3, #3]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d108      	bne.n	800340e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f007 f875 	bl	800a4f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	2302      	movs	r3, #2
 800341e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003436:	461a      	mov	r2, r3
 8003438:	2320      	movs	r3, #32
 800343a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003452:	461a      	mov	r2, r3
 8003454:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003458:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	3301      	adds	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	f47f af62 	bne.w	8003332 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f004 fc24 	bl	8007cc0 <USB_ReadInterrupts>
 8003478:	4603      	mov	r3, r0
 800347a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800347e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003482:	f040 80db 	bne.w	800363c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f004 fc45 	bl	8007d1a <USB_ReadDevAllInEpInterrupt>
 8003490:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003496:	e0cd      	b.n	8003634 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80c2 	beq.w	8003628 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 fc6b 	bl	8007d8a <USB_ReadDevInEPInterrupt>
 80034b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d057      	beq.n	8003570 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	2201      	movs	r2, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	69f9      	ldr	r1, [r7, #28]
 80034dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034e0:	4013      	ands	r3, r2
 80034e2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f0:	461a      	mov	r2, r3
 80034f2:	2301      	movs	r3, #1
 80034f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	799b      	ldrb	r3, [r3, #6]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d132      	bne.n	8003564 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3320      	adds	r3, #32
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4403      	add	r3, r0
 800351e:	331c      	adds	r3, #28
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4419      	add	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4403      	add	r3, r0
 8003532:	3320      	adds	r3, #32
 8003534:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	2b00      	cmp	r3, #0
 800353a:	d113      	bne.n	8003564 <HAL_PCD_IRQHandler+0x3a2>
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3324      	adds	r3, #36	@ 0x24
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800355c:	461a      	mov	r2, r3
 800355e:	2101      	movs	r1, #1
 8003560:	f004 fc72 	bl	8007e48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f006 ff49 	bl	800a402 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003586:	461a      	mov	r2, r3
 8003588:	2308      	movs	r3, #8
 800358a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a2:	461a      	mov	r2, r3
 80035a4:	2310      	movs	r3, #16
 80035a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	2340      	movs	r3, #64	@ 0x40
 80035c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d023      	beq.n	8003616 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035d0:	6a38      	ldr	r0, [r7, #32]
 80035d2:	f003 fc5f 	bl	8006e94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	3310      	adds	r3, #16
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	78db      	ldrb	r3, [r3, #3]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f006 ff8c 	bl	800a51c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003610:	461a      	mov	r2, r3
 8003612:	2302      	movs	r3, #2
 8003614:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003620:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fcbb 	bl	8003f9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	3301      	adds	r3, #1
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800362e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	f47f af2e 	bne.w	8003498 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fb3d 	bl	8007cc0 <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800364c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003650:	d122      	bne.n	8003698 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003678:	2100      	movs	r1, #0
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fea2 	bl	80043c4 <HAL_PCDEx_LPM_Callback>
 8003680:	e002      	b.n	8003688 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f006 ff2a 	bl	800a4dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f004 fb0f 	bl	8007cc0 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ac:	d112      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f006 fee6 	bl	800a490 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80036d2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f004 faf1 	bl	8007cc0 <USB_ReadInterrupts>
 80036de:	4603      	mov	r3, r0
 80036e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e8:	f040 80b7 	bne.w	800385a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2110      	movs	r1, #16
 8003706:	4618      	mov	r0, r3
 8003708:	f003 fbc4 	bl	8006e94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003710:	e046      	b.n	80037a0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371e:	461a      	mov	r2, r3
 8003720:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003724:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003740:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003744:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003752:	461a      	mov	r2, r3
 8003754:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003758:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800376a:	0151      	lsls	r1, r2, #5
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	440a      	add	r2, r1
 8003770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003774:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003778:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800378a:	0151      	lsls	r1, r2, #5
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	440a      	add	r2, r1
 8003790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003794:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003798:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	3301      	adds	r3, #1
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	791b      	ldrb	r3, [r3, #4]
 80037a4:	461a      	mov	r2, r3
 80037a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d3b2      	bcc.n	8003712 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ba:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80037be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7bdb      	ldrb	r3, [r3, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d016      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037d8:	f043 030b 	orr.w	r3, r3, #11
 80037dc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ee:	f043 030b 	orr.w	r3, r3, #11
 80037f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f4:	e015      	b.n	8003822 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003808:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800380c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800381c:	f043 030b 	orr.w	r3, r3, #11
 8003820:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003830:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003834:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003844:	461a      	mov	r2, r3
 8003846:	f004 faff 	bl	8007e48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f004 fa2e 	bl	8007cc0 <USB_ReadInterrupts>
 8003864:	4603      	mov	r3, r0
 8003866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386e:	d123      	bne.n	80038b8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f004 fac4 	bl	8007e02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fb81 	bl	8006f86 <USB_GetDevSpeed>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681c      	ldr	r4, [r3, #0]
 8003890:	f001 f9c8 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8003894:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800389a:	461a      	mov	r2, r3
 800389c:	4620      	mov	r0, r4
 800389e:	f003 f885 	bl	80069ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f006 fdd5 	bl	800a452 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80038b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f004 f9ff 	bl	8007cc0 <USB_ReadInterrupts>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d10a      	bne.n	80038e2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f006 fdb2 	bl	800a436 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f002 0208 	and.w	r2, r2, #8
 80038e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 f9ea 	bl	8007cc0 <USB_ReadInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f2:	2b80      	cmp	r3, #128	@ 0x80
 80038f4:	d123      	bne.n	800393e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003902:	2301      	movs	r3, #1
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
 8003906:	e014      	b.n	8003932 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	b2db      	uxtb	r3, r3
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fb08 	bl	8003f3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	3301      	adds	r3, #1
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	791b      	ldrb	r3, [r3, #4]
 8003936:	461a      	mov	r2, r3
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	4293      	cmp	r3, r2
 800393c:	d3e4      	bcc.n	8003908 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f004 f9bc 	bl	8007cc0 <USB_ReadInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003952:	d13c      	bne.n	80039ce <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003954:	2301      	movs	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
 8003958:	e02b      	b.n	80039b2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3318      	adds	r3, #24
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d115      	bne.n	80039ac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003980:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003982:	2b00      	cmp	r3, #0
 8003984:	da12      	bge.n	80039ac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3317      	adds	r3, #23
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fac8 	bl	8003f3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	3301      	adds	r3, #1
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	791b      	ldrb	r3, [r3, #4]
 80039b6:	461a      	mov	r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d3cd      	bcc.n	800395a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80039cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f004 f974 	bl	8007cc0 <USB_ReadInterrupts>
 80039d8:	4603      	mov	r3, r0
 80039da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039e2:	d156      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e4:	2301      	movs	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e8:	e045      	b.n	8003a76 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d12e      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da2b      	bge.n	8003a70 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a24:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d121      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a6c:	6053      	str	r3, [r2, #4]
            break;
 8003a6e:	e008      	b.n	8003a82 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	3301      	adds	r3, #1
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	791b      	ldrb	r3, [r3, #4]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d3b3      	bcc.n	80039ea <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 f912 	bl	8007cc0 <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa6:	d10a      	bne.n	8003abe <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f006 fd49 	bl	800a540 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 f8fc 	bl	8007cc0 <USB_ReadInterrupts>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d115      	bne.n	8003afe <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f006 fd39 	bl	800a55c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	e000      	b.n	8003afe <HAL_PCD_IRQHandler+0x93c>
      return;
 8003afc:	bf00      	nop
    }
  }
}
 8003afe:	3734      	adds	r7, #52	@ 0x34
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd90      	pop	{r4, r7, pc}

08003b04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_PCD_SetAddress+0x1a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e012      	b.n	8003b44 <HAL_PCD_SetAddress+0x40>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f004 f85b 	bl	8007bf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	70fb      	strb	r3, [r7, #3]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	803b      	strh	r3, [r7, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da0f      	bge.n	8003b92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 020f 	and.w	r2, r3, #15
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	3310      	adds	r3, #16
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	3304      	adds	r3, #4
 8003b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	705a      	strb	r2, [r3, #1]
 8003b90:	e00f      	b.n	8003bb2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 020f 	and.w	r2, r3, #15
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bbe:	883a      	ldrh	r2, [r7, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	78ba      	ldrb	r2, [r7, #2]
 8003bc8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bdc:	78bb      	ldrb	r3, [r7, #2]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d102      	bne.n	8003be8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_PCD_EP_Open+0xaa>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e00e      	b.n	8003c14 <HAL_PCD_EP_Open+0xc8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 f9e3 	bl	8006fd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c12:	7afb      	ldrb	r3, [r7, #11]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	da0f      	bge.n	8003c50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	f003 020f 	and.w	r2, r3, #15
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	3310      	adds	r3, #16
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	705a      	strb	r2, [r3, #1]
 8003c4e:	e00f      	b.n	8003c70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 020f 	and.w	r2, r3, #15
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	3304      	adds	r3, #4
 8003c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_PCD_EP_Close+0x6e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e00e      	b.n	8003ca8 <HAL_PCD_EP_Close+0x8c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f003 fa21 	bl	80070e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc0:	7afb      	ldrb	r3, [r7, #11]
 8003cc2:	f003 020f 	and.w	r2, r3, #15
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	799b      	ldrb	r3, [r3, #6]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	799b      	ldrb	r3, [r3, #6]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	f003 fabe 	bl	8007298 <USB_EPStartXfer>

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d48:	681b      	ldr	r3, [r3, #0]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	460b      	mov	r3, r1
 8003d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	7afb      	ldrb	r3, [r7, #11]
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	3310      	adds	r3, #16
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2201      	movs	r2, #1
 8003d94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d96:	7afb      	ldrb	r3, [r7, #11]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	799b      	ldrb	r3, [r3, #6]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d102      	bne.n	8003db0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	799b      	ldrb	r3, [r3, #6]
 8003db8:	461a      	mov	r2, r3
 8003dba:	6979      	ldr	r1, [r7, #20]
 8003dbc:	f003 fa6c 	bl	8007298 <USB_EPStartXfer>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	7912      	ldrb	r2, [r2, #4]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e04f      	b.n	8003e88 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da0f      	bge.n	8003e10 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3310      	adds	r3, #16
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	705a      	strb	r2, [r3, #1]
 8003e0e:	e00d      	b.n	8003e2c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_PCD_EP_SetStall+0x82>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e01d      	b.n	8003e88 <HAL_PCD_EP_SetStall+0xbe>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f003 fdf4 	bl	8007a48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7999      	ldrb	r1, [r3, #6]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f003 ffe5 	bl	8007e48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	7912      	ldrb	r2, [r2, #4]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e042      	b.n	8003f34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	da0f      	bge.n	8003ed6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	3310      	adds	r3, #16
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	3304      	adds	r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	705a      	strb	r2, [r3, #1]
 8003ed4:	e00f      	b.n	8003ef6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	f003 020f 	and.w	r2, r3, #15
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	4413      	add	r3, r2
 8003eec:	3304      	adds	r3, #4
 8003eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_PCD_EP_ClrStall+0x86>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e00e      	b.n	8003f34 <HAL_PCD_EP_ClrStall+0xa4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f003 fdfd 	bl	8007b24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da0c      	bge.n	8003f6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	3310      	adds	r3, #16
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	3304      	adds	r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e00c      	b.n	8003f84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3304      	adds	r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f003 fc1c 	bl	80077c8 <USB_EPStopXfer>
 8003f90:	4603      	mov	r3, r0
 8003f92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f94:	7afb      	ldrb	r3, [r7, #11]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b08a      	sub	sp, #40	@ 0x28
 8003fa2:	af02      	add	r7, sp, #8
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d901      	bls.n	8003fd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e06b      	b.n	80040ae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d902      	bls.n	8003ff2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3303      	adds	r3, #3
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ffa:	e02a      	b.n	8004052 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	429a      	cmp	r2, r3
 8004010:	d902      	bls.n	8004018 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3303      	adds	r3, #3
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68d9      	ldr	r1, [r3, #12]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	b2da      	uxtb	r2, r3
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	4603      	mov	r3, r0
 8004034:	6978      	ldr	r0, [r7, #20]
 8004036:	f003 fc71 	bl	800791c <USB_WritePacket>

    ep->xfer_buff  += len;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	441a      	add	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	441a      	add	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	429a      	cmp	r2, r3
 8004066:	d809      	bhi.n	800407c <PCD_WriteEmptyTxFifo+0xde>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004070:	429a      	cmp	r2, r3
 8004072:	d203      	bcs.n	800407c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1bf      	bne.n	8003ffc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	429a      	cmp	r2, r3
 8004086:	d811      	bhi.n	80040ac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	6939      	ldr	r1, [r7, #16]
 80040a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040a8:	4013      	ands	r3, r2
 80040aa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	333c      	adds	r3, #60	@ 0x3c
 80040d0:	3304      	adds	r3, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	799b      	ldrb	r3, [r3, #6]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d17b      	bne.n	80041e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d015      	beq.n	8004124 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4a61      	ldr	r2, [pc, #388]	@ (8004280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	f240 80b9 	bls.w	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80b3 	beq.w	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411a:	461a      	mov	r2, r3
 800411c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004120:	6093      	str	r3, [r2, #8]
 8004122:	e0a7      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413a:	461a      	mov	r2, r3
 800413c:	2320      	movs	r3, #32
 800413e:	6093      	str	r3, [r2, #8]
 8004140:	e098      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 8093 	bne.w	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	4a4b      	ldr	r2, [pc, #300]	@ (8004280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d90f      	bls.n	8004176 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004172:	6093      	str	r3, [r2, #8]
 8004174:	e07e      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	0159      	lsls	r1, r3, #5
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	440b      	add	r3, r1
 8004198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d114      	bne.n	80041d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041c0:	461a      	mov	r2, r3
 80041c2:	2101      	movs	r1, #1
 80041c4:	f003 fe40 	bl	8007e48 <USB_EP0_OutStart>
 80041c8:	e006      	b.n	80041d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	441a      	add	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f006 f8f4 	bl	800a3cc <HAL_PCD_DataOutStageCallback>
 80041e4:	e046      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d124      	bne.n	8004238 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004204:	461a      	mov	r2, r3
 8004206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800420a:	6093      	str	r3, [r2, #8]
 800420c:	e032      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004224:	461a      	mov	r2, r3
 8004226:	2320      	movs	r3, #32
 8004228:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f006 f8cb 	bl	800a3cc <HAL_PCD_DataOutStageCallback>
 8004236:	e01d      	b.n	8004274 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d114      	bne.n	8004268 <PCD_EP_OutXfrComplete_int+0x1b0>
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d108      	bne.n	8004268 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004260:	461a      	mov	r2, r3
 8004262:	2100      	movs	r1, #0
 8004264:	f003 fdf0 	bl	8007e48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f006 f8ac 	bl	800a3cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	4f54300a 	.word	0x4f54300a
 8004284:	4f54310a 	.word	0x4f54310a

08004288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	333c      	adds	r3, #60	@ 0x3c
 80042a0:	3304      	adds	r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d90e      	bls.n	80042dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d4:	461a      	mov	r2, r3
 80042d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f006 f863 	bl	800a3a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004310 <PCD_EP_OutSetupPacket_int+0x88>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d90c      	bls.n	8004304 <PCD_EP_OutSetupPacket_int+0x7c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	799b      	ldrb	r3, [r3, #6]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d108      	bne.n	8004304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042fc:	461a      	mov	r2, r3
 80042fe:	2101      	movs	r1, #1
 8004300:	f003 fda2 	bl	8007e48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	4f54300a 	.word	0x4f54300a

08004314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
 8004320:	4613      	mov	r3, r2
 8004322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004332:	883b      	ldrh	r3, [r7, #0]
 8004334:	0419      	lsls	r1, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	430a      	orrs	r2, r1
 800433e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004340:	e028      	b.n	8004394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	4413      	add	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	e00d      	b.n	8004372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	3340      	adds	r3, #64	@ 0x40
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4413      	add	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	3301      	adds	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	3b01      	subs	r3, #1
 8004378:	429a      	cmp	r2, r3
 800437a:	d3ec      	bcc.n	8004356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800437c:	883b      	ldrh	r3, [r7, #0]
 800437e:	0418      	lsls	r0, r3, #16
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	3b01      	subs	r3, #1
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	4302      	orrs	r2, r0
 800438c:	3340      	adds	r3, #64	@ 0x40
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e267      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d075      	beq.n	80044e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fa:	4b88      	ldr	r3, [pc, #544]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b04      	cmp	r3, #4
 8004404:	d00c      	beq.n	8004420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004406:	4b85      	ldr	r3, [pc, #532]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800440e:	2b08      	cmp	r3, #8
 8004410:	d112      	bne.n	8004438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004412:	4b82      	ldr	r3, [pc, #520]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800441e:	d10b      	bne.n	8004438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	4b7e      	ldr	r3, [pc, #504]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05b      	beq.n	80044e4 <HAL_RCC_OscConfig+0x108>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d157      	bne.n	80044e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e242      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004440:	d106      	bne.n	8004450 <HAL_RCC_OscConfig+0x74>
 8004442:	4b76      	ldr	r3, [pc, #472]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a75      	ldr	r2, [pc, #468]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e01d      	b.n	800448c <HAL_RCC_OscConfig+0xb0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x98>
 800445a:	4b70      	ldr	r3, [pc, #448]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6f      	ldr	r2, [pc, #444]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b6d      	ldr	r3, [pc, #436]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6c      	ldr	r2, [pc, #432]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0xb0>
 8004474:	4b69      	ldr	r3, [pc, #420]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a68      	ldr	r2, [pc, #416]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b66      	ldr	r3, [pc, #408]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a65      	ldr	r2, [pc, #404]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fd fc84 	bl	8001da0 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800449c:	f7fd fc80 	bl	8001da0 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	@ 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e207      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b5b      	ldr	r3, [pc, #364]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0xc0>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fd fc70 	bl	8001da0 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fd fc6c 	bl	8001da0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	@ 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1f3      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	4b51      	ldr	r3, [pc, #324]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0xe8>
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d063      	beq.n	80045ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f2:	4b4a      	ldr	r3, [pc, #296]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fe:	4b47      	ldr	r3, [pc, #284]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004506:	2b08      	cmp	r3, #8
 8004508:	d11c      	bne.n	8004544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450a:	4b44      	ldr	r3, [pc, #272]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	4b41      	ldr	r3, [pc, #260]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_RCC_OscConfig+0x152>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d001      	beq.n	800452e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e1c7      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	4b3b      	ldr	r3, [pc, #236]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4937      	ldr	r1, [pc, #220]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004542:	e03a      	b.n	80045ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454c:	4b34      	ldr	r3, [pc, #208]	@ (8004620 <HAL_RCC_OscConfig+0x244>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fd fc25 	bl	8001da0 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455a:	f7fd fc21 	bl	8001da0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e1a8      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456c:	4b2b      	ldr	r3, [pc, #172]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004578:	4b28      	ldr	r3, [pc, #160]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4925      	ldr	r1, [pc, #148]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]
 800458c:	e015      	b.n	80045ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800458e:	4b24      	ldr	r3, [pc, #144]	@ (8004620 <HAL_RCC_OscConfig+0x244>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd fc04 	bl	8001da0 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459c:	f7fd fc00 	bl	8001da0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e187      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d036      	beq.n	8004634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ce:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <HAL_RCC_OscConfig+0x248>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd fbe4 	bl	8001da0 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045dc:	f7fd fbe0 	bl	8001da0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e167      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <HAL_RCC_OscConfig+0x240>)
 80045f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x200>
 80045fa:	e01b      	b.n	8004634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045fc:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_OscConfig+0x248>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fd fbcd 	bl	8001da0 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004608:	e00e      	b.n	8004628 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460a:	f7fd fbc9 	bl	8001da0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d907      	bls.n	8004628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e150      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
 800461c:	40023800 	.word	0x40023800
 8004620:	42470000 	.word	0x42470000
 8004624:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004628:	4b88      	ldr	r3, [pc, #544]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 800462a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ea      	bne.n	800460a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8097 	beq.w	8004770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004646:	4b81      	ldr	r3, [pc, #516]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10f      	bne.n	8004672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	4b7d      	ldr	r3, [pc, #500]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	4a7c      	ldr	r2, [pc, #496]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004660:	6413      	str	r3, [r2, #64]	@ 0x40
 8004662:	4b7a      	ldr	r3, [pc, #488]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004672:	4b77      	ldr	r3, [pc, #476]	@ (8004850 <HAL_RCC_OscConfig+0x474>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d118      	bne.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467e:	4b74      	ldr	r3, [pc, #464]	@ (8004850 <HAL_RCC_OscConfig+0x474>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a73      	ldr	r2, [pc, #460]	@ (8004850 <HAL_RCC_OscConfig+0x474>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468a:	f7fd fb89 	bl	8001da0 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004692:	f7fd fb85 	bl	8001da0 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e10c      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004850 <HAL_RCC_OscConfig+0x474>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d106      	bne.n	80046c6 <HAL_RCC_OscConfig+0x2ea>
 80046b8:	4b64      	ldr	r3, [pc, #400]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046bc:	4a63      	ldr	r2, [pc, #396]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c4:	e01c      	b.n	8004700 <HAL_RCC_OscConfig+0x324>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x30c>
 80046ce:	4b5f      	ldr	r3, [pc, #380]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	4a5e      	ldr	r2, [pc, #376]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046d4:	f043 0304 	orr.w	r3, r3, #4
 80046d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046da:	4b5c      	ldr	r3, [pc, #368]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	4a5b      	ldr	r2, [pc, #364]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0x324>
 80046e8:	4b58      	ldr	r3, [pc, #352]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ec:	4a57      	ldr	r2, [pc, #348]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f4:	4b55      	ldr	r3, [pc, #340]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	4a54      	ldr	r2, [pc, #336]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80046fa:	f023 0304 	bic.w	r3, r3, #4
 80046fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d015      	beq.n	8004734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fd fb4a 	bl	8001da0 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd fb46 	bl	8001da0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e0cb      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	4b49      	ldr	r3, [pc, #292]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ee      	beq.n	8004710 <HAL_RCC_OscConfig+0x334>
 8004732:	e014      	b.n	800475e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004734:	f7fd fb34 	bl	8001da0 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800473c:	f7fd fb30 	bl	8001da0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0b5      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004752:	4b3e      	ldr	r3, [pc, #248]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ee      	bne.n	800473c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d105      	bne.n	8004770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004764:	4b39      	ldr	r3, [pc, #228]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	4a38      	ldr	r2, [pc, #224]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a1 	beq.w	80048bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800477a:	4b34      	ldr	r3, [pc, #208]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b08      	cmp	r3, #8
 8004784:	d05c      	beq.n	8004840 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d141      	bne.n	8004812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b31      	ldr	r3, [pc, #196]	@ (8004854 <HAL_RCC_OscConfig+0x478>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd fb04 	bl	8001da0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fb00 	bl	8001da0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e087      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b27      	ldr	r3, [pc, #156]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	019b      	lsls	r3, r3, #6
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	3b01      	subs	r3, #1
 80047d4:	041b      	lsls	r3, r3, #16
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	491b      	ldr	r1, [pc, #108]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004854 <HAL_RCC_OscConfig+0x478>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fd fad9 	bl	8001da0 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fd fad5 	bl	8001da0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e05c      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004804:	4b11      	ldr	r3, [pc, #68]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0x416>
 8004810:	e054      	b.n	80048bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004812:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <HAL_RCC_OscConfig+0x478>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fd fac2 	bl	8001da0 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004820:	f7fd fabe 	bl	8001da0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e045      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <HAL_RCC_OscConfig+0x470>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x444>
 800483e:	e03d      	b.n	80048bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d107      	bne.n	8004858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e038      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
 800484c:	40023800 	.word	0x40023800
 8004850:	40007000 	.word	0x40007000
 8004854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004858:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <HAL_RCC_OscConfig+0x4ec>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d028      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d121      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d11a      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800488e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004890:	4293      	cmp	r3, r2
 8004892:	d111      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	3b01      	subs	r3, #1
 80048a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0cc      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e0:	4b68      	ldr	r3, [pc, #416]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d90c      	bls.n	8004908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b65      	ldr	r3, [pc, #404]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b63      	ldr	r3, [pc, #396]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0b8      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d020      	beq.n	8004956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004920:	4b59      	ldr	r3, [pc, #356]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a58      	ldr	r2, [pc, #352]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800492a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004938:	4b53      	ldr	r3, [pc, #332]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a52      	ldr	r2, [pc, #328]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004944:	4b50      	ldr	r3, [pc, #320]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	494d      	ldr	r1, [pc, #308]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d044      	beq.n	80049ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b47      	ldr	r3, [pc, #284]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d119      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e07f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d003      	beq.n	800498a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004986:	2b03      	cmp	r3, #3
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e067      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049aa:	4b37      	ldr	r3, [pc, #220]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 0203 	bic.w	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4934      	ldr	r1, [pc, #208]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049bc:	f7fd f9f0 	bl	8001da0 <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	e00a      	b.n	80049da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c4:	f7fd f9ec 	bl	8001da0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e04f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	4b2b      	ldr	r3, [pc, #172]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 020c 	and.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d1eb      	bne.n	80049c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ec:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d20c      	bcs.n	8004a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fa:	4b22      	ldr	r3, [pc, #136]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b20      	ldr	r3, [pc, #128]	@ (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e032      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a20:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4916      	ldr	r1, [pc, #88]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a3e:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	490e      	ldr	r1, [pc, #56]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a52:	f000 f821 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	490a      	ldr	r1, [pc, #40]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c0>)
 8004a64:	5ccb      	ldrb	r3, [r1, r3]
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	4a09      	ldr	r2, [pc, #36]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a6e:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd f950 	bl	8001d18 <HAL_InitTick>

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023c00 	.word	0x40023c00
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	0800ab04 	.word	0x0800ab04
 8004a90:	20000014 	.word	0x20000014
 8004a94:	20000018 	.word	0x20000018

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a9c:	b090      	sub	sp, #64	@ 0x40
 8004a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab0:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d00d      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	f200 80a1 	bhi.w	8004c04 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x34>
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aca:	e09b      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004acc:	4b53      	ldr	r3, [pc, #332]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8004ace:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004ad0:	e09b      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ad2:	4b53      	ldr	r3, [pc, #332]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ad6:	e098      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ae0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d028      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aee:	4b4a      	ldr	r3, [pc, #296]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	099b      	lsrs	r3, r3, #6
 8004af4:	2200      	movs	r2, #0
 8004af6:	623b      	str	r3, [r7, #32]
 8004af8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b00:	2100      	movs	r1, #0
 8004b02:	4b47      	ldr	r3, [pc, #284]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b04:	fb03 f201 	mul.w	r2, r3, r1
 8004b08:	2300      	movs	r3, #0
 8004b0a:	fb00 f303 	mul.w	r3, r0, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	4a43      	ldr	r2, [pc, #268]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b12:	fba0 1202 	umull	r1, r2, r0, r2
 8004b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b18:	460a      	mov	r2, r1
 8004b1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b1e:	4413      	add	r3, r2
 8004b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	2200      	movs	r2, #0
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	61fa      	str	r2, [r7, #28]
 8004b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b32:	f7fb fb51 	bl	80001d8 <__aeabi_uldivmod>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b3e:	e053      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b40:	4b35      	ldr	r3, [pc, #212]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	099b      	lsrs	r3, r3, #6
 8004b46:	2200      	movs	r2, #0
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	617a      	str	r2, [r7, #20]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b52:	f04f 0b00 	mov.w	fp, #0
 8004b56:	4652      	mov	r2, sl
 8004b58:	465b      	mov	r3, fp
 8004b5a:	f04f 0000 	mov.w	r0, #0
 8004b5e:	f04f 0100 	mov.w	r1, #0
 8004b62:	0159      	lsls	r1, r3, #5
 8004b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b68:	0150      	lsls	r0, r2, #5
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	ebb2 080a 	subs.w	r8, r2, sl
 8004b72:	eb63 090b 	sbc.w	r9, r3, fp
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b8a:	ebb2 0408 	subs.w	r4, r2, r8
 8004b8e:	eb63 0509 	sbc.w	r5, r3, r9
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	00eb      	lsls	r3, r5, #3
 8004b9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba0:	00e2      	lsls	r2, r4, #3
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	461d      	mov	r5, r3
 8004ba6:	eb14 030a 	adds.w	r3, r4, sl
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	eb45 030b 	adc.w	r3, r5, fp
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	028b      	lsls	r3, r1, #10
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc8:	4621      	mov	r1, r4
 8004bca:	028a      	lsls	r2, r1, #10
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	60fa      	str	r2, [r7, #12]
 8004bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bdc:	f7fb fafc 	bl	80001d8 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4613      	mov	r3, r2
 8004be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004bf8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3740      	adds	r7, #64	@ 0x40
 8004c10:	46bd      	mov	sp, r7
 8004c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	00f42400 	.word	0x00f42400
 8004c20:	017d7840 	.word	0x017d7840

08004c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b03      	ldr	r3, [pc, #12]	@ (8004c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000014 	.word	0x20000014

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c40:	f7ff fff0 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0a9b      	lsrs	r3, r3, #10
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	@ (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	0800ab14 	.word	0x0800ab14

08004c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c68:	f7ff ffdc 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0b5b      	lsrs	r3, r3, #13
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4903      	ldr	r1, [pc, #12]	@ (8004c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	0800ab14 	.word	0x0800ab14

08004c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e07b      	b.n	8004d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cae:	d009      	beq.n	8004cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	61da      	str	r2, [r3, #28]
 8004cb6:	e005      	b.n	8004cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc fe2e 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d48:	ea42 0103 	orr.w	r1, r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	f003 0104 	and.w	r1, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	f003 0210 	and.w	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b088      	sub	sp, #32
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_SPI_Transmit+0x22>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e12d      	b.n	800501c <HAL_SPI_Transmit+0x27e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dc8:	f7fc ffea 	bl	8001da0 <HAL_GetTick>
 8004dcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d002      	beq.n	8004de4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
 8004de0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004de2:	e116      	b.n	8005012 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_Transmit+0x52>
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004df4:	e10d      	b.n	8005012 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2203      	movs	r2, #3
 8004dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e3c:	d10f      	bne.n	8004e5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b40      	cmp	r3, #64	@ 0x40
 8004e6a:	d007      	beq.n	8004e7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e84:	d14f      	bne.n	8004f26 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Transmit+0xf6>
 8004e8e:	8afb      	ldrh	r3, [r7, #22]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d142      	bne.n	8004f1a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e98:	881a      	ldrh	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	1c9a      	adds	r2, r3, #2
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004eb8:	e02f      	b.n	8004f1a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d112      	bne.n	8004eee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ecc:	881a      	ldrh	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004eec:	e015      	b.n	8004f1a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eee:	f7fc ff57 	bl	8001da0 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d803      	bhi.n	8004f06 <HAL_SPI_Transmit+0x168>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d102      	bne.n	8004f0c <HAL_SPI_Transmit+0x16e>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f18:	e07b      	b.n	8005012 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ca      	bne.n	8004eba <HAL_SPI_Transmit+0x11c>
 8004f24:	e050      	b.n	8004fc8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_SPI_Transmit+0x196>
 8004f2e:	8afb      	ldrh	r3, [r7, #22]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d144      	bne.n	8004fbe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f5a:	e030      	b.n	8004fbe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d113      	bne.n	8004f92 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	7812      	ldrb	r2, [r2, #0]
 8004f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f90:	e015      	b.n	8004fbe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f92:	f7fc ff05 	bl	8001da0 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d803      	bhi.n	8004faa <HAL_SPI_Transmit+0x20c>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d102      	bne.n	8004fb0 <HAL_SPI_Transmit+0x212>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004fbc:	e029      	b.n	8005012 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1c9      	bne.n	8004f5c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fbdf 	bl	8005790 <SPI_EndRxTxTransaction>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e003      	b.n	8005012 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800501a:	7ffb      	ldrb	r3, [r7, #31]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d002      	beq.n	800504a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005044:	2302      	movs	r3, #2
 8005046:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005048:	e0fb      	b.n	8005242 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005052:	d112      	bne.n	800507a <HAL_SPI_Receive+0x56>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10e      	bne.n	800507a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2204      	movs	r2, #4
 8005060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005064:	88fa      	ldrh	r2, [r7, #6]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f8ef 	bl	8005254 <HAL_SPI_TransmitReceive>
 8005076:	4603      	mov	r3, r0
 8005078:	e0e8      	b.n	800524c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_SPI_Receive+0x64>
 8005084:	2302      	movs	r3, #2
 8005086:	e0e1      	b.n	800524c <HAL_SPI_Receive+0x228>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005090:	f7fc fe86 	bl	8001da0 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_SPI_Receive+0x7e>
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050a6:	e0cc      	b.n	8005242 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2204      	movs	r2, #4
 80050ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ee:	d10f      	bne.n	8005110 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b40      	cmp	r3, #64	@ 0x40
 800511c:	d007      	beq.n	800512e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800512c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d16a      	bne.n	800520c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005136:	e032      	b.n	800519e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d115      	bne.n	8005172 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f103 020c 	add.w	r2, r3, #12
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005170:	e015      	b.n	800519e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005172:	f7fc fe15 	bl	8001da0 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d803      	bhi.n	800518a <HAL_SPI_Receive+0x166>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d102      	bne.n	8005190 <HAL_SPI_Receive+0x16c>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800519c:	e051      	b.n	8005242 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1c7      	bne.n	8005138 <HAL_SPI_Receive+0x114>
 80051a8:	e035      	b.n	8005216 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d113      	bne.n	80051e0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	b292      	uxth	r2, r2
 80051c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051de:	e015      	b.n	800520c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e0:	f7fc fdde 	bl	8001da0 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d803      	bhi.n	80051f8 <HAL_SPI_Receive+0x1d4>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d102      	bne.n	80051fe <HAL_SPI_Receive+0x1da>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800520a:	e01a      	b.n	8005242 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1c9      	bne.n	80051aa <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fa52 	bl	80056c4 <SPI_EndRxTransaction>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	75fb      	strb	r3, [r7, #23]
 8005238:	e003      	b.n	8005242 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08c      	sub	sp, #48	@ 0x30
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005262:	2301      	movs	r3, #1
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_SPI_TransmitReceive+0x26>
 8005276:	2302      	movs	r3, #2
 8005278:	e198      	b.n	80055ac <HAL_SPI_TransmitReceive+0x358>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005282:	f7fc fd8d 	bl	8001da0 <HAL_GetTick>
 8005286:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800529c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d00f      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x70>
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052aa:	d107      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x68>
 80052b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d003      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80052c2:	e16d      	b.n	80055a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0x82>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0x82>
 80052d0:	887b      	ldrh	r3, [r7, #2]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80052dc:	e160      	b.n	80055a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d003      	beq.n	80052f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2205      	movs	r2, #5
 80052ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	887a      	ldrh	r2, [r7, #2]
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	887a      	ldrh	r2, [r7, #2]
 8005308:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	887a      	ldrh	r2, [r7, #2]
 8005314:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	887a      	ldrh	r2, [r7, #2]
 800531a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b40      	cmp	r3, #64	@ 0x40
 8005334:	d007      	beq.n	8005346 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800534e:	d17c      	bne.n	800544a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_SPI_TransmitReceive+0x10a>
 8005358:	8b7b      	ldrh	r3, [r7, #26]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d16a      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005362:	881a      	ldrh	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536e:	1c9a      	adds	r2, r3, #2
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005382:	e057      	b.n	8005434 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d11b      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x176>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d016      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x176>
 800539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d113      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d119      	bne.n	800540c <HAL_SPI_TransmitReceive+0x1b8>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d014      	beq.n	800540c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ec:	b292      	uxth	r2, r2
 80053ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	1c9a      	adds	r2, r3, #2
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005408:	2301      	movs	r3, #1
 800540a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800540c:	f7fc fcc8 	bl	8001da0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005418:	429a      	cmp	r2, r3
 800541a:	d80b      	bhi.n	8005434 <HAL_SPI_TransmitReceive+0x1e0>
 800541c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d007      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005432:	e0b5      	b.n	80055a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1a2      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x130>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d19d      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x130>
 8005448:	e080      	b.n	800554c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x204>
 8005452:	8b7b      	ldrh	r3, [r7, #26]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d16f      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	7812      	ldrb	r2, [r2, #0]
 8005464:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800547e:	e05b      	b.n	8005538 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d11c      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x274>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d017      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x274>
 8005498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d114      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	330c      	adds	r3, #12
 80054a8:	7812      	ldrb	r2, [r2, #0]
 80054aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d119      	bne.n	800550a <HAL_SPI_TransmitReceive+0x2b6>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d014      	beq.n	800550a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005506:	2301      	movs	r3, #1
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800550a:	f7fc fc49 	bl	8001da0 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005516:	429a      	cmp	r2, r3
 8005518:	d803      	bhi.n	8005522 <HAL_SPI_TransmitReceive+0x2ce>
 800551a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d102      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x2d4>
 8005522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005536:	e033      	b.n	80055a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d19e      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x22c>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d199      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800554c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f91d 	bl	8005790 <SPI_EndRxTxTransaction>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005568:	e01a      	b.n	80055a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005596:	e003      	b.n	80055a0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80055a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3730      	adds	r7, #48	@ 0x30
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055c4:	f7fc fbec 	bl	8001da0 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	4413      	add	r3, r2
 80055d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055d4:	f7fc fbe4 	bl	8001da0 <HAL_GetTick>
 80055d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055da:	4b39      	ldr	r3, [pc, #228]	@ (80056c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	015b      	lsls	r3, r3, #5
 80055e0:	0d1b      	lsrs	r3, r3, #20
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	fb02 f303 	mul.w	r3, r2, r3
 80055e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ea:	e054      	b.n	8005696 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d050      	beq.n	8005696 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055f4:	f7fc fbd4 	bl	8001da0 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	429a      	cmp	r2, r3
 8005602:	d902      	bls.n	800560a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d13d      	bne.n	8005686 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005622:	d111      	bne.n	8005648 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800562c:	d004      	beq.n	8005638 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005636:	d107      	bne.n	8005648 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005650:	d10f      	bne.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e017      	b.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	3b01      	subs	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d19b      	bne.n	80055ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000014 	.word	0x20000014

080056c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056d8:	d111      	bne.n	80056fe <SPI_EndRxTransaction+0x3a>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e2:	d004      	beq.n	80056ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ec:	d107      	bne.n	80056fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005706:	d12a      	bne.n	800575e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005710:	d012      	beq.n	8005738 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2200      	movs	r2, #0
 800571a:	2180      	movs	r1, #128	@ 0x80
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff ff49 	bl	80055b4 <SPI_WaitFlagStateUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d02d      	beq.n	8005784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e026      	b.n	8005786 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2200      	movs	r2, #0
 8005740:	2101      	movs	r1, #1
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff ff36 	bl	80055b4 <SPI_WaitFlagStateUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01a      	beq.n	8005784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e013      	b.n	8005786 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	2101      	movs	r1, #1
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff ff23 	bl	80055b4 <SPI_WaitFlagStateUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e000      	b.n	8005786 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2201      	movs	r2, #1
 80057a4:	2102      	movs	r1, #2
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7ff ff04 	bl	80055b4 <SPI_WaitFlagStateUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e032      	b.n	8005828 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <SPI_EndRxTxTransaction+0xa0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005834 <SPI_EndRxTxTransaction+0xa4>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	0d5b      	lsrs	r3, r3, #21
 80057ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057e0:	d112      	bne.n	8005808 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	2180      	movs	r1, #128	@ 0x80
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff fee1 	bl	80055b4 <SPI_WaitFlagStateUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e00f      	b.n	8005828 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	3b01      	subs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581e:	2b80      	cmp	r3, #128	@ 0x80
 8005820:	d0f2      	beq.n	8005808 <SPI_EndRxTxTransaction+0x78>
 8005822:	e000      	b.n	8005826 <SPI_EndRxTxTransaction+0x96>
        break;
 8005824:	bf00      	nop
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20000014 	.word	0x20000014
 8005834:	165e9f81 	.word	0x165e9f81

08005838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e042      	b.n	80058d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fc f99e 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2224      	movs	r2, #36	@ 0x24
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800587a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fdbd 	bl	80063fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	@ 0x28
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d175      	bne.n	80059e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_UART_Transmit+0x2c>
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e06e      	b.n	80059e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2221      	movs	r2, #33	@ 0x21
 8005912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005916:	f7fc fa43 	bl	8001da0 <HAL_GetTick>
 800591a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	88fa      	ldrh	r2, [r7, #6]
 8005920:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	88fa      	ldrh	r2, [r7, #6]
 8005926:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005930:	d108      	bne.n	8005944 <HAL_UART_Transmit+0x6c>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	e003      	b.n	800594c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800594c:	e02e      	b.n	80059ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2200      	movs	r2, #0
 8005956:	2180      	movs	r1, #128	@ 0x80
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 fb1f 	bl	8005f9c <UART_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e03a      	b.n	80059e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005984:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	3302      	adds	r3, #2
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	e007      	b.n	800599e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	781a      	ldrb	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	3301      	adds	r3, #1
 800599c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1cb      	bne.n	800594e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2200      	movs	r2, #0
 80059be:	2140      	movs	r1, #64	@ 0x40
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 faeb 	bl	8005f9c <UART_WaitOnFlagUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e006      	b.n	80059e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e000      	b.n	80059e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
  }
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	4613      	mov	r3, r2
 80059fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d112      	bne.n	8005a2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_UART_Receive_IT+0x26>
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e00b      	b.n	8005a30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	461a      	mov	r2, r3
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fb12 	bl	800604e <UART_Start_Receive_IT>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	e000      	b.n	8005a30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a2e:	2302      	movs	r3, #2
  }
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_UART_IRQHandler+0x66>
 8005a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fbf2 	bl	8006280 <UART_Receive_IT>
      return;
 8005a9c:	e25b      	b.n	8005f56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80de 	beq.w	8005c64 <HAL_UART_IRQHandler+0x22c>
 8005aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d106      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80d1 	beq.w	8005c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <HAL_UART_IRQHandler+0xae>
 8005ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ade:	f043 0201 	orr.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_UART_IRQHandler+0xd2>
 8005af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	f043 0202 	orr.w	r2, r3, #2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_UART_IRQHandler+0xf6>
 8005b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b26:	f043 0204 	orr.w	r2, r3, #4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d011      	beq.n	8005b5e <HAL_UART_IRQHandler+0x126>
 8005b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d105      	bne.n	8005b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b56:	f043 0208 	orr.w	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 81f2 	beq.w	8005f4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_UART_IRQHandler+0x14e>
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fb7d 	bl	8006280 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b90:	2b40      	cmp	r3, #64	@ 0x40
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x17a>
 8005baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d04f      	beq.n	8005c52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa85 	bl	80060c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc2:	2b40      	cmp	r3, #64	@ 0x40
 8005bc4:	d141      	bne.n	8005c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3314      	adds	r3, #20
 8005bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1d9      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d013      	beq.n	8005c42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e18 <HAL_UART_IRQHandler+0x3e0>)
 8005c20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fc fd8c 	bl	8002744 <HAL_DMA_Abort_IT>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d016      	beq.n	8005c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e00e      	b.n	8005c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f994 	bl	8005f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c48:	e00a      	b.n	8005c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f990 	bl	8005f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	e006      	b.n	8005c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f98c 	bl	8005f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c5e:	e175      	b.n	8005f4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	bf00      	nop
    return;
 8005c62:	e173      	b.n	8005f4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	f040 814f 	bne.w	8005f0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 8148 	beq.w	8005f0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8141 	beq.w	8005f0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	60bb      	str	r3, [r7, #8]
 8005c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b40      	cmp	r3, #64	@ 0x40
 8005cac:	f040 80b6 	bne.w	8005e1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8145 	beq.w	8005f50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	f080 813e 	bcs.w	8005f50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce6:	f000 8088 	beq.w	8005dfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1d9      	bne.n	8005cea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3314      	adds	r3, #20
 8005d3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e1      	bne.n	8005d36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e3      	bne.n	8005d72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dca:	f023 0310 	bic.w	r3, r3, #16
 8005dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ddc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e3      	bne.n	8005db8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fc fc35 	bl	8002664 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8b7 	bl	8005f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e16:	e09b      	b.n	8005f50 <HAL_UART_IRQHandler+0x518>
 8005e18:	08006189 	.word	0x08006189
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 808e 	beq.w	8005f54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8089 	beq.w	8005f54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e66:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e3      	bne.n	8005e42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	623b      	str	r3, [r7, #32]
   return(result);
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e3      	bne.n	8005e7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0310 	bic.w	r3, r3, #16
 8005ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ee4:	61fa      	str	r2, [r7, #28]
 8005ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	69b9      	ldr	r1, [r7, #24]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e3      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005efe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f83d 	bl	8005f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f0a:	e023      	b.n	8005f54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_UART_IRQHandler+0x4f4>
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f943 	bl	80061b0 <UART_Transmit_IT>
    return;
 8005f2a:	e014      	b.n	8005f56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <HAL_UART_IRQHandler+0x51e>
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f983 	bl	8006250 <UART_EndTransmit_IT>
    return;
 8005f4a:	e004      	b.n	8005f56 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f4c:	bf00      	nop
 8005f4e:	e002      	b.n	8005f56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f54:	bf00      	nop
  }
}
 8005f56:	37e8      	adds	r7, #232	@ 0xe8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fac:	e03b      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d037      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb6:	f7fb fef3 	bl	8001da0 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d302      	bcc.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e03a      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0304 	and.w	r3, r3, #4
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d023      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b80      	cmp	r3, #128	@ 0x80
 8005fe2:	d020      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b40      	cmp	r3, #64	@ 0x40
 8005fe8:	d01d      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d116      	bne.n	8006026 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f857 	bl	80060c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2208      	movs	r2, #8
 8006018:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e00f      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	429a      	cmp	r2, r3
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	429a      	cmp	r2, r3
 8006042:	d0b4      	beq.n	8005fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	4613      	mov	r3, r2
 800605a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2222      	movs	r2, #34	@ 0x22
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006092:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0220 	orr.w	r2, r2, #32
 80060b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b095      	sub	sp, #84	@ 0x54
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	330c      	adds	r3, #12
 80060d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80060ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	61fb      	str	r3, [r7, #28]
   return(result);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800611e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e5      	bne.n	80060fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006136:	2b01      	cmp	r3, #1
 8006138:	d119      	bne.n	800616e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	60bb      	str	r3, [r7, #8]
   return(result);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 0310 	bic.w	r3, r3, #16
 8006150:	647b      	str	r3, [r7, #68]	@ 0x44
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800615a:	61ba      	str	r2, [r7, #24]
 800615c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	613b      	str	r3, [r7, #16]
   return(result);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800617c:	bf00      	nop
 800617e:	3754      	adds	r7, #84	@ 0x54
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff fee4 	bl	8005f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b21      	cmp	r3, #33	@ 0x21
 80061c2:	d13e      	bne.n	8006242 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061cc:	d114      	bne.n	80061f8 <UART_Transmit_IT+0x48>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d110      	bne.n	80061f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	1c9a      	adds	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	621a      	str	r2, [r3, #32]
 80061f6:	e008      	b.n	800620a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	1c59      	adds	r1, r3, #1
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6211      	str	r1, [r2, #32]
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29b      	uxth	r3, r3
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	4619      	mov	r1, r3
 8006218:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10f      	bne.n	800623e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800622c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800623c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e000      	b.n	8006244 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006242:	2302      	movs	r3, #2
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006266:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff fe73 	bl	8005f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08c      	sub	sp, #48	@ 0x30
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b22      	cmp	r3, #34	@ 0x22
 8006292:	f040 80ae 	bne.w	80063f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629e:	d117      	bne.n	80062d0 <UART_Receive_IT+0x50>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d113      	bne.n	80062d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	1c9a      	adds	r2, r3, #2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ce:	e026      	b.n	800631e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e2:	d007      	beq.n	80062f4 <UART_Receive_IT+0x74>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <UART_Receive_IT+0x82>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	e008      	b.n	8006314 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800630e:	b2da      	uxtb	r2, r3
 8006310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006312:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29b      	uxth	r3, r3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4619      	mov	r1, r3
 800632c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800632e:	2b00      	cmp	r3, #0
 8006330:	d15d      	bne.n	80063ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0220 	bic.w	r2, r2, #32
 8006340:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006350:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695a      	ldr	r2, [r3, #20]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	2b01      	cmp	r3, #1
 8006376:	d135      	bne.n	80063e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	613b      	str	r3, [r7, #16]
   return(result);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f023 0310 	bic.w	r3, r3, #16
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639e:	623a      	str	r2, [r7, #32]
 80063a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	69f9      	ldr	r1, [r7, #28]
 80063a4:	6a3a      	ldr	r2, [r7, #32]
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e5      	bne.n	800637e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d10a      	bne.n	80063d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fdd1 	bl	8005f84 <HAL_UARTEx_RxEventCallback>
 80063e2:	e002      	b.n	80063ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fa f86f 	bl	80004c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e002      	b.n	80063f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e000      	b.n	80063f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
  }
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3730      	adds	r7, #48	@ 0x30
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006400:	b0c0      	sub	sp, #256	@ 0x100
 8006402:	af00      	add	r7, sp, #0
 8006404:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006418:	68d9      	ldr	r1, [r3, #12]
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	ea40 0301 	orr.w	r3, r0, r1
 8006424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	431a      	orrs	r2, r3
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	431a      	orrs	r2, r3
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006454:	f021 010c 	bic.w	r1, r1, #12
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006462:	430b      	orrs	r3, r1
 8006464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006476:	6999      	ldr	r1, [r3, #24]
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	ea40 0301 	orr.w	r3, r0, r1
 8006482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b8f      	ldr	r3, [pc, #572]	@ (80066c8 <UART_SetConfig+0x2cc>)
 800648c:	429a      	cmp	r2, r3
 800648e:	d005      	beq.n	800649c <UART_SetConfig+0xa0>
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b8d      	ldr	r3, [pc, #564]	@ (80066cc <UART_SetConfig+0x2d0>)
 8006498:	429a      	cmp	r2, r3
 800649a:	d104      	bne.n	80064a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fe fbe2 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 80064a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064a4:	e003      	b.n	80064ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064a6:	f7fe fbc9 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 80064aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b8:	f040 810c 	bne.w	80066d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064ce:	4622      	mov	r2, r4
 80064d0:	462b      	mov	r3, r5
 80064d2:	1891      	adds	r1, r2, r2
 80064d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064d6:	415b      	adcs	r3, r3
 80064d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064de:	4621      	mov	r1, r4
 80064e0:	eb12 0801 	adds.w	r8, r2, r1
 80064e4:	4629      	mov	r1, r5
 80064e6:	eb43 0901 	adc.w	r9, r3, r1
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064fe:	4690      	mov	r8, r2
 8006500:	4699      	mov	r9, r3
 8006502:	4623      	mov	r3, r4
 8006504:	eb18 0303 	adds.w	r3, r8, r3
 8006508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800650c:	462b      	mov	r3, r5
 800650e:	eb49 0303 	adc.w	r3, r9, r3
 8006512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006522:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800652a:	460b      	mov	r3, r1
 800652c:	18db      	adds	r3, r3, r3
 800652e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006530:	4613      	mov	r3, r2
 8006532:	eb42 0303 	adc.w	r3, r2, r3
 8006536:	657b      	str	r3, [r7, #84]	@ 0x54
 8006538:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800653c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006540:	f7f9 fe4a 	bl	80001d8 <__aeabi_uldivmod>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4b61      	ldr	r3, [pc, #388]	@ (80066d0 <UART_SetConfig+0x2d4>)
 800654a:	fba3 2302 	umull	r2, r3, r3, r2
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	011c      	lsls	r4, r3, #4
 8006552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006556:	2200      	movs	r2, #0
 8006558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800655c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006560:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006564:	4642      	mov	r2, r8
 8006566:	464b      	mov	r3, r9
 8006568:	1891      	adds	r1, r2, r2
 800656a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800656c:	415b      	adcs	r3, r3
 800656e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006574:	4641      	mov	r1, r8
 8006576:	eb12 0a01 	adds.w	sl, r2, r1
 800657a:	4649      	mov	r1, r9
 800657c:	eb43 0b01 	adc.w	fp, r3, r1
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800658c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006594:	4692      	mov	sl, r2
 8006596:	469b      	mov	fp, r3
 8006598:	4643      	mov	r3, r8
 800659a:	eb1a 0303 	adds.w	r3, sl, r3
 800659e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065a2:	464b      	mov	r3, r9
 80065a4:	eb4b 0303 	adc.w	r3, fp, r3
 80065a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065c0:	460b      	mov	r3, r1
 80065c2:	18db      	adds	r3, r3, r3
 80065c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80065c6:	4613      	mov	r3, r2
 80065c8:	eb42 0303 	adc.w	r3, r2, r3
 80065cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065d6:	f7f9 fdff 	bl	80001d8 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	4b3b      	ldr	r3, [pc, #236]	@ (80066d0 <UART_SetConfig+0x2d4>)
 80065e2:	fba3 2301 	umull	r2, r3, r3, r1
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	2264      	movs	r2, #100	@ 0x64
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	1acb      	subs	r3, r1, r3
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065f6:	4b36      	ldr	r3, [pc, #216]	@ (80066d0 <UART_SetConfig+0x2d4>)
 80065f8:	fba3 2302 	umull	r2, r3, r3, r2
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006604:	441c      	add	r4, r3
 8006606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006610:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006614:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	1891      	adds	r1, r2, r2
 800661e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006620:	415b      	adcs	r3, r3
 8006622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006628:	4641      	mov	r1, r8
 800662a:	1851      	adds	r1, r2, r1
 800662c:	6339      	str	r1, [r7, #48]	@ 0x30
 800662e:	4649      	mov	r1, r9
 8006630:	414b      	adcs	r3, r1
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006640:	4659      	mov	r1, fp
 8006642:	00cb      	lsls	r3, r1, #3
 8006644:	4651      	mov	r1, sl
 8006646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800664a:	4651      	mov	r1, sl
 800664c:	00ca      	lsls	r2, r1, #3
 800664e:	4610      	mov	r0, r2
 8006650:	4619      	mov	r1, r3
 8006652:	4603      	mov	r3, r0
 8006654:	4642      	mov	r2, r8
 8006656:	189b      	adds	r3, r3, r2
 8006658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800665c:	464b      	mov	r3, r9
 800665e:	460a      	mov	r2, r1
 8006660:	eb42 0303 	adc.w	r3, r2, r3
 8006664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006674:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800667c:	460b      	mov	r3, r1
 800667e:	18db      	adds	r3, r3, r3
 8006680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006682:	4613      	mov	r3, r2
 8006684:	eb42 0303 	adc.w	r3, r2, r3
 8006688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800668a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800668e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006692:	f7f9 fda1 	bl	80001d8 <__aeabi_uldivmod>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <UART_SetConfig+0x2d4>)
 800669c:	fba3 1302 	umull	r1, r3, r3, r2
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	2164      	movs	r1, #100	@ 0x64
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	3332      	adds	r3, #50	@ 0x32
 80066ae:	4a08      	ldr	r2, [pc, #32]	@ (80066d0 <UART_SetConfig+0x2d4>)
 80066b0:	fba2 2303 	umull	r2, r3, r2, r3
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	f003 0207 	and.w	r2, r3, #7
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4422      	add	r2, r4
 80066c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066c4:	e106      	b.n	80068d4 <UART_SetConfig+0x4d8>
 80066c6:	bf00      	nop
 80066c8:	40011000 	.word	0x40011000
 80066cc:	40011400 	.word	0x40011400
 80066d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066e6:	4642      	mov	r2, r8
 80066e8:	464b      	mov	r3, r9
 80066ea:	1891      	adds	r1, r2, r2
 80066ec:	6239      	str	r1, [r7, #32]
 80066ee:	415b      	adcs	r3, r3
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066f6:	4641      	mov	r1, r8
 80066f8:	1854      	adds	r4, r2, r1
 80066fa:	4649      	mov	r1, r9
 80066fc:	eb43 0501 	adc.w	r5, r3, r1
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	00eb      	lsls	r3, r5, #3
 800670a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800670e:	00e2      	lsls	r2, r4, #3
 8006710:	4614      	mov	r4, r2
 8006712:	461d      	mov	r5, r3
 8006714:	4643      	mov	r3, r8
 8006716:	18e3      	adds	r3, r4, r3
 8006718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800671c:	464b      	mov	r3, r9
 800671e:	eb45 0303 	adc.w	r3, r5, r3
 8006722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006732:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006742:	4629      	mov	r1, r5
 8006744:	008b      	lsls	r3, r1, #2
 8006746:	4621      	mov	r1, r4
 8006748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800674c:	4621      	mov	r1, r4
 800674e:	008a      	lsls	r2, r1, #2
 8006750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006754:	f7f9 fd40 	bl	80001d8 <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4b60      	ldr	r3, [pc, #384]	@ (80068e0 <UART_SetConfig+0x4e4>)
 800675e:	fba3 2302 	umull	r2, r3, r3, r2
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	011c      	lsls	r4, r3, #4
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800676a:	2200      	movs	r2, #0
 800676c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006770:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	1891      	adds	r1, r2, r2
 800677e:	61b9      	str	r1, [r7, #24]
 8006780:	415b      	adcs	r3, r3
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006788:	4641      	mov	r1, r8
 800678a:	1851      	adds	r1, r2, r1
 800678c:	6139      	str	r1, [r7, #16]
 800678e:	4649      	mov	r1, r9
 8006790:	414b      	adcs	r3, r1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067a0:	4659      	mov	r1, fp
 80067a2:	00cb      	lsls	r3, r1, #3
 80067a4:	4651      	mov	r1, sl
 80067a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067aa:	4651      	mov	r1, sl
 80067ac:	00ca      	lsls	r2, r1, #3
 80067ae:	4610      	mov	r0, r2
 80067b0:	4619      	mov	r1, r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	4642      	mov	r2, r8
 80067b6:	189b      	adds	r3, r3, r2
 80067b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067bc:	464b      	mov	r3, r9
 80067be:	460a      	mov	r2, r1
 80067c0:	eb42 0303 	adc.w	r3, r2, r3
 80067c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067e0:	4649      	mov	r1, r9
 80067e2:	008b      	lsls	r3, r1, #2
 80067e4:	4641      	mov	r1, r8
 80067e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ea:	4641      	mov	r1, r8
 80067ec:	008a      	lsls	r2, r1, #2
 80067ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067f2:	f7f9 fcf1 	bl	80001d8 <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4611      	mov	r1, r2
 80067fc:	4b38      	ldr	r3, [pc, #224]	@ (80068e0 <UART_SetConfig+0x4e4>)
 80067fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2264      	movs	r2, #100	@ 0x64
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	1acb      	subs	r3, r1, r3
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	3332      	adds	r3, #50	@ 0x32
 8006810:	4a33      	ldr	r2, [pc, #204]	@ (80068e0 <UART_SetConfig+0x4e4>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800681c:	441c      	add	r4, r3
 800681e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006822:	2200      	movs	r2, #0
 8006824:	673b      	str	r3, [r7, #112]	@ 0x70
 8006826:	677a      	str	r2, [r7, #116]	@ 0x74
 8006828:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800682c:	4642      	mov	r2, r8
 800682e:	464b      	mov	r3, r9
 8006830:	1891      	adds	r1, r2, r2
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	415b      	adcs	r3, r3
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800683c:	4641      	mov	r1, r8
 800683e:	1851      	adds	r1, r2, r1
 8006840:	6039      	str	r1, [r7, #0]
 8006842:	4649      	mov	r1, r9
 8006844:	414b      	adcs	r3, r1
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006854:	4659      	mov	r1, fp
 8006856:	00cb      	lsls	r3, r1, #3
 8006858:	4651      	mov	r1, sl
 800685a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800685e:	4651      	mov	r1, sl
 8006860:	00ca      	lsls	r2, r1, #3
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	4603      	mov	r3, r0
 8006868:	4642      	mov	r2, r8
 800686a:	189b      	adds	r3, r3, r2
 800686c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800686e:	464b      	mov	r3, r9
 8006870:	460a      	mov	r2, r1
 8006872:	eb42 0303 	adc.w	r3, r2, r3
 8006876:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	663b      	str	r3, [r7, #96]	@ 0x60
 8006882:	667a      	str	r2, [r7, #100]	@ 0x64
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006890:	4649      	mov	r1, r9
 8006892:	008b      	lsls	r3, r1, #2
 8006894:	4641      	mov	r1, r8
 8006896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800689a:	4641      	mov	r1, r8
 800689c:	008a      	lsls	r2, r1, #2
 800689e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068a2:	f7f9 fc99 	bl	80001d8 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4b0d      	ldr	r3, [pc, #52]	@ (80068e0 <UART_SetConfig+0x4e4>)
 80068ac:	fba3 1302 	umull	r1, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	2164      	movs	r1, #100	@ 0x64
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	3332      	adds	r3, #50	@ 0x32
 80068be:	4a08      	ldr	r2, [pc, #32]	@ (80068e0 <UART_SetConfig+0x4e4>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f003 020f 	and.w	r2, r3, #15
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4422      	add	r2, r4
 80068d2:	609a      	str	r2, [r3, #8]
}
 80068d4:	bf00      	nop
 80068d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068da:	46bd      	mov	sp, r7
 80068dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068e0:	51eb851f 	.word	0x51eb851f

080068e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068e4:	b084      	sub	sp, #16
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	f107 001c 	add.w	r0, r7, #28
 80068f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d123      	bne.n	8006946 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006902:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006926:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800692a:	2b01      	cmp	r3, #1
 800692c:	d105      	bne.n	800693a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fae2 	bl	8007f04 <USB_CoreReset>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	e01b      	b.n	800697e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 fad6 	bl	8007f04 <USB_CoreReset>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800695c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006970:	e005      	b.n	800697e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800697e:	7fbb      	ldrb	r3, [r7, #30]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d10b      	bne.n	800699c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f043 0206 	orr.w	r2, r3, #6
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069a8:	b004      	add	sp, #16
 80069aa:	4770      	bx	lr

080069ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d165      	bne.n	8006a8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4a41      	ldr	r2, [pc, #260]	@ (8006ac8 <USB_SetTurnaroundTime+0x11c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d906      	bls.n	80069d6 <USB_SetTurnaroundTime+0x2a>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4a40      	ldr	r2, [pc, #256]	@ (8006acc <USB_SetTurnaroundTime+0x120>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d202      	bcs.n	80069d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069d0:	230f      	movs	r3, #15
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e062      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4a3c      	ldr	r2, [pc, #240]	@ (8006acc <USB_SetTurnaroundTime+0x120>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d306      	bcc.n	80069ec <USB_SetTurnaroundTime+0x40>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4a3b      	ldr	r2, [pc, #236]	@ (8006ad0 <USB_SetTurnaroundTime+0x124>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d202      	bcs.n	80069ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069e6:	230e      	movs	r3, #14
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	e057      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4a38      	ldr	r2, [pc, #224]	@ (8006ad0 <USB_SetTurnaroundTime+0x124>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d306      	bcc.n	8006a02 <USB_SetTurnaroundTime+0x56>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4a37      	ldr	r2, [pc, #220]	@ (8006ad4 <USB_SetTurnaroundTime+0x128>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d202      	bcs.n	8006a02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069fc:	230d      	movs	r3, #13
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e04c      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4a33      	ldr	r2, [pc, #204]	@ (8006ad4 <USB_SetTurnaroundTime+0x128>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d306      	bcc.n	8006a18 <USB_SetTurnaroundTime+0x6c>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4a32      	ldr	r2, [pc, #200]	@ (8006ad8 <USB_SetTurnaroundTime+0x12c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d802      	bhi.n	8006a18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a12:	230c      	movs	r3, #12
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	e041      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8006ad8 <USB_SetTurnaroundTime+0x12c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d906      	bls.n	8006a2e <USB_SetTurnaroundTime+0x82>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4a2e      	ldr	r2, [pc, #184]	@ (8006adc <USB_SetTurnaroundTime+0x130>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d802      	bhi.n	8006a2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a28:	230b      	movs	r3, #11
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e036      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4a2a      	ldr	r2, [pc, #168]	@ (8006adc <USB_SetTurnaroundTime+0x130>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d906      	bls.n	8006a44 <USB_SetTurnaroundTime+0x98>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4a29      	ldr	r2, [pc, #164]	@ (8006ae0 <USB_SetTurnaroundTime+0x134>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d802      	bhi.n	8006a44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a3e:	230a      	movs	r3, #10
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	e02b      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4a26      	ldr	r2, [pc, #152]	@ (8006ae0 <USB_SetTurnaroundTime+0x134>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d906      	bls.n	8006a5a <USB_SetTurnaroundTime+0xae>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4a25      	ldr	r2, [pc, #148]	@ (8006ae4 <USB_SetTurnaroundTime+0x138>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d202      	bcs.n	8006a5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a54:	2309      	movs	r3, #9
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	e020      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	4a21      	ldr	r2, [pc, #132]	@ (8006ae4 <USB_SetTurnaroundTime+0x138>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d306      	bcc.n	8006a70 <USB_SetTurnaroundTime+0xc4>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4a20      	ldr	r2, [pc, #128]	@ (8006ae8 <USB_SetTurnaroundTime+0x13c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d802      	bhi.n	8006a70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e015      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae8 <USB_SetTurnaroundTime+0x13c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d906      	bls.n	8006a86 <USB_SetTurnaroundTime+0xda>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006aec <USB_SetTurnaroundTime+0x140>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d202      	bcs.n	8006a86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a80:	2307      	movs	r3, #7
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	e00a      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a86:	2306      	movs	r3, #6
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e007      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a92:	2309      	movs	r3, #9
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e001      	b.n	8006a9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a98:	2309      	movs	r3, #9
 8006a9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	029b      	lsls	r3, r3, #10
 8006ab0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	00d8acbf 	.word	0x00d8acbf
 8006acc:	00e4e1c0 	.word	0x00e4e1c0
 8006ad0:	00f42400 	.word	0x00f42400
 8006ad4:	01067380 	.word	0x01067380
 8006ad8:	011a499f 	.word	0x011a499f
 8006adc:	01312cff 	.word	0x01312cff
 8006ae0:	014ca43f 	.word	0x014ca43f
 8006ae4:	016e3600 	.word	0x016e3600
 8006ae8:	01a6ab1f 	.word	0x01a6ab1f
 8006aec:	01e84800 	.word	0x01e84800

08006af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f043 0201 	orr.w	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f023 0201 	bic.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d115      	bne.n	8006b82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b62:	200a      	movs	r0, #10
 8006b64:	f7fb f928 	bl	8001db8 <HAL_Delay>
      ms += 10U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	330a      	adds	r3, #10
 8006b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 f939 	bl	8007de6 <USB_GetMode>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d01e      	beq.n	8006bb8 <USB_SetCurrentMode+0x84>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b7e:	d9f0      	bls.n	8006b62 <USB_SetCurrentMode+0x2e>
 8006b80:	e01a      	b.n	8006bb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d115      	bne.n	8006bb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b94:	200a      	movs	r0, #10
 8006b96:	f7fb f90f 	bl	8001db8 <HAL_Delay>
      ms += 10U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	330a      	adds	r3, #10
 8006b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f920 	bl	8007de6 <USB_GetMode>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <USB_SetCurrentMode+0x84>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bb0:	d9f0      	bls.n	8006b94 <USB_SetCurrentMode+0x60>
 8006bb2:	e001      	b.n	8006bb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e005      	b.n	8006bc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2bc8      	cmp	r3, #200	@ 0xc8
 8006bbc:	d101      	bne.n	8006bc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bcc:	b084      	sub	sp, #16
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e009      	b.n	8006c00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3340      	adds	r3, #64	@ 0x40
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2b0e      	cmp	r3, #14
 8006c04:	d9f2      	bls.n	8006bec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d11c      	bne.n	8006c48 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c1c:	f043 0302 	orr.w	r3, r3, #2
 8006c20:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c32:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c46:	e00b      	b.n	8006c60 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c58:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c66:	461a      	mov	r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c6c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d10d      	bne.n	8006c90 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f968 	bl	8006f54 <USB_SetDevSpeed>
 8006c84:	e008      	b.n	8006c98 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c86:	2101      	movs	r1, #1
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f963 	bl	8006f54 <USB_SetDevSpeed>
 8006c8e:	e003      	b.n	8006c98 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c90:	2103      	movs	r1, #3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f95e 	bl	8006f54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c98:	2110      	movs	r1, #16
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f8fa 	bl	8006e94 <USB_FlushTxFifo>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f924 	bl	8006ef8 <USB_FlushRxFifo>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ccc:	461a      	mov	r2, r3
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cde:	2300      	movs	r3, #0
 8006ce0:	613b      	str	r3, [r7, #16]
 8006ce2:	e043      	b.n	8006d6c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cfa:	d118      	bne.n	8006d2e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	e013      	b.n	8006d40 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d24:	461a      	mov	r2, r3
 8006d26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	e008      	b.n	8006d40 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d70:	461a      	mov	r2, r3
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d3b5      	bcc.n	8006ce4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	e043      	b.n	8006e06 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d94:	d118      	bne.n	8006dc8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da8:	461a      	mov	r2, r3
 8006daa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	e013      	b.n	8006dda <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	e008      	b.n	8006dda <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de6:	461a      	mov	r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006dfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	3301      	adds	r3, #1
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d3b5      	bcc.n	8006d7e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e24:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e32:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f043 0210 	orr.w	r2, r3, #16
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	4b10      	ldr	r3, [pc, #64]	@ (8006e90 <USB_DevInit+0x2c4>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f043 0208 	orr.w	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d107      	bne.n	8006e80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e78:	f043 0304 	orr.w	r3, r3, #4
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e8c:	b004      	add	sp, #16
 8006e8e:	4770      	bx	lr
 8006e90:	803c3800 	.word	0x803c3800

08006e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eae:	d901      	bls.n	8006eb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e01b      	b.n	8006eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	daf2      	bge.n	8006ea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	019b      	lsls	r3, r3, #6
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ed8:	d901      	bls.n	8006ede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e006      	b.n	8006eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	d0f0      	beq.n	8006ecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f10:	d901      	bls.n	8006f16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e018      	b.n	8006f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	daf2      	bge.n	8006f04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2210      	movs	r2, #16
 8006f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f34:	d901      	bls.n	8006f3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e006      	b.n	8006f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d0f0      	beq.n	8006f28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f74:	4313      	orrs	r3, r2
 8006f76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b087      	sub	sp, #28
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0306 	and.w	r3, r3, #6
 8006f9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]
 8006faa:	e00a      	b.n	8006fc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d002      	beq.n	8006fb8 <USB_GetDevSpeed+0x32>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b06      	cmp	r3, #6
 8006fb6:	d102      	bne.n	8006fbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	75fb      	strb	r3, [r7, #23]
 8006fbc:	e001      	b.n	8006fc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006fbe:	230f      	movs	r3, #15
 8006fc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d13a      	bne.n	8007062 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff2:	69da      	ldr	r2, [r3, #28]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8007002:	b29b      	uxth	r3, r3
 8007004:	68f9      	ldr	r1, [r7, #12]
 8007006:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800700a:	4313      	orrs	r3, r2
 800700c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d155      	bne.n	80070d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	791b      	ldrb	r3, [r3, #4]
 800703e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007040:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	059b      	lsls	r3, r3, #22
 8007046:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007048:	4313      	orrs	r3, r2
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800705a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	e036      	b.n	80070d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007068:	69da      	ldr	r2, [r3, #28]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	2101      	movs	r1, #1
 8007074:	fa01 f303 	lsl.w	r3, r1, r3
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007080:	4313      	orrs	r3, r2
 8007082:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11a      	bne.n	80070d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	791b      	ldrb	r3, [r3, #4]
 80070b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070b6:	430b      	orrs	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d161      	bne.n	80071c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800710e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007112:	d11f      	bne.n	8007154 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	0151      	lsls	r1, r2, #5
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	440a      	add	r2, r1
 800712a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800712e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007132:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800714e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007152:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800715a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	2101      	movs	r1, #1
 8007166:	fa01 f303 	lsl.w	r3, r1, r3
 800716a:	b29b      	uxth	r3, r3
 800716c:	43db      	mvns	r3, r3
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007174:	4013      	ands	r3, r2
 8007176:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	2101      	movs	r1, #1
 800718a:	fa01 f303 	lsl.w	r3, r1, r3
 800718e:	b29b      	uxth	r3, r3
 8007190:	43db      	mvns	r3, r3
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007198:	4013      	ands	r3, r2
 800719a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	0159      	lsls	r1, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	440b      	add	r3, r1
 80071b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b6:	4619      	mov	r1, r3
 80071b8:	4b35      	ldr	r3, [pc, #212]	@ (8007290 <USB_DeactivateEndpoint+0x1b0>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	600b      	str	r3, [r1, #0]
 80071be:	e060      	b.n	8007282 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071d6:	d11f      	bne.n	8007218 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	440a      	add	r2, r1
 800720e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007212:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007216:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	2101      	movs	r1, #1
 800722a:	fa01 f303 	lsl.w	r3, r1, r3
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	43db      	mvns	r3, r3
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007238:	4013      	ands	r3, r2
 800723a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	2101      	movs	r1, #1
 800724e:	fa01 f303 	lsl.w	r3, r1, r3
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	43db      	mvns	r3, r3
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800725c:	4013      	ands	r3, r2
 800725e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	0159      	lsls	r1, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	440b      	add	r3, r1
 8007276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727a:	4619      	mov	r1, r3
 800727c:	4b05      	ldr	r3, [pc, #20]	@ (8007294 <USB_DeactivateEndpoint+0x1b4>)
 800727e:	4013      	ands	r3, r2
 8007280:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	ec337800 	.word	0xec337800
 8007294:	eff37800 	.word	0xeff37800

08007298 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	@ 0x28
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	f040 817a 	bne.w	80075ae <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d132      	bne.n	8007328 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072dc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80072e0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80072e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	440a      	add	r2, r1
 800731c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007320:	0cdb      	lsrs	r3, r3, #19
 8007322:	04db      	lsls	r3, r3, #19
 8007324:	6113      	str	r3, [r2, #16]
 8007326:	e092      	b.n	800744e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	0151      	lsls	r1, r2, #5
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	440a      	add	r2, r1
 800733e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007342:	0cdb      	lsrs	r3, r3, #19
 8007344:	04db      	lsls	r3, r3, #19
 8007346:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	0151      	lsls	r1, r2, #5
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	440a      	add	r2, r1
 800735e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007362:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007366:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800736a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d11a      	bne.n	80073a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	691a      	ldr	r2, [r3, #16]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	429a      	cmp	r2, r3
 800737c:	d903      	bls.n	8007386 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	0151      	lsls	r1, r2, #5
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	440a      	add	r2, r1
 800739c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073a4:	6113      	str	r3, [r2, #16]
 80073a6:	e01b      	b.n	80073e0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6919      	ldr	r1, [r3, #16]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	440b      	add	r3, r1
 80073c0:	1e59      	subs	r1, r3, #1
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073ca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073cc:	4ba2      	ldr	r3, [pc, #648]	@ (8007658 <USB_EPStartXfer+0x3c0>)
 80073ce:	400b      	ands	r3, r1
 80073d0:	69b9      	ldr	r1, [r7, #24]
 80073d2:	0148      	lsls	r0, r1, #5
 80073d4:	69f9      	ldr	r1, [r7, #28]
 80073d6:	4401      	add	r1, r0
 80073d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80073dc:	4313      	orrs	r3, r2
 80073de:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f6:	69b9      	ldr	r1, [r7, #24]
 80073f8:	0148      	lsls	r0, r1, #5
 80073fa:	69f9      	ldr	r1, [r7, #28]
 80073fc:	4401      	add	r1, r0
 80073fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007402:	4313      	orrs	r3, r2
 8007404:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	791b      	ldrb	r3, [r3, #4]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d11f      	bne.n	800744e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007428:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800742c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007448:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800744c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d14b      	bne.n	80074ec <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007468:	461a      	mov	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	791b      	ldrb	r3, [r3, #4]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d128      	bne.n	80074ca <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007484:	2b00      	cmp	r3, #0
 8007486:	d110      	bne.n	80074aa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	0151      	lsls	r1, r2, #5
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	440a      	add	r2, r1
 800749e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	e00f      	b.n	80074ca <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	e165      	b.n	80077b8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007506:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800750a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	791b      	ldrb	r3, [r3, #4]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d015      	beq.n	8007540 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 814d 	beq.w	80077b8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	2101      	movs	r1, #1
 8007530:	fa01 f303 	lsl.w	r3, r1, r3
 8007534:	69f9      	ldr	r1, [r7, #28]
 8007536:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800753a:	4313      	orrs	r3, r2
 800753c:	634b      	str	r3, [r1, #52]	@ 0x34
 800753e:	e13b      	b.n	80077b8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800754c:	2b00      	cmp	r3, #0
 800754e:	d110      	bne.n	8007572 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800756a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	e00f      	b.n	8007592 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	440a      	add	r2, r1
 8007588:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800758c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007590:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	68d9      	ldr	r1, [r3, #12]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	b298      	uxth	r0, r3
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	4603      	mov	r3, r0
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f9b8 	bl	800791c <USB_WritePacket>
 80075ac:	e104      	b.n	80077b8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075c8:	0cdb      	lsrs	r3, r3, #19
 80075ca:	04db      	lsls	r3, r3, #19
 80075cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075e8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80075ec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80075f0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d131      	bne.n	800765c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007626:	69b9      	ldr	r1, [r7, #24]
 8007628:	0148      	lsls	r0, r1, #5
 800762a:	69f9      	ldr	r1, [r7, #28]
 800762c:	4401      	add	r1, r0
 800762e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007632:	4313      	orrs	r3, r2
 8007634:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	440a      	add	r2, r1
 800764c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007650:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007654:	6113      	str	r3, [r2, #16]
 8007656:	e061      	b.n	800771c <USB_EPStartXfer+0x484>
 8007658:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d123      	bne.n	80076ac <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800767a:	69b9      	ldr	r1, [r7, #24]
 800767c:	0148      	lsls	r0, r1, #5
 800767e:	69f9      	ldr	r1, [r7, #28]
 8007680:	4401      	add	r1, r0
 8007682:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007686:	4313      	orrs	r3, r2
 8007688:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	0151      	lsls	r1, r2, #5
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	440a      	add	r2, r1
 80076a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076a8:	6113      	str	r3, [r2, #16]
 80076aa:	e037      	b.n	800771c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	4413      	add	r3, r2
 80076b6:	1e5a      	subs	r2, r3, #1
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	8afa      	ldrh	r2, [r7, #22]
 80076c8:	fb03 f202 	mul.w	r2, r3, r2
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	8afb      	ldrh	r3, [r7, #22]
 80076e0:	04d9      	lsls	r1, r3, #19
 80076e2:	4b38      	ldr	r3, [pc, #224]	@ (80077c4 <USB_EPStartXfer+0x52c>)
 80076e4:	400b      	ands	r3, r1
 80076e6:	69b9      	ldr	r1, [r7, #24]
 80076e8:	0148      	lsls	r0, r1, #5
 80076ea:	69f9      	ldr	r1, [r7, #28]
 80076ec:	4401      	add	r1, r0
 80076ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076f2:	4313      	orrs	r3, r2
 80076f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800770c:	69b9      	ldr	r1, [r7, #24]
 800770e:	0148      	lsls	r0, r1, #5
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	4401      	add	r1, r0
 8007714:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007718:	4313      	orrs	r3, r2
 800771a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d10d      	bne.n	800773e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	68d9      	ldr	r1, [r3, #12]
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773a:	460a      	mov	r2, r1
 800773c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	791b      	ldrb	r3, [r3, #4]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d128      	bne.n	8007798 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d110      	bne.n	8007778 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007770:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	e00f      	b.n	8007798 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007796:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	1ff80000 	.word	0x1ff80000

080077c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d14a      	bne.n	800787c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077fe:	f040 8086 	bne.w	800790e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	7812      	ldrb	r2, [r2, #0]
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	440a      	add	r2, r1
 800781c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007820:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007824:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007844:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007848:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007856:	4293      	cmp	r3, r2
 8007858:	d902      	bls.n	8007860 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	75fb      	strb	r3, [r7, #23]
          break;
 800785e:	e056      	b.n	800790e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007878:	d0e7      	beq.n	800784a <USB_EPStopXfer+0x82>
 800787a:	e048      	b.n	800790e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007894:	d13b      	bne.n	800790e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80078b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d902      	bls.n	80078f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]
          break;
 80078f2:	e00c      	b.n	800790e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800790c:	d0e7      	beq.n	80078de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007910:	4618      	mov	r0, r3
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	@ 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	460b      	mov	r3, r1
 800792c:	71fb      	strb	r3, [r7, #7]
 800792e:	4613      	mov	r3, r2
 8007930:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800793a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d123      	bne.n	800798a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007942:	88bb      	ldrh	r3, [r7, #4]
 8007944:	3303      	adds	r3, #3
 8007946:	089b      	lsrs	r3, r3, #2
 8007948:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800794a:	2300      	movs	r3, #0
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	e018      	b.n	8007982 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	031a      	lsls	r2, r3, #12
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4413      	add	r3, r2
 8007958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800795c:	461a      	mov	r2, r3
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	3301      	adds	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3301      	adds	r3, #1
 800796e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	3301      	adds	r3, #1
 8007974:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	3301      	adds	r3, #1
 800797a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	3301      	adds	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	429a      	cmp	r2, r3
 8007988:	d3e2      	bcc.n	8007950 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3724      	adds	r7, #36	@ 0x24
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007998:	b480      	push	{r7}
 800799a:	b08b      	sub	sp, #44	@ 0x2c
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	089b      	lsrs	r3, r3, #2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079be:	2300      	movs	r3, #0
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	e014      	b.n	80079ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	3301      	adds	r3, #1
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d8:	3301      	adds	r3, #1
 80079da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	3301      	adds	r3, #1
 80079e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	3301      	adds	r3, #1
 80079e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	3301      	adds	r3, #1
 80079ec:	623b      	str	r3, [r7, #32]
 80079ee:	6a3a      	ldr	r2, [r7, #32]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3e6      	bcc.n	80079c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079f6:	8bfb      	ldrh	r3, [r7, #30]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01e      	beq.n	8007a3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a06:	461a      	mov	r2, r3
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	701a      	strb	r2, [r3, #0]
      i++;
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	3301      	adds	r3, #1
 8007a26:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007a2e:	8bfb      	ldrh	r3, [r7, #30]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a34:	8bfb      	ldrh	r3, [r7, #30]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1ea      	bne.n	8007a10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	372c      	adds	r7, #44	@ 0x2c
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d12c      	bne.n	8007abe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	db12      	blt.n	8007a9c <USB_EPSetStall+0x54>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00f      	beq.n	8007a9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e02b      	b.n	8007b16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	db12      	blt.n	8007af6 <USB_EPSetStall+0xae>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00f      	beq.n	8007af6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007af4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d128      	bne.n	8007b92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d003      	beq.n	8007b70 <USB_EPClearStall+0x4c>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	791b      	ldrb	r3, [r3, #4]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d138      	bne.n	8007be2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	e027      	b.n	8007be2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	0151      	lsls	r1, r2, #5
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	440a      	add	r2, r1
 8007ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	791b      	ldrb	r3, [r3, #4]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d003      	beq.n	8007bc2 <USB_EPClearStall+0x9e>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	791b      	ldrb	r3, [r3, #4]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d10f      	bne.n	8007be2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	0151      	lsls	r1, r2, #5
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	440a      	add	r2, r1
 8007bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007be0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007c12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007c24:	68f9      	ldr	r1, [r7, #12]
 8007c26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c6a:	f023 0302 	bic.w	r3, r3, #2
 8007c6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c98:	f023 0303 	bic.w	r3, r3, #3
 8007c9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cac:	f043 0302 	orr.w	r3, r3, #2
 8007cb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	0c1b      	lsrs	r3, r3, #16
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	b29b      	uxth	r3, r3
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b087      	sub	sp, #28
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dba:	01db      	lsls	r3, r3, #7
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f003 0301 	and.w	r3, r3, #1
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007e20:	f023 0307 	bic.w	r3, r3, #7
 8007e24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	460b      	mov	r3, r1
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	333c      	adds	r3, #60	@ 0x3c
 8007e5e:	3304      	adds	r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4a26      	ldr	r2, [pc, #152]	@ (8007f00 <USB_EP0_OutStart+0xb8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d90a      	bls.n	8007e82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e7c:	d101      	bne.n	8007e82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e037      	b.n	8007ef2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e88:	461a      	mov	r2, r3
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eb0:	f043 0318 	orr.w	r3, r3, #24
 8007eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ec4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007ec8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d10f      	bne.n	8007ef0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007eee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	4f54300a 	.word	0x4f54300a

08007f04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f1c:	d901      	bls.n	8007f22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e01b      	b.n	8007f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	daf2      	bge.n	8007f10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f043 0201 	orr.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f46:	d901      	bls.n	8007f4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e006      	b.n	8007f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d0f0      	beq.n	8007f3a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007f78:	f002 fc88 	bl	800a88c <USBD_static_malloc>
 8007f7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	32b0      	adds	r2, #176	@ 0xb0
 8007f8e:	2100      	movs	r1, #0
 8007f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f94:	2302      	movs	r3, #2
 8007f96:	e0d4      	b.n	8008142 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007f98:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f002 fcd0 	bl	800a944 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	32b0      	adds	r2, #176	@ 0xb0
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	32b0      	adds	r2, #176	@ 0xb0
 8007fbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	7c1b      	ldrb	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d138      	bne.n	8008042 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800814c <USBD_CDC_Init+0x1e4>)
 8007fd2:	7819      	ldrb	r1, [r3, #0]
 8007fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fd8:	2202      	movs	r2, #2
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f002 fb33 	bl	800a646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800814c <USBD_CDC_Init+0x1e4>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f003 020f 	and.w	r2, r3, #15
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	3324      	adds	r3, #36	@ 0x24
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ffa:	4b55      	ldr	r3, [pc, #340]	@ (8008150 <USBD_CDC_Init+0x1e8>)
 8007ffc:	7819      	ldrb	r1, [r3, #0]
 8007ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008002:	2202      	movs	r2, #2
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f002 fb1e 	bl	800a646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800800a:	4b51      	ldr	r3, [pc, #324]	@ (8008150 <USBD_CDC_Init+0x1e8>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f003 020f 	and.w	r2, r3, #15
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008022:	2201      	movs	r2, #1
 8008024:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008026:	4b4b      	ldr	r3, [pc, #300]	@ (8008154 <USBD_CDC_Init+0x1ec>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	f003 020f 	and.w	r2, r3, #15
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	3326      	adds	r3, #38	@ 0x26
 800803c:	2210      	movs	r2, #16
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e035      	b.n	80080ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008042:	4b42      	ldr	r3, [pc, #264]	@ (800814c <USBD_CDC_Init+0x1e4>)
 8008044:	7819      	ldrb	r1, [r3, #0]
 8008046:	2340      	movs	r3, #64	@ 0x40
 8008048:	2202      	movs	r2, #2
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f002 fafb 	bl	800a646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008050:	4b3e      	ldr	r3, [pc, #248]	@ (800814c <USBD_CDC_Init+0x1e4>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	f003 020f 	and.w	r2, r3, #15
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	3324      	adds	r3, #36	@ 0x24
 8008066:	2201      	movs	r2, #1
 8008068:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800806a:	4b39      	ldr	r3, [pc, #228]	@ (8008150 <USBD_CDC_Init+0x1e8>)
 800806c:	7819      	ldrb	r1, [r3, #0]
 800806e:	2340      	movs	r3, #64	@ 0x40
 8008070:	2202      	movs	r2, #2
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f002 fae7 	bl	800a646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008078:	4b35      	ldr	r3, [pc, #212]	@ (8008150 <USBD_CDC_Init+0x1e8>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008090:	2201      	movs	r2, #1
 8008092:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008094:	4b2f      	ldr	r3, [pc, #188]	@ (8008154 <USBD_CDC_Init+0x1ec>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 020f 	and.w	r2, r3, #15
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	3326      	adds	r3, #38	@ 0x26
 80080aa:	2210      	movs	r2, #16
 80080ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080ae:	4b29      	ldr	r3, [pc, #164]	@ (8008154 <USBD_CDC_Init+0x1ec>)
 80080b0:	7819      	ldrb	r1, [r3, #0]
 80080b2:	2308      	movs	r3, #8
 80080b4:	2203      	movs	r2, #3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f002 fac5 	bl	800a646 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80080bc:	4b25      	ldr	r3, [pc, #148]	@ (8008154 <USBD_CDC_Init+0x1ec>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f003 020f 	and.w	r2, r3, #15
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	3324      	adds	r3, #36	@ 0x24
 80080d2:	2201      	movs	r2, #1
 80080d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	33b0      	adds	r3, #176	@ 0xb0
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800810c:	2302      	movs	r3, #2
 800810e:	e018      	b.n	8008142 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7c1b      	ldrb	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008118:	4b0d      	ldr	r3, [pc, #52]	@ (8008150 <USBD_CDC_Init+0x1e8>)
 800811a:	7819      	ldrb	r1, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f002 fb7c 	bl	800a824 <USBD_LL_PrepareReceive>
 800812c:	e008      	b.n	8008140 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800812e:	4b08      	ldr	r3, [pc, #32]	@ (8008150 <USBD_CDC_Init+0x1e8>)
 8008130:	7819      	ldrb	r1, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008138:	2340      	movs	r3, #64	@ 0x40
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f002 fb72 	bl	800a824 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	200000a7 	.word	0x200000a7
 8008150:	200000a8 	.word	0x200000a8
 8008154:	200000a9 	.word	0x200000a9

08008158 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008164:	4b3a      	ldr	r3, [pc, #232]	@ (8008250 <USBD_CDC_DeInit+0xf8>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f002 fa91 	bl	800a692 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008170:	4b37      	ldr	r3, [pc, #220]	@ (8008250 <USBD_CDC_DeInit+0xf8>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	f003 020f 	and.w	r2, r3, #15
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	3324      	adds	r3, #36	@ 0x24
 8008186:	2200      	movs	r2, #0
 8008188:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800818a:	4b32      	ldr	r3, [pc, #200]	@ (8008254 <USBD_CDC_DeInit+0xfc>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f002 fa7e 	bl	800a692 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008196:	4b2f      	ldr	r3, [pc, #188]	@ (8008254 <USBD_CDC_DeInit+0xfc>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f003 020f 	and.w	r2, r3, #15
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80081ae:	2200      	movs	r2, #0
 80081b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80081b2:	4b29      	ldr	r3, [pc, #164]	@ (8008258 <USBD_CDC_DeInit+0x100>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f002 fa6a 	bl	800a692 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80081be:	4b26      	ldr	r3, [pc, #152]	@ (8008258 <USBD_CDC_DeInit+0x100>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	f003 020f 	and.w	r2, r3, #15
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	3324      	adds	r3, #36	@ 0x24
 80081d4:	2200      	movs	r2, #0
 80081d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80081d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008258 <USBD_CDC_DeInit+0x100>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f003 020f 	and.w	r2, r3, #15
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	3326      	adds	r3, #38	@ 0x26
 80081ee:	2200      	movs	r2, #0
 80081f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	32b0      	adds	r2, #176	@ 0xb0
 80081fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01f      	beq.n	8008244 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	33b0      	adds	r3, #176	@ 0xb0
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	32b0      	adds	r2, #176	@ 0xb0
 8008222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008226:	4618      	mov	r0, r3
 8008228:	f002 fb3e 	bl	800a8a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	32b0      	adds	r2, #176	@ 0xb0
 8008236:	2100      	movs	r1, #0
 8008238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	200000a7 	.word	0x200000a7
 8008254:	200000a8 	.word	0x200000a8
 8008258:	200000a9 	.word	0x200000a9

0800825c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	32b0      	adds	r2, #176	@ 0xb0
 8008270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008274:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d101      	bne.n	800828c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008288:	2303      	movs	r3, #3
 800828a:	e0bf      	b.n	800840c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008294:	2b00      	cmp	r3, #0
 8008296:	d050      	beq.n	800833a <USBD_CDC_Setup+0xde>
 8008298:	2b20      	cmp	r3, #32
 800829a:	f040 80af 	bne.w	80083fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	88db      	ldrh	r3, [r3, #6]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d03a      	beq.n	800831c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b25b      	sxtb	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	da1b      	bge.n	80082e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	33b0      	adds	r3, #176	@ 0xb0
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80082c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	88d2      	ldrh	r2, [r2, #6]
 80082cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	88db      	ldrh	r3, [r3, #6]
 80082d2:	2b07      	cmp	r3, #7
 80082d4:	bf28      	it	cs
 80082d6:	2307      	movcs	r3, #7
 80082d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	89fa      	ldrh	r2, [r7, #14]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fd87 	bl	8009df4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80082e6:	e090      	b.n	800840a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	785a      	ldrb	r2, [r3, #1]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	88db      	ldrh	r3, [r3, #6]
 80082f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80082f8:	d803      	bhi.n	8008302 <USBD_CDC_Setup+0xa6>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	88db      	ldrh	r3, [r3, #6]
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	e000      	b.n	8008304 <USBD_CDC_Setup+0xa8>
 8008302:	2240      	movs	r2, #64	@ 0x40
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800830a:	6939      	ldr	r1, [r7, #16]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008312:	461a      	mov	r2, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 fd99 	bl	8009e4c <USBD_CtlPrepareRx>
      break;
 800831a:	e076      	b.n	800840a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	33b0      	adds	r3, #176	@ 0xb0
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	7850      	ldrb	r0, [r2, #1]
 8008332:	2200      	movs	r2, #0
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	4798      	blx	r3
      break;
 8008338:	e067      	b.n	800840a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	2b0b      	cmp	r3, #11
 8008340:	d851      	bhi.n	80083e6 <USBD_CDC_Setup+0x18a>
 8008342:	a201      	add	r2, pc, #4	@ (adr r2, 8008348 <USBD_CDC_Setup+0xec>)
 8008344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008348:	08008379 	.word	0x08008379
 800834c:	080083f5 	.word	0x080083f5
 8008350:	080083e7 	.word	0x080083e7
 8008354:	080083e7 	.word	0x080083e7
 8008358:	080083e7 	.word	0x080083e7
 800835c:	080083e7 	.word	0x080083e7
 8008360:	080083e7 	.word	0x080083e7
 8008364:	080083e7 	.word	0x080083e7
 8008368:	080083e7 	.word	0x080083e7
 800836c:	080083e7 	.word	0x080083e7
 8008370:	080083a3 	.word	0x080083a3
 8008374:	080083cd 	.word	0x080083cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b03      	cmp	r3, #3
 8008382:	d107      	bne.n	8008394 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008384:	f107 030a 	add.w	r3, r7, #10
 8008388:	2202      	movs	r2, #2
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 fd31 	bl	8009df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008392:	e032      	b.n	80083fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fcbb 	bl	8009d12 <USBD_CtlError>
            ret = USBD_FAIL;
 800839c:	2303      	movs	r3, #3
 800839e:	75fb      	strb	r3, [r7, #23]
          break;
 80083a0:	e02b      	b.n	80083fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d107      	bne.n	80083be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083ae:	f107 030d 	add.w	r3, r7, #13
 80083b2:	2201      	movs	r2, #1
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fd1c 	bl	8009df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083bc:	e01d      	b.n	80083fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 fca6 	bl	8009d12 <USBD_CtlError>
            ret = USBD_FAIL;
 80083c6:	2303      	movs	r3, #3
 80083c8:	75fb      	strb	r3, [r7, #23]
          break;
 80083ca:	e016      	b.n	80083fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d00f      	beq.n	80083f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fc99 	bl	8009d12 <USBD_CtlError>
            ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083e4:	e008      	b.n	80083f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 fc92 	bl	8009d12 <USBD_CtlError>
          ret = USBD_FAIL;
 80083ee:	2303      	movs	r3, #3
 80083f0:	75fb      	strb	r3, [r7, #23]
          break;
 80083f2:	e002      	b.n	80083fa <USBD_CDC_Setup+0x19e>
          break;
 80083f4:	bf00      	nop
 80083f6:	e008      	b.n	800840a <USBD_CDC_Setup+0x1ae>
          break;
 80083f8:	bf00      	nop
      }
      break;
 80083fa:	e006      	b.n	800840a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 fc87 	bl	8009d12 <USBD_CtlError>
      ret = USBD_FAIL;
 8008404:	2303      	movs	r3, #3
 8008406:	75fb      	strb	r3, [r7, #23]
      break;
 8008408:	bf00      	nop
  }

  return (uint8_t)ret;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008426:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	32b0      	adds	r2, #176	@ 0xb0
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800843a:	2303      	movs	r3, #3
 800843c:	e065      	b.n	800850a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	32b0      	adds	r2, #176	@ 0xb0
 8008448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	f003 020f 	and.w	r2, r3, #15
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	440b      	add	r3, r1
 8008460:	3318      	adds	r3, #24
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d02f      	beq.n	80084c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	f003 020f 	and.w	r2, r3, #15
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	3318      	adds	r3, #24
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	f003 010f 	and.w	r1, r3, #15
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	460b      	mov	r3, r1
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	440b      	add	r3, r1
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4403      	add	r3, r0
 8008490:	331c      	adds	r3, #28
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	fbb2 f1f3 	udiv	r1, r2, r3
 8008498:	fb01 f303 	mul.w	r3, r1, r3
 800849c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d112      	bne.n	80084c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	f003 020f 	and.w	r2, r3, #15
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	4613      	mov	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	440b      	add	r3, r1
 80084b4:	3318      	adds	r3, #24
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084ba:	78f9      	ldrb	r1, [r7, #3]
 80084bc:	2300      	movs	r3, #0
 80084be:	2200      	movs	r2, #0
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f002 f98e 	bl	800a7e2 <USBD_LL_Transmit>
 80084c6:	e01f      	b.n	8008508 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	33b0      	adds	r3, #176	@ 0xb0
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d010      	beq.n	8008508 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	33b0      	adds	r3, #176	@ 0xb0
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008504:	78fa      	ldrb	r2, [r7, #3]
 8008506:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	32b0      	adds	r2, #176	@ 0xb0
 8008528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	32b0      	adds	r2, #176	@ 0xb0
 8008538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e01a      	b.n	800857a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f002 f98c 	bl	800a866 <USBD_LL_GetRxDataSize>
 800854e:	4602      	mov	r2, r0
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	33b0      	adds	r3, #176	@ 0xb0
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008574:	4611      	mov	r1, r2
 8008576:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	32b0      	adds	r2, #176	@ 0xb0
 8008594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008598:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e024      	b.n	80085ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	33b0      	adds	r3, #176	@ 0xb0
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d019      	beq.n	80085ec <USBD_CDC_EP0_RxReady+0x6a>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80085be:	2bff      	cmp	r3, #255	@ 0xff
 80085c0:	d014      	beq.n	80085ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	33b0      	adds	r3, #176	@ 0xb0
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80085da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	22ff      	movs	r2, #255	@ 0xff
 80085e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008600:	2182      	movs	r1, #130	@ 0x82
 8008602:	4818      	ldr	r0, [pc, #96]	@ (8008664 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008604:	f000 fd4f 	bl	80090a6 <USBD_GetEpDesc>
 8008608:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800860a:	2101      	movs	r1, #1
 800860c:	4815      	ldr	r0, [pc, #84]	@ (8008664 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800860e:	f000 fd4a 	bl	80090a6 <USBD_GetEpDesc>
 8008612:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008614:	2181      	movs	r1, #129	@ 0x81
 8008616:	4813      	ldr	r0, [pc, #76]	@ (8008664 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008618:	f000 fd45 	bl	80090a6 <USBD_GetEpDesc>
 800861c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2210      	movs	r2, #16
 8008628:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d006      	beq.n	800863e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2200      	movs	r2, #0
 8008634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008638:	711a      	strb	r2, [r3, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d006      	beq.n	8008652 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800864c:	711a      	strb	r2, [r3, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2243      	movs	r2, #67	@ 0x43
 8008656:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008658:	4b02      	ldr	r3, [pc, #8]	@ (8008664 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000064 	.word	0x20000064

08008668 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008670:	2182      	movs	r1, #130	@ 0x82
 8008672:	4818      	ldr	r0, [pc, #96]	@ (80086d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008674:	f000 fd17 	bl	80090a6 <USBD_GetEpDesc>
 8008678:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800867a:	2101      	movs	r1, #1
 800867c:	4815      	ldr	r0, [pc, #84]	@ (80086d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800867e:	f000 fd12 	bl	80090a6 <USBD_GetEpDesc>
 8008682:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008684:	2181      	movs	r1, #129	@ 0x81
 8008686:	4813      	ldr	r0, [pc, #76]	@ (80086d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008688:	f000 fd0d 	bl	80090a6 <USBD_GetEpDesc>
 800868c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2210      	movs	r2, #16
 8008698:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d006      	beq.n	80086ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2200      	movs	r2, #0
 80086a4:	711a      	strb	r2, [r3, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f042 0202 	orr.w	r2, r2, #2
 80086ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d006      	beq.n	80086c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	711a      	strb	r2, [r3, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f042 0202 	orr.w	r2, r2, #2
 80086c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2243      	movs	r2, #67	@ 0x43
 80086c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086c8:	4b02      	ldr	r3, [pc, #8]	@ (80086d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000064 	.word	0x20000064

080086d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086e0:	2182      	movs	r1, #130	@ 0x82
 80086e2:	4818      	ldr	r0, [pc, #96]	@ (8008744 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086e4:	f000 fcdf 	bl	80090a6 <USBD_GetEpDesc>
 80086e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086ea:	2101      	movs	r1, #1
 80086ec:	4815      	ldr	r0, [pc, #84]	@ (8008744 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086ee:	f000 fcda 	bl	80090a6 <USBD_GetEpDesc>
 80086f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086f4:	2181      	movs	r1, #129	@ 0x81
 80086f6:	4813      	ldr	r0, [pc, #76]	@ (8008744 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086f8:	f000 fcd5 	bl	80090a6 <USBD_GetEpDesc>
 80086fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2210      	movs	r2, #16
 8008708:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d006      	beq.n	800871e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2200      	movs	r2, #0
 8008714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008718:	711a      	strb	r2, [r3, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d006      	beq.n	8008732 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800872c:	711a      	strb	r2, [r3, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2243      	movs	r2, #67	@ 0x43
 8008736:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008738:	4b02      	ldr	r3, [pc, #8]	@ (8008744 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000064 	.word	0x20000064

08008748 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	220a      	movs	r2, #10
 8008754:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008756:	4b03      	ldr	r3, [pc, #12]	@ (8008764 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	20000020 	.word	0x20000020

08008768 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008778:	2303      	movs	r3, #3
 800877a:	e009      	b.n	8008790 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	33b0      	adds	r3, #176	@ 0xb0
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	32b0      	adds	r2, #176	@ 0xb0
 80087b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80087be:	2303      	movs	r3, #3
 80087c0:	e008      	b.n	80087d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	32b0      	adds	r2, #176	@ 0xb0
 80087f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008800:	2303      	movs	r3, #3
 8008802:	e004      	b.n	800880e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
	...

0800881c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	32b0      	adds	r2, #176	@ 0xb0
 800882e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008832:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800883e:	2303      	movs	r3, #3
 8008840:	e025      	b.n	800888e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11f      	bne.n	800888c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2201      	movs	r2, #1
 8008850:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008854:	4b10      	ldr	r3, [pc, #64]	@ (8008898 <USBD_CDC_TransmitPacket+0x7c>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4403      	add	r3, r0
 800886e:	3318      	adds	r3, #24
 8008870:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008872:	4b09      	ldr	r3, [pc, #36]	@ (8008898 <USBD_CDC_TransmitPacket+0x7c>)
 8008874:	7819      	ldrb	r1, [r3, #0]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f001 ffad 	bl	800a7e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	200000a7 	.word	0x200000a7

0800889c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	32b0      	adds	r2, #176	@ 0xb0
 80088ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	32b0      	adds	r2, #176	@ 0xb0
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e018      	b.n	80088fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7c1b      	ldrb	r3, [r3, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <USBD_CDC_ReceivePacket+0x68>)
 80088d4:	7819      	ldrb	r1, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 ff9f 	bl	800a824 <USBD_LL_PrepareReceive>
 80088e6:	e008      	b.n	80088fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088e8:	4b06      	ldr	r3, [pc, #24]	@ (8008904 <USBD_CDC_ReceivePacket+0x68>)
 80088ea:	7819      	ldrb	r1, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088f2:	2340      	movs	r3, #64	@ 0x40
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 ff95 	bl	800a824 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	200000a8 	.word	0x200000a8

08008908 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	e01f      	b.n	8008960 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	79fa      	ldrb	r2, [r7, #7]
 8008952:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f001 fe0f 	bl	800a578 <USBD_LL_Init>
 800895a:	4603      	mov	r3, r0
 800895c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800897c:	2303      	movs	r3, #3
 800897e:	e025      	b.n	80089cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	32ae      	adds	r2, #174	@ 0xae
 8008992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00f      	beq.n	80089bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	32ae      	adds	r2, #174	@ 0xae
 80089a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ac:	f107 020e 	add.w	r2, r7, #14
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	4602      	mov	r2, r0
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 fe17 	bl	800a610 <USBD_LL_Start>
 80089e2:	4603      	mov	r3, r0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d009      	beq.n	8008a30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	78fa      	ldrb	r2, [r7, #3]
 8008a26:	4611      	mov	r1, r2
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	4611      	mov	r1, r2
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a60:	2303      	movs	r3, #3
 8008a62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 f90c 	bl	8009c9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a94:	461a      	mov	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008aa2:	f003 031f 	and.w	r3, r3, #31
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d01a      	beq.n	8008ae0 <USBD_LL_SetupStage+0x72>
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d822      	bhi.n	8008af4 <USBD_LL_SetupStage+0x86>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <USBD_LL_SetupStage+0x4a>
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d00a      	beq.n	8008acc <USBD_LL_SetupStage+0x5e>
 8008ab6:	e01d      	b.n	8008af4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fb63 	bl	800918c <USBD_StdDevReq>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8008aca:	e020      	b.n	8008b0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fbcb 	bl	8009270 <USBD_StdItfReq>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ade:	e016      	b.n	8008b0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fc2d 	bl	8009348 <USBD_StdEPReq>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]
      break;
 8008af2:	e00c      	b.n	8008b0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008afa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fde4 	bl	800a6d0 <USBD_LL_StallEP>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0c:	bf00      	nop
  }

  return ret;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	460b      	mov	r3, r1
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b2a:	7afb      	ldrb	r3, [r7, #11]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d16e      	bne.n	8008c0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008b36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	f040 8098 	bne.w	8008c74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d913      	bls.n	8008b78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	1ad2      	subs	r2, r2, r3
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	4293      	cmp	r3, r2
 8008b68:	bf28      	it	cs
 8008b6a:	4613      	movcs	r3, r2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f001 f988 	bl	8009e86 <USBD_CtlContinueRx>
 8008b76:	e07d      	b.n	8008c74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b7e:	f003 031f 	and.w	r3, r3, #31
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d014      	beq.n	8008bb0 <USBD_LL_DataOutStage+0x98>
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d81d      	bhi.n	8008bc6 <USBD_LL_DataOutStage+0xae>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <USBD_LL_DataOutStage+0x7c>
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d003      	beq.n	8008b9a <USBD_LL_DataOutStage+0x82>
 8008b92:	e018      	b.n	8008bc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	75bb      	strb	r3, [r7, #22]
            break;
 8008b98:	e018      	b.n	8008bcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fa64 	bl	8009072 <USBD_CoreFindIF>
 8008baa:	4603      	mov	r3, r0
 8008bac:	75bb      	strb	r3, [r7, #22]
            break;
 8008bae:	e00d      	b.n	8008bcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	4619      	mov	r1, r3
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fa66 	bl	800908c <USBD_CoreFindEP>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75bb      	strb	r3, [r7, #22]
            break;
 8008bc4:	e002      	b.n	8008bcc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75bb      	strb	r3, [r7, #22]
            break;
 8008bca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008bcc:	7dbb      	ldrb	r3, [r7, #22]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d119      	bne.n	8008c06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d113      	bne.n	8008c06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008bde:	7dba      	ldrb	r2, [r7, #22]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	32ae      	adds	r2, #174	@ 0xae
 8008be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008bee:	7dba      	ldrb	r2, [r7, #22]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bf6:	7dba      	ldrb	r2, [r7, #22]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	32ae      	adds	r2, #174	@ 0xae
 8008bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f001 f94e 	bl	8009ea8 <USBD_CtlSendStatus>
 8008c0c:	e032      	b.n	8008c74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fa37 	bl	800908c <USBD_CoreFindEP>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c22:	7dbb      	ldrb	r3, [r7, #22]
 8008c24:	2bff      	cmp	r3, #255	@ 0xff
 8008c26:	d025      	beq.n	8008c74 <USBD_LL_DataOutStage+0x15c>
 8008c28:	7dbb      	ldrb	r3, [r7, #22]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d122      	bne.n	8008c74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d117      	bne.n	8008c6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c3a:	7dba      	ldrb	r2, [r7, #22]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	32ae      	adds	r2, #174	@ 0xae
 8008c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00f      	beq.n	8008c6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c4a:	7dba      	ldrb	r2, [r7, #22]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c52:	7dba      	ldrb	r2, [r7, #22]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	32ae      	adds	r2, #174	@ 0xae
 8008c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	7afa      	ldrb	r2, [r7, #11]
 8008c60:	4611      	mov	r1, r2
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	e000      	b.n	8008c76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	460b      	mov	r3, r1
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d16f      	bne.n	8008d72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3314      	adds	r3, #20
 8008c96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d15a      	bne.n	8008d58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	689a      	ldr	r2, [r3, #8]
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d914      	bls.n	8008cd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	1ad2      	subs	r2, r2, r3
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f001 f8b0 	bl	8009e2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f001 fda7 	bl	800a824 <USBD_LL_PrepareReceive>
 8008cd6:	e03f      	b.n	8008d58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d11c      	bne.n	8008d1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d316      	bcc.n	8008d1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d20f      	bcs.n	8008d1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2100      	movs	r1, #0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f001 f891 	bl	8009e2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d10:	2300      	movs	r3, #0
 8008d12:	2200      	movs	r2, #0
 8008d14:	2100      	movs	r1, #0
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f001 fd84 	bl	800a824 <USBD_LL_PrepareReceive>
 8008d1c:	e01c      	b.n	8008d58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d10f      	bne.n	8008d4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d009      	beq.n	8008d4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d4a:	2180      	movs	r1, #128	@ 0x80
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f001 fcbf 	bl	800a6d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f001 f8bb 	bl	8009ece <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d03a      	beq.n	8008dd8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7ff fe42 	bl	80089ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008d70:	e032      	b.n	8008dd8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f985 	bl	800908c <USBD_CoreFindEP>
 8008d82:	4603      	mov	r3, r0
 8008d84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	2bff      	cmp	r3, #255	@ 0xff
 8008d8a:	d025      	beq.n	8008dd8 <USBD_LL_DataInStage+0x15a>
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d122      	bne.n	8008dd8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d11c      	bne.n	8008dd8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d9e:	7dfa      	ldrb	r2, [r7, #23]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	32ae      	adds	r2, #174	@ 0xae
 8008da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d014      	beq.n	8008dd8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008dae:	7dfa      	ldrb	r2, [r7, #23]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008db6:	7dfa      	ldrb	r2, [r7, #23]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	32ae      	adds	r2, #174	@ 0xae
 8008dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	7afa      	ldrb	r2, [r7, #11]
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	4798      	blx	r3
 8008dca:	4603      	mov	r3, r0
 8008dcc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008dce:	7dbb      	ldrb	r3, [r7, #22]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008dd4:	7dbb      	ldrb	r3, [r7, #22]
 8008dd6:	e000      	b.n	8008dda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d014      	beq.n	8008e48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00e      	beq.n	8008e48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6852      	ldr	r2, [r2, #4]
 8008e36:	b2d2      	uxtb	r2, r2
 8008e38:	4611      	mov	r1, r2
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	4798      	blx	r3
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e48:	2340      	movs	r3, #64	@ 0x40
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 fbf9 	bl	800a646 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2240      	movs	r2, #64	@ 0x40
 8008e60:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e64:	2340      	movs	r3, #64	@ 0x40
 8008e66:	2200      	movs	r2, #0
 8008e68:	2180      	movs	r1, #128	@ 0x80
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 fbeb 	bl	800a646 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2240      	movs	r2, #64	@ 0x40
 8008e7a:	621a      	str	r2, [r3, #32]

  return ret;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	78fa      	ldrb	r2, [r7, #3]
 8008e96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d006      	beq.n	8008ec8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2204      	movs	r2, #4
 8008ecc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d106      	bne.n	8008f00 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d110      	bne.n	8008f44 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d005      	beq.n	8008f44 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b082      	sub	sp, #8
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	32ae      	adds	r2, #174	@ 0xae
 8008f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e01c      	b.n	8008faa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d115      	bne.n	8008fa8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	32ae      	adds	r2, #174	@ 0xae
 8008f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	32ae      	adds	r2, #174	@ 0xae
 8008f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	32ae      	adds	r2, #174	@ 0xae
 8008fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e01c      	b.n	800900e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d115      	bne.n	800900c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	32ae      	adds	r2, #174	@ 0xae
 8008fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	32ae      	adds	r2, #174	@ 0xae
 8008ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	4611      	mov	r1, r2
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00e      	beq.n	8009068 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	6852      	ldr	r2, [r2, #4]
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	4611      	mov	r1, r2
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	4798      	blx	r3
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800907e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009098:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	7812      	ldrb	r2, [r2, #0]
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d91f      	bls.n	800910c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80090d2:	e013      	b.n	80090fc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80090d4:	f107 030a 	add.w	r3, r7, #10
 80090d8:	4619      	mov	r1, r3
 80090da:	6978      	ldr	r0, [r7, #20]
 80090dc:	f000 f81b 	bl	8009116 <USBD_GetNextDesc>
 80090e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	d108      	bne.n	80090fc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	789b      	ldrb	r3, [r3, #2]
 80090f2:	78fa      	ldrb	r2, [r7, #3]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d008      	beq.n	800910a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	885b      	ldrh	r3, [r3, #2]
 8009100:	b29a      	uxth	r2, r3
 8009102:	897b      	ldrh	r3, [r7, #10]
 8009104:	429a      	cmp	r2, r3
 8009106:	d8e5      	bhi.n	80090d4 <USBD_GetEpDesc+0x2e>
 8009108:	e000      	b.n	800910c <USBD_GetEpDesc+0x66>
          break;
 800910a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800910c:	693b      	ldr	r3, [r7, #16]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	7812      	ldrb	r2, [r2, #0]
 800912c:	4413      	add	r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	461a      	mov	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4413      	add	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009140:	68fb      	ldr	r3, [r7, #12]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800914e:	b480      	push	{r7}
 8009150:	b087      	sub	sp, #28
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	3301      	adds	r3, #1
 8009164:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800916c:	8a3b      	ldrh	r3, [r7, #16]
 800916e:	021b      	lsls	r3, r3, #8
 8009170:	b21a      	sxth	r2, r3
 8009172:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009176:	4313      	orrs	r3, r2
 8009178:	b21b      	sxth	r3, r3
 800917a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800917c:	89fb      	ldrh	r3, [r7, #14]
}
 800917e:	4618      	mov	r0, r3
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
	...

0800918c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091a2:	2b40      	cmp	r3, #64	@ 0x40
 80091a4:	d005      	beq.n	80091b2 <USBD_StdDevReq+0x26>
 80091a6:	2b40      	cmp	r3, #64	@ 0x40
 80091a8:	d857      	bhi.n	800925a <USBD_StdDevReq+0xce>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00f      	beq.n	80091ce <USBD_StdDevReq+0x42>
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d153      	bne.n	800925a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	32ae      	adds	r2, #174	@ 0xae
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]
      break;
 80091cc:	e04a      	b.n	8009264 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	785b      	ldrb	r3, [r3, #1]
 80091d2:	2b09      	cmp	r3, #9
 80091d4:	d83b      	bhi.n	800924e <USBD_StdDevReq+0xc2>
 80091d6:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <USBD_StdDevReq+0x50>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	08009231 	.word	0x08009231
 80091e0:	08009245 	.word	0x08009245
 80091e4:	0800924f 	.word	0x0800924f
 80091e8:	0800923b 	.word	0x0800923b
 80091ec:	0800924f 	.word	0x0800924f
 80091f0:	0800920f 	.word	0x0800920f
 80091f4:	08009205 	.word	0x08009205
 80091f8:	0800924f 	.word	0x0800924f
 80091fc:	08009227 	.word	0x08009227
 8009200:	08009219 	.word	0x08009219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fa3c 	bl	8009684 <USBD_GetDescriptor>
          break;
 800920c:	e024      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fba1 	bl	8009958 <USBD_SetAddress>
          break;
 8009216:	e01f      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fbe0 	bl	80099e0 <USBD_SetConfig>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]
          break;
 8009224:	e018      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fc83 	bl	8009b34 <USBD_GetConfig>
          break;
 800922e:	e013      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fcb4 	bl	8009ba0 <USBD_GetStatus>
          break;
 8009238:	e00e      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fce3 	bl	8009c08 <USBD_SetFeature>
          break;
 8009242:	e009      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fd07 	bl	8009c5a <USBD_ClrFeature>
          break;
 800924c:	e004      	b.n	8009258 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fd5e 	bl	8009d12 <USBD_CtlError>
          break;
 8009256:	bf00      	nop
      }
      break;
 8009258:	e004      	b.n	8009264 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fd58 	bl	8009d12 <USBD_CtlError>
      break;
 8009262:	bf00      	nop
  }

  return ret;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop

08009270 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009286:	2b40      	cmp	r3, #64	@ 0x40
 8009288:	d005      	beq.n	8009296 <USBD_StdItfReq+0x26>
 800928a:	2b40      	cmp	r3, #64	@ 0x40
 800928c:	d852      	bhi.n	8009334 <USBD_StdItfReq+0xc4>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <USBD_StdItfReq+0x26>
 8009292:	2b20      	cmp	r3, #32
 8009294:	d14e      	bne.n	8009334 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800929c:	b2db      	uxtb	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d840      	bhi.n	8009326 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	889b      	ldrh	r3, [r3, #4]
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d836      	bhi.n	800931c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	889b      	ldrh	r3, [r3, #4]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff fedb 	bl	8009072 <USBD_CoreFindIF>
 80092bc:	4603      	mov	r3, r0
 80092be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2bff      	cmp	r3, #255	@ 0xff
 80092c4:	d01d      	beq.n	8009302 <USBD_StdItfReq+0x92>
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d11a      	bne.n	8009302 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80092cc:	7bba      	ldrb	r2, [r7, #14]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	32ae      	adds	r2, #174	@ 0xae
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00f      	beq.n	80092fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80092dc:	7bba      	ldrb	r2, [r7, #14]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092e4:	7bba      	ldrb	r2, [r7, #14]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	32ae      	adds	r2, #174	@ 0xae
 80092ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	4798      	blx	r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092fa:	e004      	b.n	8009306 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092fc:	2303      	movs	r3, #3
 80092fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009300:	e001      	b.n	8009306 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	88db      	ldrh	r3, [r3, #6]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d110      	bne.n	8009330 <USBD_StdItfReq+0xc0>
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10d      	bne.n	8009330 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fdc7 	bl	8009ea8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800931a:	e009      	b.n	8009330 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fcf7 	bl	8009d12 <USBD_CtlError>
          break;
 8009324:	e004      	b.n	8009330 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fcf2 	bl	8009d12 <USBD_CtlError>
          break;
 800932e:	e000      	b.n	8009332 <USBD_StdItfReq+0xc2>
          break;
 8009330:	bf00      	nop
      }
      break;
 8009332:	e004      	b.n	800933e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fceb 	bl	8009d12 <USBD_CtlError>
      break;
 800933c:	bf00      	nop
  }

  return ret;
 800933e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	889b      	ldrh	r3, [r3, #4]
 800935a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009364:	2b40      	cmp	r3, #64	@ 0x40
 8009366:	d007      	beq.n	8009378 <USBD_StdEPReq+0x30>
 8009368:	2b40      	cmp	r3, #64	@ 0x40
 800936a:	f200 817f 	bhi.w	800966c <USBD_StdEPReq+0x324>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d02a      	beq.n	80093c8 <USBD_StdEPReq+0x80>
 8009372:	2b20      	cmp	r3, #32
 8009374:	f040 817a 	bne.w	800966c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff fe85 	bl	800908c <USBD_CoreFindEP>
 8009382:	4603      	mov	r3, r0
 8009384:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009386:	7b7b      	ldrb	r3, [r7, #13]
 8009388:	2bff      	cmp	r3, #255	@ 0xff
 800938a:	f000 8174 	beq.w	8009676 <USBD_StdEPReq+0x32e>
 800938e:	7b7b      	ldrb	r3, [r7, #13]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f040 8170 	bne.w	8009676 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009396:	7b7a      	ldrb	r2, [r7, #13]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800939e:	7b7a      	ldrb	r2, [r7, #13]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	32ae      	adds	r2, #174	@ 0xae
 80093a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8163 	beq.w	8009676 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80093b0:	7b7a      	ldrb	r2, [r7, #13]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	32ae      	adds	r2, #174	@ 0xae
 80093b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
 80093c2:	4603      	mov	r3, r0
 80093c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093c6:	e156      	b.n	8009676 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d008      	beq.n	80093e2 <USBD_StdEPReq+0x9a>
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	f300 8145 	bgt.w	8009660 <USBD_StdEPReq+0x318>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 809b 	beq.w	8009512 <USBD_StdEPReq+0x1ca>
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d03c      	beq.n	800945a <USBD_StdEPReq+0x112>
 80093e0:	e13e      	b.n	8009660 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d002      	beq.n	80093f4 <USBD_StdEPReq+0xac>
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d016      	beq.n	8009420 <USBD_StdEPReq+0xd8>
 80093f2:	e02c      	b.n	800944e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00d      	beq.n	8009416 <USBD_StdEPReq+0xce>
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b80      	cmp	r3, #128	@ 0x80
 80093fe:	d00a      	beq.n	8009416 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 f963 	bl	800a6d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800940a:	2180      	movs	r1, #128	@ 0x80
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f95f 	bl	800a6d0 <USBD_LL_StallEP>
 8009412:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009414:	e020      	b.n	8009458 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fc7a 	bl	8009d12 <USBD_CtlError>
              break;
 800941e:	e01b      	b.n	8009458 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	885b      	ldrh	r3, [r3, #2]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10e      	bne.n	8009446 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00b      	beq.n	8009446 <USBD_StdEPReq+0xfe>
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b80      	cmp	r3, #128	@ 0x80
 8009432:	d008      	beq.n	8009446 <USBD_StdEPReq+0xfe>
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	88db      	ldrh	r3, [r3, #6]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 f945 	bl	800a6d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fd2e 	bl	8009ea8 <USBD_CtlSendStatus>

              break;
 800944c:	e004      	b.n	8009458 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fc5e 	bl	8009d12 <USBD_CtlError>
              break;
 8009456:	bf00      	nop
          }
          break;
 8009458:	e107      	b.n	800966a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d002      	beq.n	800946c <USBD_StdEPReq+0x124>
 8009466:	2b03      	cmp	r3, #3
 8009468:	d016      	beq.n	8009498 <USBD_StdEPReq+0x150>
 800946a:	e04b      	b.n	8009504 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00d      	beq.n	800948e <USBD_StdEPReq+0x146>
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	2b80      	cmp	r3, #128	@ 0x80
 8009476:	d00a      	beq.n	800948e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 f927 	bl	800a6d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009482:	2180      	movs	r1, #128	@ 0x80
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 f923 	bl	800a6d0 <USBD_LL_StallEP>
 800948a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800948c:	e040      	b.n	8009510 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc3e 	bl	8009d12 <USBD_CtlError>
              break;
 8009496:	e03b      	b.n	8009510 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	885b      	ldrh	r3, [r3, #2]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d136      	bne.n	800950e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f001 f92d 	bl	800a70e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fcf7 	bl	8009ea8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff fde4 	bl	800908c <USBD_CoreFindEP>
 80094c4:	4603      	mov	r3, r0
 80094c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094c8:	7b7b      	ldrb	r3, [r7, #13]
 80094ca:	2bff      	cmp	r3, #255	@ 0xff
 80094cc:	d01f      	beq.n	800950e <USBD_StdEPReq+0x1c6>
 80094ce:	7b7b      	ldrb	r3, [r7, #13]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d11c      	bne.n	800950e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80094d4:	7b7a      	ldrb	r2, [r7, #13]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80094dc:	7b7a      	ldrb	r2, [r7, #13]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	32ae      	adds	r2, #174	@ 0xae
 80094e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d010      	beq.n	800950e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094ec:	7b7a      	ldrb	r2, [r7, #13]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32ae      	adds	r2, #174	@ 0xae
 80094f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	4798      	blx	r3
 80094fe:	4603      	mov	r3, r0
 8009500:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009502:	e004      	b.n	800950e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fc03 	bl	8009d12 <USBD_CtlError>
              break;
 800950c:	e000      	b.n	8009510 <USBD_StdEPReq+0x1c8>
              break;
 800950e:	bf00      	nop
          }
          break;
 8009510:	e0ab      	b.n	800966a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d002      	beq.n	8009524 <USBD_StdEPReq+0x1dc>
 800951e:	2b03      	cmp	r3, #3
 8009520:	d032      	beq.n	8009588 <USBD_StdEPReq+0x240>
 8009522:	e097      	b.n	8009654 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <USBD_StdEPReq+0x1f2>
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b80      	cmp	r3, #128	@ 0x80
 800952e:	d004      	beq.n	800953a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fbed 	bl	8009d12 <USBD_CtlError>
                break;
 8009538:	e091      	b.n	800965e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800953e:	2b00      	cmp	r3, #0
 8009540:	da0b      	bge.n	800955a <USBD_StdEPReq+0x212>
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	3310      	adds	r3, #16
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4413      	add	r3, r2
 8009556:	3304      	adds	r3, #4
 8009558:	e00b      	b.n	8009572 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	4413      	add	r3, r2
 8009570:	3304      	adds	r3, #4
 8009572:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2202      	movs	r2, #2
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fc37 	bl	8009df4 <USBD_CtlSendData>
              break;
 8009586:	e06a      	b.n	800965e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800958c:	2b00      	cmp	r3, #0
 800958e:	da11      	bge.n	80095b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	f003 020f 	and.w	r2, r3, #15
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	3324      	adds	r3, #36	@ 0x24
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d117      	bne.n	80095da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fbb0 	bl	8009d12 <USBD_CtlError>
                  break;
 80095b2:	e054      	b.n	800965e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	f003 020f 	and.w	r2, r3, #15
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fb9d 	bl	8009d12 <USBD_CtlError>
                  break;
 80095d8:	e041      	b.n	800965e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da0b      	bge.n	80095fa <USBD_StdEPReq+0x2b2>
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	3310      	adds	r3, #16
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	4413      	add	r3, r2
 80095f6:	3304      	adds	r3, #4
 80095f8:	e00b      	b.n	8009612 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	4413      	add	r3, r2
 8009610:	3304      	adds	r3, #4
 8009612:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <USBD_StdEPReq+0x2d8>
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b80      	cmp	r3, #128	@ 0x80
 800961e:	d103      	bne.n	8009628 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	e00e      	b.n	8009646 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 f88d 	bl	800a74c <USBD_LL_IsStallEP>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e002      	b.n	8009646 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2202      	movs	r2, #2
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fbd1 	bl	8009df4 <USBD_CtlSendData>
              break;
 8009652:	e004      	b.n	800965e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fb5b 	bl	8009d12 <USBD_CtlError>
              break;
 800965c:	bf00      	nop
          }
          break;
 800965e:	e004      	b.n	800966a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fb55 	bl	8009d12 <USBD_CtlError>
          break;
 8009668:	bf00      	nop
      }
      break;
 800966a:	e005      	b.n	8009678 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fb4f 	bl	8009d12 <USBD_CtlError>
      break;
 8009674:	e000      	b.n	8009678 <USBD_StdEPReq+0x330>
      break;
 8009676:	bf00      	nop
  }

  return ret;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	2b06      	cmp	r3, #6
 80096a6:	f200 8128 	bhi.w	80098fa <USBD_GetDescriptor+0x276>
 80096aa:	a201      	add	r2, pc, #4	@ (adr r2, 80096b0 <USBD_GetDescriptor+0x2c>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096cd 	.word	0x080096cd
 80096b4:	080096e5 	.word	0x080096e5
 80096b8:	08009725 	.word	0x08009725
 80096bc:	080098fb 	.word	0x080098fb
 80096c0:	080098fb 	.word	0x080098fb
 80096c4:	0800989b 	.word	0x0800989b
 80096c8:	080098c7 	.word	0x080098c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	7c12      	ldrb	r2, [r2, #16]
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
      break;
 80096e2:	e112      	b.n	800990a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7c1b      	ldrb	r3, [r3, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10d      	bne.n	8009708 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f4:	f107 0208 	add.w	r2, r7, #8
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
 80096fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3301      	adds	r3, #1
 8009702:	2202      	movs	r2, #2
 8009704:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009706:	e100      	b.n	800990a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800970e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009710:	f107 0208 	add.w	r2, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	2202      	movs	r2, #2
 8009720:	701a      	strb	r2, [r3, #0]
      break;
 8009722:	e0f2      	b.n	800990a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	885b      	ldrh	r3, [r3, #2]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b05      	cmp	r3, #5
 800972c:	f200 80ac 	bhi.w	8009888 <USBD_GetDescriptor+0x204>
 8009730:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <USBD_GetDescriptor+0xb4>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	08009751 	.word	0x08009751
 800973c:	08009785 	.word	0x08009785
 8009740:	080097b9 	.word	0x080097b9
 8009744:	080097ed 	.word	0x080097ed
 8009748:	08009821 	.word	0x08009821
 800974c:	08009855 	.word	0x08009855
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009772:	e091      	b.n	8009898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 facb 	bl	8009d12 <USBD_CtlError>
            err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
          break;
 8009782:	e089      	b.n	8009898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e077      	b.n	8009898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fab1 	bl	8009d12 <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e06f      	b.n	8009898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e05d      	b.n	8009898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa97 	bl	8009d12 <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e055      	b.n	8009898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e043      	b.n	8009898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa7d 	bl	8009d12 <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e03b      	b.n	8009898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e029      	b.n	8009898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa63 	bl	8009d12 <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e021      	b.n	8009898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009876:	e00f      	b.n	8009898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa49 	bl	8009d12 <USBD_CtlError>
            err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
          break;
 8009886:	e007      	b.n	8009898 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa41 	bl	8009d12 <USBD_CtlError>
          err++;
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	3301      	adds	r3, #1
 8009894:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009896:	bf00      	nop
      }
      break;
 8009898:	e037      	b.n	800990a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	7c1b      	ldrb	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d109      	bne.n	80098b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098aa:	f107 0208 	add.w	r2, r7, #8
 80098ae:	4610      	mov	r0, r2
 80098b0:	4798      	blx	r3
 80098b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098b4:	e029      	b.n	800990a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa2a 	bl	8009d12 <USBD_CtlError>
        err++;
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	3301      	adds	r3, #1
 80098c2:	72fb      	strb	r3, [r7, #11]
      break;
 80098c4:	e021      	b.n	800990a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7c1b      	ldrb	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10d      	bne.n	80098ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d6:	f107 0208 	add.w	r2, r7, #8
 80098da:	4610      	mov	r0, r2
 80098dc:	4798      	blx	r3
 80098de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3301      	adds	r3, #1
 80098e4:	2207      	movs	r2, #7
 80098e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098e8:	e00f      	b.n	800990a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fa10 	bl	8009d12 <USBD_CtlError>
        err++;
 80098f2:	7afb      	ldrb	r3, [r7, #11]
 80098f4:	3301      	adds	r3, #1
 80098f6:	72fb      	strb	r3, [r7, #11]
      break;
 80098f8:	e007      	b.n	800990a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fa08 	bl	8009d12 <USBD_CtlError>
      err++;
 8009902:	7afb      	ldrb	r3, [r7, #11]
 8009904:	3301      	adds	r3, #1
 8009906:	72fb      	strb	r3, [r7, #11]
      break;
 8009908:	bf00      	nop
  }

  if (err != 0U)
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d11e      	bne.n	800994e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	88db      	ldrh	r3, [r3, #6]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d016      	beq.n	8009946 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009918:	893b      	ldrh	r3, [r7, #8]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00e      	beq.n	800993c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	88da      	ldrh	r2, [r3, #6]
 8009922:	893b      	ldrh	r3, [r7, #8]
 8009924:	4293      	cmp	r3, r2
 8009926:	bf28      	it	cs
 8009928:	4613      	movcs	r3, r2
 800992a:	b29b      	uxth	r3, r3
 800992c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800992e:	893b      	ldrh	r3, [r7, #8]
 8009930:	461a      	mov	r2, r3
 8009932:	68f9      	ldr	r1, [r7, #12]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fa5d 	bl	8009df4 <USBD_CtlSendData>
 800993a:	e009      	b.n	8009950 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9e7 	bl	8009d12 <USBD_CtlError>
 8009944:	e004      	b.n	8009950 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 faae 	bl	8009ea8 <USBD_CtlSendStatus>
 800994c:	e000      	b.n	8009950 <USBD_GetDescriptor+0x2cc>
    return;
 800994e:	bf00      	nop
  }
}
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop

08009958 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	889b      	ldrh	r3, [r3, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d131      	bne.n	80099ce <USBD_SetAddress+0x76>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	88db      	ldrh	r3, [r3, #6]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d12d      	bne.n	80099ce <USBD_SetAddress+0x76>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	885b      	ldrh	r3, [r3, #2]
 8009976:	2b7f      	cmp	r3, #127	@ 0x7f
 8009978:	d829      	bhi.n	80099ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	885b      	ldrh	r3, [r3, #2]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009984:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b03      	cmp	r3, #3
 8009990:	d104      	bne.n	800999c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f9bc 	bl	8009d12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999a:	e01d      	b.n	80099d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	7bfa      	ldrb	r2, [r7, #15]
 80099a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fefb 	bl	800a7a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa7a 	bl	8009ea8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d004      	beq.n	80099c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c2:	e009      	b.n	80099d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099cc:	e004      	b.n	80099d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f99e 	bl	8009d12 <USBD_CtlError>
  }
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	885b      	ldrh	r3, [r3, #2]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	4b4e      	ldr	r3, [pc, #312]	@ (8009b30 <USBD_SetConfig+0x150>)
 80099f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099f8:	4b4d      	ldr	r3, [pc, #308]	@ (8009b30 <USBD_SetConfig+0x150>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d905      	bls.n	8009a0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f985 	bl	8009d12 <USBD_CtlError>
    return USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e08c      	b.n	8009b26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d002      	beq.n	8009a1e <USBD_SetConfig+0x3e>
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d029      	beq.n	8009a70 <USBD_SetConfig+0x90>
 8009a1c:	e075      	b.n	8009b0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a1e:	4b44      	ldr	r3, [pc, #272]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d020      	beq.n	8009a68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a26:	4b42      	ldr	r3, [pc, #264]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a30:	4b3f      	ldr	r3, [pc, #252]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7fe ffe3 	bl	8008a02 <USBD_SetClassConfig>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d008      	beq.n	8009a58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f962 	bl	8009d12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2202      	movs	r2, #2
 8009a52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a56:	e065      	b.n	8009b24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa25 	bl	8009ea8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2203      	movs	r2, #3
 8009a62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a66:	e05d      	b.n	8009b24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fa1d 	bl	8009ea8 <USBD_CtlSendStatus>
      break;
 8009a6e:	e059      	b.n	8009b24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a70:	4b2f      	ldr	r3, [pc, #188]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d112      	bne.n	8009a9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a80:	4b2b      	ldr	r3, [pc, #172]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a8a:	4b29      	ldr	r3, [pc, #164]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7fe ffd2 	bl	8008a3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa06 	bl	8009ea8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a9c:	e042      	b.n	8009b24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a9e:	4b24      	ldr	r3, [pc, #144]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d02a      	beq.n	8009b02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7fe ffc0 	bl	8008a3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009aba:	4b1d      	ldr	r3, [pc, #116]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7fe ff99 	bl	8008a02 <USBD_SetClassConfig>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00f      	beq.n	8009afa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f918 	bl	8009d12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7fe ffa5 	bl	8008a3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009af8:	e014      	b.n	8009b24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f9d4 	bl	8009ea8 <USBD_CtlSendStatus>
      break;
 8009b00:	e010      	b.n	8009b24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f9d0 	bl	8009ea8 <USBD_CtlSendStatus>
      break;
 8009b08:	e00c      	b.n	8009b24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f900 	bl	8009d12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b12:	4b07      	ldr	r3, [pc, #28]	@ (8009b30 <USBD_SetConfig+0x150>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7fe ff8e 	bl	8008a3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	73fb      	strb	r3, [r7, #15]
      break;
 8009b22:	bf00      	nop
  }

  return ret;
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	200003dc 	.word	0x200003dc

08009b34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	88db      	ldrh	r3, [r3, #6]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d004      	beq.n	8009b50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f8e2 	bl	8009d12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b4e:	e023      	b.n	8009b98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	dc02      	bgt.n	8009b62 <USBD_GetConfig+0x2e>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dc03      	bgt.n	8009b68 <USBD_GetConfig+0x34>
 8009b60:	e015      	b.n	8009b8e <USBD_GetConfig+0x5a>
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d00b      	beq.n	8009b7e <USBD_GetConfig+0x4a>
 8009b66:	e012      	b.n	8009b8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	3308      	adds	r3, #8
 8009b72:	2201      	movs	r2, #1
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f93c 	bl	8009df4 <USBD_CtlSendData>
        break;
 8009b7c:	e00c      	b.n	8009b98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	3304      	adds	r3, #4
 8009b82:	2201      	movs	r2, #1
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f934 	bl	8009df4 <USBD_CtlSendData>
        break;
 8009b8c:	e004      	b.n	8009b98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f8be 	bl	8009d12 <USBD_CtlError>
        break;
 8009b96:	bf00      	nop
}
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d81e      	bhi.n	8009bf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	88db      	ldrh	r3, [r3, #6]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d004      	beq.n	8009bca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f8a5 	bl	8009d12 <USBD_CtlError>
        break;
 8009bc8:	e01a      	b.n	8009c00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	f043 0202 	orr.w	r2, r3, #2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	330c      	adds	r3, #12
 8009bea:	2202      	movs	r2, #2
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f900 	bl	8009df4 <USBD_CtlSendData>
      break;
 8009bf4:	e004      	b.n	8009c00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f88a 	bl	8009d12 <USBD_CtlError>
      break;
 8009bfe:	bf00      	nop
  }
}
 8009c00:	bf00      	nop
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	885b      	ldrh	r3, [r3, #2]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d107      	bne.n	8009c2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f940 	bl	8009ea8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c28:	e013      	b.n	8009c52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	885b      	ldrh	r3, [r3, #2]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d10b      	bne.n	8009c4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	889b      	ldrh	r3, [r3, #4]
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f930 	bl	8009ea8 <USBD_CtlSendStatus>
}
 8009c48:	e003      	b.n	8009c52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f860 	bl	8009d12 <USBD_CtlError>
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d80b      	bhi.n	8009c8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	885b      	ldrh	r3, [r3, #2]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d10c      	bne.n	8009c94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f910 	bl	8009ea8 <USBD_CtlSendStatus>
      }
      break;
 8009c88:	e004      	b.n	8009c94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f840 	bl	8009d12 <USBD_CtlError>
      break;
 8009c92:	e000      	b.n	8009c96 <USBD_ClrFeature+0x3c>
      break;
 8009c94:	bf00      	nop
  }
}
 8009c96:	bf00      	nop
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	781a      	ldrb	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	781a      	ldrb	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7ff fa40 	bl	800914e <SWAPBYTE>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff fa33 	bl	800914e <SWAPBYTE>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	461a      	mov	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f7ff fa26 	bl	800914e <SWAPBYTE>
 8009d02:	4603      	mov	r3, r0
 8009d04:	461a      	mov	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	80da      	strh	r2, [r3, #6]
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d1c:	2180      	movs	r1, #128	@ 0x80
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fcd6 	bl	800a6d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d24:	2100      	movs	r1, #0
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fcd2 	bl	800a6d0 <USBD_LL_StallEP>
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d036      	beq.n	8009db8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d4e:	6938      	ldr	r0, [r7, #16]
 8009d50:	f000 f836 	bl	8009dc0 <USBD_GetLen>
 8009d54:	4603      	mov	r3, r0
 8009d56:	3301      	adds	r3, #1
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	4413      	add	r3, r2
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	7812      	ldrb	r2, [r2, #0]
 8009d6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	3301      	adds	r3, #1
 8009d72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	4413      	add	r3, r2
 8009d7a:	2203      	movs	r2, #3
 8009d7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	3301      	adds	r3, #1
 8009d82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d84:	e013      	b.n	8009dae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	7812      	ldrb	r2, [r2, #0]
 8009d90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	3301      	adds	r3, #1
 8009d96:	613b      	str	r3, [r7, #16]
    idx++;
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	4413      	add	r3, r2
 8009da4:	2200      	movs	r2, #0
 8009da6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	3301      	adds	r3, #1
 8009dac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e7      	bne.n	8009d86 <USBD_GetString+0x52>
 8009db6:	e000      	b.n	8009dba <USBD_GetString+0x86>
    return;
 8009db8:	bf00      	nop
  }
}
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009dd0:	e005      	b.n	8009dde <USBD_GetLen+0x1e>
  {
    len++;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1f5      	bne.n	8009dd2 <USBD_GetLen+0x12>
  }

  return len;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	2100      	movs	r1, #0
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f000 fce1 	bl	800a7e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	60b9      	str	r1, [r7, #8]
 8009e34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 fcd0 	bl	800a7e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	2100      	movs	r1, #0
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 fcd4 	bl	800a824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	2100      	movs	r1, #0
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fcc3 	bl	800a824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009eb8:	2300      	movs	r3, #0
 8009eba:	2200      	movs	r2, #0
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fc8f 	bl	800a7e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2205      	movs	r2, #5
 8009eda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fc9d 	bl	800a824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4912      	ldr	r1, [pc, #72]	@ (8009f44 <MX_USB_DEVICE_Init+0x50>)
 8009efc:	4812      	ldr	r0, [pc, #72]	@ (8009f48 <MX_USB_DEVICE_Init+0x54>)
 8009efe:	f7fe fd03 	bl	8008908 <USBD_Init>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f08:	f7f7 fca6 	bl	8001858 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f0c:	490f      	ldr	r1, [pc, #60]	@ (8009f4c <MX_USB_DEVICE_Init+0x58>)
 8009f0e:	480e      	ldr	r0, [pc, #56]	@ (8009f48 <MX_USB_DEVICE_Init+0x54>)
 8009f10:	f7fe fd2a 	bl	8008968 <USBD_RegisterClass>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f1a:	f7f7 fc9d 	bl	8001858 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f1e:	490c      	ldr	r1, [pc, #48]	@ (8009f50 <MX_USB_DEVICE_Init+0x5c>)
 8009f20:	4809      	ldr	r0, [pc, #36]	@ (8009f48 <MX_USB_DEVICE_Init+0x54>)
 8009f22:	f7fe fc21 	bl	8008768 <USBD_CDC_RegisterInterface>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f2c:	f7f7 fc94 	bl	8001858 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f30:	4805      	ldr	r0, [pc, #20]	@ (8009f48 <MX_USB_DEVICE_Init+0x54>)
 8009f32:	f7fe fd4f 	bl	80089d4 <USBD_Start>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f3c:	f7f7 fc8c 	bl	8001858 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f40:	bf00      	nop
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	200000c0 	.word	0x200000c0
 8009f48:	200003e0 	.word	0x200003e0
 8009f4c:	2000002c 	.word	0x2000002c
 8009f50:	200000ac 	.word	0x200000ac

08009f54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4905      	ldr	r1, [pc, #20]	@ (8009f70 <CDC_Init_FS+0x1c>)
 8009f5c:	4805      	ldr	r0, [pc, #20]	@ (8009f74 <CDC_Init_FS+0x20>)
 8009f5e:	f7fe fc1d 	bl	800879c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f62:	4905      	ldr	r1, [pc, #20]	@ (8009f78 <CDC_Init_FS+0x24>)
 8009f64:	4803      	ldr	r0, [pc, #12]	@ (8009f74 <CDC_Init_FS+0x20>)
 8009f66:	f7fe fc3b 	bl	80087e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20000ebc 	.word	0x20000ebc
 8009f74:	200003e0 	.word	0x200003e0
 8009f78:	200006bc 	.word	0x200006bc

08009f7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	6039      	str	r1, [r7, #0]
 8009f96:	71fb      	strb	r3, [r7, #7]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	2b23      	cmp	r3, #35	@ 0x23
 8009fa0:	d84a      	bhi.n	800a038 <CDC_Control_FS+0xac>
 8009fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa8 <CDC_Control_FS+0x1c>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	0800a039 	.word	0x0800a039
 8009fac:	0800a039 	.word	0x0800a039
 8009fb0:	0800a039 	.word	0x0800a039
 8009fb4:	0800a039 	.word	0x0800a039
 8009fb8:	0800a039 	.word	0x0800a039
 8009fbc:	0800a039 	.word	0x0800a039
 8009fc0:	0800a039 	.word	0x0800a039
 8009fc4:	0800a039 	.word	0x0800a039
 8009fc8:	0800a039 	.word	0x0800a039
 8009fcc:	0800a039 	.word	0x0800a039
 8009fd0:	0800a039 	.word	0x0800a039
 8009fd4:	0800a039 	.word	0x0800a039
 8009fd8:	0800a039 	.word	0x0800a039
 8009fdc:	0800a039 	.word	0x0800a039
 8009fe0:	0800a039 	.word	0x0800a039
 8009fe4:	0800a039 	.word	0x0800a039
 8009fe8:	0800a039 	.word	0x0800a039
 8009fec:	0800a039 	.word	0x0800a039
 8009ff0:	0800a039 	.word	0x0800a039
 8009ff4:	0800a039 	.word	0x0800a039
 8009ff8:	0800a039 	.word	0x0800a039
 8009ffc:	0800a039 	.word	0x0800a039
 800a000:	0800a039 	.word	0x0800a039
 800a004:	0800a039 	.word	0x0800a039
 800a008:	0800a039 	.word	0x0800a039
 800a00c:	0800a039 	.word	0x0800a039
 800a010:	0800a039 	.word	0x0800a039
 800a014:	0800a039 	.word	0x0800a039
 800a018:	0800a039 	.word	0x0800a039
 800a01c:	0800a039 	.word	0x0800a039
 800a020:	0800a039 	.word	0x0800a039
 800a024:	0800a039 	.word	0x0800a039
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a039 	.word	0x0800a039
 800a030:	0800a039 	.word	0x0800a039
 800a034:	0800a039 	.word	0x0800a039
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a038:	bf00      	nop
  }

  return (USBD_OK);
 800a03a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	4805      	ldr	r0, [pc, #20]	@ (800a06c <CDC_Receive_FS+0x24>)
 800a056:	f7fe fbc3 	bl	80087e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a05a:	4804      	ldr	r0, [pc, #16]	@ (800a06c <CDC_Receive_FS+0x24>)
 800a05c:	f7fe fc1e 	bl	800889c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a060:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	200003e0 	.word	0x200003e0

0800a070 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a080:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <CDC_Transmit_FS+0x48>)
 800a082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a086:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a092:	2301      	movs	r3, #1
 800a094:	e00b      	b.n	800a0ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a096:	887b      	ldrh	r3, [r7, #2]
 800a098:	461a      	mov	r2, r3
 800a09a:	6879      	ldr	r1, [r7, #4]
 800a09c:	4806      	ldr	r0, [pc, #24]	@ (800a0b8 <CDC_Transmit_FS+0x48>)
 800a09e:	f7fe fb7d 	bl	800879c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0a2:	4805      	ldr	r0, [pc, #20]	@ (800a0b8 <CDC_Transmit_FS+0x48>)
 800a0a4:	f7fe fbba 	bl	800881c <USBD_CDC_TransmitPacket>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	200003e0 	.word	0x200003e0

0800a0bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	371c      	adds	r7, #28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	6039      	str	r1, [r7, #0]
 800a0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2212      	movs	r2, #18
 800a0f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0f2:	4b03      	ldr	r3, [pc, #12]	@ (800a100 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	200000dc 	.word	0x200000dc

0800a104 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	6039      	str	r1, [r7, #0]
 800a10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2204      	movs	r2, #4
 800a114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a116:	4b03      	ldr	r3, [pc, #12]	@ (800a124 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	200000f0 	.word	0x200000f0

0800a128 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	6039      	str	r1, [r7, #0]
 800a132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4907      	ldr	r1, [pc, #28]	@ (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
 800a13e:	4808      	ldr	r0, [pc, #32]	@ (800a160 <USBD_FS_ProductStrDescriptor+0x38>)
 800a140:	f7ff fdf8 	bl	8009d34 <USBD_GetString>
 800a144:	e004      	b.n	800a150 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4904      	ldr	r1, [pc, #16]	@ (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
 800a14a:	4805      	ldr	r0, [pc, #20]	@ (800a160 <USBD_FS_ProductStrDescriptor+0x38>)
 800a14c:	f7ff fdf2 	bl	8009d34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a150:	4b02      	ldr	r3, [pc, #8]	@ (800a15c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200016bc 	.word	0x200016bc
 800a160:	0800aaa8 	.word	0x0800aaa8

0800a164 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	4904      	ldr	r1, [pc, #16]	@ (800a184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a174:	4804      	ldr	r0, [pc, #16]	@ (800a188 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a176:	f7ff fddd 	bl	8009d34 <USBD_GetString>
  return USBD_StrDesc;
 800a17a:	4b02      	ldr	r3, [pc, #8]	@ (800a184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	200016bc 	.word	0x200016bc
 800a188:	0800aac0 	.word	0x0800aac0

0800a18c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	6039      	str	r1, [r7, #0]
 800a196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	221a      	movs	r2, #26
 800a19c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a19e:	f000 f843 	bl	800a228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1a2:	4b02      	ldr	r3, [pc, #8]	@ (800a1ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	200000f4 	.word	0x200000f4

0800a1b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d105      	bne.n	800a1ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	4907      	ldr	r1, [pc, #28]	@ (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1c6:	4808      	ldr	r0, [pc, #32]	@ (800a1e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1c8:	f7ff fdb4 	bl	8009d34 <USBD_GetString>
 800a1cc:	e004      	b.n	800a1d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	4904      	ldr	r1, [pc, #16]	@ (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1d2:	4805      	ldr	r0, [pc, #20]	@ (800a1e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1d4:	f7ff fdae 	bl	8009d34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d8:	4b02      	ldr	r3, [pc, #8]	@ (800a1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200016bc 	.word	0x200016bc
 800a1e8:	0800aad4 	.word	0x0800aad4

0800a1ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	6039      	str	r1, [r7, #0]
 800a1f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1f8:	79fb      	ldrb	r3, [r7, #7]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d105      	bne.n	800a20a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	4907      	ldr	r1, [pc, #28]	@ (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a202:	4808      	ldr	r0, [pc, #32]	@ (800a224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a204:	f7ff fd96 	bl	8009d34 <USBD_GetString>
 800a208:	e004      	b.n	800a214 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	4904      	ldr	r1, [pc, #16]	@ (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a20e:	4805      	ldr	r0, [pc, #20]	@ (800a224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a210:	f7ff fd90 	bl	8009d34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a214:	4b02      	ldr	r3, [pc, #8]	@ (800a220 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	200016bc 	.word	0x200016bc
 800a224:	0800aae0 	.word	0x0800aae0

0800a228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a22e:	4b0f      	ldr	r3, [pc, #60]	@ (800a26c <Get_SerialNum+0x44>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a234:	4b0e      	ldr	r3, [pc, #56]	@ (800a270 <Get_SerialNum+0x48>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a23a:	4b0e      	ldr	r3, [pc, #56]	@ (800a274 <Get_SerialNum+0x4c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4413      	add	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a24e:	2208      	movs	r2, #8
 800a250:	4909      	ldr	r1, [pc, #36]	@ (800a278 <Get_SerialNum+0x50>)
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 f814 	bl	800a280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a258:	2204      	movs	r2, #4
 800a25a:	4908      	ldr	r1, [pc, #32]	@ (800a27c <Get_SerialNum+0x54>)
 800a25c:	68b8      	ldr	r0, [r7, #8]
 800a25e:	f000 f80f 	bl	800a280 <IntToUnicode>
  }
}
 800a262:	bf00      	nop
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	1fff7a10 	.word	0x1fff7a10
 800a270:	1fff7a14 	.word	0x1fff7a14
 800a274:	1fff7a18 	.word	0x1fff7a18
 800a278:	200000f6 	.word	0x200000f6
 800a27c:	20000106 	.word	0x20000106

0800a280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a292:	2300      	movs	r3, #0
 800a294:	75fb      	strb	r3, [r7, #23]
 800a296:	e027      	b.n	800a2e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	0f1b      	lsrs	r3, r3, #28
 800a29c:	2b09      	cmp	r3, #9
 800a29e:	d80b      	bhi.n	800a2b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	0f1b      	lsrs	r3, r3, #28
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	440b      	add	r3, r1
 800a2b0:	3230      	adds	r2, #48	@ 0x30
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	e00a      	b.n	800a2ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	0f1b      	lsrs	r3, r3, #28
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3237      	adds	r2, #55	@ 0x37
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	011b      	lsls	r3, r3, #4
 800a2d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	005b      	lsls	r3, r3, #1
 800a2d8:	3301      	adds	r3, #1
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	4413      	add	r3, r2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	75fb      	strb	r3, [r7, #23]
 800a2e8:	7dfa      	ldrb	r2, [r7, #23]
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d3d3      	bcc.n	800a298 <IntToUnicode+0x18>
  }
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	371c      	adds	r7, #28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
	...

0800a300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	@ 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a308:	f107 0314 	add.w	r3, r7, #20
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	605a      	str	r2, [r3, #4]
 800a312:	609a      	str	r2, [r3, #8]
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a320:	d13a      	bne.n	800a398 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	4b1e      	ldr	r3, [pc, #120]	@ (800a3a0 <HAL_PCD_MspInit+0xa0>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a32a:	4a1d      	ldr	r2, [pc, #116]	@ (800a3a0 <HAL_PCD_MspInit+0xa0>)
 800a32c:	f043 0301 	orr.w	r3, r3, #1
 800a330:	6313      	str	r3, [r2, #48]	@ 0x30
 800a332:	4b1b      	ldr	r3, [pc, #108]	@ (800a3a0 <HAL_PCD_MspInit+0xa0>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	613b      	str	r3, [r7, #16]
 800a33c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a33e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a344:	2302      	movs	r3, #2
 800a346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a34c:	2303      	movs	r3, #3
 800a34e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a350:	230a      	movs	r3, #10
 800a352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a354:	f107 0314 	add.w	r3, r7, #20
 800a358:	4619      	mov	r1, r3
 800a35a:	4812      	ldr	r0, [pc, #72]	@ (800a3a4 <HAL_PCD_MspInit+0xa4>)
 800a35c:	f7f8 fc50 	bl	8002c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a360:	4b0f      	ldr	r3, [pc, #60]	@ (800a3a0 <HAL_PCD_MspInit+0xa0>)
 800a362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a364:	4a0e      	ldr	r2, [pc, #56]	@ (800a3a0 <HAL_PCD_MspInit+0xa0>)
 800a366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a36a:	6353      	str	r3, [r2, #52]	@ 0x34
 800a36c:	2300      	movs	r3, #0
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a0 <HAL_PCD_MspInit+0xa0>)
 800a372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a374:	4a0a      	ldr	r2, [pc, #40]	@ (800a3a0 <HAL_PCD_MspInit+0xa0>)
 800a376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a37a:	6453      	str	r3, [r2, #68]	@ 0x44
 800a37c:	4b08      	ldr	r3, [pc, #32]	@ (800a3a0 <HAL_PCD_MspInit+0xa0>)
 800a37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a384:	60fb      	str	r3, [r7, #12]
 800a386:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a388:	2200      	movs	r2, #0
 800a38a:	2100      	movs	r1, #0
 800a38c:	2043      	movs	r0, #67	@ 0x43
 800a38e:	f7f8 f884 	bl	800249a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a392:	2043      	movs	r0, #67	@ 0x43
 800a394:	f7f8 f89d 	bl	80024d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a398:	bf00      	nop
 800a39a:	3728      	adds	r7, #40	@ 0x28
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	40023800 	.word	0x40023800
 800a3a4:	40020000 	.word	0x40020000

0800a3a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f7fe fb55 	bl	8008a6e <USBD_LL_SetupStage>
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a3de:	78fa      	ldrb	r2, [r7, #3]
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	00db      	lsls	r3, r3, #3
 800a3e6:	4413      	add	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	440b      	add	r3, r1
 800a3ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	78fb      	ldrb	r3, [r7, #3]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f7fe fb8f 	bl	8008b18 <USBD_LL_DataOutStage>
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a414:	78fa      	ldrb	r2, [r7, #3]
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4613      	mov	r3, r2
 800a41a:	00db      	lsls	r3, r3, #3
 800a41c:	4413      	add	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	440b      	add	r3, r1
 800a422:	3320      	adds	r3, #32
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	78fb      	ldrb	r3, [r7, #3]
 800a428:	4619      	mov	r1, r3
 800a42a:	f7fe fc28 	bl	8008c7e <USBD_LL_DataInStage>
}
 800a42e:	bf00      	nop
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe fd62 	bl	8008f0e <USBD_LL_SOF>
}
 800a44a:	bf00      	nop
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a45a:	2301      	movs	r3, #1
 800a45c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	79db      	ldrb	r3, [r3, #7]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d001      	beq.n	800a46a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a466:	f7f7 f9f7 	bl	8001858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a470:	7bfa      	ldrb	r2, [r7, #15]
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f7fe fd06 	bl	8008e86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe fcae 	bl	8008de2 <USBD_LL_Reset>
}
 800a486:	bf00      	nop
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
	...

0800a490 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fd01 	bl	8008ea6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	6812      	ldr	r2, [r2, #0]
 800a4b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4b6:	f043 0301 	orr.w	r3, r3, #1
 800a4ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	7adb      	ldrb	r3, [r3, #11]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4c4:	4b04      	ldr	r3, [pc, #16]	@ (800a4d8 <HAL_PCD_SuspendCallback+0x48>)
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	4a03      	ldr	r2, [pc, #12]	@ (800a4d8 <HAL_PCD_SuspendCallback+0x48>)
 800a4ca:	f043 0306 	orr.w	r3, r3, #6
 800a4ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	e000ed00 	.word	0xe000ed00

0800a4dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe fcf7 	bl	8008ede <USBD_LL_Resume>
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a50a:	78fa      	ldrb	r2, [r7, #3]
 800a50c:	4611      	mov	r1, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fd4f 	bl	8008fb2 <USBD_LL_IsoOUTIncomplete>
}
 800a514:	bf00      	nop
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a52e:	78fa      	ldrb	r2, [r7, #3]
 800a530:	4611      	mov	r1, r2
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fd0b 	bl	8008f4e <USBD_LL_IsoINIncomplete>
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fd61 	bl	8009016 <USBD_LL_DevConnected>
}
 800a554:	bf00      	nop
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fd5e 	bl	800902c <USBD_LL_DevDisconnected>
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d13c      	bne.n	800a602 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a588:	4a20      	ldr	r2, [pc, #128]	@ (800a60c <USBD_LL_Init+0x94>)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a1e      	ldr	r2, [pc, #120]	@ (800a60c <USBD_LL_Init+0x94>)
 800a594:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a598:	4b1c      	ldr	r3, [pc, #112]	@ (800a60c <USBD_LL_Init+0x94>)
 800a59a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a59e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a5a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a5a6:	4b19      	ldr	r3, [pc, #100]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a5ac:	4b17      	ldr	r3, [pc, #92]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a5b2:	4b16      	ldr	r3, [pc, #88]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a5b8:	4b14      	ldr	r3, [pc, #80]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a5be:	4b13      	ldr	r3, [pc, #76]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a5c4:	4b11      	ldr	r3, [pc, #68]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a5ca:	4b10      	ldr	r3, [pc, #64]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a5d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a5d6:	480d      	ldr	r0, [pc, #52]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5d8:	f7f8 fcaf 	bl	8002f3a <HAL_PCD_Init>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a5e2:	f7f7 f939 	bl	8001858 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a5e6:	2180      	movs	r1, #128	@ 0x80
 800a5e8:	4808      	ldr	r0, [pc, #32]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5ea:	f7f9 feda 	bl	80043a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a5ee:	2240      	movs	r2, #64	@ 0x40
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4806      	ldr	r0, [pc, #24]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5f4:	f7f9 fe8e 	bl	8004314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a5f8:	2280      	movs	r2, #128	@ 0x80
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	4803      	ldr	r0, [pc, #12]	@ (800a60c <USBD_LL_Init+0x94>)
 800a5fe:	f7f9 fe89 	bl	8004314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	200018bc 	.word	0x200018bc

0800a610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a626:	4618      	mov	r0, r3
 800a628:	f7f8 fd96 	bl	8003158 <HAL_PCD_Start>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	4618      	mov	r0, r3
 800a634:	f000 f942 	bl	800a8bc <USBD_Get_USB_Status>
 800a638:	4603      	mov	r3, r0
 800a63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	4608      	mov	r0, r1
 800a650:	4611      	mov	r1, r2
 800a652:	461a      	mov	r2, r3
 800a654:	4603      	mov	r3, r0
 800a656:	70fb      	strb	r3, [r7, #3]
 800a658:	460b      	mov	r3, r1
 800a65a:	70bb      	strb	r3, [r7, #2]
 800a65c:	4613      	mov	r3, r2
 800a65e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a66e:	78bb      	ldrb	r3, [r7, #2]
 800a670:	883a      	ldrh	r2, [r7, #0]
 800a672:	78f9      	ldrb	r1, [r7, #3]
 800a674:	f7f9 fa6a 	bl	8003b4c <HAL_PCD_EP_Open>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 f91c 	bl	800a8bc <USBD_Get_USB_Status>
 800a684:	4603      	mov	r3, r0
 800a686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a688:	7bbb      	ldrb	r3, [r7, #14]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	460b      	mov	r3, r1
 800a69c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6ac:	78fa      	ldrb	r2, [r7, #3]
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7f9 fab3 	bl	8003c1c <HAL_PCD_EP_Close>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f8fd 	bl	800a8bc <USBD_Get_USB_Status>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6ea:	78fa      	ldrb	r2, [r7, #3]
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f9 fb6b 	bl	8003dca <HAL_PCD_EP_SetStall>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 f8de 	bl	800a8bc <USBD_Get_USB_Status>
 800a700:	4603      	mov	r3, r0
 800a702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a704:	7bbb      	ldrb	r3, [r7, #14]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	460b      	mov	r3, r1
 800a718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a728:	78fa      	ldrb	r2, [r7, #3]
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f9 fbaf 	bl	8003e90 <HAL_PCD_EP_ClrStall>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 f8bf 	bl	800a8bc <USBD_Get_USB_Status>
 800a73e:	4603      	mov	r3, r0
 800a740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a742:	7bbb      	ldrb	r3, [r7, #14]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a75e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a764:	2b00      	cmp	r3, #0
 800a766:	da0b      	bge.n	800a780 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a76e:	68f9      	ldr	r1, [r7, #12]
 800a770:	4613      	mov	r3, r2
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	4413      	add	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	440b      	add	r3, r1
 800a77a:	3316      	adds	r3, #22
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	e00b      	b.n	800a798 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a780:	78fb      	ldrb	r3, [r7, #3]
 800a782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a786:	68f9      	ldr	r1, [r7, #12]
 800a788:	4613      	mov	r3, r2
 800a78a:	00db      	lsls	r3, r3, #3
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	440b      	add	r3, r1
 800a792:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a796:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7be:	78fa      	ldrb	r2, [r7, #3]
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7f9 f99e 	bl	8003b04 <HAL_PCD_SetAddress>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 f874 	bl	800a8bc <USBD_Get_USB_Status>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b086      	sub	sp, #24
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	60f8      	str	r0, [r7, #12]
 800a7ea:	607a      	str	r2, [r7, #4]
 800a7ec:	603b      	str	r3, [r7, #0]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a800:	7af9      	ldrb	r1, [r7, #11]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	f7f9 faa6 	bl	8003d56 <HAL_PCD_EP_Transmit>
 800a80a:	4603      	mov	r3, r0
 800a80c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f853 	bl	800a8bc <USBD_Get_USB_Status>
 800a816:	4603      	mov	r3, r0
 800a818:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a81a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	607a      	str	r2, [r7, #4]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	460b      	mov	r3, r1
 800a832:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a842:	7af9      	ldrb	r1, [r7, #11]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	f7f9 fa32 	bl	8003cb0 <HAL_PCD_EP_Receive>
 800a84c:	4603      	mov	r3, r0
 800a84e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a850:	7dfb      	ldrb	r3, [r7, #23]
 800a852:	4618      	mov	r0, r3
 800a854:	f000 f832 	bl	800a8bc <USBD_Get_USB_Status>
 800a858:	4603      	mov	r3, r0
 800a85a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a85c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	460b      	mov	r3, r1
 800a870:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a878:	78fa      	ldrb	r2, [r7, #3]
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f9 fa52 	bl	8003d26 <HAL_PCD_EP_GetRxCount>
 800a882:	4603      	mov	r3, r0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a894:	4b03      	ldr	r3, [pc, #12]	@ (800a8a4 <USBD_static_malloc+0x18>)
}
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	20001da0 	.word	0x20001da0

0800a8a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]

}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d817      	bhi.n	800a900 <USBD_Get_USB_Status+0x44>
 800a8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d8 <USBD_Get_USB_Status+0x1c>)
 800a8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d6:	bf00      	nop
 800a8d8:	0800a8e9 	.word	0x0800a8e9
 800a8dc:	0800a8ef 	.word	0x0800a8ef
 800a8e0:	0800a8f5 	.word	0x0800a8f5
 800a8e4:	0800a8fb 	.word	0x0800a8fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ec:	e00b      	b.n	800a906 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f2:	e008      	b.n	800a906 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f8:	e005      	b.n	800a906 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8fe:	e002      	b.n	800a906 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a900:	2303      	movs	r3, #3
 800a902:	73fb      	strb	r3, [r7, #15]
    break;
 800a904:	bf00      	nop
  }
  return usb_status;
 800a906:	7bfb      	ldrb	r3, [r7, #15]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <_ZdlPvj>:
 800a914:	f000 b800 	b.w	800a918 <_ZdlPv>

0800a918 <_ZdlPv>:
 800a918:	f000 b800 	b.w	800a91c <free>

0800a91c <free>:
 800a91c:	4b02      	ldr	r3, [pc, #8]	@ (800a928 <free+0xc>)
 800a91e:	4601      	mov	r1, r0
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	f000 b83d 	b.w	800a9a0 <_free_r>
 800a926:	bf00      	nop
 800a928:	20000110 	.word	0x20000110

0800a92c <__malloc_lock>:
 800a92c:	4801      	ldr	r0, [pc, #4]	@ (800a934 <__malloc_lock+0x8>)
 800a92e:	f000 b835 	b.w	800a99c <__retarget_lock_acquire_recursive>
 800a932:	bf00      	nop
 800a934:	200020fc 	.word	0x200020fc

0800a938 <__malloc_unlock>:
 800a938:	4801      	ldr	r0, [pc, #4]	@ (800a940 <__malloc_unlock+0x8>)
 800a93a:	f000 b830 	b.w	800a99e <__retarget_lock_release_recursive>
 800a93e:	bf00      	nop
 800a940:	200020fc 	.word	0x200020fc

0800a944 <memset>:
 800a944:	4402      	add	r2, r0
 800a946:	4603      	mov	r3, r0
 800a948:	4293      	cmp	r3, r2
 800a94a:	d100      	bne.n	800a94e <memset+0xa>
 800a94c:	4770      	bx	lr
 800a94e:	f803 1b01 	strb.w	r1, [r3], #1
 800a952:	e7f9      	b.n	800a948 <memset+0x4>

0800a954 <__libc_init_array>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	4d0d      	ldr	r5, [pc, #52]	@ (800a98c <__libc_init_array+0x38>)
 800a958:	4c0d      	ldr	r4, [pc, #52]	@ (800a990 <__libc_init_array+0x3c>)
 800a95a:	1b64      	subs	r4, r4, r5
 800a95c:	10a4      	asrs	r4, r4, #2
 800a95e:	2600      	movs	r6, #0
 800a960:	42a6      	cmp	r6, r4
 800a962:	d109      	bne.n	800a978 <__libc_init_array+0x24>
 800a964:	4d0b      	ldr	r5, [pc, #44]	@ (800a994 <__libc_init_array+0x40>)
 800a966:	4c0c      	ldr	r4, [pc, #48]	@ (800a998 <__libc_init_array+0x44>)
 800a968:	f000 f864 	bl	800aa34 <_init>
 800a96c:	1b64      	subs	r4, r4, r5
 800a96e:	10a4      	asrs	r4, r4, #2
 800a970:	2600      	movs	r6, #0
 800a972:	42a6      	cmp	r6, r4
 800a974:	d105      	bne.n	800a982 <__libc_init_array+0x2e>
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	f855 3b04 	ldr.w	r3, [r5], #4
 800a97c:	4798      	blx	r3
 800a97e:	3601      	adds	r6, #1
 800a980:	e7ee      	b.n	800a960 <__libc_init_array+0xc>
 800a982:	f855 3b04 	ldr.w	r3, [r5], #4
 800a986:	4798      	blx	r3
 800a988:	3601      	adds	r6, #1
 800a98a:	e7f2      	b.n	800a972 <__libc_init_array+0x1e>
 800a98c:	0800ab2c 	.word	0x0800ab2c
 800a990:	0800ab2c 	.word	0x0800ab2c
 800a994:	0800ab2c 	.word	0x0800ab2c
 800a998:	0800ab34 	.word	0x0800ab34

0800a99c <__retarget_lock_acquire_recursive>:
 800a99c:	4770      	bx	lr

0800a99e <__retarget_lock_release_recursive>:
 800a99e:	4770      	bx	lr

0800a9a0 <_free_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	d041      	beq.n	800aa2c <_free_r+0x8c>
 800a9a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9ac:	1f0c      	subs	r4, r1, #4
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	bfb8      	it	lt
 800a9b2:	18e4      	addlt	r4, r4, r3
 800a9b4:	f7ff ffba 	bl	800a92c <__malloc_lock>
 800a9b8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa30 <_free_r+0x90>)
 800a9ba:	6813      	ldr	r3, [r2, #0]
 800a9bc:	b933      	cbnz	r3, 800a9cc <_free_r+0x2c>
 800a9be:	6063      	str	r3, [r4, #4]
 800a9c0:	6014      	str	r4, [r2, #0]
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c8:	f7ff bfb6 	b.w	800a938 <__malloc_unlock>
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d908      	bls.n	800a9e2 <_free_r+0x42>
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	1821      	adds	r1, r4, r0
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	bf01      	itttt	eq
 800a9d8:	6819      	ldreq	r1, [r3, #0]
 800a9da:	685b      	ldreq	r3, [r3, #4]
 800a9dc:	1809      	addeq	r1, r1, r0
 800a9de:	6021      	streq	r1, [r4, #0]
 800a9e0:	e7ed      	b.n	800a9be <_free_r+0x1e>
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	b10b      	cbz	r3, 800a9ec <_free_r+0x4c>
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	d9fa      	bls.n	800a9e2 <_free_r+0x42>
 800a9ec:	6811      	ldr	r1, [r2, #0]
 800a9ee:	1850      	adds	r0, r2, r1
 800a9f0:	42a0      	cmp	r0, r4
 800a9f2:	d10b      	bne.n	800aa0c <_free_r+0x6c>
 800a9f4:	6820      	ldr	r0, [r4, #0]
 800a9f6:	4401      	add	r1, r0
 800a9f8:	1850      	adds	r0, r2, r1
 800a9fa:	4283      	cmp	r3, r0
 800a9fc:	6011      	str	r1, [r2, #0]
 800a9fe:	d1e0      	bne.n	800a9c2 <_free_r+0x22>
 800aa00:	6818      	ldr	r0, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	6053      	str	r3, [r2, #4]
 800aa06:	4408      	add	r0, r1
 800aa08:	6010      	str	r0, [r2, #0]
 800aa0a:	e7da      	b.n	800a9c2 <_free_r+0x22>
 800aa0c:	d902      	bls.n	800aa14 <_free_r+0x74>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	e7d6      	b.n	800a9c2 <_free_r+0x22>
 800aa14:	6820      	ldr	r0, [r4, #0]
 800aa16:	1821      	adds	r1, r4, r0
 800aa18:	428b      	cmp	r3, r1
 800aa1a:	bf04      	itt	eq
 800aa1c:	6819      	ldreq	r1, [r3, #0]
 800aa1e:	685b      	ldreq	r3, [r3, #4]
 800aa20:	6063      	str	r3, [r4, #4]
 800aa22:	bf04      	itt	eq
 800aa24:	1809      	addeq	r1, r1, r0
 800aa26:	6021      	streq	r1, [r4, #0]
 800aa28:	6054      	str	r4, [r2, #4]
 800aa2a:	e7ca      	b.n	800a9c2 <_free_r+0x22>
 800aa2c:	bd38      	pop	{r3, r4, r5, pc}
 800aa2e:	bf00      	nop
 800aa30:	20001fc0 	.word	0x20001fc0

0800aa34 <_init>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	bf00      	nop
 800aa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3a:	bc08      	pop	{r3}
 800aa3c:	469e      	mov	lr, r3
 800aa3e:	4770      	bx	lr

0800aa40 <_fini>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	bf00      	nop
 800aa44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa46:	bc08      	pop	{r3}
 800aa48:	469e      	mov	lr, r3
 800aa4a:	4770      	bx	lr
