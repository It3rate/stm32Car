
NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfc8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800c160  0800c160  0000d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c248  0800c248  0000e160  2**0
                  CONTENTS
  4 .ARM          00000008  0800c248  0800c248  0000d248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c250  0800c250  0000e160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c250  0800c250  0000d250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800c258  0800c258  0000d258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800c260  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002000  20000160  0800c3c0  0000e160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002160  0800c3c0  0000e160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021880  00000000  00000000  0000e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000574f  00000000  00000000  0002fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b48  00000000  00000000  00035160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cd  00000000  00000000  00036ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207af  00000000  00000000  00038175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023eab  00000000  00000000  00058924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5d47  00000000  00000000  0007c7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007588  00000000  00000000  0012255c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  00129ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c148 	.word	0x0800c148

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	0800c148 	.word	0x0800c148

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvHalfCpltCallback>:
uint8_t buffer[] = "Hello World\n";

#define ADC_BUF_LEN 6
uint32_t _adcBuf[ADC_BUF_LEN];

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <HAL_UART_RxCpltCallback>:
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
//	if (GPIO_Pin == KEY_Pin) {
//		led_state = HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
//	}
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(RX_BUF, sizeof(RX_BUF));
 80004f8:	2140      	movs	r1, #64	@ 0x40
 80004fa:	4803      	ldr	r0, [pc, #12]	@ (8000508 <HAL_UART_RxCpltCallback+0x18>)
 80004fc:	f00b f81c 	bl	800b538 <CDC_Transmit_FS>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000017c 	.word	0x2000017c

0800050c <_Z9inter_cmdv>:

void inter_cmd(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
    uint8_t cmd[]={0xfd,0xfc,0xfb,0xfa,0x04,0x00,0xff,0x00,0x01,0x00,0x04,0x03,0x02,0x01};
 8000512:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <_Z9inter_cmdv+0x3c>)
 8000514:	463c      	mov	r4, r7
 8000516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000518:	c407      	stmia	r4!, {r0, r1, r2}
 800051a:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart1,(uint8_t *)&cmd,sizeof(cmd),0xFFFF);
 800051c:	4639      	mov	r1, r7
 800051e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000522:	220e      	movs	r2, #14
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <_Z9inter_cmdv+0x40>)
 8000526:	f006 fc3b 	bl	8006da0 <HAL_UART_Transmit>
    HAL_Delay(150);
 800052a:	2096      	movs	r0, #150	@ 0x96
 800052c:	f001 fe42 	bl	80021b4 <HAL_Delay>
    HAL_UART_Transmit(&huart1,(uint8_t *)&cmd,sizeof(cmd),0xFFFF);
 8000530:	4639      	mov	r1, r7
 8000532:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000536:	220e      	movs	r2, #14
 8000538:	4804      	ldr	r0, [pc, #16]	@ (800054c <_Z9inter_cmdv+0x40>)
 800053a:	f006 fc31 	bl	8006da0 <HAL_UART_Transmit>
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bd90      	pop	{r4, r7, pc}
 8000546:	bf00      	nop
 8000548:	0800c160 	.word	0x0800c160
 800054c:	200003e4 	.word	0x200003e4

08000550 <_Z9close_cmdv>:

void close_cmd(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
    uint8_t close_cmd[]={0xfd,0xfc,0xfb,0xfa,0x02,0x00,0xfe,0x00,0x04,0x03,0x02,0x01};
 8000556:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <_Z9close_cmdv+0x28>)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	ca07      	ldmia	r2, {r0, r1, r2}
 800055c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_UART_Transmit(&huart1,(uint8_t *)&close_cmd,sizeof(close_cmd),0xFFFF);
 8000560:	1d39      	adds	r1, r7, #4
 8000562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000566:	220c      	movs	r2, #12
 8000568:	4804      	ldr	r0, [pc, #16]	@ (800057c <_Z9close_cmdv+0x2c>)
 800056a:	f006 fc19 	bl	8006da0 <HAL_UART_Transmit>
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	0800c170 	.word	0x0800c170
 800057c:	200003e4 	.word	0x200003e4

08000580 <_Z15RD_03_Write_cmdhh>:

void RD_03_Write_cmd(uint8_t parameter,uint8_t data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
    inter_cmd();
 8000590:	f7ff ffbc 	bl	800050c <_Z9inter_cmdv>
    uint8_t Write_cmd[]={0xfd,0xfc,0xfb,0xfa,0x08,0x00,0x07,0x00,parameter,0x00,data,0x00,0x00,0x00,0x04,0x03,0x02,0x01};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	821a      	strh	r2, [r3, #16]
 80005a4:	23fd      	movs	r3, #253	@ 0xfd
 80005a6:	733b      	strb	r3, [r7, #12]
 80005a8:	23fc      	movs	r3, #252	@ 0xfc
 80005aa:	737b      	strb	r3, [r7, #13]
 80005ac:	23fb      	movs	r3, #251	@ 0xfb
 80005ae:	73bb      	strb	r3, [r7, #14]
 80005b0:	23fa      	movs	r3, #250	@ 0xfa
 80005b2:	73fb      	strb	r3, [r7, #15]
 80005b4:	2308      	movs	r3, #8
 80005b6:	743b      	strb	r3, [r7, #16]
 80005b8:	2307      	movs	r3, #7
 80005ba:	74bb      	strb	r3, [r7, #18]
 80005bc:	2304      	movs	r3, #4
 80005be:	76bb      	strb	r3, [r7, #26]
 80005c0:	2303      	movs	r3, #3
 80005c2:	76fb      	strb	r3, [r7, #27]
 80005c4:	2302      	movs	r3, #2
 80005c6:	773b      	strb	r3, [r7, #28]
 80005c8:	2301      	movs	r3, #1
 80005ca:	777b      	strb	r3, [r7, #29]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	753b      	strb	r3, [r7, #20]
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	75bb      	strb	r3, [r7, #22]
    HAL_UART_Transmit(&huart1,(uint8_t *)&Write_cmd,sizeof(Write_cmd),0xFFFF);
 80005d4:	f107 010c 	add.w	r1, r7, #12
 80005d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005dc:	2212      	movs	r2, #18
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <_Z15RD_03_Write_cmdhh+0x70>)
 80005e0:	f006 fbde 	bl	8006da0 <HAL_UART_Transmit>
    close_cmd();
 80005e4:	f7ff ffb4 	bl	8000550 <_Z9close_cmdv>
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200003e4 	.word	0x200003e4

080005f4 <_Z22onButtonChangedHandlerP3Joy>:

//#define IS_TX

void onButtonChangedHandler(Joy* instance)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS(buffer, sizeof(buffer));
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <_Z12EventLoopCppv>:
void EventLoopCpp() {
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b08d      	sub	sp, #52	@ 0x34
 800060c:	af02      	add	r7, sp, #8
	myJoy = new Joy(&hadc1, &htim2, JOY_BTN_GPIO_Port, JOY_BTN_Pin);
 800060e:	2020      	movs	r0, #32
 8000610:	f00b fbe6 	bl	800bde0 <_Znwj>
 8000614:	4603      	mov	r3, r0
 8000616:	461c      	mov	r4, r3
 8000618:	2301      	movs	r3, #1
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	4b44      	ldr	r3, [pc, #272]	@ (8000730 <_Z12EventLoopCppv+0x128>)
 800061e:	4a45      	ldr	r2, [pc, #276]	@ (8000734 <_Z12EventLoopCppv+0x12c>)
 8000620:	4945      	ldr	r1, [pc, #276]	@ (8000738 <_Z12EventLoopCppv+0x130>)
 8000622:	4620      	mov	r0, r4
 8000624:	f000 f8f0 	bl	8000808 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft>
 8000628:	4b44      	ldr	r3, [pc, #272]	@ (800073c <_Z12EventLoopCppv+0x134>)
 800062a:	601c      	str	r4, [r3, #0]
	myJoy->attachOnButtonChanged(onButtonChangedHandler);
 800062c:	4b43      	ldr	r3, [pc, #268]	@ (800073c <_Z12EventLoopCppv+0x134>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4943      	ldr	r1, [pc, #268]	@ (8000740 <_Z12EventLoopCppv+0x138>)
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f944 	bl	80008c0 <_ZN3Joy21attachOnButtonChangedEPFvPS_E>

	tmDevice.test();
 8000638:	4842      	ldr	r0, [pc, #264]	@ (8000744 <_Z12EventLoopCppv+0x13c>)
 800063a:	f000 fe33 	bl	80012a4 <_ZN6Tm16384testEv>
	nrfDevice.Init();
 800063e:	4842      	ldr	r0, [pc, #264]	@ (8000748 <_Z12EventLoopCppv+0x140>)
 8000640:	f000 fae8 	bl	8000c14 <_ZN6NRF24L4InitEv>
	nrfDevice.Check();
 8000644:	4840      	ldr	r0, [pc, #256]	@ (8000748 <_Z12EventLoopCppv+0x140>)
 8000646:	f000 fb49 	bl	8000cdc <_ZN6NRF24L5CheckEv>
	uint8_t payload_length = 5;
 800064a:	2305      	movs	r3, #5
 800064c:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t nRF24_payload[32];

	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)_adcBuf, ADC_BUF_LEN);
	RD_03_Write_cmd(1,2);
 8000650:	2102      	movs	r1, #2
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff ff94 	bl	8000580 <_Z15RD_03_Write_cmdhh>
	HAL_UART_Receive_IT(&huart1,&RX_temp,1);
 8000658:	2201      	movs	r2, #1
 800065a:	493c      	ldr	r1, [pc, #240]	@ (800074c <_Z12EventLoopCppv+0x144>)
 800065c:	483c      	ldr	r0, [pc, #240]	@ (8000750 <_Z12EventLoopCppv+0x148>)
 800065e:	f006 fc2a 	bl	8006eb6 <HAL_UART_Receive_IT>
#ifdef IS_TX
	uint32_t count = 0;
	NRF24L::TXResult tx_res;
	nrfDevice.InitTX();
#else
	nrfDevice.InitRX(nRF24_payload, payload_length);
 8000662:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4837      	ldr	r0, [pc, #220]	@ (8000748 <_Z12EventLoopCppv+0x140>)
 800066c:	f000 fda0 	bl	80011b0 <_ZN6NRF24L6InitRXEPhh>
#endif

	while (1) {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
 8000670:	4b38      	ldr	r3, [pc, #224]	@ (8000754 <_Z12EventLoopCppv+0x14c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067a:	4837      	ldr	r0, [pc, #220]	@ (8000758 <_Z12EventLoopCppv+0x150>)
 800067c:	f003 f980 	bl	8003980 <HAL_GPIO_WritePin>
	CDC_Transmit_FS(buffer, sizeof(buffer));
 8000680:	210d      	movs	r1, #13
 8000682:	4836      	ldr	r0, [pc, #216]	@ (800075c <_Z12EventLoopCppv+0x154>)
 8000684:	f00a ff58 	bl	800b538 <CDC_Transmit_FS>
		HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	@ 0x64
 800068a:	f001 fd93 	bl	80021b4 <HAL_Delay>

		uint8_t btns = tmDevice.readButtons();
 800068e:	482d      	ldr	r0, [pc, #180]	@ (8000744 <_Z12EventLoopCppv+0x13c>)
 8000690:	f000 ff08 	bl	80014a4 <_ZN6Tm163811readButtonsEv>
 8000694:	4603      	mov	r3, r0
 8000696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		for (int i = 0; i < 8; i++) {
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
 800069e:	e017      	b.n	80006d0 <_Z12EventLoopCppv+0xc8>
			bool val = (btns & (1 << i)) > 0 ? true : false;
 80006a0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80006a4:	2101      	movs	r1, #1
 80006a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	4013      	ands	r3, r2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	bfcc      	ite	gt
 80006b2:	2301      	movgt	r3, #1
 80006b4:	2300      	movle	r3, #0
 80006b6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			tmDevice.writeLed(i, val);
 80006ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80006c2:	4619      	mov	r1, r3
 80006c4:	481f      	ldr	r0, [pc, #124]	@ (8000744 <_Z12EventLoopCppv+0x13c>)
 80006c6:	f000 fead 	bl	8001424 <_ZN6Tm16388writeLedEhb>
		for (int i = 0; i < 8; i++) {
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	3301      	adds	r3, #1
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80006d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	dde4      	ble.n	80006a0 <_Z12EventLoopCppv+0x98>
		default:
			break;
	}
	count++;
#else // RX
		uint8_t status = nrfDevice.GetStatus_RXFIFO();
 80006d6:	481c      	ldr	r0, [pc, #112]	@ (8000748 <_Z12EventLoopCppv+0x140>)
 80006d8:	f000 fcb3 	bl	8001042 <_ZN6NRF24L16GetStatus_RXFIFOEv>
 80006dc:	4603      	mov	r3, r0
 80006de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		if (status != NRF24L::FifoStatus::EMPTY) {
 80006e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d0c2      	beq.n	8000670 <_Z12EventLoopCppv+0x68>
			nrfDevice.ReadPayload(nRF24_payload, &payload_length);
 80006ea:	f107 0220 	add.w	r2, r7, #32
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4815      	ldr	r0, [pc, #84]	@ (8000748 <_Z12EventLoopCppv+0x140>)
 80006f4:	f000 fd4a 	bl	800118c <_ZN6NRF24L11ReadPayloadEPhS0_>
			nrfDevice.ClearIRQFlags();
 80006f8:	4813      	ldr	r0, [pc, #76]	@ (8000748 <_Z12EventLoopCppv+0x140>)
 80006fa:	f000 fccc 	bl	8001096 <_ZN6NRF24L13ClearIRQFlagsEv>

			tmDevice.writeHexTo(6, 2, nRF24_payload[0]);
 80006fe:	783b      	ldrb	r3, [r7, #0]
 8000700:	2202      	movs	r2, #2
 8000702:	2106      	movs	r1, #6
 8000704:	480f      	ldr	r0, [pc, #60]	@ (8000744 <_Z12EventLoopCppv+0x13c>)
 8000706:	f000 fea8 	bl	800145a <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(4, 2, nRF24_payload[1]);
 800070a:	787b      	ldrb	r3, [r7, #1]
 800070c:	2202      	movs	r2, #2
 800070e:	2104      	movs	r1, #4
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <_Z12EventLoopCppv+0x13c>)
 8000712:	f000 fea2 	bl	800145a <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(2, 2, nRF24_payload[2]);
 8000716:	78bb      	ldrb	r3, [r7, #2]
 8000718:	2202      	movs	r2, #2
 800071a:	2102      	movs	r1, #2
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <_Z12EventLoopCppv+0x13c>)
 800071e:	f000 fe9c 	bl	800145a <_ZN6Tm163810writeHexToEhhm>
			tmDevice.writeHexTo(0, 2, nRF24_payload[3]);
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	2202      	movs	r2, #2
 8000726:	2100      	movs	r1, #0
 8000728:	4806      	ldr	r0, [pc, #24]	@ (8000744 <_Z12EventLoopCppv+0x13c>)
 800072a:	f000 fe96 	bl	800145a <_ZN6Tm163810writeHexToEhhm>
		}
#endif
	}
 800072e:	e79f      	b.n	8000670 <_Z12EventLoopCppv+0x68>
 8000730:	40020000 	.word	0x40020000
 8000734:	2000039c 	.word	0x2000039c
 8000738:	20000240 	.word	0x20000240
 800073c:	200001c0 	.word	0x200001c0
 8000740:	080005f5 	.word	0x080005f5
 8000744:	200001c4 	.word	0x200001c4
 8000748:	20000200 	.word	0x20000200
 800074c:	200001bc 	.word	0x200001bc
 8000750:	200003e4 	.word	0x200003e4
 8000754:	20000000 	.word	0x20000000
 8000758:	40020800 	.word	0x40020800
 800075c:	20000004 	.word	0x20000004

08000760 <EventLoopC>:
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	EventLoopCpp();
 8000764:	f7ff ff50 	bl	8000608 <_Z12EventLoopCppv>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <_Z41__static_initialization_and_destruction_0ii>:
}
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d11a      	bne.n	80007b2 <_Z41__static_initialization_and_destruction_0ii+0x46>
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000782:	4293      	cmp	r3, r2
 8000784:	d115      	bne.n	80007b2 <_Z41__static_initialization_and_destruction_0ii+0x46>
Tm1638 tmDevice = Tm1638(&hspi1, TM_STB_GPIO_Port, TM_STB_Pin, TM_MOSI_GPIO_Port, TM_MOSI_Pin);
 8000786:	2380      	movs	r3, #128	@ 0x80
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2340      	movs	r3, #64	@ 0x40
 8000790:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000792:	4910      	ldr	r1, [pc, #64]	@ (80007d4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000794:	4810      	ldr	r0, [pc, #64]	@ (80007d8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000796:	f000 fd43 	bl	8001220 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
NRF24L nrfDevice = NRF24L(&hspi2, NRF_CE_GPIO_Port, NRF_CE_Pin, NRF_CSN_GPIO_Port, NRF_CSN_Pin);
 800079a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a8:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80007ae:	f000 f8d5 	bl	800095c <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d107      	bne.n	80007c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007be:	4293      	cmp	r3, r2
 80007c0:	d102      	bne.n	80007c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 80007c2:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80007c4:	f000 f902 	bl	80009cc <_ZN6NRF24LD1Ev>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40020000 	.word	0x40020000
 80007d4:	200002e8 	.word	0x200002e8
 80007d8:	200001c4 	.word	0x200001c4
 80007dc:	40020400 	.word	0x40020400
 80007e0:	20000340 	.word	0x20000340
 80007e4:	20000200 	.word	0x20000200

080007e8 <_GLOBAL__sub_I_led_state>:
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ffbb 	bl	800076c <_Z41__static_initialization_and_destruction_0ii>
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_GLOBAL__sub_D_led_state>:
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ffb3 	bl	800076c <_Z41__static_initialization_and_destruction_0ii>
 8000806:	bd80      	pop	{r7, pc}

08000808 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft>:

#include <Joy.hpp>

static Joy* _instance = nullptr;

Joy::Joy(ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim, GPIO_TypeDef *joyPort, uint16_t joyPin):
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	603b      	str	r3, [r7, #0]
		onButtonChanged(nullptr), _hadc(hadc), _htim(htim), _joyPort(joyPort), _joyPin(joyPin)
 8000816:	4a18      	ldr	r2, [pc, #96]	@ (8000878 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft+0x70>)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	8b3a      	ldrh	r2, [r7, #24]
 8000838:	829a      	strh	r2, [r3, #20]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2200      	movs	r2, #0
 800083e:	82da      	strh	r2, [r3, #22]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2200      	movs	r2, #0
 8000844:	831a      	strh	r2, [r3, #24]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2200      	movs	r2, #0
 800084a:	835a      	strh	r2, [r3, #26]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2201      	movs	r2, #1
 8000850:	771a      	strb	r2, [r3, #28]
{
    _instance = this;
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft+0x74>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)_joyBuf, 2);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3316      	adds	r3, #22
 800085c:	2202      	movs	r2, #2
 800085e:	4619      	mov	r1, r3
 8000860:	68b8      	ldr	r0, [r7, #8]
 8000862:	f001 fe1f 	bl	80024a4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(htim);
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f005 fd8a 	bl	8006380 <HAL_TIM_Base_Start>
}
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	0800c20c 	.word	0x0800c20c
 800087c:	20000224 	.word	0x20000224

08000880 <_ZN3JoyD1Ev>:

Joy::~Joy() {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	4a04      	ldr	r2, [pc, #16]	@ (800089c <_ZN3JoyD1Ev+0x1c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
}
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	0800c20c 	.word	0x0800c20c

080008a0 <_ZN3JoyD0Ev>:
Joy::~Joy() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
}
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffe9 	bl	8000880 <_ZN3JoyD1Ev>
 80008ae:	2120      	movs	r1, #32
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f00b fa93 	bl	800bddc <_ZdlPvj>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN3Joy21attachOnButtonChangedEPFvPS_E>:

void Joy::attachOnButtonChanged(ButtonChangedHandler handler)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
    onButtonChanged = handler;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	605a      	str	r2, [r3, #4]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_ZN3Joy14OnButtonChangeEt>:
const uint16_t* Joy::getXYButton()
{
	return _joyBuf;
}
void Joy::OnButtonChange(uint16_t GPIO_Pin)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
	if(GPIO_Pin == _joyPin)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	8a9b      	ldrh	r3, [r3, #20]
 80008ec:	887a      	ldrh	r2, [r7, #2]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d112      	bne.n	8000918 <_ZN3Joy14OnButtonChangeEt+0x3c>
	{
		GPIO_PinState ps = HAL_GPIO_ReadPin(_joyPort, _joyPin);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	691a      	ldr	r2, [r3, #16]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	8a9b      	ldrh	r3, [r3, #20]
 80008fa:	4619      	mov	r1, r3
 80008fc:	4610      	mov	r0, r2
 80008fe:	f003 f827 	bl	8003950 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	73fb      	strb	r3, [r7, #15]
		_joyBuf[2] = (ps == GPIO_PIN_SET ? 0 : 1);
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	2b01      	cmp	r3, #1
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	835a      	strh	r2, [r3, #26]
	}

	if (onButtonChanged != nullptr)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <_ZN3Joy14OnButtonChangeEt+0x4c>
	{
        onButtonChanged(this);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	4798      	blx	r3
    }
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <HAL_GPIO_EXTI_Callback>:

extern void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
    if (_instance != nullptr) {
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x28>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <HAL_GPIO_EXTI_Callback+0x20>
        _instance->OnButtonChange(GPIO_Pin);
 8000942:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x28>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ffc6 	bl	80008dc <_ZN3Joy14OnButtonChangeEt>
    }
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000224 	.word	0x20000224

0800095c <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:

// Functions to manage the nRF24L01+ transceiver

#define nRF24_WAIT_TIMEOUT         (uint32_t)100;//0x000FFFFF

NRF24L::NRF24L(SPI_HandleTypeDef *spi, GPIO_TypeDef* CEPort, uint16_t CEPin, GPIO_TypeDef* CSNPort, uint16_t CSNPin):
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	807b      	strh	r3, [r7, #2]
				_spi(spi),
				_CEPort(CEPort),
				_CEPin(CEPin),
				_CSNPort(CSNPort),
				_CSNPin(CSNPin)
 800096a:	4a15      	ldr	r2, [pc, #84]	@ (80009c0 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x64>)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	601a      	str	r2, [r3, #0]
				_spi(spi),
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	605a      	str	r2, [r3, #4]
				_CEPort(CEPort),
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	609a      	str	r2, [r3, #8]
				_CEPin(CEPin),
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	887a      	ldrh	r2, [r7, #2]
 8000980:	819a      	strh	r2, [r3, #12]
				_CSNPort(CSNPort),
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	611a      	str	r2, [r3, #16]
				_CSNPin(CSNPin)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	8bba      	ldrh	r2, [r7, #28]
 800098c:	829a      	strh	r2, [r3, #20]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4a0c      	ldr	r2, [pc, #48]	@ (80009c4 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x68>)
 8000992:	3316      	adds	r3, #22
 8000994:	6810      	ldr	r0, [r2, #0]
 8000996:	6018      	str	r0, [r3, #0]
 8000998:	8892      	ldrh	r2, [r2, #4]
 800099a:	809a      	strh	r2, [r3, #4]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x6c>)
 80009a0:	331c      	adds	r3, #28
 80009a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a6:	6018      	str	r0, [r3, #0]
 80009a8:	3304      	adds	r3, #4
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	3302      	adds	r3, #2
 80009ae:	0c0a      	lsrs	r2, r1, #16
 80009b0:	701a      	strb	r2, [r3, #0]
{}
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	0800c220 	.word	0x0800c220
 80009c4:	0800c17c 	.word	0x0800c17c
 80009c8:	0800c184 	.word	0x0800c184

080009cc <_ZN6NRF24LD1Ev>:

NRF24L::~NRF24L(){}
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <_ZN6NRF24LD1Ev+0x1c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	0800c220 	.word	0x0800c220

080009ec <_ZN6NRF24LD0Ev>:
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ffe9 	bl	80009cc <_ZN6NRF24LD1Ev>
 80009fa:	2124      	movs	r1, #36	@ 0x24
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f00b f9ed 	bl	800bddc <_ZdlPvj>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZN6NRF24L10nRF24_CE_HEv>:

void NRF24L::nRF24_CE_L() {
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_RESET);
}

void NRF24L::nRF24_CE_H() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_SET);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6898      	ldr	r0, [r3, #8]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	899b      	ldrh	r3, [r3, #12]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f002 ffae 	bl	8003980 <HAL_GPIO_WritePin>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZN6NRF24L11nRF24_CSN_LEv>:

void NRF24L::nRF24_CSN_L() {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_RESET);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6918      	ldr	r0, [r3, #16]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	8a9b      	ldrh	r3, [r3, #20]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f002 ff9e 	bl	8003980 <HAL_GPIO_WritePin>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_ZN6NRF24L11nRF24_CSN_HEv>:

void NRF24L::nRF24_CSN_H() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_SET);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6918      	ldr	r0, [r3, #16]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	8a9b      	ldrh	r3, [r3, #20]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f002 ff8e 	bl	8003980 <HAL_GPIO_WritePin>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_ZN6NRF24L11nRF24_LL_RWEh>:

uint8_t NRF24L::nRF24_LL_RW(uint8_t data) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(_spi, &data, &result, 1, 2000)!=HAL_OK) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6858      	ldr	r0, [r3, #4]
 8000a7c:	f107 020f 	add.w	r2, r7, #15
 8000a80:	1cf9      	adds	r1, r7, #3
 8000a82:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f005 f937 	bl	8005cfc <HAL_SPI_TransmitReceive>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf14      	ite	ne
 8000a94:	2301      	movne	r3, #1
 8000a96:	2300      	moveq	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <_ZN6NRF24L11nRF24_LL_RWEh+0x36>
        Error_Handler();
 8000a9e:	f000 ffdb 	bl	8001a58 <Error_Handler>
    };
    return result;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_ZN6NRF24L7ReadRegEh>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
uint8_t NRF24L::ReadReg(uint8_t reg) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	nRF24_CSN_L();
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ffb7 	bl	8000a2c <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	f003 031f 	and.w	r3, r3, #31
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffcf 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000ace:	21ff      	movs	r1, #255	@ 0xff
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ffcb 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ffb6 	bl	8000a4c <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_ZN6NRF24L8WriteRegEhh>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
void NRF24L::WriteReg(uint8_t reg, uint8_t value) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	70fb      	strb	r3, [r7, #3]
 8000af6:	4613      	mov	r3, r2
 8000af8:	70bb      	strb	r3, [r7, #2]
	nRF24_CSN_L();
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff96 	bl	8000a2c <_ZN6NRF24L11nRF24_CSN_LEv>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b1f      	cmp	r3, #31
 8000b04:	d810      	bhi.n	8000b28 <_ZN6NRF24L8WriteRegEhh+0x3e>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP ));
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	f003 031f 	and.w	r3, r3, #31
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4619      	mov	r1, r3
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffa8 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
		nRF24_LL_RW(value);
 8000b1c:	78bb      	ldrb	r3, [r7, #2]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ffa3 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
 8000b26:	e015      	b.n	8000b54 <_ZN6NRF24L8WriteRegEhh+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff9d 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
		if ((reg != nRF24_CMD_FLUSH_TX ) && (reg != nRF24_CMD_FLUSH_RX )
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	2be1      	cmp	r3, #225	@ 0xe1
 8000b36:	d00d      	beq.n	8000b54 <_ZN6NRF24L8WriteRegEhh+0x6a>
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2be2      	cmp	r3, #226	@ 0xe2
 8000b3c:	d00a      	beq.n	8000b54 <_ZN6NRF24L8WriteRegEhh+0x6a>
				&& (reg != nRF24_CMD_REUSE_TX_PL ) && (reg != nRF24_CMD_NOP )) {
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	2be3      	cmp	r3, #227	@ 0xe3
 8000b42:	d007      	beq.n	8000b54 <_ZN6NRF24L8WriteRegEhh+0x6a>
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	2bff      	cmp	r3, #255	@ 0xff
 8000b48:	d004      	beq.n	8000b54 <_ZN6NRF24L8WriteRegEhh+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 8000b4a:	78bb      	ldrb	r3, [r7, #2]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ff8c 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
		}
	}
	nRF24_CSN_H();
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff79 	bl	8000a4c <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_ZN6NRF24L9ReadMBRegEhPhh>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
void NRF24L::ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000b62:	b590      	push	{r4, r7, lr}
 8000b64:	b085      	sub	sp, #20
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	460b      	mov	r3, r1
 8000b70:	72fb      	strb	r3, [r7, #11]
 8000b72:	4613      	mov	r3, r2
 8000b74:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff ff58 	bl	8000a2c <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff ff73 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000b86:	e008      	b.n	8000b9a <_ZN6NRF24L9ReadMBRegEhPhh+0x38>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000b88:	687c      	ldr	r4, [r7, #4]
 8000b8a:	1c63      	adds	r3, r4, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	21ff      	movs	r1, #255	@ 0xff
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff ff6b 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
 8000b96:	4603      	mov	r3, r0
 8000b98:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000b9a:	7abb      	ldrb	r3, [r7, #10]
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	72ba      	strb	r2, [r7, #10]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1ec      	bne.n	8000b88 <_ZN6NRF24L9ReadMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff ff4c 	bl	8000a4c <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd90      	pop	{r4, r7, pc}

08000bbc <_ZN6NRF24L10WriteMBRegEhPhh>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
void NRF24L::WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	460b      	mov	r3, r1
 8000bca:	72fb      	strb	r3, [r7, #11]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff ff2b 	bl	8000a2c <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 8000bd6:	7afb      	ldrb	r3, [r7, #11]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff ff46 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000be0:	e007      	b.n	8000bf2 <_ZN6NRF24L10WriteMBRegEhPhh+0x36>
		nRF24_LL_RW(*pBuf++);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff ff3d 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000bf2:	7abb      	ldrb	r3, [r7, #10]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	72ba      	strb	r2, [r7, #10]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1ed      	bne.n	8000be2 <_ZN6NRF24L10WriteMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff ff20 	bl	8000a4c <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_ZN6NRF24L4InitEv>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void NRF24L::Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	// Write to registers their initial values
	WriteReg(nRF24_REG_CONFIG, 0x08);
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	2100      	movs	r1, #0
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff62 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000c26:	223f      	movs	r2, #63	@ 0x3f
 8000c28:	2101      	movs	r1, #1
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff5d 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000c30:	2203      	movs	r2, #3
 8000c32:	2102      	movs	r1, #2
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff58 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff53 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000c44:	2203      	movs	r2, #3
 8000c46:	2104      	movs	r1, #4
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff4e 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_CH, 0x02);
 8000c4e:	2202      	movs	r2, #2
 8000c50:	2105      	movs	r1, #5
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ff49 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000c58:	220e      	movs	r2, #14
 8000c5a:	2106      	movs	r1, #6
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff44 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_STATUS, 0x00);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2107      	movs	r1, #7
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff3f 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2111      	movs	r1, #17
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff3a 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2112      	movs	r1, #18
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff35 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2113      	movs	r1, #19
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff30 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2114      	movs	r1, #20
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff2b 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2115      	movs	r1, #21
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff26 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2116      	movs	r1, #22
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff21 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_DYNPD, 0x00);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	211c      	movs	r1, #28
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff1c 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_FEATURE, 0x00);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	211d      	movs	r1, #29
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff17 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>

	// Clear the FIFO's
	FlushRX();
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f9dd 	bl	800107c <_ZN6NRF24L7FlushRXEv>
	FlushTX();
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f9cd 	bl	8001062 <_ZN6NRF24L7FlushTXEv>

	// Clear any pending interrupt flags
	ClearIRQFlags();
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f9e4 	bl	8001096 <_ZN6NRF24L13ClearIRQFlagsEv>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff febc 	bl	8000a4c <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZN6NRF24L5CheckEv>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t NRF24L::Check(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t*) nRF24_TEST_ADDR;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <_ZN6NRF24L5CheckEv+0x68>)
 8000ce6:	613b      	str	r3, [r7, #16]

	// Write test TX address and read TX_ADDR register
	WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000ce8:	2305      	movs	r3, #5
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	2130      	movs	r1, #48	@ 0x30
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ff64 	bl	8000bbc <_ZN6NRF24L10WriteMBRegEhPhh>
	ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000cf4:	f107 0208 	add.w	r2, r7, #8
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff30 	bl	8000b62 <_ZN6NRF24L9ReadMBRegEhPhh>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000d02:	2300      	movs	r3, #0
 8000d04:	75fb      	strb	r3, [r7, #23]
 8000d06:	e014      	b.n	8000d32 <_ZN6NRF24L5CheckEv+0x56>
		if (rxbuf[i] != *ptr++)
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	443b      	add	r3, r7
 8000d0e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1c59      	adds	r1, r3, #1
 8000d16:	6139      	str	r1, [r7, #16]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	bf14      	ite	ne
 8000d1e:	2301      	movne	r3, #1
 8000d20:	2300      	moveq	r3, #0
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <_ZN6NRF24L5CheckEv+0x50>
			return 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e006      	b.n	8000d3a <_ZN6NRF24L5CheckEv+0x5e>
	for (i = 0; i < 5; i++) {
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	75fb      	strb	r3, [r7, #23]
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d9e7      	bls.n	8000d08 <_ZN6NRF24L5CheckEv+0x2c>
	}

	return 1;
 8000d38:	2301      	movs	r3, #1
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	0800c18c 	.word	0x0800c18c

08000d48 <_ZN6NRF24L12SetPowerModeEh>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void NRF24L::SetPowerMode(uint8_t mode) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	reg = ReadReg(nRF24_REG_CONFIG);
 8000d54:	2100      	movs	r1, #0
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fea8 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d104      	bne.n	8000d70 <_ZN6NRF24L12SetPowerModeEh+0x28>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e003      	b.n	8000d78 <_ZN6NRF24L12SetPowerModeEh+0x30>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	f023 0302 	bic.w	r3, r3, #2
 8000d76:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_CONFIG, reg);
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff feb3 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_ZN6NRF24L18SetOperationalModeEh>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void NRF24L::SetOperationalMode(uint8_t mode) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fe86 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8000da0:	4603      	mov	r3, r0
 8000da2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX );
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fe92 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_ZN6NRF24L12SetCRCSchemeEh>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void NRF24L::SetCRCScheme(uint8_t scheme) {
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fe65 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	f023 030c 	bic.w	r3, r3, #12
 8000dec:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC );
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	2100      	movs	r1, #0
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff fe71 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_ZN6NRF24L12SetRFChannelEh>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void NRF24L::SetRFChannel(uint8_t channel) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_RF_CH, channel);
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2105      	movs	r1, #5
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fe61 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_ZN6NRF24L12SetAddrWidthEh>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void NRF24L::SetAddrWidth(uint8_t addr_width) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	2103      	movs	r1, #3
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fe4f 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZN6NRF24L7SetAddrEhPKh>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void NRF24L::SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	72fb      	strb	r3, [r7, #11]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	d00a      	beq.n	8000e7e <_ZN6NRF24L7SetAddrEhPKh+0x2a>
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	dc42      	bgt.n	8000ef2 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	dc02      	bgt.n	8000e76 <_ZN6NRF24L7SetAddrEhPKh+0x22>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da04      	bge.n	8000e7e <_ZN6NRF24L7SetAddrEhPKh+0x2a>
		// Write address LSBbyte (only first byte from the addr buffer)
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
		break;
	default:
		// Incorrect pipe number -> do nothing
		break;
 8000e74:	e03d      	b.n	8000ef2 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000e76:	3b02      	subs	r3, #2
	switch (pipe) {
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d83a      	bhi.n	8000ef2 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000e7c:	e02e      	b.n	8000edc <_ZN6NRF24L7SetAddrEhPKh+0x88>
		addr_width = ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000e7e:	2103      	movs	r1, #3
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff fe13 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8000e86:	4603      	mov	r3, r0
 8000e88:	3301      	adds	r3, #1
 8000e8a:	75fb      	strb	r3, [r7, #23]
		addr += addr_width;
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	607b      	str	r3, [r7, #4]
		nRF24_CSN_L();
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f7ff fdc9 	bl	8000a2c <_ZN6NRF24L11nRF24_CSN_LEv>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | NRF24L::ADDR_REGS[pipe]);
 8000e9a:	7afb      	ldrb	r3, [r7, #11]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	7f1b      	ldrb	r3, [r3, #28]
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f7ff fdde 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
			nRF24_LL_RW(*addr--);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff fdd6 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
		} while (addr_width--);
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	75fa      	strb	r2, [r7, #23]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	2300      	moveq	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1ed      	bne.n	8000eb0 <_ZN6NRF24L7SetAddrEhPKh+0x5c>
		nRF24_CSN_H();
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff fdb9 	bl	8000a4c <_ZN6NRF24L11nRF24_CSN_HEv>
		break;
 8000eda:	e00b      	b.n	8000ef4 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
 8000edc:	7afb      	ldrb	r3, [r7, #11]
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	7f19      	ldrb	r1, [r3, #28]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fdfd 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
		break;
 8000ef0:	e000      	b.n	8000ef4 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		break;
 8000ef2:	bf00      	nop
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_ZN6NRF24L11SetDataRateEh>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void NRF24L::SetDataRate(uint8_t data_rate) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = ReadReg(nRF24_REG_RF_SETUP);
 8000f08:	2106      	movs	r1, #6
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fdce 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000f1a:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_RF_SETUP, reg);
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	461a      	mov	r2, r3
 8000f28:	2106      	movs	r1, #6
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fddd 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_ZN6NRF24L9SetRXPipeEhhh>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void NRF24L::SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	70fb      	strb	r3, [r7, #3]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	70bb      	strb	r3, [r7, #2]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	707b      	strb	r3, [r7, #1]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000f52:	2102      	movs	r1, #2
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fda9 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b25a      	sxtb	r2, r3
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f72:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	461a      	mov	r2, r3
 8000f78:	2102      	movs	r1, #2
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fdb5 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>

	// Set RX payload length (RX_PW_Px register)
	WriteReg(NRF24L::RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	7d99      	ldrb	r1, [r3, #22]
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fda9 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = ReadReg(nRF24_REG_EN_AA);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fd86 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000fa4:	78bb      	ldrb	r3, [r7, #2]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10a      	bne.n	8000fc0 <_ZN6NRF24L9SetRXPipeEhhh+0x88>
		reg |= (1 << pipe);
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	2201      	movs	r2, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e00b      	b.n	8000fd8 <_ZN6NRF24L9SetRXPipeEhhh+0xa0>
	} else {
		reg &= ~(1 << pipe);
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	b25a      	sxtb	r2, r3
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_EN_AA, reg);
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2101      	movs	r1, #1
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff fd83 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZN6NRF24L9DisableAAEh>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void NRF24L::DisableAA(uint8_t pipe) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	if (pipe > 5) {
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	d905      	bls.n	800100a <_ZN6NRF24L9DisableAAEh+0x1e>
		// Disable Auto-ACK for ALL pipes
		WriteReg(nRF24_REG_EN_AA, 0x00);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2101      	movs	r1, #1
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fd71 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
		// Clear bit in the EN_AA register
		reg = ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8001008:	e017      	b.n	800103a <_ZN6NRF24L9DisableAAEh+0x4e>
		reg = ReadReg(nRF24_REG_EN_AA);
 800100a:	2101      	movs	r1, #1
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fd4d 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	2201      	movs	r2, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	b25b      	sxtb	r3, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	b25a      	sxtb	r2, r3
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	4013      	ands	r3, r2
 800102a:	b25b      	sxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
		WriteReg(nRF24_REG_EN_AA, reg);
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	461a      	mov	r2, r3
 8001032:	2101      	movs	r1, #1
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fd58 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN6NRF24L16GetStatus_RXFIFOEv>:
	return (ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ );
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t NRF24L::GetStatus_RXFIFO(void) {
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	return (ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO );
 800104a:	2117      	movs	r1, #23
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fd2d 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 8001052:	4603      	mov	r3, r0
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	b2db      	uxtb	r3, r3
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_ZN6NRF24L7FlushTXEv>:
	reg = ReadReg(nRF24_REG_RF_CH);
	WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void NRF24L::FlushTX(void) {
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800106a:	22ff      	movs	r2, #255	@ 0xff
 800106c:	21e1      	movs	r1, #225	@ 0xe1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fd3b 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZN6NRF24L7FlushRXEv>:

// Flush the RX FIFO
void NRF24L::FlushRX(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8001084:	22ff      	movs	r2, #255	@ 0xff
 8001086:	21e2      	movs	r1, #226	@ 0xe2
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fd2e 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZN6NRF24L13ClearIRQFlagsEv>:

// Clear any pending IRQ flags
void NRF24L::ClearIRQFlags(void) {
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = ReadReg(nRF24_REG_STATUS);
 800109e:	2107      	movs	r1, #7
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fd03 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
	reg |= nRF24_MASK_STATUS_IRQ;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80010b0:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_STATUS, reg);
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	461a      	mov	r2, r3
 80010b6:	2107      	movs	r1, #7
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fd16 	bl	8000aea <_ZN6NRF24L8WriteRegEhh>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZN6NRF24L20GetRxDplPayloadWidthEv>:
//   length - payload length in bytes
void NRF24L::WritePayload(uint8_t *pBuf, uint8_t length) {
	WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

uint8_t NRF24L::GetRxDplPayloadWidth() {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	uint8_t value;

	nRF24_CSN_L();
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fcac 	bl	8000a2c <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80010d4:	2160      	movs	r1, #96	@ 0x60
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fcc8 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80010dc:	21ff      	movs	r1, #255	@ 0xff
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fcc4 	bl	8000a6c <_ZN6NRF24L11nRF24_LL_RWEh>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff fcaf 	bl	8000a4c <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h>:

NRF24L::RXResult NRF24L::ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length,
		uint8_t dpl) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	70fb      	strb	r3, [r7, #3]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO ) >> 1;
 8001106:	2107      	movs	r1, #7
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff fccf 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 800110e:	4603      	mov	r3, r0
 8001110:	085b      	lsrs	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d82d      	bhi.n	800117c <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x84>
		// Get payload length
		if (dpl) {
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d011      	beq.n	800114a <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x52>
			*length = GetRxDplPayloadWidth();
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff ffcd 	bl	80010c6 <_ZN6NRF24L20GetRxDplPayloadWidthEv>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	701a      	strb	r2, [r3, #0]
			if (*length > 32) { //broken packet
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b20      	cmp	r3, #32
 800113a:	d912      	bls.n	8001162 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x6a>
				*length = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
				FlushRX();
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff ff9a 	bl	800107c <_ZN6NRF24L7FlushRXEv>
 8001148:	e00b      	b.n	8001162 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x6a>
			}
		} else {
			*length = ReadReg(NRF24L::RX_PW_PIPE[pipe]);
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	7d9b      	ldrb	r3, [r3, #22]
 8001152:	4619      	mov	r1, r3
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff fca9 	bl	8000aac <_ZN6NRF24L7ReadRegEh>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x80>
			ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	2161      	movs	r1, #97	@ 0x61
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f7ff fcf5 	bl	8000b62 <_ZN6NRF24L9ReadMBRegEhPhh>
		}

		return ((RXResult) pipe);
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	e003      	b.n	8001184 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h+0x8c>
	}

	// The RX FIFO is empty
	*length = 0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]

	return RX_EMPTY;
 8001182:	23ff      	movs	r3, #255	@ 0xff
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZN6NRF24L11ReadPayloadEPhS0_>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
NRF24L::RXResult NRF24L::ReadPayload(uint8_t *pBuf, uint8_t *length) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	return ReadPayloadGeneric(pBuf, length, 0);
 8001198:	2300      	movs	r3, #0
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ffaa 	bl	80010f8 <_ZN6NRF24L18ReadPayloadGenericEPhS0_h>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <_ZN6NRF24L6InitRXEPhh>:
	ClearIRQFlags();
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
}

void NRF24L::InitRX(uint8_t *dest, uint8_t len) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	71fb      	strb	r3, [r7, #7]
	// Disable ShockBurst for all RX pipes
	DisableAA(0xFF);
 80011be:	21ff      	movs	r1, #255	@ 0xff
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ff13 	bl	8000fec <_ZN6NRF24L9DisableAAEh>
	// Set RF channel
	SetRFChannel(115);
 80011c6:	2173      	movs	r1, #115	@ 0x73
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff fe21 	bl	8000e10 <_ZN6NRF24L12SetRFChannelEh>
	// Set data rate
	SetDataRate(nRF24_DR_250kbps);
 80011ce:	2120      	movs	r1, #32
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff fe93 	bl	8000efc <_ZN6NRF24L11SetDataRateEh>
	// Set CRC scheme
	SetCRCScheme(nRF24_CRC_2byte);
 80011d6:	210c      	movs	r1, #12
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fdf8 	bl	8000dce <_ZN6NRF24L12SetCRCSchemeEh>
	// Set address width, its common for all pipes (RX and TX)
	SetAddrWidth(3);
 80011de:	2103      	movs	r1, #3
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff fe25 	bl	8000e30 <_ZN6NRF24L12SetAddrWidthEh>
	// Configure RX PIPE#1
	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 80011e6:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <_ZN6NRF24L6InitRXEPhh+0x6c>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fe32 	bl	8000e54 <_ZN6NRF24L7SetAddrEhPKh>
	SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, len); // Auto-ACK: disabled, payload length in bytes
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2200      	movs	r2, #0
 80011f4:	2101      	movs	r1, #1
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fe9e 	bl	8000f38 <_ZN6NRF24L9SetRXPipeEhhh>
	// Set operational mode (PRX == receiver)
	SetOperationalMode(nRF24_MODE_RX);
 80011fc:	2101      	movs	r1, #1
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fdc4 	bl	8000d8c <_ZN6NRF24L18SetOperationalModeEh>
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
 8001204:	2102      	movs	r1, #2
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff fd9e 	bl	8000d48 <_ZN6NRF24L12SetPowerModeEh>
	// Put the transceiver to the RX mode
	nRF24_CE_H();
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff fbfd 	bl	8000a0c <_ZN6NRF24L10nRF24_CE_HEv>
//	nRF24_SetAddrWidth(5); // address width is 5 bytes
//	nRF24_SetAddr(nRF24_PIPE1, dest); // program pipe address
//	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 10); // enable RX pipe#1 with Auto-ACK: disabled, payload length: 10 bytes
//	nRF24_SetOperationalMode(nRF24_MODE_RX); // switch transceiver to the RX mode
//	nRF24_SetPowerMode(nRF24_PWR_UP); // wake-up transceiver (in case if it sleeping)
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800c214 	.word	0x0800c214

08001220 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
#define SPI_TIMEOUT 20

char spi_buf[17];
char button_buf[4];

Tm1638::Tm1638 (SPI_HandleTypeDef *spi,
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef *stbPort,
		uint16_t stbPin,
		GPIO_TypeDef *mosiPort,
		uint16_t mosiPin):
    _spi(spi), _stbPort(stbPort), _stbPin(stbPin), _mosiPort(mosiPort), _mosiPin(mosiPin)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	887a      	ldrh	r2, [r7, #2]
 800123e:	811a      	strh	r2, [r3, #8]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800124a:	821a      	strh	r2, [r3, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	749a      	strb	r2, [r3, #18]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2240      	movs	r2, #64	@ 0x40
 8001256:	74da      	strb	r2, [r3, #19]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2244      	movs	r2, #68	@ 0x44
 800125c:	751a      	strb	r2, [r3, #20]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	22c0      	movs	r2, #192	@ 0xc0
 8001262:	755a      	strb	r2, [r3, #21]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x80>)
 8001268:	4614      	mov	r4, r2
 800126a:	f103 0c16 	add.w	ip, r3, #22
 800126e:	f104 0e20 	add.w	lr, r4, #32
 8001272:	4665      	mov	r5, ip
 8001274:	4626      	mov	r6, r4
 8001276:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001278:	6028      	str	r0, [r5, #0]
 800127a:	6069      	str	r1, [r5, #4]
 800127c:	60aa      	str	r2, [r5, #8]
 800127e:	60eb      	str	r3, [r5, #12]
 8001280:	3410      	adds	r4, #16
 8001282:	f10c 0c10 	add.w	ip, ip, #16
 8001286:	4574      	cmp	r4, lr
 8001288:	d1f3      	bne.n	8001272 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x52>
 800128a:	4663      	mov	r3, ip
 800128c:	4622      	mov	r2, r4
 800128e:	6810      	ldr	r0, [r2, #0]
 8001290:	6018      	str	r0, [r3, #0]
 8001292:	7912      	ldrb	r2, [r2, #4]
 8001294:	711a      	strb	r2, [r3, #4]
{
}
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a0:	0800c194 	.word	0x0800c194

080012a4 <_ZN6Tm16384testEv>:

void Tm1638::test(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  turnOnFull();
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f82f 	bl	8001310 <_ZN6Tm163810turnOnFullEv>
  clear();
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f840 	bl	8001338 <_ZN6Tm16385clearEv>

  writeCharTo(0, 'L');
 80012b8:	224c      	movs	r2, #76	@ 0x4c
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f875 	bl	80013ac <_ZN6Tm163811writeCharToEhc>
  writeCharTo(1, 'e');
 80012c2:	2265      	movs	r2, #101	@ 0x65
 80012c4:	2101      	movs	r1, #1
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f870 	bl	80013ac <_ZN6Tm163811writeCharToEhc>
  writeCharTo(2, 'o');
 80012cc:	226f      	movs	r2, #111	@ 0x6f
 80012ce:	2102      	movs	r1, #2
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f86b 	bl	80013ac <_ZN6Tm163811writeCharToEhc>
  writeCharTo(3, 'n');
 80012d6:	226e      	movs	r2, #110	@ 0x6e
 80012d8:	2103      	movs	r1, #3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f866 	bl	80013ac <_ZN6Tm163811writeCharToEhc>

  writeCharTo(4,'E');
 80012e0:	2245      	movs	r2, #69	@ 0x45
 80012e2:	2104      	movs	r1, #4
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f861 	bl	80013ac <_ZN6Tm163811writeCharToEhc>
  writeCharTo(5,'m');
 80012ea:	226d      	movs	r2, #109	@ 0x6d
 80012ec:	2105      	movs	r1, #5
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f85c 	bl	80013ac <_ZN6Tm163811writeCharToEhc>
  writeCharTo(6,'m');
 80012f4:	226d      	movs	r2, #109	@ 0x6d
 80012f6:	2106      	movs	r1, #6
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f857 	bl	80013ac <_ZN6Tm163811writeCharToEhc>
  writeCharTo(7,'a');
 80012fe:	2261      	movs	r2, #97	@ 0x61
 8001300:	2107      	movs	r1, #7
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f852 	bl	80013ac <_ZN6Tm163811writeCharToEhc>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZN6Tm163810turnOnFullEv>:

void Tm1638::turnOnFull(){
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint8_t brightness = enable | 0x0F;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7c9b      	ldrb	r3, [r3, #18]
 800131c:	f043 030f 	orr.w	r3, r3, #15
 8001320:	b2db      	uxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
  setMode(&brightness);
 8001324:	f107 030f 	add.w	r3, r7, #15
 8001328:	4619      	mov	r1, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f900 	bl	8001530 <_ZN6Tm16387setModeEPKh>
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZN6Tm16385clearEv>:
void Tm1638::turnOn(uint8_t val){ // 0 to 15
  uint8_t brightness = enable | (val & 0x0F);
  setMode(&brightness);
}

void Tm1638::clear(){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  setMode(&seriesOut);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3313      	adds	r3, #19
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f8f2 	bl	8001530 <_ZN6Tm16387setModeEPKh>

  for(int i = 0; i < 18; i++) { spi_buf[i] = 0; }
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	e007      	b.n	8001362 <_ZN6Tm16385clearEv+0x2a>
 8001352:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <_ZN6Tm16385clearEv+0x70>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b11      	cmp	r3, #17
 8001366:	ddf4      	ble.n	8001352 <_ZN6Tm16385clearEv+0x1a>
  spi_buf[0] = startAddr;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7d5a      	ldrb	r2, [r3, #21]
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <_ZN6Tm16385clearEv+0x70>)
 800136e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6858      	ldr	r0, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	891b      	ldrh	r3, [r3, #8]
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	f002 fb00 	bl	8003980 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)spi_buf, 17, SPI_TIMEOUT);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	2314      	movs	r3, #20
 8001386:	2211      	movs	r2, #17
 8001388:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <_ZN6Tm16385clearEv+0x70>)
 800138a:	f004 fa5c 	bl	8005846 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6858      	ldr	r0, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	891b      	ldrh	r3, [r3, #8]
 8001396:	2201      	movs	r2, #1
 8001398:	4619      	mov	r1, r3
 800139a:	f002 faf1 	bl	8003980 <HAL_GPIO_WritePin>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000228 	.word	0x20000228

080013ac <_ZN6Tm163811writeCharToEhc>:

void Tm1638::writeCharTo(uint8_t pos, char val){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
  char result = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
  if(val >= '0' && val <= '9')
 80013c0:	78bb      	ldrb	r3, [r7, #2]
 80013c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80013c4:	d909      	bls.n	80013da <_ZN6Tm163811writeCharToEhc+0x2e>
 80013c6:	78bb      	ldrb	r3, [r7, #2]
 80013c8:	2b39      	cmp	r3, #57	@ 0x39
 80013ca:	d806      	bhi.n	80013da <_ZN6Tm163811writeCharToEhc+0x2e>
  {
    result = letterMap[0 + (val - '0')];
 80013cc:	78bb      	ldrb	r3, [r7, #2]
 80013ce:	3b30      	subs	r3, #48	@ 0x30
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	7d9b      	ldrb	r3, [r3, #22]
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e018      	b.n	800140c <_ZN6Tm163811writeCharToEhc+0x60>
  }
  else if(val >= 'a' && val <= 'z')
 80013da:	78bb      	ldrb	r3, [r7, #2]
 80013dc:	2b60      	cmp	r3, #96	@ 0x60
 80013de:	d909      	bls.n	80013f4 <_ZN6Tm163811writeCharToEhc+0x48>
 80013e0:	78bb      	ldrb	r3, [r7, #2]
 80013e2:	2b7a      	cmp	r3, #122	@ 0x7a
 80013e4:	d806      	bhi.n	80013f4 <_ZN6Tm163811writeCharToEhc+0x48>
  {
    result = letterMap[10 + (val - 'a')];
 80013e6:	78bb      	ldrb	r3, [r7, #2]
 80013e8:	3b57      	subs	r3, #87	@ 0x57
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	7d9b      	ldrb	r3, [r3, #22]
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e00b      	b.n	800140c <_ZN6Tm163811writeCharToEhc+0x60>
  }
  else if(val >= 'A' && val <= 'Z')
 80013f4:	78bb      	ldrb	r3, [r7, #2]
 80013f6:	2b40      	cmp	r3, #64	@ 0x40
 80013f8:	d908      	bls.n	800140c <_ZN6Tm163811writeCharToEhc+0x60>
 80013fa:	78bb      	ldrb	r3, [r7, #2]
 80013fc:	2b5a      	cmp	r3, #90	@ 0x5a
 80013fe:	d805      	bhi.n	800140c <_ZN6Tm163811writeCharToEhc+0x60>
  {
    result = letterMap[10 + (val - 'A')];
 8001400:	78bb      	ldrb	r3, [r7, #2]
 8001402:	3b37      	subs	r3, #55	@ 0x37
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	7d9b      	ldrb	r3, [r3, #22]
 800140a:	73fb      	strb	r3, [r7, #15]
  }
  writeTo(pos * 2, result);
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	4619      	mov	r1, r3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f8aa 	bl	8001570 <_ZN6Tm16387writeToEhh>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZN6Tm16388writeLedEhb>:

void Tm1638::writeLed(uint8_t pos, bool val)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
 8001430:	4613      	mov	r3, r2
 8001432:	70bb      	strb	r3, [r7, #2]
  writeTo(pos * 2 + 1, val ? 1 : 0);
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3301      	adds	r3, #1
 800143c:	b2d9      	uxtb	r1, r3
 800143e:	78bb      	ldrb	r3, [r7, #2]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <_ZN6Tm16388writeLedEhb+0x24>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <_ZN6Tm16388writeLedEhb+0x26>
 8001448:	2300      	movs	r3, #0
 800144a:	461a      	mov	r2, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f88f 	bl	8001570 <_ZN6Tm16387writeToEhh>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_ZN6Tm163810writeHexToEhhm>:

void Tm1638::writeHexTo(uint8_t startPos, uint8_t digits, uint32_t val){
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	72fb      	strb	r3, [r7, #11]
 8001468:	4613      	mov	r3, r2
 800146a:	72bb      	strb	r3, [r7, #10]
  while(digits != 0){
 800146c:	e012      	b.n	8001494 <_ZN6Tm163810writeHexToEhhm+0x3a>
    hexTo(2 * (startPos + digits - 1), val);
 800146e:	7afa      	ldrb	r2, [r7, #11]
 8001470:	7abb      	ldrb	r3, [r7, #10]
 8001472:	4413      	add	r3, r2
 8001474:	3b01      	subs	r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4619      	mov	r1, r3
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f8aa 	bl	80015dc <_ZN6Tm16385hexToEch>
    val = val >> 4;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	607b      	str	r3, [r7, #4]
    digits--;
 800148e:	7abb      	ldrb	r3, [r7, #10]
 8001490:	3b01      	subs	r3, #1
 8001492:	72bb      	strb	r3, [r7, #10]
  while(digits != 0){
 8001494:	7abb      	ldrb	r3, [r7, #10]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e9      	bne.n	800146e <_ZN6Tm163810writeHexToEhhm+0x14>
  }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN6Tm163811readButtonsEv>:
uint8_t Tm1638::readButtons(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  uint8_t readMode = 0x42;
 80014ac:	2342      	movs	r3, #66	@ 0x42
 80014ae:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6858      	ldr	r0, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	891b      	ldrh	r3, [r3, #8]
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	f002 fa60 	bl	8003980 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)&readMode, 1, SPI_TIMEOUT);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	f107 010f 	add.w	r1, r7, #15
 80014c8:	2314      	movs	r3, #20
 80014ca:	2201      	movs	r2, #1
 80014cc:	f004 f9bb 	bl	8005846 <HAL_SPI_Transmit>
  HAL_SPI_Receive(_spi, (uint8_t *)button_buf, 4, SPI_TIMEOUT);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	2314      	movs	r3, #20
 80014d6:	2204      	movs	r2, #4
 80014d8:	4914      	ldr	r1, [pc, #80]	@ (800152c <_ZN6Tm163811readButtonsEv+0x88>)
 80014da:	f004 faf7 	bl	8005acc <HAL_SPI_Receive>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6858      	ldr	r0, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	891b      	ldrh	r3, [r3, #8]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4619      	mov	r1, r3
 80014ea:	f002 fa49 	bl	8003980 <HAL_GPIO_WritePin>

  uint8_t result = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
  for(int i = 0; i < 4; i++){
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	e011      	b.n	800151c <_ZN6Tm163811readButtonsEv+0x78>
	  result |= ((button_buf[i] & 0x11) << i);
 80014f8:	4a0c      	ldr	r2, [pc, #48]	@ (800152c <_ZN6Tm163811readButtonsEv+0x88>)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	f003 0211 	and.w	r2, r3, #17
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	b25a      	sxtb	r2, r3
 800150c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001510:	4313      	orrs	r3, r2
 8001512:	b25b      	sxtb	r3, r3
 8001514:	75fb      	strb	r3, [r7, #23]
  for(int i = 0; i < 4; i++){
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	3301      	adds	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b03      	cmp	r3, #3
 8001520:	ddea      	ble.n	80014f8 <_ZN6Tm163811readButtonsEv+0x54>
  }
  return result;
 8001522:	7dfb      	ldrb	r3, [r7, #23]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000023c 	.word	0x2000023c

08001530 <_ZN6Tm16387setModeEPKh>:

// private

void Tm1638::setMode(const uint8_t *mode){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6858      	ldr	r0, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	891b      	ldrh	r3, [r3, #8]
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	f002 fa1b 	bl	8003980 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)mode, 1, SPI_TIMEOUT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	2314      	movs	r3, #20
 8001550:	2201      	movs	r2, #1
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	f004 f977 	bl	8005846 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6858      	ldr	r0, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	891b      	ldrh	r3, [r3, #8]
 8001560:	2201      	movs	r2, #1
 8001562:	4619      	mov	r1, r3
 8001564:	f002 fa0c 	bl	8003980 <HAL_GPIO_WritePin>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_ZN6Tm16387writeToEhh>:

void Tm1638::writeTo(uint8_t reg, uint8_t val){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
 800157c:	4613      	mov	r3, r2
 800157e:	70bb      	strb	r3, [r7, #2]
  setMode(&charOut);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3314      	adds	r3, #20
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffd2 	bl	8001530 <_ZN6Tm16387setModeEPKh>
  spi_buf[0] = startAddr | reg;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7d5a      	ldrb	r2, [r3, #21]
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	4313      	orrs	r3, r2
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <_ZN6Tm16387writeToEhh+0x68>)
 8001598:	701a      	strb	r2, [r3, #0]
  spi_buf[1] = val;
 800159a:	4a0f      	ldr	r2, [pc, #60]	@ (80015d8 <_ZN6Tm16387writeToEhh+0x68>)
 800159c:	78bb      	ldrb	r3, [r7, #2]
 800159e:	7053      	strb	r3, [r2, #1]

  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6858      	ldr	r0, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	891b      	ldrh	r3, [r3, #8]
 80015a8:	2200      	movs	r2, #0
 80015aa:	4619      	mov	r1, r3
 80015ac:	f002 f9e8 	bl	8003980 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)spi_buf, 2, SPI_TIMEOUT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	2314      	movs	r3, #20
 80015b6:	2202      	movs	r2, #2
 80015b8:	4907      	ldr	r1, [pc, #28]	@ (80015d8 <_ZN6Tm16387writeToEhh+0x68>)
 80015ba:	f004 f944 	bl	8005846 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6858      	ldr	r0, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	891b      	ldrh	r3, [r3, #8]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4619      	mov	r1, r3
 80015ca:	f002 f9d9 	bl	8003980 <HAL_GPIO_WritePin>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000228 	.word	0x20000228

080015dc <_ZN6Tm16385hexToEch>:

void Tm1638::hexTo(char pos, uint8_t val){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
 80015e8:	4613      	mov	r3, r2
 80015ea:	70bb      	strb	r3, [r7, #2]
  char result  = letterMap[val & 0x0F];
 80015ec:	78bb      	ldrb	r3, [r7, #2]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	7d9b      	ldrb	r3, [r3, #22]
 80015f8:	73fb      	strb	r3, [r7, #15]
  writeTo(pos, result);
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	4619      	mov	r1, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffb5 	bl	8001570 <_ZN6Tm16387writeToEhh>
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001622:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001624:	4a29      	ldr	r2, [pc, #164]	@ (80016cc <MX_ADC1_Init+0xbc>)
 8001626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001628:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001636:	2201      	movs	r2, #1
 8001638:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800163a:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 800163c:	2201      	movs	r2, #1
 800163e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001640:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 800164a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001652:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001660:	2202      	movs	r2, #2
 8001662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001672:	4815      	ldr	r0, [pc, #84]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001674:	f000 fdc2 	bl	80021fc <HAL_ADC_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800167e:	f000 f9eb 	bl	8001a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001682:	2301      	movs	r3, #1
 8001684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800168a:	2306      	movs	r3, #6
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 8001694:	f001 f80a 	bl	80026ac <HAL_ADC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800169e:	f000 f9db 	bl	8001a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <MX_ADC1_Init+0xb8>)
 80016b0:	f000 fffc 	bl	80026ac <HAL_ADC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80016ba:	f000 f9cd 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000240 	.word	0x20000240
 80016cc:	40012000 	.word	0x40012000

080016d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a33      	ldr	r2, [pc, #204]	@ (80017bc <HAL_ADC_MspInit+0xec>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d15f      	bne.n	80017b2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <HAL_ADC_MspInit+0xf0>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a31      	ldr	r2, [pc, #196]	@ (80017c0 <HAL_ADC_MspInit+0xf0>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <HAL_ADC_MspInit+0xf0>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_ADC_MspInit+0xf0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a2a      	ldr	r2, [pc, #168]	@ (80017c0 <HAL_ADC_MspInit+0xf0>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <HAL_ADC_MspInit+0xf0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY_Y_Pin|JOY_X_Pin;
 800172a:	2306      	movs	r3, #6
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172e:	2303      	movs	r3, #3
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4821      	ldr	r0, [pc, #132]	@ (80017c4 <HAL_ADC_MspInit+0xf4>)
 800173e:	f001 ff83 	bl	8003648 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001742:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 8001744:	4a21      	ldr	r2, [pc, #132]	@ (80017cc <HAL_ADC_MspInit+0xfc>)
 8001746:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 800174a:	2200      	movs	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001754:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800175a:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 800175c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001760:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 8001764:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001768:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 800176c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 8001774:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001778:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001786:	4810      	ldr	r0, [pc, #64]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 8001788:	f001 fb5c 	bl	8002e44 <HAL_DMA_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001792:	f000 f961 	bl	8001a58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a0b      	ldr	r2, [pc, #44]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 800179a:	639a      	str	r2, [r3, #56]	@ 0x38
 800179c:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <HAL_ADC_MspInit+0xf8>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2012      	movs	r0, #18
 80017a8:	f001 fb15 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017ac:	2012      	movs	r0, #18
 80017ae:	f001 fb2e 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	@ 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40012000 	.word	0x40012000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	20000288 	.word	0x20000288
 80017cc:	40026410 	.word	0x40026410

080017d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_DMA_Init+0x3c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a0b      	ldr	r2, [pc, #44]	@ (800180c <MX_DMA_Init+0x3c>)
 80017e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_DMA_Init+0x3c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2038      	movs	r0, #56	@ 0x38
 80017f8:	f001 faed 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017fc:	2038      	movs	r0, #56	@ 0x38
 80017fe:	f001 fb06 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b46      	ldr	r3, [pc, #280]	@ (8001944 <MX_GPIO_Init+0x134>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a45      	ldr	r2, [pc, #276]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b43      	ldr	r3, [pc, #268]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b3f      	ldr	r3, [pc, #252]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a3e      	ldr	r2, [pc, #248]	@ (8001944 <MX_GPIO_Init+0x134>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b3c      	ldr	r3, [pc, #240]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b38      	ldr	r3, [pc, #224]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a37      	ldr	r2, [pc, #220]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b35      	ldr	r3, [pc, #212]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a30      	ldr	r2, [pc, #192]	@ (8001944 <MX_GPIO_Init+0x134>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <MX_GPIO_Init+0x134>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800189c:	482a      	ldr	r0, [pc, #168]	@ (8001948 <MX_GPIO_Init+0x138>)
 800189e:	f002 f86f 	bl	8003980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TM_STB_GPIO_Port, TM_STB_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2140      	movs	r1, #64	@ 0x40
 80018a6:	4829      	ldr	r0, [pc, #164]	@ (800194c <MX_GPIO_Init+0x13c>)
 80018a8:	f002 f86a 	bl	8003980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f243 0104 	movw	r1, #12292	@ 0x3004
 80018b2:	4827      	ldr	r0, [pc, #156]	@ (8001950 <MX_GPIO_Init+0x140>)
 80018b4:	f002 f864 	bl	8003980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	481d      	ldr	r0, [pc, #116]	@ (8001948 <MX_GPIO_Init+0x138>)
 80018d2:	f001 feb9 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 80018d6:	2301      	movs	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018da:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4818      	ldr	r0, [pc, #96]	@ (800194c <MX_GPIO_Init+0x13c>)
 80018ec:	f001 feac 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TM_STB_Pin;
 80018f0:	2340      	movs	r3, #64	@ 0x40
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TM_STB_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4811      	ldr	r0, [pc, #68]	@ (800194c <MX_GPIO_Init+0x13c>)
 8001908:	f001 fe9e 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|NRF_CE_Pin|NRF_CSN_Pin;
 800190c:	f243 0304 	movw	r3, #12292	@ 0x3004
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	480a      	ldr	r0, [pc, #40]	@ (8001950 <MX_GPIO_Init+0x140>)
 8001926:	f001 fe8f 	bl	8003648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2006      	movs	r0, #6
 8001930:	f001 fa51 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001934:	2006      	movs	r0, #6
 8001936:	f001 fa6a 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	@ 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40020800 	.word	0x40020800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001958:	f000 fbba 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195c:	f000 f814 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001960:	f7ff ff56 	bl	8001810 <MX_GPIO_Init>
  MX_DMA_Init();
 8001964:	f7ff ff34 	bl	80017d0 <MX_DMA_Init>
  MX_SPI2_Init();
 8001968:	f000 f8b4 	bl	8001ad4 <MX_SPI2_Init>
  MX_SPI1_Init();
 800196c:	f000 f87a 	bl	8001a64 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001970:	f7ff fe4e 	bl	8001610 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001974:	f000 fae8 	bl	8001f48 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001978:	f009 fd20 	bl	800b3bc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800197c:	f000 fa5a 	bl	8001e34 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  EventLoopC();
 8001980:	f7fe feee 	bl	8000760 <EventLoopC>

  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <main+0x30>

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2230      	movs	r2, #48	@ 0x30
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f00a fb04 	bl	800bfa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <SystemClock_Config+0xc8>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	4a26      	ldr	r2, [pc, #152]	@ (8001a50 <SystemClock_Config+0xc8>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80019bc:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <SystemClock_Config+0xc8>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <SystemClock_Config+0xcc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a20      	ldr	r2, [pc, #128]	@ (8001a54 <SystemClock_Config+0xcc>)
 80019d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <SystemClock_Config+0xcc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80019f8:	230f      	movs	r3, #15
 80019fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80019fc:	2390      	movs	r3, #144	@ 0x90
 80019fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a00:	2304      	movs	r3, #4
 8001a02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001a04:	2305      	movs	r3, #5
 8001a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fa39 	bl	8004e84 <HAL_RCC_OscConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a18:	f000 f81e 	bl	8001a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2101      	movs	r1, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 fc9b 	bl	8005374 <HAL_RCC_ClockConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a44:	f000 f808 	bl	8001a58 <Error_Handler>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3750      	adds	r7, #80	@ 0x50
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <Error_Handler+0x8>

08001a64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <MX_SPI1_Init+0x6c>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a78:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a86:	2202      	movs	r2, #2
 8001a88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a9a:	2230      	movs	r2, #48	@ 0x30
 8001a9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001ab2:	220a      	movs	r2, #10
 8001ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001ab8:	f003 fe3c 	bl	8005734 <HAL_SPI_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001ac2:	f7ff ffc9 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002e8 	.word	0x200002e8
 8001ad0:	40013000 	.word	0x40013000

08001ad4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001ada:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <MX_SPI2_Init+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ade:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b18:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001b20:	220a      	movs	r2, #10
 8001b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b24:	4804      	ldr	r0, [pc, #16]	@ (8001b38 <MX_SPI2_Init+0x64>)
 8001b26:	f003 fe05 	bl	8005734 <HAL_SPI_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b30:	f7ff ff92 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000340 	.word	0x20000340
 8001b3c:	40003800 	.word	0x40003800

08001b40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	@ 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a32      	ldr	r2, [pc, #200]	@ (8001c28 <HAL_SPI_MspInit+0xe8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12c      	bne.n	8001bbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	4b31      	ldr	r3, [pc, #196]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	4a30      	ldr	r2, [pc, #192]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001b6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b72:	4b2e      	ldr	r3, [pc, #184]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a29      	ldr	r2, [pc, #164]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TM_SCK_Pin|TM_MOSI_Pin;
 8001b9a:	23a0      	movs	r3, #160	@ 0xa0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001baa:	2305      	movs	r3, #5
 8001bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481e      	ldr	r0, [pc, #120]	@ (8001c30 <HAL_SPI_MspInit+0xf0>)
 8001bb6:	f001 fd47 	bl	8003648 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bba:	e031      	b.n	8001c20 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c34 <HAL_SPI_MspInit+0xf4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12c      	bne.n	8001c20 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a17      	ldr	r2, [pc, #92]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_SPI_MspInit+0xec>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 8001bfe:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c10:	2305      	movs	r3, #5
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <HAL_SPI_MspInit+0xf8>)
 8001c1c:	f001 fd14 	bl	8003648 <HAL_GPIO_Init>
}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	@ 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40013000 	.word	0x40013000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40003800 	.word	0x40003800
 8001c38:	40020400 	.word	0x40020400

08001c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_MspInit+0x4c>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c88 <HAL_MspInit+0x4c>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c52:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <HAL_MspInit+0x4c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <HAL_MspInit+0x4c>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <HAL_MspInit+0x4c>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_MspInit+0x4c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <NMI_Handler+0x4>

08001c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce2:	f000 fa47 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_BTN_Pin);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f001 fe60 	bl	80039b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <ADC_IRQHandler+0x10>)
 8001cfe:	f000 fac0 	bl	8002282 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000240 	.word	0x20000240

08001d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <TIM2_IRQHandler+0x10>)
 8001d12:	f004 fb8f 	bl	8006434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000039c 	.word	0x2000039c

08001d20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <USART1_IRQHandler+0x10>)
 8001d26:	f005 f8eb 	bl	8006f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200003e4 	.word	0x200003e4

08001d34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <DMA2_Stream0_IRQHandler+0x10>)
 8001d3a:	f001 fa1b 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000288 	.word	0x20000288

08001d48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <OTG_FS_IRQHandler+0x10>)
 8001d4e:	f001 ff8d 	bl	8003c6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20001910 	.word	0x20001910

08001d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_kill>:

int _kill(int pid, int sig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d76:	f00a f971 	bl	800c05c <__errno>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_exit>:

void _exit (int status)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffe7 	bl	8001d6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <_exit+0x12>
	...

08001da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dac:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <_sbrk+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <_sbrk+0x60>)
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <_sbrk+0x64>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	@ (8001e0c <_sbrk+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d207      	bcs.n	8001de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd4:	f00a f942 	bl	800c05c <__errno>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	220c      	movs	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	e009      	b.n	8001df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dea:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <_sbrk+0x64>)
 8001df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20020000 	.word	0x20020000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	20000398 	.word	0x20000398
 8001e0c:	20002160 	.word	0x20002160

08001e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <SystemInit+0x20>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1a:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <SystemInit+0x20>)
 8001e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	@ 0x30
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e60:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001e62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001e6a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001e6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001e78:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001e7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e8a:	481b      	ldr	r0, [pc, #108]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001e8c:	f004 fa28 	bl	80062e0 <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001e96:	f7ff fddf 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4814      	ldr	r0, [pc, #80]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001ea8:	f004 fbb4 	bl	8006614 <HAL_TIM_ConfigClockSource>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001eb2:	f7ff fdd1 	bl	8001a58 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001ec6:	f004 fc6c 	bl	80067a2 <HAL_TIM_SlaveConfigSynchro>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ed0:	f7ff fdc2 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_TIM2_Init+0xc4>)
 8001ee2:	f004 fe8b 	bl	8006bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001eec:	f7ff fdb4 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3730      	adds	r7, #48	@ 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	2000039c 	.word	0x2000039c

08001efc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f0c:	d115      	bne.n	8001f3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_TIM_Base_MspInit+0x48>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <HAL_TIM_Base_MspInit+0x48>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1e:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <HAL_TIM_Base_MspInit+0x48>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	201c      	movs	r0, #28
 8001f30:	f000 ff51 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f34:	201c      	movs	r0, #28
 8001f36:	f000 ff6a 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800

08001f48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <MX_USART1_UART_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f80:	f004 febe 	bl	8006d00 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f7ff fd65 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200003e4 	.word	0x200003e4
 8001f98:	40011000 	.word	0x40011000

08001f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800206c <HAL_UART_MspInit+0xd0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d152      	bne.n	8002064 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a23      	ldr	r2, [pc, #140]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_UART_MspInit+0xd4>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002020:	2302      	movs	r3, #2
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002024:	2307      	movs	r3, #7
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4811      	ldr	r0, [pc, #68]	@ (8002074 <HAL_UART_MspInit+0xd8>)
 8002030:	f001 fb0a 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002034:	2308      	movs	r3, #8
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002044:	2307      	movs	r3, #7
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	480a      	ldr	r0, [pc, #40]	@ (8002078 <HAL_UART_MspInit+0xdc>)
 8002050:	f001 fafa 	bl	8003648 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	2025      	movs	r0, #37	@ 0x25
 800205a:	f000 febc 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800205e:	2025      	movs	r0, #37	@ 0x25
 8002060:	f000 fed5 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	@ 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40011000 	.word	0x40011000
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020400 	.word	0x40020400

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002080:	f7ff fec6 	bl	8001e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800209c:	4c0a      	ldr	r4, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020aa:	f009 ffdd 	bl	800c068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7ff fc51 	bl	8001954 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80020c0:	0800c260 	.word	0x0800c260
  ldr r2, =_sbss
 80020c4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80020c8:	20002160 	.word	0x20002160

080020cc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <DMA1_Stream0_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 fe61 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fd9a 	bl	8001c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fe79 	bl	8002e2a <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 fe41 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000014 	.word	0x20000014
 800216c:	2000001c 	.word	0x2000001c
 8002170:	20000018 	.word	0x20000018

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	2000001c 	.word	0x2000001c
 8002198:	2000042c 	.word	0x2000042c

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	2000042c 	.word	0x2000042c

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000001c 	.word	0x2000001c

080021fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e033      	b.n	800227a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fa58 	bl	80016d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d118      	bne.n	800226c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002242:	f023 0302 	bic.w	r3, r3, #2
 8002246:	f043 0202 	orr.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fb5e 	bl	8002910 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	@ 0x40
 800226a:	e001      	b.n	8002270 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d049      	beq.n	800234c <HAL_ADC_IRQHandler+0xca>
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d046      	beq.n	800234c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12b      	bne.n	800233c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d127      	bne.n	800233c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002304:	2b00      	cmp	r3, #0
 8002306:	d119      	bne.n	800233c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0220 	bic.w	r2, r2, #32
 8002316:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe f8cd 	bl	80004dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f06f 0212 	mvn.w	r2, #18
 800234a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d057      	beq.n	8002412 <HAL_ADC_IRQHandler+0x190>
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d054      	beq.n	8002412 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d139      	bne.n	8002402 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d12b      	bne.n	8002402 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d124      	bne.n	8002402 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d11d      	bne.n	8002402 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d119      	bne.n	8002402 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023dc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fc02 	bl	8002c0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 020c 	mvn.w	r2, #12
 8002410:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002420:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d017      	beq.n	8002458 <HAL_ADC_IRQHandler+0x1d6>
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d014      	beq.n	8002458 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10d      	bne.n	8002458 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f91b 	bl	8002684 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f06f 0201 	mvn.w	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002466:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_ADC_IRQHandler+0x218>
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002478:	f043 0202 	orr.w	r2, r3, #2
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0220 	mvn.w	r2, #32
 8002488:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f904 	bl	8002698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0220 	mvn.w	r2, #32
 8002498:	601a      	str	r2, [r3, #0]
  }
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_Start_DMA+0x1e>
 80024be:	2302      	movs	r3, #2
 80024c0:	e0ce      	b.n	8002660 <HAL_ADC_Start_DMA+0x1bc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d018      	beq.n	800250a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002668 <HAL_ADC_Start_DMA+0x1c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a5f      	ldr	r2, [pc, #380]	@ (800266c <HAL_ADC_Start_DMA+0x1c8>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0c9a      	lsrs	r2, r3, #18
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024fc:	e002      	b.n	8002504 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	3b01      	subs	r3, #1
 8002502:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f9      	bne.n	80024fe <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002518:	d107      	bne.n	800252a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002528:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	f040 8086 	bne.w	8002646 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002564:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002578:	d106      	bne.n	8002588 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f023 0206 	bic.w	r2, r3, #6
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44
 8002586:	e002      	b.n	800258e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002596:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <HAL_ADC_Start_DMA+0x1cc>)
 8002598:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259e:	4a35      	ldr	r2, [pc, #212]	@ (8002674 <HAL_ADC_Start_DMA+0x1d0>)
 80025a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a6:	4a34      	ldr	r2, [pc, #208]	@ (8002678 <HAL_ADC_Start_DMA+0x1d4>)
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ae:	4a33      	ldr	r2, [pc, #204]	@ (800267c <HAL_ADC_Start_DMA+0x1d8>)
 80025b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025ca:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025da:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	334c      	adds	r3, #76	@ 0x4c
 80025e6:	4619      	mov	r1, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f000 fcd8 	bl	8002fa0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10f      	bne.n	800261c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d129      	bne.n	800265e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	e020      	b.n	800265e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a17      	ldr	r2, [pc, #92]	@ (8002680 <HAL_ADC_Start_DMA+0x1dc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d11b      	bne.n	800265e <HAL_ADC_Start_DMA+0x1ba>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d114      	bne.n	800265e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	e00b      	b.n	800265e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000014 	.word	0x20000014
 800266c:	431bde83 	.word	0x431bde83
 8002670:	40012300 	.word	0x40012300
 8002674:	08002b09 	.word	0x08002b09
 8002678:	08002bc3 	.word	0x08002bc3
 800267c:	08002bdf 	.word	0x08002bdf
 8002680:	40012000 	.word	0x40012000

08002684 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e113      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x244>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	d925      	bls.n	8002724 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	3b1e      	subs	r3, #30
 80026ee:	2207      	movs	r2, #7
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43da      	mvns	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	400a      	ands	r2, r1
 80026fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68d9      	ldr	r1, [r3, #12]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	4603      	mov	r3, r0
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4403      	add	r3, r0
 8002716:	3b1e      	subs	r3, #30
 8002718:	409a      	lsls	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	e022      	b.n	800276a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	2207      	movs	r2, #7
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	400a      	ands	r2, r1
 8002746:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	4618      	mov	r0, r3
 800275a:	4603      	mov	r3, r0
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4403      	add	r3, r0
 8002760:	409a      	lsls	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b06      	cmp	r3, #6
 8002770:	d824      	bhi.n	80027bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b05      	subs	r3, #5
 8002784:	221f      	movs	r2, #31
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	400a      	ands	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b05      	subs	r3, #5
 80027ae:	fa00 f203 	lsl.w	r2, r0, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ba:	e04c      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	d824      	bhi.n	800280e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b23      	subs	r3, #35	@ 0x23
 80027d6:	221f      	movs	r2, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	3b23      	subs	r3, #35	@ 0x23
 8002800:	fa00 f203 	lsl.w	r2, r0, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
 800280c:	e023      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	3b41      	subs	r3, #65	@ 0x41
 8002820:	221f      	movs	r2, #31
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b41      	subs	r3, #65	@ 0x41
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002856:	4b29      	ldr	r3, [pc, #164]	@ (80028fc <HAL_ADC_ConfigChannel+0x250>)
 8002858:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a28      	ldr	r2, [pc, #160]	@ (8002900 <HAL_ADC_ConfigChannel+0x254>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10f      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1d8>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b12      	cmp	r3, #18
 800286a:	d10b      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1d      	ldr	r2, [pc, #116]	@ (8002900 <HAL_ADC_ConfigChannel+0x254>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d12b      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x23a>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <HAL_ADC_ConfigChannel+0x258>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d003      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b11      	cmp	r3, #17
 800289e:	d122      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_ADC_ConfigChannel+0x258>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d111      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028c2:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_ADC_ConfigChannel+0x25c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a11      	ldr	r2, [pc, #68]	@ (800290c <HAL_ADC_ConfigChannel+0x260>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	0c9a      	lsrs	r2, r3, #18
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028d8:	e002      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3b01      	subs	r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f9      	bne.n	80028da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40012300 	.word	0x40012300
 8002900:	40012000 	.word	0x40012000
 8002904:	10000012 	.word	0x10000012
 8002908:	20000014 	.word	0x20000014
 800290c:	431bde83 	.word	0x431bde83

08002910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002918:	4b79      	ldr	r3, [pc, #484]	@ (8002b00 <ADC_Init+0x1f0>)
 800291a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	021a      	lsls	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800298a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6899      	ldr	r1, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	4a58      	ldr	r2, [pc, #352]	@ (8002b04 <ADC_Init+0x1f4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e00f      	b.n	8002a0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0202 	bic.w	r2, r2, #2
 8002a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7e1b      	ldrb	r3, [r3, #24]
 8002a28:	005a      	lsls	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	3b01      	subs	r3, #1
 8002a68:	035a      	lsls	r2, r3, #13
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	e007      	b.n	8002a84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	051a      	lsls	r2, r3, #20
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ac6:	025a      	lsls	r2, r3, #9
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6899      	ldr	r1, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	029a      	lsls	r2, r3, #10
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40012300 	.word	0x40012300
 8002b04:	0f000001 	.word	0x0f000001

08002b08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d13c      	bne.n	8002b9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d12b      	bne.n	8002b94 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d127      	bne.n	8002b94 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d119      	bne.n	8002b94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0220 	bic.w	r2, r2, #32
 8002b6e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7fd fca1 	bl	80004dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b9a:	e00e      	b.n	8002bba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fd75 	bl	8002698 <HAL_ADC_ErrorCallback>
}
 8002bae:	e004      	b.n	8002bba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7fd fc79 	bl	80004c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2240      	movs	r2, #64	@ 0x40
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff fd4a 	bl	8002698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	@ (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db0a      	blt.n	8002cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	490c      	ldr	r1, [pc, #48]	@ (8002d0c <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce8:	e00a      	b.n	8002d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4908      	ldr	r1, [pc, #32]	@ (8002d10 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	761a      	strb	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	@ 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f1c3 0307 	rsb	r3, r3, #7
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	bf28      	it	cs
 8002d32:	2304      	movcs	r3, #4
 8002d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d902      	bls.n	8002d44 <NVIC_EncodePriority+0x30>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3b03      	subs	r3, #3
 8002d42:	e000      	b.n	8002d46 <NVIC_EncodePriority+0x32>
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
         );
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	@ 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f7ff ff8e 	bl	8002cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff29 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff3e 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff8e 	bl	8002d14 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5d 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff31 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff f9a4 	bl	800219c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e099      	b.n	8002f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e80:	e00f      	b.n	8002ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e82:	f7ff f98b 	bl	800219c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d908      	bls.n	8002ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e078      	b.n	8002f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e8      	bne.n	8002e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4b38      	ldr	r3, [pc, #224]	@ (8002f9c <HAL_DMA_Init+0x158>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d107      	bne.n	8002f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	4313      	orrs	r3, r2
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0307 	bic.w	r3, r3, #7
 8002f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d117      	bne.n	8002f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fb01 	bl	8003550 <DMA_CheckFifoParam>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	@ 0x40
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f62:	2301      	movs	r3, #1
 8002f64:	e016      	b.n	8002f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fab8 	bl	80034e4 <DMA_CalcBaseAndBitshift>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	223f      	movs	r2, #63	@ 0x3f
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	f010803f 	.word	0xf010803f

08002fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_Start_IT+0x26>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e040      	b.n	8003048 <HAL_DMA_Start_IT+0xa8>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d12f      	bne.n	800303a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fa4a 	bl	8003488 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	223f      	movs	r2, #63	@ 0x3f
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0216 	orr.w	r2, r2, #22
 800300e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0208 	orr.w	r2, r2, #8
 8003026:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e005      	b.n	8003046 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003046:	7dfb      	ldrb	r3, [r7, #23]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800305e:	f7ff f89d 	bl	800219c <HAL_GetTick>
 8003062:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d008      	beq.n	8003082 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e052      	b.n	8003128 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0216 	bic.w	r2, r2, #22
 8003090:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_DMA_Abort+0x62>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0208 	bic.w	r2, r2, #8
 80030c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d2:	e013      	b.n	80030fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030d4:	f7ff f862 	bl	800219c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b05      	cmp	r3, #5
 80030e0:	d90c      	bls.n	80030fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2203      	movs	r2, #3
 80030ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e015      	b.n	8003128 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e4      	bne.n	80030d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	223f      	movs	r2, #63	@ 0x3f
 8003110:	409a      	lsls	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d004      	beq.n	800314e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e00c      	b.n	8003168 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2205      	movs	r2, #5
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003180:	4b8e      	ldr	r3, [pc, #568]	@ (80033bc <HAL_DMA_IRQHandler+0x248>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a8e      	ldr	r2, [pc, #568]	@ (80033c0 <HAL_DMA_IRQHandler+0x24c>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0a9b      	lsrs	r3, r3, #10
 800318c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003192:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319e:	2208      	movs	r2, #8
 80031a0:	409a      	lsls	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01a      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031cc:	2208      	movs	r2, #8
 80031ce:	409a      	lsls	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d012      	beq.n	8003216 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320e:	f043 0202 	orr.w	r2, r3, #2
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	2204      	movs	r2, #4
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d012      	beq.n	800324c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	2204      	movs	r2, #4
 800323a:	409a      	lsls	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003250:	2210      	movs	r2, #16
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d043      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d03c      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326e:	2210      	movs	r2, #16
 8003270:	409a      	lsls	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d018      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d024      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e01f      	b.n	80032e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01b      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
 80032b4:	e016      	b.n	80032e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0208 	bic.w	r2, r2, #8
 80032d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e8:	2220      	movs	r2, #32
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 808f 	beq.w	8003414 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8087 	beq.w	8003414 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330a:	2220      	movs	r2, #32
 800330c:	409a      	lsls	r2, r3
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b05      	cmp	r3, #5
 800331c:	d136      	bne.n	800338c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0216 	bic.w	r2, r2, #22
 800332c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800333c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <HAL_DMA_IRQHandler+0x1da>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0208 	bic.w	r2, r2, #8
 800335c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	223f      	movs	r2, #63	@ 0x3f
 8003364:	409a      	lsls	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337e:	2b00      	cmp	r3, #0
 8003380:	d07e      	beq.n	8003480 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
        }
        return;
 800338a:	e079      	b.n	8003480 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01d      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d031      	beq.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
 80033b8:	e02c      	b.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
 80033ba:	bf00      	nop
 80033bc:	20000014 	.word	0x20000014
 80033c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d023      	beq.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
 80033d4:	e01e      	b.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0210 	bic.w	r2, r2, #16
 80033f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	2b00      	cmp	r3, #0
 800341a:	d032      	beq.n	8003482 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d022      	beq.n	800346e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2205      	movs	r2, #5
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3301      	adds	r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	429a      	cmp	r2, r3
 800344a:	d307      	bcc.n	800345c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f2      	bne.n	8003440 <HAL_DMA_IRQHandler+0x2cc>
 800345a:	e000      	b.n	800345e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800345c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
 800347e:	e000      	b.n	8003482 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003480:	bf00      	nop
    }
  }
}
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b40      	cmp	r3, #64	@ 0x40
 80034b4:	d108      	bne.n	80034c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034c6:	e007      	b.n	80034d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	3b10      	subs	r3, #16
 80034f4:	4a14      	ldr	r2, [pc, #80]	@ (8003548 <DMA_CalcBaseAndBitshift+0x64>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034fe:	4a13      	ldr	r2, [pc, #76]	@ (800354c <DMA_CalcBaseAndBitshift+0x68>)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d909      	bls.n	8003526 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	1d1a      	adds	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	659a      	str	r2, [r3, #88]	@ 0x58
 8003524:	e007      	b.n	8003536 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	aaaaaaab 	.word	0xaaaaaaab
 800354c:	0800c240 	.word	0x0800c240

08003550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11f      	bne.n	80035aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d856      	bhi.n	800361e <DMA_CheckFifoParam+0xce>
 8003570:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <DMA_CheckFifoParam+0x28>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	08003589 	.word	0x08003589
 800357c:	0800359b 	.word	0x0800359b
 8003580:	08003589 	.word	0x08003589
 8003584:	0800361f 	.word	0x0800361f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d046      	beq.n	8003622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003598:	e043      	b.n	8003622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035a2:	d140      	bne.n	8003626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a8:	e03d      	b.n	8003626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b2:	d121      	bne.n	80035f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d837      	bhi.n	800362a <DMA_CheckFifoParam+0xda>
 80035ba:	a201      	add	r2, pc, #4	@ (adr r2, 80035c0 <DMA_CheckFifoParam+0x70>)
 80035bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c0:	080035d1 	.word	0x080035d1
 80035c4:	080035d7 	.word	0x080035d7
 80035c8:	080035d1 	.word	0x080035d1
 80035cc:	080035e9 	.word	0x080035e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e030      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d025      	beq.n	800362e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e6:	e022      	b.n	800362e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035f0:	d11f      	bne.n	8003632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035f6:	e01c      	b.n	8003632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d903      	bls.n	8003606 <DMA_CheckFifoParam+0xb6>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d003      	beq.n	800360c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003604:	e018      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      break;
 800360a:	e015      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e00b      	b.n	8003636 <DMA_CheckFifoParam+0xe6>
      break;
 800361e:	bf00      	nop
 8003620:	e00a      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
 8003624:	e008      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003626:	bf00      	nop
 8003628:	e006      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
 800362c:	e004      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
 8003630:	e002      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;   
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <DMA_CheckFifoParam+0xe8>
      break;
 8003636:	bf00      	nop
    }
  } 
  
  return status; 
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	@ 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e159      	b.n	8003918 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003664:	2201      	movs	r2, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	f040 8148 	bne.w	8003912 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d005      	beq.n	800369a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003696:	2b02      	cmp	r3, #2
 8003698:	d130      	bne.n	80036fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 0201 	and.w	r2, r3, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b03      	cmp	r3, #3
 8003706:	d017      	beq.n	8003738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d123      	bne.n	800378c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3208      	adds	r2, #8
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0203 	and.w	r2, r3, #3
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80a2 	beq.w	8003912 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b57      	ldr	r3, [pc, #348]	@ (8003930 <HAL_GPIO_Init+0x2e8>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	4a56      	ldr	r2, [pc, #344]	@ (8003930 <HAL_GPIO_Init+0x2e8>)
 80037d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037de:	4b54      	ldr	r3, [pc, #336]	@ (8003930 <HAL_GPIO_Init+0x2e8>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ea:	4a52      	ldr	r2, [pc, #328]	@ (8003934 <HAL_GPIO_Init+0x2ec>)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	220f      	movs	r2, #15
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a49      	ldr	r2, [pc, #292]	@ (8003938 <HAL_GPIO_Init+0x2f0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d019      	beq.n	800384a <HAL_GPIO_Init+0x202>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a48      	ldr	r2, [pc, #288]	@ (800393c <HAL_GPIO_Init+0x2f4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_GPIO_Init+0x1fe>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a47      	ldr	r2, [pc, #284]	@ (8003940 <HAL_GPIO_Init+0x2f8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00d      	beq.n	8003842 <HAL_GPIO_Init+0x1fa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a46      	ldr	r2, [pc, #280]	@ (8003944 <HAL_GPIO_Init+0x2fc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d007      	beq.n	800383e <HAL_GPIO_Init+0x1f6>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a45      	ldr	r2, [pc, #276]	@ (8003948 <HAL_GPIO_Init+0x300>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_GPIO_Init+0x1f2>
 8003836:	2304      	movs	r3, #4
 8003838:	e008      	b.n	800384c <HAL_GPIO_Init+0x204>
 800383a:	2307      	movs	r3, #7
 800383c:	e006      	b.n	800384c <HAL_GPIO_Init+0x204>
 800383e:	2303      	movs	r3, #3
 8003840:	e004      	b.n	800384c <HAL_GPIO_Init+0x204>
 8003842:	2302      	movs	r3, #2
 8003844:	e002      	b.n	800384c <HAL_GPIO_Init+0x204>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_GPIO_Init+0x204>
 800384a:	2300      	movs	r3, #0
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	f002 0203 	and.w	r2, r2, #3
 8003852:	0092      	lsls	r2, r2, #2
 8003854:	4093      	lsls	r3, r2
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800385c:	4935      	ldr	r1, [pc, #212]	@ (8003934 <HAL_GPIO_Init+0x2ec>)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	3302      	adds	r3, #2
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800386a:	4b38      	ldr	r3, [pc, #224]	@ (800394c <HAL_GPIO_Init+0x304>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388e:	4a2f      	ldr	r2, [pc, #188]	@ (800394c <HAL_GPIO_Init+0x304>)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003894:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <HAL_GPIO_Init+0x304>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b8:	4a24      	ldr	r2, [pc, #144]	@ (800394c <HAL_GPIO_Init+0x304>)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038be:	4b23      	ldr	r3, [pc, #140]	@ (800394c <HAL_GPIO_Init+0x304>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038e2:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <HAL_GPIO_Init+0x304>)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e8:	4b18      	ldr	r3, [pc, #96]	@ (800394c <HAL_GPIO_Init+0x304>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800390c:	4a0f      	ldr	r2, [pc, #60]	@ (800394c <HAL_GPIO_Init+0x304>)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3301      	adds	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	f67f aea2 	bls.w	8003664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3724      	adds	r7, #36	@ 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	40013800 	.word	0x40013800
 8003938:	40020000 	.word	0x40020000
 800393c:	40020400 	.word	0x40020400
 8003940:	40020800 	.word	0x40020800
 8003944:	40020c00 	.word	0x40020c00
 8003948:	40021000 	.word	0x40021000
 800394c:	40013c00 	.word	0x40013c00

08003950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e001      	b.n	8003972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	807b      	strh	r3, [r7, #2]
 800398c:	4613      	mov	r3, r2
 800398e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003990:	787b      	ldrb	r3, [r7, #1]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800399c:	e003      	b.n	80039a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800399e:	887b      	ldrh	r3, [r7, #2]
 80039a0:	041a      	lsls	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	619a      	str	r2, [r3, #24]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039be:	4b08      	ldr	r3, [pc, #32]	@ (80039e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ca:	4a05      	ldr	r2, [pc, #20]	@ (80039e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc ffac 	bl	8000930 <HAL_GPIO_EXTI_Callback>
  }
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40013c00 	.word	0x40013c00

080039e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e101      	b.n	8003bfa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f007 fed9 	bl	800b7c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a24:	d102      	bne.n	8003a2c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f004 fad2 	bl	8007fda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7c1a      	ldrb	r2, [r3, #16]
 8003a3e:	f88d 2000 	strb.w	r2, [sp]
 8003a42:	3304      	adds	r3, #4
 8003a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a46:	f004 f9b1 	bl	8007dac <USB_CoreInit>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0ce      	b.n	8003bfa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 faca 	bl	8007ffc <USB_SetCurrentMode>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e0bf      	b.n	8003bfa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	e04a      	b.n	8003b16 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3315      	adds	r3, #21
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3314      	adds	r3, #20
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	b298      	uxth	r0, r3
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	332e      	adds	r3, #46	@ 0x2e
 8003abc:	4602      	mov	r2, r0
 8003abe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3318      	adds	r3, #24
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	331c      	adds	r3, #28
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	3320      	adds	r3, #32
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	3324      	adds	r3, #36	@ 0x24
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	3301      	adds	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	791b      	ldrb	r3, [r3, #4]
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d3af      	bcc.n	8003a80 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	e044      	b.n	8003bb0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	3301      	adds	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	791b      	ldrb	r3, [r3, #4]
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3b5      	bcc.n	8003b26 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	7c1a      	ldrb	r2, [r3, #16]
 8003bc2:	f88d 2000 	strb.w	r2, [sp]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bca:	f004 fa63 	bl	8008094 <USB_DevInit>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e00c      	b.n	8003bfa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f005 faa7 	bl	8009146 <USB_DevDisconnect>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_PCD_Start+0x1c>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e022      	b.n	8003c64 <HAL_PCD_Start+0x62>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 f9b4 	bl	8007fb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f005 fa55 	bl	8009104 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b08d      	sub	sp, #52	@ 0x34
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f005 fb13 	bl	80092ae <USB_GetMode>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f040 848c 	bne.w	80045a8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f005 fa77 	bl	8009188 <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8482 	beq.w	80045a6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f005 fa64 	bl	8009188 <USB_ReadInterrupts>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d107      	bne.n	8003cda <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f002 0202 	and.w	r2, r2, #2
 8003cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 fa52 	bl	8009188 <USB_ReadInterrupts>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d161      	bne.n	8003db2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0210 	bic.w	r2, r2, #16
 8003cfc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f003 020f 	and.w	r2, r3, #15
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	0c5b      	lsrs	r3, r3, #17
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d124      	bne.n	8003d74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d035      	beq.n	8003da2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	6a38      	ldr	r0, [r7, #32]
 8003d4a:	f005 f889 	bl	8008e60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d5a:	441a      	add	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d6c:	441a      	add	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	615a      	str	r2, [r3, #20]
 8003d72:	e016      	b.n	8003da2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	0c5b      	lsrs	r3, r3, #17
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	d110      	bne.n	8003da2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d86:	2208      	movs	r2, #8
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6a38      	ldr	r0, [r7, #32]
 8003d8c:	f005 f868 	bl	8008e60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d9c:	441a      	add	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0210 	orr.w	r2, r2, #16
 8003db0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f005 f9e6 	bl	8009188 <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dc6:	f040 80a7 	bne.w	8003f18 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f005 f9eb 	bl	80091ae <USB_ReadDevAllOutEpInterrupt>
 8003dd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003dda:	e099      	b.n	8003f10 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 808e 	beq.w	8003f04 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f005 fa0f 	bl	8009216 <USB_ReadDevOutEPInterrupt>
 8003df8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e10:	461a      	mov	r2, r3
 8003e12:	2301      	movs	r3, #1
 8003e14:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fea1 	bl	8004b60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00c      	beq.n	8003e42 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	2308      	movs	r3, #8
 8003e38:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 ff77 	bl	8004d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2310      	movs	r3, #16
 8003e5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d030      	beq.n	8003eca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e70:	2b80      	cmp	r3, #128	@ 0x80
 8003e72:	d109      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e86:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	78db      	ldrb	r3, [r3, #3]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d108      	bne.n	8003eb8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f007 fd84 	bl	800b9c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	3301      	adds	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f47f af62 	bne.w	8003ddc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f005 f933 	bl	8009188 <USB_ReadInterrupts>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f2c:	f040 80db 	bne.w	80040e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f005 f954 	bl	80091e2 <USB_ReadDevAllInEpInterrupt>
 8003f3a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003f40:	e0cd      	b.n	80040de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80c2 	beq.w	80040d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f005 f97a 	bl	8009252 <USB_ReadDevInEPInterrupt>
 8003f5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d057      	beq.n	800401a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2201      	movs	r2, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69f9      	ldr	r1, [r7, #28]
 8003f86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	799b      	ldrb	r3, [r3, #6]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d132      	bne.n	800400e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3320      	adds	r3, #32
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4403      	add	r3, r0
 8003fc8:	331c      	adds	r3, #28
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4419      	add	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4403      	add	r3, r0
 8003fdc:	3320      	adds	r3, #32
 8003fde:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d113      	bne.n	800400e <HAL_PCD_IRQHandler+0x3a2>
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3324      	adds	r3, #36	@ 0x24
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d108      	bne.n	800400e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004006:	461a      	mov	r2, r3
 8004008:	2101      	movs	r1, #1
 800400a:	f005 f981 	bl	8009310 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	b2db      	uxtb	r3, r3
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f007 fc58 	bl	800b8ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004030:	461a      	mov	r2, r3
 8004032:	2308      	movs	r3, #8
 8004034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404c:	461a      	mov	r2, r3
 800404e:	2310      	movs	r3, #16
 8004050:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004068:	461a      	mov	r2, r3
 800406a:	2340      	movs	r3, #64	@ 0x40
 800406c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d023      	beq.n	80040c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004078:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800407a:	6a38      	ldr	r0, [r7, #32]
 800407c:	f004 f96e 	bl	800835c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	3310      	adds	r3, #16
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4413      	add	r3, r2
 8004090:	3304      	adds	r3, #4
 8004092:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	78db      	ldrb	r3, [r3, #3]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d108      	bne.n	80040ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f007 fc9b 	bl	800b9e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ba:	461a      	mov	r2, r3
 80040bc:	2302      	movs	r3, #2
 80040be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fcbb 	bl	8004a48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	3301      	adds	r3, #1
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f47f af2e 	bne.w	8003f42 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f005 f84c 	bl	8009188 <USB_ReadInterrupts>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040fa:	d122      	bne.n	8004142 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004116:	2b01      	cmp	r3, #1
 8004118:	d108      	bne.n	800412c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004122:	2100      	movs	r1, #0
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fea1 	bl	8004e6c <HAL_PCDEx_LPM_Callback>
 800412a:	e002      	b.n	8004132 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f007 fc39 	bl	800b9a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f005 f81e 	bl	8009188 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004156:	d112      	bne.n	800417e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b01      	cmp	r3, #1
 8004166:	d102      	bne.n	800416e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f007 fbf5 	bl	800b958 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800417c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f005 f800 	bl	8009188 <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004192:	f040 80b7 	bne.w	8004304 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2110      	movs	r1, #16
 80041b0:	4618      	mov	r0, r3
 80041b2:	f004 f8d3 	bl	800835c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ba:	e046      	b.n	800424a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c8:	461a      	mov	r2, r3
 80041ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fc:	461a      	mov	r2, r3
 80041fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004202:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800421e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004222:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	440a      	add	r2, r1
 800423a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800423e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004242:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004246:	3301      	adds	r3, #1
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	791b      	ldrb	r3, [r3, #4]
 800424e:	461a      	mov	r2, r3
 8004250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004252:	4293      	cmp	r3, r2
 8004254:	d3b2      	bcc.n	80041bc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004264:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004268:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	7bdb      	ldrb	r3, [r3, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004282:	f043 030b 	orr.w	r3, r3, #11
 8004286:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004298:	f043 030b 	orr.w	r3, r3, #11
 800429c:	6453      	str	r3, [r2, #68]	@ 0x44
 800429e:	e015      	b.n	80042cc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80042b2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80042b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042c6:	f043 030b 	orr.w	r3, r3, #11
 80042ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ee:	461a      	mov	r2, r3
 80042f0:	f005 f80e 	bl	8009310 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f004 ff3d 	bl	8009188 <USB_ReadInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004318:	d123      	bne.n	8004362 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f004 ffd3 	bl	80092ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f004 f890 	bl	800844e <USB_GetDevSpeed>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681c      	ldr	r4, [r3, #0]
 800433a:	f001 f9c7 	bl	80056cc <HAL_RCC_GetHCLKFreq>
 800433e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004344:	461a      	mov	r2, r3
 8004346:	4620      	mov	r0, r4
 8004348:	f003 fd94 	bl	8007e74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f007 fae4 	bl	800b91a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004360:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f004 ff0e 	bl	8009188 <USB_ReadInterrupts>
 800436c:	4603      	mov	r3, r0
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d10a      	bne.n	800438c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f007 fac1 	bl	800b8fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f002 0208 	and.w	r2, r2, #8
 800438a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f004 fef9 	bl	8009188 <USB_ReadInterrupts>
 8004396:	4603      	mov	r3, r0
 8004398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439c:	2b80      	cmp	r3, #128	@ 0x80
 800439e:	d123      	bne.n	80043e8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ac:	2301      	movs	r3, #1
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b0:	e014      	b.n	80043dc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fb08 	bl	80049e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	3301      	adds	r3, #1
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	791b      	ldrb	r3, [r3, #4]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d3e4      	bcc.n	80043b2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f004 fecb 	bl	8009188 <USB_ReadInterrupts>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043fc:	d13c      	bne.n	8004478 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043fe:	2301      	movs	r3, #1
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
 8004402:	e02b      	b.n	800445c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3318      	adds	r3, #24
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d115      	bne.n	8004456 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800442a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800442c:	2b00      	cmp	r3, #0
 800442e:	da12      	bge.n	8004456 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	3317      	adds	r3, #23
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800444c:	b2db      	uxtb	r3, r3
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fac8 	bl	80049e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	3301      	adds	r3, #1
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	791b      	ldrb	r3, [r3, #4]
 8004460:	461a      	mov	r2, r3
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	4293      	cmp	r3, r2
 8004466:	d3cd      	bcc.n	8004404 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f004 fe83 	bl	8009188 <USB_ReadInterrupts>
 8004482:	4603      	mov	r3, r0
 8004484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004488:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800448c:	d156      	bne.n	800453c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800448e:	2301      	movs	r3, #1
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
 8004492:	e045      	b.n	8004520 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d12e      	bne.n	800451a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da2b      	bge.n	800451a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80044ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d121      	bne.n	800451a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004512:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004516:	6053      	str	r3, [r2, #4]
            break;
 8004518:	e008      	b.n	800452c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	3301      	adds	r3, #1
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	791b      	ldrb	r3, [r3, #4]
 8004524:	461a      	mov	r2, r3
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	4293      	cmp	r3, r2
 800452a:	d3b3      	bcc.n	8004494 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800453a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f004 fe21 	bl	8009188 <USB_ReadInterrupts>
 8004546:	4603      	mov	r3, r0
 8004548:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004550:	d10a      	bne.n	8004568 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f007 fa58 	bl	800ba08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f004 fe0b 	bl	8009188 <USB_ReadInterrupts>
 8004572:	4603      	mov	r3, r0
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b04      	cmp	r3, #4
 800457a:	d115      	bne.n	80045a8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f007 fa48 	bl	800ba24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	e000      	b.n	80045a8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80045a6:	bf00      	nop
    }
  }
}
 80045a8:	3734      	adds	r7, #52	@ 0x34
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd90      	pop	{r4, r7, pc}

080045ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_PCD_SetAddress+0x1a>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e012      	b.n	80045ee <HAL_PCD_SetAddress+0x40>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f004 fd6a 	bl	80090b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	4608      	mov	r0, r1
 8004600:	4611      	mov	r1, r2
 8004602:	461a      	mov	r2, r3
 8004604:	4603      	mov	r3, r0
 8004606:	70fb      	strb	r3, [r7, #3]
 8004608:	460b      	mov	r3, r1
 800460a:	803b      	strh	r3, [r7, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004618:	2b00      	cmp	r3, #0
 800461a:	da0f      	bge.n	800463c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	f003 020f 	and.w	r2, r3, #15
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	3310      	adds	r3, #16
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	3304      	adds	r3, #4
 8004632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	705a      	strb	r2, [r3, #1]
 800463a:	e00f      	b.n	800465c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 020f 	and.w	r2, r3, #15
 8004642:	4613      	mov	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	3304      	adds	r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004668:	883a      	ldrh	r2, [r7, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	78ba      	ldrb	r2, [r7, #2]
 8004672:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004686:	78bb      	ldrb	r3, [r7, #2]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d102      	bne.n	8004692 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_PCD_EP_Open+0xaa>
 800469c:	2302      	movs	r3, #2
 800469e:	e00e      	b.n	80046be <HAL_PCD_EP_Open+0xc8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f003 fef2 	bl	8008498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80046bc:	7afb      	ldrb	r3, [r7, #11]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da0f      	bge.n	80046fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 020f 	and.w	r2, r3, #15
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	3310      	adds	r3, #16
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	3304      	adds	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	705a      	strb	r2, [r3, #1]
 80046f8:	e00f      	b.n	800471a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	3304      	adds	r3, #4
 8004712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_PCD_EP_Close+0x6e>
 8004730:	2302      	movs	r3, #2
 8004732:	e00e      	b.n	8004752 <HAL_PCD_EP_Close+0x8c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68f9      	ldr	r1, [r7, #12]
 8004742:	4618      	mov	r0, r3
 8004744:	f003 ff30 	bl	80085a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	460b      	mov	r3, r1
 8004768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800476a:	7afb      	ldrb	r3, [r7, #11]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2200      	movs	r2, #0
 8004794:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2200      	movs	r2, #0
 800479a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800479c:	7afb      	ldrb	r3, [r7, #11]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	799b      	ldrb	r3, [r3, #6]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d102      	bne.n	80047b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	799b      	ldrb	r3, [r3, #6]
 80047be:	461a      	mov	r2, r3
 80047c0:	6979      	ldr	r1, [r7, #20]
 80047c2:	f003 ffcd 	bl	8008760 <USB_EPStartXfer>

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	f003 020f 	and.w	r2, r3, #15
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	460b      	mov	r3, r1
 800480e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004810:	7afb      	ldrb	r3, [r7, #11]
 8004812:	f003 020f 	and.w	r2, r3, #15
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	3310      	adds	r3, #16
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	3304      	adds	r3, #4
 8004826:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2200      	movs	r2, #0
 8004838:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2201      	movs	r2, #1
 800483e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004840:	7afb      	ldrb	r3, [r7, #11]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	b2da      	uxtb	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	799b      	ldrb	r3, [r3, #6]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d102      	bne.n	800485a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	799b      	ldrb	r3, [r3, #6]
 8004862:	461a      	mov	r2, r3
 8004864:	6979      	ldr	r1, [r7, #20]
 8004866:	f003 ff7b 	bl	8008760 <USB_EPStartXfer>

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	7912      	ldrb	r2, [r2, #4]
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e04f      	b.n	8004932 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004896:	2b00      	cmp	r3, #0
 8004898:	da0f      	bge.n	80048ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	3310      	adds	r3, #16
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	705a      	strb	r2, [r3, #1]
 80048b8:	e00d      	b.n	80048d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	3304      	adds	r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_PCD_EP_SetStall+0x82>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e01d      	b.n	8004932 <HAL_PCD_EP_SetStall+0xbe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	4618      	mov	r0, r3
 8004906:	f004 fb03 	bl	8008f10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	7999      	ldrb	r1, [r3, #6]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004922:	461a      	mov	r2, r3
 8004924:	f004 fcf4 	bl	8009310 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	7912      	ldrb	r2, [r2, #4]
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e042      	b.n	80049de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da0f      	bge.n	8004980 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 020f 	and.w	r2, r3, #15
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	3310      	adds	r3, #16
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4413      	add	r3, r2
 8004974:	3304      	adds	r3, #4
 8004976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	705a      	strb	r2, [r3, #1]
 800497e:	e00f      	b.n	80049a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	3304      	adds	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_PCD_EP_ClrStall+0x86>
 80049bc:	2302      	movs	r3, #2
 80049be:	e00e      	b.n	80049de <HAL_PCD_EP_ClrStall+0xa4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f004 fb0c 	bl	8008fec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da0c      	bge.n	8004a14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	3310      	adds	r3, #16
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3304      	adds	r3, #4
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e00c      	b.n	8004a2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	f003 020f 	and.w	r2, r3, #15
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f004 f92b 	bl	8008c90 <USB_EPStopXfer>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	@ 0x28
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	3310      	adds	r3, #16
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d901      	bls.n	8004a80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e06b      	b.n	8004b58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d902      	bls.n	8004a9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	3303      	adds	r3, #3
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aa4:	e02a      	b.n	8004afc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d902      	bls.n	8004ac2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3303      	adds	r3, #3
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68d9      	ldr	r1, [r3, #12]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	4603      	mov	r3, r0
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	f004 f980 	bl	8008de4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	441a      	add	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d809      	bhi.n	8004b26 <PCD_WriteEmptyTxFifo+0xde>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d203      	bcs.n	8004b26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1bf      	bne.n	8004aa6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d811      	bhi.n	8004b56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	2201      	movs	r2, #1
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	6939      	ldr	r1, [r7, #16]
 8004b4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b52:	4013      	ands	r3, r2
 8004b54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	333c      	adds	r3, #60	@ 0x3c
 8004b78:	3304      	adds	r3, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	799b      	ldrb	r3, [r3, #6]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d17b      	bne.n	8004c8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d015      	beq.n	8004bcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4a61      	ldr	r2, [pc, #388]	@ (8004d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	f240 80b9 	bls.w	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80b3 	beq.w	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc8:	6093      	str	r3, [r2, #8]
 8004bca:	e0a7      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be2:	461a      	mov	r2, r3
 8004be4:	2320      	movs	r3, #32
 8004be6:	6093      	str	r3, [r2, #8]
 8004be8:	e098      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f040 8093 	bne.w	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8004d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d90f      	bls.n	8004c1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c14:	461a      	mov	r2, r3
 8004c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1a:	6093      	str	r3, [r2, #8]
 8004c1c:	e07e      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	3304      	adds	r3, #4
 8004c32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	0159      	lsls	r1, r3, #5
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	440b      	add	r3, r1
 8004c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4a:	1ad2      	subs	r2, r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d114      	bne.n	8004c80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	f004 fb50 	bl	8009310 <USB_EP0_OutStart>
 8004c70:	e006      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	441a      	add	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f006 fe04 	bl	800b894 <HAL_PCD_DataOutStageCallback>
 8004c8c:	e046      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4a26      	ldr	r2, [pc, #152]	@ (8004d2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d124      	bne.n	8004ce0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cac:	461a      	mov	r2, r3
 8004cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cb2:	6093      	str	r3, [r2, #8]
 8004cb4:	e032      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2320      	movs	r3, #32
 8004cd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f006 fddb 	bl	800b894 <HAL_PCD_DataOutStageCallback>
 8004cde:	e01d      	b.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d114      	bne.n	8004d10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	f004 fb00 	bl	8009310 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f006 fdbc 	bl	800b894 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	4f54300a 	.word	0x4f54300a
 8004d2c:	4f54310a 	.word	0x4f54310a

08004d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	333c      	adds	r3, #60	@ 0x3c
 8004d48:	3304      	adds	r3, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a15      	ldr	r2, [pc, #84]	@ (8004db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d90e      	bls.n	8004d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f006 fd73 	bl	800b870 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d90c      	bls.n	8004dac <PCD_EP_OutSetupPacket_int+0x7c>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	799b      	ldrb	r3, [r3, #6]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d108      	bne.n	8004dac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004da4:	461a      	mov	r2, r3
 8004da6:	2101      	movs	r1, #1
 8004da8:	f004 fab2 	bl	8009310 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	4f54300a 	.word	0x4f54300a

08004dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dda:	883b      	ldrh	r3, [r7, #0]
 8004ddc:	0419      	lsls	r1, r3, #16
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004de8:	e028      	b.n	8004e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	4413      	add	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e00d      	b.n	8004e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	3340      	adds	r3, #64	@ 0x40
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	3301      	adds	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d3ec      	bcc.n	8004dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e24:	883b      	ldrh	r3, [r7, #0]
 8004e26:	0418      	lsls	r0, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6819      	ldr	r1, [r3, #0]
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4302      	orrs	r2, r0
 8004e34:	3340      	adds	r3, #64	@ 0x40
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	460b      	mov	r3, r1
 8004e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e267      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d075      	beq.n	8004f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ea2:	4b88      	ldr	r3, [pc, #544]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d00c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eae:	4b85      	ldr	r3, [pc, #532]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d112      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b82      	ldr	r3, [pc, #520]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x108>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d157      	bne.n	8004f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e242      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x74>
 8004eea:	4b76      	ldr	r3, [pc, #472]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a75      	ldr	r2, [pc, #468]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e01d      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x98>
 8004f02:	4b70      	ldr	r3, [pc, #448]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6f      	ldr	r2, [pc, #444]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6c      	ldr	r2, [pc, #432]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	4b69      	ldr	r3, [pc, #420]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a68      	ldr	r2, [pc, #416]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b66      	ldr	r3, [pc, #408]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a65      	ldr	r2, [pc, #404]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d013      	beq.n	8004f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd f92e 	bl	800219c <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fd f92a 	bl	800219c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	@ 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e207      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b5b      	ldr	r3, [pc, #364]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0xc0>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fd f91a 	bl	800219c <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fd f916 	bl	800219c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e1f3      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	4b51      	ldr	r3, [pc, #324]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0xe8>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d063      	beq.n	8005062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa6:	4b47      	ldr	r3, [pc, #284]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d11c      	bne.n	8004fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b44      	ldr	r3, [pc, #272]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d116      	bne.n	8004fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	4b41      	ldr	r3, [pc, #260]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x152>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e1c7      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4937      	ldr	r1, [pc, #220]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fea:	e03a      	b.n	8005062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff4:	4b34      	ldr	r3, [pc, #208]	@ (80050c8 <HAL_RCC_OscConfig+0x244>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fd f8cf 	bl	800219c <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005002:	f7fd f8cb 	bl	800219c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e1a8      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005014:	4b2b      	ldr	r3, [pc, #172]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005020:	4b28      	ldr	r3, [pc, #160]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4925      	ldr	r1, [pc, #148]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]
 8005034:	e015      	b.n	8005062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005036:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_RCC_OscConfig+0x244>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fd f8ae 	bl	800219c <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005044:	f7fd f8aa 	bl	800219c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e187      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	4b1b      	ldr	r3, [pc, #108]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d036      	beq.n	80050dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d016      	beq.n	80050a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005076:	4b15      	ldr	r3, [pc, #84]	@ (80050cc <HAL_RCC_OscConfig+0x248>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507c:	f7fd f88e 	bl	800219c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005084:	f7fd f88a 	bl	800219c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e167      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x200>
 80050a2:	e01b      	b.n	80050dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <HAL_RCC_OscConfig+0x248>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7fd f877 	bl	800219c <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b0:	e00e      	b.n	80050d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b2:	f7fd f873 	bl	800219c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d907      	bls.n	80050d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e150      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
 80050c4:	40023800 	.word	0x40023800
 80050c8:	42470000 	.word	0x42470000
 80050cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d0:	4b88      	ldr	r3, [pc, #544]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80050d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ea      	bne.n	80050b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8097 	beq.w	8005218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ee:	4b81      	ldr	r3, [pc, #516]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10f      	bne.n	800511a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	4b7d      	ldr	r3, [pc, #500]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	4a7c      	ldr	r2, [pc, #496]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005108:	6413      	str	r3, [r2, #64]	@ 0x40
 800510a:	4b7a      	ldr	r3, [pc, #488]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511a:	4b77      	ldr	r3, [pc, #476]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005126:	4b74      	ldr	r3, [pc, #464]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a73      	ldr	r2, [pc, #460]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005132:	f7fd f833 	bl	800219c <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fd f82f 	bl	800219c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e10c      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b6a      	ldr	r3, [pc, #424]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <HAL_RCC_OscConfig+0x2ea>
 8005160:	4b64      	ldr	r3, [pc, #400]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a63      	ldr	r2, [pc, #396]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
 800516c:	e01c      	b.n	80051a8 <HAL_RCC_OscConfig+0x324>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b05      	cmp	r3, #5
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x30c>
 8005176:	4b5f      	ldr	r3, [pc, #380]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517a:	4a5e      	ldr	r2, [pc, #376]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800517c:	f043 0304 	orr.w	r3, r3, #4
 8005180:	6713      	str	r3, [r2, #112]	@ 0x70
 8005182:	4b5c      	ldr	r3, [pc, #368]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a5b      	ldr	r2, [pc, #364]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	e00b      	b.n	80051a8 <HAL_RCC_OscConfig+0x324>
 8005190:	4b58      	ldr	r3, [pc, #352]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005194:	4a57      	ldr	r2, [pc, #348]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	6713      	str	r3, [r2, #112]	@ 0x70
 800519c:	4b55      	ldr	r3, [pc, #340]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a0:	4a54      	ldr	r2, [pc, #336]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0304 	bic.w	r3, r3, #4
 80051a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b0:	f7fc fff4 	bl	800219c <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f7fc fff0 	bl	800219c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e0cb      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	4b49      	ldr	r3, [pc, #292]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0ee      	beq.n	80051b8 <HAL_RCC_OscConfig+0x334>
 80051da:	e014      	b.n	8005206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051dc:	f7fc ffde 	bl	800219c <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e4:	f7fc ffda 	bl	800219c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e0b5      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fa:	4b3e      	ldr	r3, [pc, #248]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ee      	bne.n	80051e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d105      	bne.n	8005218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520c:	4b39      	ldr	r3, [pc, #228]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	4a38      	ldr	r2, [pc, #224]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005216:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a1 	beq.w	8005364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005222:	4b34      	ldr	r3, [pc, #208]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b08      	cmp	r3, #8
 800522c:	d05c      	beq.n	80052e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d141      	bne.n	80052ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005236:	4b31      	ldr	r3, [pc, #196]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fc ffae 	bl	800219c <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005244:	f7fc ffaa 	bl	800219c <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e087      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	4b27      	ldr	r3, [pc, #156]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	019b      	lsls	r3, r3, #6
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	3b01      	subs	r3, #1
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	491b      	ldr	r1, [pc, #108]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800528c:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005292:	f7fc ff83 	bl	800219c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800529a:	f7fc ff7f 	bl	800219c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e05c      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ac:	4b11      	ldr	r3, [pc, #68]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x416>
 80052b8:	e054      	b.n	8005364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	4b10      	ldr	r3, [pc, #64]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fc ff6c 	bl	800219c <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fc ff68 	bl	800219c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e045      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x444>
 80052e6:	e03d      	b.n	8005364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e038      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
 80052f4:	40023800 	.word	0x40023800
 80052f8:	40007000 	.word	0x40007000
 80052fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005300:	4b1b      	ldr	r3, [pc, #108]	@ (8005370 <HAL_RCC_OscConfig+0x4ec>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d028      	beq.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d121      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005326:	429a      	cmp	r2, r3
 8005328:	d11a      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	3b01      	subs	r3, #1
 800534a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d107      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800

08005374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0cc      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005388:	4b68      	ldr	r3, [pc, #416]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d90c      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b65      	ldr	r3, [pc, #404]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b63      	ldr	r3, [pc, #396]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0b8      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d020      	beq.n	80053fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c8:	4b59      	ldr	r3, [pc, #356]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a58      	ldr	r2, [pc, #352]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e0:	4b53      	ldr	r3, [pc, #332]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4a52      	ldr	r2, [pc, #328]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ec:	4b50      	ldr	r3, [pc, #320]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	494d      	ldr	r1, [pc, #308]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d044      	beq.n	8005494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	4b47      	ldr	r3, [pc, #284]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d119      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e07f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d003      	beq.n	8005432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	2b03      	cmp	r3, #3
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005432:	4b3f      	ldr	r3, [pc, #252]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e06f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005442:	4b3b      	ldr	r3, [pc, #236]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e067      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4b37      	ldr	r3, [pc, #220]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 0203 	bic.w	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4934      	ldr	r1, [pc, #208]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005464:	f7fc fe9a 	bl	800219c <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fc fe96 	bl	800219c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e04f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	4b2b      	ldr	r3, [pc, #172]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 020c 	and.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	429a      	cmp	r2, r3
 8005492:	d1eb      	bne.n	800546c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005494:	4b25      	ldr	r3, [pc, #148]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d20c      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b22      	ldr	r3, [pc, #136]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b20      	ldr	r3, [pc, #128]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e032      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c8:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4916      	ldr	r1, [pc, #88]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e6:	4b12      	ldr	r3, [pc, #72]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	490e      	ldr	r1, [pc, #56]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fa:	f000 f821 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 80054fe:	4602      	mov	r2, r0
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	091b      	lsrs	r3, r3, #4
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	490a      	ldr	r1, [pc, #40]	@ (8005534 <HAL_RCC_ClockConfig+0x1c0>)
 800550c:	5ccb      	ldrb	r3, [r1, r3]
 800550e:	fa22 f303 	lsr.w	r3, r2, r3
 8005512:	4a09      	ldr	r2, [pc, #36]	@ (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005516:	4b09      	ldr	r3, [pc, #36]	@ (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fc fdfa 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40023c00 	.word	0x40023c00
 8005530:	40023800 	.word	0x40023800
 8005534:	0800c228 	.word	0x0800c228
 8005538:	20000014 	.word	0x20000014
 800553c:	20000018 	.word	0x20000018

08005540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005544:	b090      	sub	sp, #64	@ 0x40
 8005546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
 800554c:	2300      	movs	r3, #0
 800554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005550:	2300      	movs	r3, #0
 8005552:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005558:	4b59      	ldr	r3, [pc, #356]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
 8005560:	2b08      	cmp	r3, #8
 8005562:	d00d      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x40>
 8005564:	2b08      	cmp	r3, #8
 8005566:	f200 80a1 	bhi.w	80056ac <HAL_RCC_GetSysClockFreq+0x16c>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0x34>
 800556e:	2b04      	cmp	r3, #4
 8005570:	d003      	beq.n	800557a <HAL_RCC_GetSysClockFreq+0x3a>
 8005572:	e09b      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b53      	ldr	r3, [pc, #332]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005576:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005578:	e09b      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557a:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800557c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800557e:	e098      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005580:	4b4f      	ldr	r3, [pc, #316]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005588:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558a:	4b4d      	ldr	r3, [pc, #308]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d028      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005596:	4b4a      	ldr	r3, [pc, #296]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	099b      	lsrs	r3, r3, #6
 800559c:	2200      	movs	r2, #0
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055a8:	2100      	movs	r1, #0
 80055aa:	4b47      	ldr	r3, [pc, #284]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055ac:	fb03 f201 	mul.w	r2, r3, r1
 80055b0:	2300      	movs	r3, #0
 80055b2:	fb00 f303 	mul.w	r3, r0, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	4a43      	ldr	r2, [pc, #268]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055ba:	fba0 1202 	umull	r1, r2, r0, r2
 80055be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c0:	460a      	mov	r2, r1
 80055c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80055c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055c6:	4413      	add	r3, r2
 80055c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055cc:	2200      	movs	r2, #0
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	61fa      	str	r2, [r7, #28]
 80055d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80055da:	f7fa fdfd 	bl	80001d8 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4613      	mov	r3, r2
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055e6:	e053      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e8:	4b35      	ldr	r3, [pc, #212]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	099b      	lsrs	r3, r3, #6
 80055ee:	2200      	movs	r2, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	617a      	str	r2, [r7, #20]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055fa:	f04f 0b00 	mov.w	fp, #0
 80055fe:	4652      	mov	r2, sl
 8005600:	465b      	mov	r3, fp
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f04f 0100 	mov.w	r1, #0
 800560a:	0159      	lsls	r1, r3, #5
 800560c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005610:	0150      	lsls	r0, r2, #5
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	ebb2 080a 	subs.w	r8, r2, sl
 800561a:	eb63 090b 	sbc.w	r9, r3, fp
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800562a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800562e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005632:	ebb2 0408 	subs.w	r4, r2, r8
 8005636:	eb63 0509 	sbc.w	r5, r3, r9
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	00eb      	lsls	r3, r5, #3
 8005644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005648:	00e2      	lsls	r2, r4, #3
 800564a:	4614      	mov	r4, r2
 800564c:	461d      	mov	r5, r3
 800564e:	eb14 030a 	adds.w	r3, r4, sl
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	eb45 030b 	adc.w	r3, r5, fp
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005666:	4629      	mov	r1, r5
 8005668:	028b      	lsls	r3, r1, #10
 800566a:	4621      	mov	r1, r4
 800566c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005670:	4621      	mov	r1, r4
 8005672:	028a      	lsls	r2, r1, #10
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567a:	2200      	movs	r2, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005684:	f7fa fda8 	bl	80001d8 <__aeabi_uldivmod>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4613      	mov	r3, r2
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	3301      	adds	r3, #1
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80056a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056aa:	e002      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80056ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3740      	adds	r7, #64	@ 0x40
 80056b8:	46bd      	mov	sp, r7
 80056ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	00f42400 	.word	0x00f42400
 80056c8:	017d7840 	.word	0x017d7840

080056cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d0:	4b03      	ldr	r3, [pc, #12]	@ (80056e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d2:	681b      	ldr	r3, [r3, #0]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000014 	.word	0x20000014

080056e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056e8:	f7ff fff0 	bl	80056cc <HAL_RCC_GetHCLKFreq>
 80056ec:	4602      	mov	r2, r0
 80056ee:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	0a9b      	lsrs	r3, r3, #10
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	4903      	ldr	r1, [pc, #12]	@ (8005708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056fa:	5ccb      	ldrb	r3, [r1, r3]
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005700:	4618      	mov	r0, r3
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40023800 	.word	0x40023800
 8005708:	0800c238 	.word	0x0800c238

0800570c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005710:	f7ff ffdc 	bl	80056cc <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b05      	ldr	r3, [pc, #20]	@ (800572c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0b5b      	lsrs	r3, r3, #13
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4903      	ldr	r1, [pc, #12]	@ (8005730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40023800 	.word	0x40023800
 8005730:	0800c238 	.word	0x0800c238

08005734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07b      	b.n	800583e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005756:	d009      	beq.n	800576c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	61da      	str	r2, [r3, #28]
 800575e:	e005      	b.n	800576c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fc f9da 	bl	8001b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f0:	ea42 0103 	orr.w	r1, r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	f003 0104 	and.w	r1, r3, #4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	f003 0210 	and.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800582c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b088      	sub	sp, #32
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_SPI_Transmit+0x22>
 8005864:	2302      	movs	r3, #2
 8005866:	e12d      	b.n	8005ac4 <HAL_SPI_Transmit+0x27e>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005870:	f7fc fc94 	bl	800219c <HAL_GetTick>
 8005874:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	d002      	beq.n	800588c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005886:	2302      	movs	r3, #2
 8005888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800588a:	e116      	b.n	8005aba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_SPI_Transmit+0x52>
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800589c:	e10d      	b.n	8005aba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2203      	movs	r2, #3
 80058a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e4:	d10f      	bne.n	8005906 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b40      	cmp	r3, #64	@ 0x40
 8005912:	d007      	beq.n	8005924 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800592c:	d14f      	bne.n	80059ce <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_SPI_Transmit+0xf6>
 8005936:	8afb      	ldrh	r3, [r7, #22]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d142      	bne.n	80059c2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	881a      	ldrh	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594c:	1c9a      	adds	r2, r3, #2
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005960:	e02f      	b.n	80059c2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d112      	bne.n	8005996 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005994:	e015      	b.n	80059c2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005996:	f7fc fc01 	bl	800219c <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d803      	bhi.n	80059ae <HAL_SPI_Transmit+0x168>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d102      	bne.n	80059b4 <HAL_SPI_Transmit+0x16e>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80059c0:	e07b      	b.n	8005aba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ca      	bne.n	8005962 <HAL_SPI_Transmit+0x11c>
 80059cc:	e050      	b.n	8005a70 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_SPI_Transmit+0x196>
 80059d6:	8afb      	ldrh	r3, [r7, #22]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d144      	bne.n	8005a66 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	7812      	ldrb	r2, [r2, #0]
 80059e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a02:	e030      	b.n	8005a66 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d113      	bne.n	8005a3a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	7812      	ldrb	r2, [r2, #0]
 8005a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a38:	e015      	b.n	8005a66 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a3a:	f7fc fbaf 	bl	800219c <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d803      	bhi.n	8005a52 <HAL_SPI_Transmit+0x20c>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d102      	bne.n	8005a58 <HAL_SPI_Transmit+0x212>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005a64:	e029      	b.n	8005aba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1c9      	bne.n	8005a04 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fbdf 	bl	8006238 <SPI_EndRxTxTransaction>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e003      	b.n	8005aba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005ac2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
 8005aee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005af0:	e0fb      	b.n	8005cea <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005afa:	d112      	bne.n	8005b22 <HAL_SPI_Receive+0x56>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10e      	bne.n	8005b22 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2204      	movs	r2, #4
 8005b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f8ef 	bl	8005cfc <HAL_SPI_TransmitReceive>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	e0e8      	b.n	8005cf4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_SPI_Receive+0x64>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e0e1      	b.n	8005cf4 <HAL_SPI_Receive+0x228>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b38:	f7fc fb30 	bl	800219c <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_Receive+0x7e>
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b4e:	e0cc      	b.n	8005cea <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2204      	movs	r2, #4
 8005b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b96:	d10f      	bne.n	8005bb8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bb6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc2:	2b40      	cmp	r3, #64	@ 0x40
 8005bc4:	d007      	beq.n	8005bd6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d16a      	bne.n	8005cb4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bde:	e032      	b.n	8005c46 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d115      	bne.n	8005c1a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f103 020c 	add.w	r2, r3, #12
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	7812      	ldrb	r2, [r2, #0]
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c18:	e015      	b.n	8005c46 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c1a:	f7fc fabf 	bl	800219c <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d803      	bhi.n	8005c32 <HAL_SPI_Receive+0x166>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d102      	bne.n	8005c38 <HAL_SPI_Receive+0x16c>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005c44:	e051      	b.n	8005cea <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1c7      	bne.n	8005be0 <HAL_SPI_Receive+0x114>
 8005c50:	e035      	b.n	8005cbe <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d113      	bne.n	8005c88 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	b292      	uxth	r2, r2
 8005c6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c86:	e015      	b.n	8005cb4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c88:	f7fc fa88 	bl	800219c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d803      	bhi.n	8005ca0 <HAL_SPI_Receive+0x1d4>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d102      	bne.n	8005ca6 <HAL_SPI_Receive+0x1da>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005cb2:	e01a      	b.n	8005cea <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1c9      	bne.n	8005c52 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fa52 	bl	800616c <SPI_EndRxTransaction>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]
 8005ce0:	e003      	b.n	8005cea <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08c      	sub	sp, #48	@ 0x30
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_SPI_TransmitReceive+0x26>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e198      	b.n	8006054 <HAL_SPI_TransmitReceive+0x358>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d2a:	f7fc fa37 	bl	800219c <HAL_GetTick>
 8005d2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d40:	887b      	ldrh	r3, [r7, #2]
 8005d42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d00f      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x70>
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d52:	d107      	bne.n	8005d64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <HAL_SPI_TransmitReceive+0x68>
 8005d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d003      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005d6a:	e16d      	b.n	8006048 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x82>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x82>
 8005d78:	887b      	ldrh	r3, [r7, #2]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005d84:	e160      	b.n	8006048 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d003      	beq.n	8005d9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2205      	movs	r2, #5
 8005d96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	887a      	ldrh	r2, [r7, #2]
 8005daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	887a      	ldrh	r2, [r7, #2]
 8005db0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	887a      	ldrh	r2, [r7, #2]
 8005dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	887a      	ldrh	r2, [r7, #2]
 8005dc2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dda:	2b40      	cmp	r3, #64	@ 0x40
 8005ddc:	d007      	beq.n	8005dee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df6:	d17c      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x10a>
 8005e00:	8b7b      	ldrh	r3, [r7, #26]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d16a      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0a:	881a      	ldrh	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e16:	1c9a      	adds	r2, r3, #2
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e2a:	e057      	b.n	8005edc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d11b      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x176>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d016      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x176>
 8005e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d113      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4e:	881a      	ldrh	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5a:	1c9a      	adds	r2, r3, #2
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d119      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x1b8>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d014      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	b292      	uxth	r2, r2
 8005e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	1c9a      	adds	r2, r3, #2
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005eb4:	f7fc f972 	bl	800219c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d80b      	bhi.n	8005edc <HAL_SPI_TransmitReceive+0x1e0>
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eca:	d007      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005eda:	e0b5      	b.n	8006048 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1a2      	bne.n	8005e2c <HAL_SPI_TransmitReceive+0x130>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d19d      	bne.n	8005e2c <HAL_SPI_TransmitReceive+0x130>
 8005ef0:	e080      	b.n	8005ff4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_SPI_TransmitReceive+0x204>
 8005efa:	8b7b      	ldrh	r3, [r7, #26]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d16f      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	7812      	ldrb	r2, [r2, #0]
 8005f0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f26:	e05b      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d11c      	bne.n	8005f70 <HAL_SPI_TransmitReceive+0x274>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d017      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x274>
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d114      	bne.n	8005f70 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	330c      	adds	r3, #12
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d119      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0x2b6>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d014      	beq.n	8005fb2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fb2:	f7fc f8f3 	bl	800219c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d803      	bhi.n	8005fca <HAL_SPI_TransmitReceive+0x2ce>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d102      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x2d4>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005fde:	e033      	b.n	8006048 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d19e      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x22c>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d199      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f91d 	bl	8006238 <SPI_EndRxTxTransaction>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d006      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006010:	e01a      	b.n	8006048 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800603e:	e003      	b.n	8006048 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006050:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006054:	4618      	mov	r0, r3
 8006056:	3730      	adds	r7, #48	@ 0x30
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800606c:	f7fc f896 	bl	800219c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	4413      	add	r3, r2
 800607a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800607c:	f7fc f88e 	bl	800219c <HAL_GetTick>
 8006080:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006082:	4b39      	ldr	r3, [pc, #228]	@ (8006168 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	015b      	lsls	r3, r3, #5
 8006088:	0d1b      	lsrs	r3, r3, #20
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	fb02 f303 	mul.w	r3, r2, r3
 8006090:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006092:	e054      	b.n	800613e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d050      	beq.n	800613e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800609c:	f7fc f87e 	bl	800219c <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d902      	bls.n	80060b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d13d      	bne.n	800612e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060ca:	d111      	bne.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d4:	d004      	beq.n	80060e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060de:	d107      	bne.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f8:	d10f      	bne.n	800611a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e017      	b.n	800615e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	3b01      	subs	r3, #1
 800613c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	bf0c      	ite	eq
 800614e:	2301      	moveq	r3, #1
 8006150:	2300      	movne	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	429a      	cmp	r2, r3
 800615a:	d19b      	bne.n	8006094 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000014 	.word	0x20000014

0800616c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006180:	d111      	bne.n	80061a6 <SPI_EndRxTransaction+0x3a>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800618a:	d004      	beq.n	8006196 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006194:	d107      	bne.n	80061a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061ae:	d12a      	bne.n	8006206 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b8:	d012      	beq.n	80061e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2180      	movs	r1, #128	@ 0x80
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff ff49 	bl	800605c <SPI_WaitFlagStateUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d02d      	beq.n	800622c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e026      	b.n	800622e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	2101      	movs	r1, #1
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff ff36 	bl	800605c <SPI_WaitFlagStateUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01a      	beq.n	800622c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fa:	f043 0220 	orr.w	r2, r3, #32
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e013      	b.n	800622e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2200      	movs	r2, #0
 800620e:	2101      	movs	r1, #1
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff ff23 	bl	800605c <SPI_WaitFlagStateUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006220:	f043 0220 	orr.w	r2, r3, #32
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e000      	b.n	800622e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2201      	movs	r2, #1
 800624c:	2102      	movs	r1, #2
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff ff04 	bl	800605c <SPI_WaitFlagStateUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	f043 0220 	orr.w	r2, r3, #32
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e032      	b.n	80062d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800626a:	4b1b      	ldr	r3, [pc, #108]	@ (80062d8 <SPI_EndRxTxTransaction+0xa0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1b      	ldr	r2, [pc, #108]	@ (80062dc <SPI_EndRxTxTransaction+0xa4>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	0d5b      	lsrs	r3, r3, #21
 8006276:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006288:	d112      	bne.n	80062b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	2180      	movs	r1, #128	@ 0x80
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fee1 	bl	800605c <SPI_WaitFlagStateUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d016      	beq.n	80062ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a4:	f043 0220 	orr.w	r2, r3, #32
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e00f      	b.n	80062d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c6:	2b80      	cmp	r3, #128	@ 0x80
 80062c8:	d0f2      	beq.n	80062b0 <SPI_EndRxTxTransaction+0x78>
 80062ca:	e000      	b.n	80062ce <SPI_EndRxTxTransaction+0x96>
        break;
 80062cc:	bf00      	nop
  }

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000014 	.word	0x20000014
 80062dc:	165e9f81 	.word	0x165e9f81

080062e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e041      	b.n	8006376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb fdf8 	bl	8001efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	4619      	mov	r1, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f000 fab4 	bl	800688c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	d001      	beq.n	8006398 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e03c      	b.n	8006412 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006420 <HAL_TIM_Base_Start+0xa0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d018      	beq.n	80063dc <HAL_TIM_Base_Start+0x5c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b2:	d013      	beq.n	80063dc <HAL_TIM_Base_Start+0x5c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006424 <HAL_TIM_Base_Start+0xa4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00e      	beq.n	80063dc <HAL_TIM_Base_Start+0x5c>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <HAL_TIM_Base_Start+0xa8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d009      	beq.n	80063dc <HAL_TIM_Base_Start+0x5c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a17      	ldr	r2, [pc, #92]	@ (800642c <HAL_TIM_Base_Start+0xac>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_TIM_Base_Start+0x5c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a16      	ldr	r2, [pc, #88]	@ (8006430 <HAL_TIM_Base_Start+0xb0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d111      	bne.n	8006400 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b06      	cmp	r3, #6
 80063ec:	d010      	beq.n	8006410 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fe:	e007      	b.n	8006410 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40010000 	.word	0x40010000
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40014000 	.word	0x40014000

08006434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d020      	beq.n	8006498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01b      	beq.n	8006498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0202 	mvn.w	r2, #2
 8006468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f9e5 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 8006484:	e005      	b.n	8006492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f9d7 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f9e8 	bl	8006862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d020      	beq.n	80064e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01b      	beq.n	80064e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0204 	mvn.w	r2, #4
 80064b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f9bf 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 80064d0:	e005      	b.n	80064de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f9b1 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9c2 	bl	8006862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d020      	beq.n	8006530 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01b      	beq.n	8006530 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0208 	mvn.w	r2, #8
 8006500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2204      	movs	r2, #4
 8006506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f999 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f98b 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f99c 	bl	8006862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	2b00      	cmp	r3, #0
 8006538:	d020      	beq.n	800657c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01b      	beq.n	800657c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0210 	mvn.w	r2, #16
 800654c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2208      	movs	r2, #8
 8006552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f973 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f965 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f976 	bl	8006862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00c      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0201 	mvn.w	r2, #1
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f943 	bl	8006826 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00c      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fb94 	bl	8006cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f947 	bl	8006876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0220 	mvn.w	r2, #32
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fb66 	bl	8006cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_TIM_ConfigClockSource+0x1c>
 800662c:	2302      	movs	r3, #2
 800662e:	e0b4      	b.n	800679a <HAL_TIM_ConfigClockSource+0x186>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800664e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006668:	d03e      	beq.n	80066e8 <HAL_TIM_ConfigClockSource+0xd4>
 800666a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800666e:	f200 8087 	bhi.w	8006780 <HAL_TIM_ConfigClockSource+0x16c>
 8006672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006676:	f000 8086 	beq.w	8006786 <HAL_TIM_ConfigClockSource+0x172>
 800667a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800667e:	d87f      	bhi.n	8006780 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b70      	cmp	r3, #112	@ 0x70
 8006682:	d01a      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0xa6>
 8006684:	2b70      	cmp	r3, #112	@ 0x70
 8006686:	d87b      	bhi.n	8006780 <HAL_TIM_ConfigClockSource+0x16c>
 8006688:	2b60      	cmp	r3, #96	@ 0x60
 800668a:	d050      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x11a>
 800668c:	2b60      	cmp	r3, #96	@ 0x60
 800668e:	d877      	bhi.n	8006780 <HAL_TIM_ConfigClockSource+0x16c>
 8006690:	2b50      	cmp	r3, #80	@ 0x50
 8006692:	d03c      	beq.n	800670e <HAL_TIM_ConfigClockSource+0xfa>
 8006694:	2b50      	cmp	r3, #80	@ 0x50
 8006696:	d873      	bhi.n	8006780 <HAL_TIM_ConfigClockSource+0x16c>
 8006698:	2b40      	cmp	r3, #64	@ 0x40
 800669a:	d058      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x13a>
 800669c:	2b40      	cmp	r3, #64	@ 0x40
 800669e:	d86f      	bhi.n	8006780 <HAL_TIM_ConfigClockSource+0x16c>
 80066a0:	2b30      	cmp	r3, #48	@ 0x30
 80066a2:	d064      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x15a>
 80066a4:	2b30      	cmp	r3, #48	@ 0x30
 80066a6:	d86b      	bhi.n	8006780 <HAL_TIM_ConfigClockSource+0x16c>
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d060      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x15a>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d867      	bhi.n	8006780 <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d05c      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x15a>
 80066b4:	2b10      	cmp	r3, #16
 80066b6:	d05a      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x15a>
 80066b8:	e062      	b.n	8006780 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066ca:	f000 fa76 	bl	8006bba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	609a      	str	r2, [r3, #8]
      break;
 80066e6:	e04f      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066f8:	f000 fa5f 	bl	8006bba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800670a:	609a      	str	r2, [r3, #8]
      break;
 800670c:	e03c      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671a:	461a      	mov	r2, r3
 800671c:	f000 f9d3 	bl	8006ac6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2150      	movs	r1, #80	@ 0x50
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fa2c 	bl	8006b84 <TIM_ITRx_SetConfig>
      break;
 800672c:	e02c      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673a:	461a      	mov	r2, r3
 800673c:	f000 f9f2 	bl	8006b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2160      	movs	r1, #96	@ 0x60
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fa1c 	bl	8006b84 <TIM_ITRx_SetConfig>
      break;
 800674c:	e01c      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	461a      	mov	r2, r3
 800675c:	f000 f9b3 	bl	8006ac6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2140      	movs	r1, #64	@ 0x40
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fa0c 	bl	8006b84 <TIM_ITRx_SetConfig>
      break;
 800676c:	e00c      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f000 fa03 	bl	8006b84 <TIM_ITRx_SetConfig>
      break;
 800677e:	e003      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	73fb      	strb	r3, [r7, #15]
      break;
 8006784:	e000      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_SlaveConfigSynchro+0x18>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e031      	b.n	800681e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f8e9 	bl	80069a4 <TIM_SlaveTimer_SetConfig>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e018      	b.n	800681e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067fa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800680a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a3a      	ldr	r2, [pc, #232]	@ (8006988 <TIM_Base_SetConfig+0xfc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00f      	beq.n	80068c4 <TIM_Base_SetConfig+0x38>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068aa:	d00b      	beq.n	80068c4 <TIM_Base_SetConfig+0x38>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a37      	ldr	r2, [pc, #220]	@ (800698c <TIM_Base_SetConfig+0x100>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_Base_SetConfig+0x38>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a36      	ldr	r2, [pc, #216]	@ (8006990 <TIM_Base_SetConfig+0x104>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_Base_SetConfig+0x38>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a35      	ldr	r2, [pc, #212]	@ (8006994 <TIM_Base_SetConfig+0x108>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d108      	bne.n	80068d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006988 <TIM_Base_SetConfig+0xfc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01b      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e4:	d017      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a28      	ldr	r2, [pc, #160]	@ (800698c <TIM_Base_SetConfig+0x100>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d013      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a27      	ldr	r2, [pc, #156]	@ (8006990 <TIM_Base_SetConfig+0x104>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00f      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a26      	ldr	r2, [pc, #152]	@ (8006994 <TIM_Base_SetConfig+0x108>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00b      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a25      	ldr	r2, [pc, #148]	@ (8006998 <TIM_Base_SetConfig+0x10c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a24      	ldr	r2, [pc, #144]	@ (800699c <TIM_Base_SetConfig+0x110>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d003      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a23      	ldr	r2, [pc, #140]	@ (80069a0 <TIM_Base_SetConfig+0x114>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d108      	bne.n	8006928 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800691c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a0e      	ldr	r2, [pc, #56]	@ (8006988 <TIM_Base_SetConfig+0xfc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d103      	bne.n	800695c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b01      	cmp	r3, #1
 800696c:	d105      	bne.n	800697a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f023 0201 	bic.w	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	611a      	str	r2, [r3, #16]
  }
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000
 800698c:	40000400 	.word	0x40000400
 8006990:	40000800 	.word	0x40000800
 8006994:	40000c00 	.word	0x40000c00
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800

080069a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f023 0307 	bic.w	r3, r3, #7
 80069d2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b70      	cmp	r3, #112	@ 0x70
 80069ec:	d01a      	beq.n	8006a24 <TIM_SlaveTimer_SetConfig+0x80>
 80069ee:	2b70      	cmp	r3, #112	@ 0x70
 80069f0:	d860      	bhi.n	8006ab4 <TIM_SlaveTimer_SetConfig+0x110>
 80069f2:	2b60      	cmp	r3, #96	@ 0x60
 80069f4:	d054      	beq.n	8006aa0 <TIM_SlaveTimer_SetConfig+0xfc>
 80069f6:	2b60      	cmp	r3, #96	@ 0x60
 80069f8:	d85c      	bhi.n	8006ab4 <TIM_SlaveTimer_SetConfig+0x110>
 80069fa:	2b50      	cmp	r3, #80	@ 0x50
 80069fc:	d046      	beq.n	8006a8c <TIM_SlaveTimer_SetConfig+0xe8>
 80069fe:	2b50      	cmp	r3, #80	@ 0x50
 8006a00:	d858      	bhi.n	8006ab4 <TIM_SlaveTimer_SetConfig+0x110>
 8006a02:	2b40      	cmp	r3, #64	@ 0x40
 8006a04:	d019      	beq.n	8006a3a <TIM_SlaveTimer_SetConfig+0x96>
 8006a06:	2b40      	cmp	r3, #64	@ 0x40
 8006a08:	d854      	bhi.n	8006ab4 <TIM_SlaveTimer_SetConfig+0x110>
 8006a0a:	2b30      	cmp	r3, #48	@ 0x30
 8006a0c:	d055      	beq.n	8006aba <TIM_SlaveTimer_SetConfig+0x116>
 8006a0e:	2b30      	cmp	r3, #48	@ 0x30
 8006a10:	d850      	bhi.n	8006ab4 <TIM_SlaveTimer_SetConfig+0x110>
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d051      	beq.n	8006aba <TIM_SlaveTimer_SetConfig+0x116>
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d84c      	bhi.n	8006ab4 <TIM_SlaveTimer_SetConfig+0x110>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d04d      	beq.n	8006aba <TIM_SlaveTimer_SetConfig+0x116>
 8006a1e:	2b10      	cmp	r3, #16
 8006a20:	d04b      	beq.n	8006aba <TIM_SlaveTimer_SetConfig+0x116>
 8006a22:	e047      	b.n	8006ab4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006a34:	f000 f8c1 	bl	8006bba <TIM_ETR_SetConfig>
      break;
 8006a38:	e040      	b.n	8006abc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b05      	cmp	r3, #5
 8006a40:	d101      	bne.n	8006a46 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e03b      	b.n	8006abe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a6c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	621a      	str	r2, [r3, #32]
      break;
 8006a8a:	e017      	b.n	8006abc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f000 f814 	bl	8006ac6 <TIM_TI1_ConfigInputStage>
      break;
 8006a9e:	e00d      	b.n	8006abc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aac:	461a      	mov	r2, r3
 8006aae:	f000 f839 	bl	8006b24 <TIM_TI2_ConfigInputStage>
      break;
 8006ab2:	e003      	b.n	8006abc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab8:	e000      	b.n	8006abc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006aba:	bf00      	nop
  }

  return status;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b087      	sub	sp, #28
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f023 0201 	bic.w	r2, r3, #1
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 030a 	bic.w	r3, r3, #10
 8006b02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	621a      	str	r2, [r3, #32]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f023 0210 	bic.w	r2, r3, #16
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	031b      	lsls	r3, r3, #12
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f043 0307 	orr.w	r3, r3, #7
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	609a      	str	r2, [r3, #8]
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b087      	sub	sp, #28
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	021a      	lsls	r2, r3, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	609a      	str	r2, [r3, #8]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e050      	b.n	8006cb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d018      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c60:	d013      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a18      	ldr	r2, [pc, #96]	@ (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00e      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a16      	ldr	r2, [pc, #88]	@ (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d009      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a15      	ldr	r2, [pc, #84]	@ (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d004      	beq.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a13      	ldr	r2, [pc, #76]	@ (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d10c      	bne.n	8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40014000 	.word	0x40014000

08006cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e042      	b.n	8006d98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fb f938 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2224      	movs	r2, #36	@ 0x24
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fdbd 	bl	80078c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695a      	ldr	r2, [r3, #20]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	@ 0x28
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d175      	bne.n	8006eac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_UART_Transmit+0x2c>
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e06e      	b.n	8006eae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2221      	movs	r2, #33	@ 0x21
 8006dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dde:	f7fb f9dd 	bl	800219c <HAL_GetTick>
 8006de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	88fa      	ldrh	r2, [r7, #6]
 8006de8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	88fa      	ldrh	r2, [r7, #6]
 8006dee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df8:	d108      	bne.n	8006e0c <HAL_UART_Transmit+0x6c>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	e003      	b.n	8006e14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e14:	e02e      	b.n	8006e74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2180      	movs	r1, #128	@ 0x80
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fb1f 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e03a      	b.n	8006eae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10b      	bne.n	8006e56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	3302      	adds	r3, #2
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	e007      	b.n	8006e66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	781a      	ldrb	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	3301      	adds	r3, #1
 8006e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1cb      	bne.n	8006e16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2140      	movs	r1, #64	@ 0x40
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 faeb 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e006      	b.n	8006eae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e000      	b.n	8006eae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006eac:	2302      	movs	r3, #2
  }
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d112      	bne.n	8006ef6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_UART_Receive_IT+0x26>
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e00b      	b.n	8006ef8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fb12 	bl	8007516 <UART_Start_Receive_IT>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	e000      	b.n	8006ef8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ef6:	2302      	movs	r3, #2
  }
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b0ba      	sub	sp, #232	@ 0xe8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10f      	bne.n	8006f66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <HAL_UART_IRQHandler+0x66>
 8006f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fbf2 	bl	8007748 <UART_Receive_IT>
      return;
 8006f64:	e25b      	b.n	800741e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80de 	beq.w	800712c <HAL_UART_IRQHandler+0x22c>
 8006f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80d1 	beq.w	800712c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <HAL_UART_IRQHandler+0xae>
 8006f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	f043 0201 	orr.w	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <HAL_UART_IRQHandler+0xd2>
 8006fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fca:	f043 0202 	orr.w	r2, r3, #2
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00b      	beq.n	8006ff6 <HAL_UART_IRQHandler+0xf6>
 8006fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fee:	f043 0204 	orr.w	r2, r3, #4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d011      	beq.n	8007026 <HAL_UART_IRQHandler+0x126>
 8007002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d105      	bne.n	800701a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800700e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701e:	f043 0208 	orr.w	r2, r3, #8
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 81f2 	beq.w	8007414 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <HAL_UART_IRQHandler+0x14e>
 800703c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fb7d 	bl	8007748 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007058:	2b40      	cmp	r3, #64	@ 0x40
 800705a:	bf0c      	ite	eq
 800705c:	2301      	moveq	r3, #1
 800705e:	2300      	movne	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <HAL_UART_IRQHandler+0x17a>
 8007072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007076:	2b00      	cmp	r3, #0
 8007078:	d04f      	beq.n	800711a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa85 	bl	800758a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708a:	2b40      	cmp	r3, #64	@ 0x40
 800708c:	d141      	bne.n	8007112 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3314      	adds	r3, #20
 8007094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3314      	adds	r3, #20
 80070b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1d9      	bne.n	800708e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d013      	beq.n	800710a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e6:	4a7e      	ldr	r2, [pc, #504]	@ (80072e0 <HAL_UART_IRQHandler+0x3e0>)
 80070e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fc f81e 	bl	8003130 <HAL_DMA_Abort_IT>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d016      	beq.n	8007128 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007108:	e00e      	b.n	8007128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f994 	bl	8007438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007110:	e00a      	b.n	8007128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f990 	bl	8007438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007118:	e006      	b.n	8007128 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f98c 	bl	8007438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007126:	e175      	b.n	8007414 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007128:	bf00      	nop
    return;
 800712a:	e173      	b.n	8007414 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	2b01      	cmp	r3, #1
 8007132:	f040 814f 	bne.w	80073d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713a:	f003 0310 	and.w	r3, r3, #16
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8148 	beq.w	80073d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8141 	beq.w	80073d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007152:	2300      	movs	r3, #0
 8007154:	60bb      	str	r3, [r7, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007172:	2b40      	cmp	r3, #64	@ 0x40
 8007174:	f040 80b6 	bne.w	80072e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007184:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8145 	beq.w	8007418 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007196:	429a      	cmp	r2, r3
 8007198:	f080 813e 	bcs.w	8007418 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ae:	f000 8088 	beq.w	80072c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	330c      	adds	r3, #12
 80071da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80071de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1d9      	bne.n	80071b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3314      	adds	r3, #20
 8007204:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800720e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007210:	f023 0301 	bic.w	r3, r3, #1
 8007214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3314      	adds	r3, #20
 800721e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007222:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007226:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800722a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e1      	bne.n	80071fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3314      	adds	r3, #20
 8007240:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800724a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800724c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3314      	adds	r3, #20
 800725a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800725e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007260:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007264:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800726c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e3      	bne.n	800723a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007292:	f023 0310 	bic.w	r3, r3, #16
 8007296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	330c      	adds	r3, #12
 80072a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e3      	bne.n	8007280 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fb fec7 	bl	8003050 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2202      	movs	r2, #2
 80072c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f8b7 	bl	800744c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072de:	e09b      	b.n	8007418 <HAL_UART_IRQHandler+0x518>
 80072e0:	08007651 	.word	0x08007651
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 808e 	beq.w	800741c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8089 	beq.w	800741c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	330c      	adds	r3, #12
 8007310:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007320:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800732e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007330:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800733c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e3      	bne.n	800730a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	623b      	str	r3, [r7, #32]
   return(result);
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3314      	adds	r3, #20
 8007362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007366:	633a      	str	r2, [r7, #48]	@ 0x30
 8007368:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800736c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e3      	bne.n	8007342 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	60fb      	str	r3, [r7, #12]
   return(result);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0310 	bic.w	r3, r3, #16
 800739e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80073ac:	61fa      	str	r2, [r7, #28]
 80073ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	69b9      	ldr	r1, [r7, #24]
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	617b      	str	r3, [r7, #20]
   return(result);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e3      	bne.n	8007388 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f83d 	bl	800744c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073d2:	e023      	b.n	800741c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d009      	beq.n	80073f4 <HAL_UART_IRQHandler+0x4f4>
 80073e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f943 	bl	8007678 <UART_Transmit_IT>
    return;
 80073f2:	e014      	b.n	800741e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00e      	beq.n	800741e <HAL_UART_IRQHandler+0x51e>
 8007400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f983 	bl	8007718 <UART_EndTransmit_IT>
    return;
 8007412:	e004      	b.n	800741e <HAL_UART_IRQHandler+0x51e>
    return;
 8007414:	bf00      	nop
 8007416:	e002      	b.n	800741e <HAL_UART_IRQHandler+0x51e>
      return;
 8007418:	bf00      	nop
 800741a:	e000      	b.n	800741e <HAL_UART_IRQHandler+0x51e>
      return;
 800741c:	bf00      	nop
  }
}
 800741e:	37e8      	adds	r7, #232	@ 0xe8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007474:	e03b      	b.n	80074ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d037      	beq.n	80074ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747e:	f7fa fe8d 	bl	800219c <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	6a3a      	ldr	r2, [r7, #32]
 800748a:	429a      	cmp	r2, r3
 800748c:	d302      	bcc.n	8007494 <UART_WaitOnFlagUntilTimeout+0x30>
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e03a      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d023      	beq.n	80074ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b80      	cmp	r3, #128	@ 0x80
 80074aa:	d020      	beq.n	80074ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b40      	cmp	r3, #64	@ 0x40
 80074b0:	d01d      	beq.n	80074ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d116      	bne.n	80074ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f857 	bl	800758a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2208      	movs	r2, #8
 80074e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e00f      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4013      	ands	r3, r2
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	bf0c      	ite	eq
 80074fe:	2301      	moveq	r3, #1
 8007500:	2300      	movne	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	429a      	cmp	r2, r3
 800750a:	d0b4      	beq.n	8007476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	4613      	mov	r3, r2
 8007522:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	88fa      	ldrh	r2, [r7, #6]
 800752e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2222      	movs	r2, #34	@ 0x22
 8007540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d007      	beq.n	800755c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800755a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695a      	ldr	r2, [r3, #20]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0220 	orr.w	r2, r2, #32
 800757a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800758a:	b480      	push	{r7}
 800758c:	b095      	sub	sp, #84	@ 0x54
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	330c      	adds	r3, #12
 80075b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80075b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e5      	bne.n	8007592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3314      	adds	r3, #20
 80075cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f023 0301 	bic.w	r3, r3, #1
 80075dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3314      	adds	r3, #20
 80075e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d119      	bne.n	8007636 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	330c      	adds	r3, #12
 8007608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	60bb      	str	r3, [r7, #8]
   return(result);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f023 0310 	bic.w	r3, r3, #16
 8007618:	647b      	str	r3, [r7, #68]	@ 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007622:	61ba      	str	r2, [r7, #24]
 8007624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6979      	ldr	r1, [r7, #20]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	613b      	str	r3, [r7, #16]
   return(result);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e5      	bne.n	8007602 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007644:	bf00      	nop
 8007646:	3754      	adds	r7, #84	@ 0x54
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff fee4 	bl	8007438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b21      	cmp	r3, #33	@ 0x21
 800768a:	d13e      	bne.n	800770a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007694:	d114      	bne.n	80076c0 <UART_Transmit_IT+0x48>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d110      	bne.n	80076c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	1c9a      	adds	r2, r3, #2
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	621a      	str	r2, [r3, #32]
 80076be:	e008      	b.n	80076d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	1c59      	adds	r1, r3, #1
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6211      	str	r1, [r2, #32]
 80076ca:	781a      	ldrb	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29b      	uxth	r3, r3
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	4619      	mov	r1, r3
 80076e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10f      	bne.n	8007706 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007704:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
  }
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800772e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff fe73 	bl	8007424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08c      	sub	sp, #48	@ 0x30
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b22      	cmp	r3, #34	@ 0x22
 800775a:	f040 80ae 	bne.w	80078ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007766:	d117      	bne.n	8007798 <UART_Receive_IT+0x50>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d113      	bne.n	8007798 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007778:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007786:	b29a      	uxth	r2, r3
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007790:	1c9a      	adds	r2, r3, #2
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	629a      	str	r2, [r3, #40]	@ 0x28
 8007796:	e026      	b.n	80077e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077aa:	d007      	beq.n	80077bc <UART_Receive_IT+0x74>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <UART_Receive_IT+0x82>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	e008      	b.n	80077dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4619      	mov	r1, r3
 80077f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d15d      	bne.n	80078b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0220 	bic.w	r2, r2, #32
 8007808:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695a      	ldr	r2, [r3, #20]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0201 	bic.w	r2, r2, #1
 8007828:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783c:	2b01      	cmp	r3, #1
 800783e:	d135      	bne.n	80078ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	330c      	adds	r3, #12
 800784c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	613b      	str	r3, [r7, #16]
   return(result);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f023 0310 	bic.w	r3, r3, #16
 800785c:	627b      	str	r3, [r7, #36]	@ 0x24
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	330c      	adds	r3, #12
 8007864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007866:	623a      	str	r2, [r7, #32]
 8007868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	69f9      	ldr	r1, [r7, #28]
 800786c:	6a3a      	ldr	r2, [r7, #32]
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	61bb      	str	r3, [r7, #24]
   return(result);
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b10      	cmp	r3, #16
 8007886:	d10a      	bne.n	800789e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fdd1 	bl	800744c <HAL_UARTEx_RxEventCallback>
 80078aa:	e002      	b.n	80078b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7f8 fe1f 	bl	80004f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e002      	b.n	80078bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e000      	b.n	80078bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3730      	adds	r7, #48	@ 0x30
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078c8:	b0c0      	sub	sp, #256	@ 0x100
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e0:	68d9      	ldr	r1, [r3, #12]
 80078e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	ea40 0301 	orr.w	r3, r0, r1
 80078ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	431a      	orrs	r2, r3
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800791c:	f021 010c 	bic.w	r1, r1, #12
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800792a:	430b      	orrs	r3, r1
 800792c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800792e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793e:	6999      	ldr	r1, [r3, #24]
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	ea40 0301 	orr.w	r3, r0, r1
 800794a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800794c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	4b8f      	ldr	r3, [pc, #572]	@ (8007b90 <UART_SetConfig+0x2cc>)
 8007954:	429a      	cmp	r2, r3
 8007956:	d005      	beq.n	8007964 <UART_SetConfig+0xa0>
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	4b8d      	ldr	r3, [pc, #564]	@ (8007b94 <UART_SetConfig+0x2d0>)
 8007960:	429a      	cmp	r2, r3
 8007962:	d104      	bne.n	800796e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007964:	f7fd fed2 	bl	800570c <HAL_RCC_GetPCLK2Freq>
 8007968:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800796c:	e003      	b.n	8007976 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800796e:	f7fd feb9 	bl	80056e4 <HAL_RCC_GetPCLK1Freq>
 8007972:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007980:	f040 810c 	bne.w	8007b9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007988:	2200      	movs	r2, #0
 800798a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800798e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007992:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007996:	4622      	mov	r2, r4
 8007998:	462b      	mov	r3, r5
 800799a:	1891      	adds	r1, r2, r2
 800799c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800799e:	415b      	adcs	r3, r3
 80079a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079a6:	4621      	mov	r1, r4
 80079a8:	eb12 0801 	adds.w	r8, r2, r1
 80079ac:	4629      	mov	r1, r5
 80079ae:	eb43 0901 	adc.w	r9, r3, r1
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079c6:	4690      	mov	r8, r2
 80079c8:	4699      	mov	r9, r3
 80079ca:	4623      	mov	r3, r4
 80079cc:	eb18 0303 	adds.w	r3, r8, r3
 80079d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079d4:	462b      	mov	r3, r5
 80079d6:	eb49 0303 	adc.w	r3, r9, r3
 80079da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079f2:	460b      	mov	r3, r1
 80079f4:	18db      	adds	r3, r3, r3
 80079f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80079f8:	4613      	mov	r3, r2
 80079fa:	eb42 0303 	adc.w	r3, r2, r3
 80079fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a08:	f7f8 fbe6 	bl	80001d8 <__aeabi_uldivmod>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4b61      	ldr	r3, [pc, #388]	@ (8007b98 <UART_SetConfig+0x2d4>)
 8007a12:	fba3 2302 	umull	r2, r3, r3, r2
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	011c      	lsls	r4, r3, #4
 8007a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	1891      	adds	r1, r2, r2
 8007a32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a34:	415b      	adcs	r3, r3
 8007a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a42:	4649      	mov	r1, r9
 8007a44:	eb43 0b01 	adc.w	fp, r3, r1
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a5c:	4692      	mov	sl, r2
 8007a5e:	469b      	mov	fp, r3
 8007a60:	4643      	mov	r3, r8
 8007a62:	eb1a 0303 	adds.w	r3, sl, r3
 8007a66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	18db      	adds	r3, r3, r3
 8007a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a8e:	4613      	mov	r3, r2
 8007a90:	eb42 0303 	adc.w	r3, r2, r3
 8007a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a9e:	f7f8 fb9b 	bl	80001d8 <__aeabi_uldivmod>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8007b98 <UART_SetConfig+0x2d4>)
 8007aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	2264      	movs	r2, #100	@ 0x64
 8007ab2:	fb02 f303 	mul.w	r3, r2, r3
 8007ab6:	1acb      	subs	r3, r1, r3
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007abe:	4b36      	ldr	r3, [pc, #216]	@ (8007b98 <UART_SetConfig+0x2d4>)
 8007ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ac4:	095b      	lsrs	r3, r3, #5
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007acc:	441c      	add	r4, r3
 8007ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ad8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007adc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	1891      	adds	r1, r2, r2
 8007ae6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ae8:	415b      	adcs	r3, r3
 8007aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007af0:	4641      	mov	r1, r8
 8007af2:	1851      	adds	r1, r2, r1
 8007af4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007af6:	4649      	mov	r1, r9
 8007af8:	414b      	adcs	r3, r1
 8007afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b08:	4659      	mov	r1, fp
 8007b0a:	00cb      	lsls	r3, r1, #3
 8007b0c:	4651      	mov	r1, sl
 8007b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b12:	4651      	mov	r1, sl
 8007b14:	00ca      	lsls	r2, r1, #3
 8007b16:	4610      	mov	r0, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	189b      	adds	r3, r3, r2
 8007b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b24:	464b      	mov	r3, r9
 8007b26:	460a      	mov	r2, r1
 8007b28:	eb42 0303 	adc.w	r3, r2, r3
 8007b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b44:	460b      	mov	r3, r1
 8007b46:	18db      	adds	r3, r3, r3
 8007b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	eb42 0303 	adc.w	r3, r2, r3
 8007b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b5a:	f7f8 fb3d 	bl	80001d8 <__aeabi_uldivmod>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <UART_SetConfig+0x2d4>)
 8007b64:	fba3 1302 	umull	r1, r3, r3, r2
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	2164      	movs	r1, #100	@ 0x64
 8007b6c:	fb01 f303 	mul.w	r3, r1, r3
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	3332      	adds	r3, #50	@ 0x32
 8007b76:	4a08      	ldr	r2, [pc, #32]	@ (8007b98 <UART_SetConfig+0x2d4>)
 8007b78:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f003 0207 	and.w	r2, r3, #7
 8007b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4422      	add	r2, r4
 8007b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b8c:	e106      	b.n	8007d9c <UART_SetConfig+0x4d8>
 8007b8e:	bf00      	nop
 8007b90:	40011000 	.word	0x40011000
 8007b94:	40011400 	.word	0x40011400
 8007b98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007baa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007bae:	4642      	mov	r2, r8
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	1891      	adds	r1, r2, r2
 8007bb4:	6239      	str	r1, [r7, #32]
 8007bb6:	415b      	adcs	r3, r3
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bbe:	4641      	mov	r1, r8
 8007bc0:	1854      	adds	r4, r2, r1
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	eb43 0501 	adc.w	r5, r3, r1
 8007bc8:	f04f 0200 	mov.w	r2, #0
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	00eb      	lsls	r3, r5, #3
 8007bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bd6:	00e2      	lsls	r2, r4, #3
 8007bd8:	4614      	mov	r4, r2
 8007bda:	461d      	mov	r5, r3
 8007bdc:	4643      	mov	r3, r8
 8007bde:	18e3      	adds	r3, r4, r3
 8007be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007be4:	464b      	mov	r3, r9
 8007be6:	eb45 0303 	adc.w	r3, r5, r3
 8007bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007bfe:	f04f 0200 	mov.w	r2, #0
 8007c02:	f04f 0300 	mov.w	r3, #0
 8007c06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	008b      	lsls	r3, r1, #2
 8007c0e:	4621      	mov	r1, r4
 8007c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c14:	4621      	mov	r1, r4
 8007c16:	008a      	lsls	r2, r1, #2
 8007c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c1c:	f7f8 fadc 	bl	80001d8 <__aeabi_uldivmod>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4b60      	ldr	r3, [pc, #384]	@ (8007da8 <UART_SetConfig+0x4e4>)
 8007c26:	fba3 2302 	umull	r2, r3, r3, r2
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	011c      	lsls	r4, r3, #4
 8007c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	1891      	adds	r1, r2, r2
 8007c46:	61b9      	str	r1, [r7, #24]
 8007c48:	415b      	adcs	r3, r3
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c50:	4641      	mov	r1, r8
 8007c52:	1851      	adds	r1, r2, r1
 8007c54:	6139      	str	r1, [r7, #16]
 8007c56:	4649      	mov	r1, r9
 8007c58:	414b      	adcs	r3, r1
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c68:	4659      	mov	r1, fp
 8007c6a:	00cb      	lsls	r3, r1, #3
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c72:	4651      	mov	r1, sl
 8007c74:	00ca      	lsls	r2, r1, #3
 8007c76:	4610      	mov	r0, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	4642      	mov	r2, r8
 8007c7e:	189b      	adds	r3, r3, r2
 8007c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c84:	464b      	mov	r3, r9
 8007c86:	460a      	mov	r2, r1
 8007c88:	eb42 0303 	adc.w	r3, r2, r3
 8007c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ca8:	4649      	mov	r1, r9
 8007caa:	008b      	lsls	r3, r1, #2
 8007cac:	4641      	mov	r1, r8
 8007cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cb2:	4641      	mov	r1, r8
 8007cb4:	008a      	lsls	r2, r1, #2
 8007cb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007cba:	f7f8 fa8d 	bl	80001d8 <__aeabi_uldivmod>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	4b38      	ldr	r3, [pc, #224]	@ (8007da8 <UART_SetConfig+0x4e4>)
 8007cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	2264      	movs	r2, #100	@ 0x64
 8007cce:	fb02 f303 	mul.w	r3, r2, r3
 8007cd2:	1acb      	subs	r3, r1, r3
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	3332      	adds	r3, #50	@ 0x32
 8007cd8:	4a33      	ldr	r2, [pc, #204]	@ (8007da8 <UART_SetConfig+0x4e4>)
 8007cda:	fba2 2303 	umull	r2, r3, r2, r3
 8007cde:	095b      	lsrs	r3, r3, #5
 8007ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ce4:	441c      	add	r4, r3
 8007ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cea:	2200      	movs	r2, #0
 8007cec:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cee:	677a      	str	r2, [r7, #116]	@ 0x74
 8007cf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	1891      	adds	r1, r2, r2
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	415b      	adcs	r3, r3
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d04:	4641      	mov	r1, r8
 8007d06:	1851      	adds	r1, r2, r1
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	414b      	adcs	r3, r1
 8007d0e:	607b      	str	r3, [r7, #4]
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	00cb      	lsls	r3, r1, #3
 8007d20:	4651      	mov	r1, sl
 8007d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d26:	4651      	mov	r1, sl
 8007d28:	00ca      	lsls	r2, r1, #3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4642      	mov	r2, r8
 8007d32:	189b      	adds	r3, r3, r2
 8007d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d36:	464b      	mov	r3, r9
 8007d38:	460a      	mov	r2, r1
 8007d3a:	eb42 0303 	adc.w	r3, r2, r3
 8007d3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	f04f 0300 	mov.w	r3, #0
 8007d54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d58:	4649      	mov	r1, r9
 8007d5a:	008b      	lsls	r3, r1, #2
 8007d5c:	4641      	mov	r1, r8
 8007d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d62:	4641      	mov	r1, r8
 8007d64:	008a      	lsls	r2, r1, #2
 8007d66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d6a:	f7f8 fa35 	bl	80001d8 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4b0d      	ldr	r3, [pc, #52]	@ (8007da8 <UART_SetConfig+0x4e4>)
 8007d74:	fba3 1302 	umull	r1, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	2164      	movs	r1, #100	@ 0x64
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	3332      	adds	r3, #50	@ 0x32
 8007d86:	4a08      	ldr	r2, [pc, #32]	@ (8007da8 <UART_SetConfig+0x4e4>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	f003 020f 	and.w	r2, r3, #15
 8007d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4422      	add	r2, r4
 8007d9a:	609a      	str	r2, [r3, #8]
}
 8007d9c:	bf00      	nop
 8007d9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007da2:	46bd      	mov	sp, r7
 8007da4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007da8:	51eb851f 	.word	0x51eb851f

08007dac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dac:	b084      	sub	sp, #16
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	f107 001c 	add.w	r0, r7, #28
 8007dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d123      	bne.n	8007e0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d105      	bne.n	8007e02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fae2 	bl	80093cc <USB_CoreReset>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
 8007e0c:	e01b      	b.n	8007e46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fad6 	bl	80093cc <USB_CoreReset>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e38:	e005      	b.n	8007e46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e46:	7fbb      	ldrb	r3, [r7, #30]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d10b      	bne.n	8007e64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f043 0206 	orr.w	r2, r3, #6
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f043 0220 	orr.w	r2, r3, #32
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e70:	b004      	add	sp, #16
 8007e72:	4770      	bx	lr

08007e74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d165      	bne.n	8007f54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	4a41      	ldr	r2, [pc, #260]	@ (8007f90 <USB_SetTurnaroundTime+0x11c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d906      	bls.n	8007e9e <USB_SetTurnaroundTime+0x2a>
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	4a40      	ldr	r2, [pc, #256]	@ (8007f94 <USB_SetTurnaroundTime+0x120>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d202      	bcs.n	8007e9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e98:	230f      	movs	r3, #15
 8007e9a:	617b      	str	r3, [r7, #20]
 8007e9c:	e062      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8007f94 <USB_SetTurnaroundTime+0x120>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d306      	bcc.n	8007eb4 <USB_SetTurnaroundTime+0x40>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8007f98 <USB_SetTurnaroundTime+0x124>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d202      	bcs.n	8007eb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007eae:	230e      	movs	r3, #14
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	e057      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4a38      	ldr	r2, [pc, #224]	@ (8007f98 <USB_SetTurnaroundTime+0x124>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d306      	bcc.n	8007eca <USB_SetTurnaroundTime+0x56>
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4a37      	ldr	r2, [pc, #220]	@ (8007f9c <USB_SetTurnaroundTime+0x128>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d202      	bcs.n	8007eca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ec4:	230d      	movs	r3, #13
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	e04c      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	4a33      	ldr	r2, [pc, #204]	@ (8007f9c <USB_SetTurnaroundTime+0x128>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d306      	bcc.n	8007ee0 <USB_SetTurnaroundTime+0x6c>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4a32      	ldr	r2, [pc, #200]	@ (8007fa0 <USB_SetTurnaroundTime+0x12c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d802      	bhi.n	8007ee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007eda:	230c      	movs	r3, #12
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	e041      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8007fa0 <USB_SetTurnaroundTime+0x12c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d906      	bls.n	8007ef6 <USB_SetTurnaroundTime+0x82>
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4a2e      	ldr	r2, [pc, #184]	@ (8007fa4 <USB_SetTurnaroundTime+0x130>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d802      	bhi.n	8007ef6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ef0:	230b      	movs	r3, #11
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	e036      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa4 <USB_SetTurnaroundTime+0x130>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d906      	bls.n	8007f0c <USB_SetTurnaroundTime+0x98>
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4a29      	ldr	r2, [pc, #164]	@ (8007fa8 <USB_SetTurnaroundTime+0x134>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d802      	bhi.n	8007f0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f06:	230a      	movs	r3, #10
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	e02b      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4a26      	ldr	r2, [pc, #152]	@ (8007fa8 <USB_SetTurnaroundTime+0x134>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d906      	bls.n	8007f22 <USB_SetTurnaroundTime+0xae>
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4a25      	ldr	r2, [pc, #148]	@ (8007fac <USB_SetTurnaroundTime+0x138>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d202      	bcs.n	8007f22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f1c:	2309      	movs	r3, #9
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	e020      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4a21      	ldr	r2, [pc, #132]	@ (8007fac <USB_SetTurnaroundTime+0x138>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d306      	bcc.n	8007f38 <USB_SetTurnaroundTime+0xc4>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4a20      	ldr	r2, [pc, #128]	@ (8007fb0 <USB_SetTurnaroundTime+0x13c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d802      	bhi.n	8007f38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f32:	2308      	movs	r3, #8
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e015      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb0 <USB_SetTurnaroundTime+0x13c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d906      	bls.n	8007f4e <USB_SetTurnaroundTime+0xda>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb4 <USB_SetTurnaroundTime+0x140>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d202      	bcs.n	8007f4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f48:	2307      	movs	r3, #7
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	e00a      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f4e:	2306      	movs	r3, #6
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	e007      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d102      	bne.n	8007f60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f5a:	2309      	movs	r3, #9
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	e001      	b.n	8007f64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f60:	2309      	movs	r3, #9
 8007f62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	029b      	lsls	r3, r3, #10
 8007f78:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	00d8acbf 	.word	0x00d8acbf
 8007f94:	00e4e1c0 	.word	0x00e4e1c0
 8007f98:	00f42400 	.word	0x00f42400
 8007f9c:	01067380 	.word	0x01067380
 8007fa0:	011a499f 	.word	0x011a499f
 8007fa4:	01312cff 	.word	0x01312cff
 8007fa8:	014ca43f 	.word	0x014ca43f
 8007fac:	016e3600 	.word	0x016e3600
 8007fb0:	01a6ab1f 	.word	0x01a6ab1f
 8007fb4:	01e84800 	.word	0x01e84800

08007fb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f043 0201 	orr.w	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f023 0201 	bic.w	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d115      	bne.n	800804a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800802a:	200a      	movs	r0, #10
 800802c:	f7fa f8c2 	bl	80021b4 <HAL_Delay>
      ms += 10U;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	330a      	adds	r3, #10
 8008034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 f939 	bl	80092ae <USB_GetMode>
 800803c:	4603      	mov	r3, r0
 800803e:	2b01      	cmp	r3, #1
 8008040:	d01e      	beq.n	8008080 <USB_SetCurrentMode+0x84>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2bc7      	cmp	r3, #199	@ 0xc7
 8008046:	d9f0      	bls.n	800802a <USB_SetCurrentMode+0x2e>
 8008048:	e01a      	b.n	8008080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d115      	bne.n	800807c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800805c:	200a      	movs	r0, #10
 800805e:	f7fa f8a9 	bl	80021b4 <HAL_Delay>
      ms += 10U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	330a      	adds	r3, #10
 8008066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f920 	bl	80092ae <USB_GetMode>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <USB_SetCurrentMode+0x84>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2bc7      	cmp	r3, #199	@ 0xc7
 8008078:	d9f0      	bls.n	800805c <USB_SetCurrentMode+0x60>
 800807a:	e001      	b.n	8008080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e005      	b.n	800808c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2bc8      	cmp	r3, #200	@ 0xc8
 8008084:	d101      	bne.n	800808a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008094:	b084      	sub	sp, #16
 8008096:	b580      	push	{r7, lr}
 8008098:	b086      	sub	sp, #24
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80080a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080ae:	2300      	movs	r3, #0
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	e009      	b.n	80080c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	3340      	adds	r3, #64	@ 0x40
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	3301      	adds	r3, #1
 80080c6:	613b      	str	r3, [r7, #16]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2b0e      	cmp	r3, #14
 80080cc:	d9f2      	bls.n	80080b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d11c      	bne.n	8008110 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080e4:	f043 0302 	orr.w	r3, r3, #2
 80080e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008106:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	639a      	str	r2, [r3, #56]	@ 0x38
 800810e:	e00b      	b.n	8008128 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008114:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008120:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800812e:	461a      	mov	r2, r3
 8008130:	2300      	movs	r3, #0
 8008132:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008134:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008138:	2b01      	cmp	r3, #1
 800813a:	d10d      	bne.n	8008158 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800813c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008144:	2100      	movs	r1, #0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f968 	bl	800841c <USB_SetDevSpeed>
 800814c:	e008      	b.n	8008160 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800814e:	2101      	movs	r1, #1
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f963 	bl	800841c <USB_SetDevSpeed>
 8008156:	e003      	b.n	8008160 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008158:	2103      	movs	r1, #3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f95e 	bl	800841c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008160:	2110      	movs	r1, #16
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f8fa 	bl	800835c <USB_FlushTxFifo>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f924 	bl	80083c0 <USB_FlushRxFifo>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008188:	461a      	mov	r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008194:	461a      	mov	r2, r3
 8008196:	2300      	movs	r3, #0
 8008198:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a0:	461a      	mov	r2, r3
 80081a2:	2300      	movs	r3, #0
 80081a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a6:	2300      	movs	r3, #0
 80081a8:	613b      	str	r3, [r7, #16]
 80081aa:	e043      	b.n	8008234 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081c2:	d118      	bne.n	80081f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d6:	461a      	mov	r2, r3
 80081d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	e013      	b.n	8008208 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ec:	461a      	mov	r2, r3
 80081ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	e008      	b.n	8008208 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008202:	461a      	mov	r2, r3
 8008204:	2300      	movs	r3, #0
 8008206:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008214:	461a      	mov	r2, r3
 8008216:	2300      	movs	r3, #0
 8008218:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008226:	461a      	mov	r2, r3
 8008228:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800822c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3301      	adds	r3, #1
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008238:	461a      	mov	r2, r3
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	4293      	cmp	r3, r2
 800823e:	d3b5      	bcc.n	80081ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	e043      	b.n	80082ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008258:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800825c:	d118      	bne.n	8008290 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008270:	461a      	mov	r2, r3
 8008272:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	e013      	b.n	80082a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008286:	461a      	mov	r2, r3
 8008288:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	e008      	b.n	80082a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829c:	461a      	mov	r2, r3
 800829e:	2300      	movs	r3, #0
 80082a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ae:	461a      	mov	r2, r3
 80082b0:	2300      	movs	r3, #0
 80082b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082c0:	461a      	mov	r2, r3
 80082c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80082c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	3301      	adds	r3, #1
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80082d2:	461a      	mov	r2, r3
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d3b5      	bcc.n	8008246 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80082fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008300:	2b00      	cmp	r3, #0
 8008302:	d105      	bne.n	8008310 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f043 0210 	orr.w	r2, r3, #16
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699a      	ldr	r2, [r3, #24]
 8008314:	4b10      	ldr	r3, [pc, #64]	@ (8008358 <USB_DevInit+0x2c4>)
 8008316:	4313      	orrs	r3, r2
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800831c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f043 0208 	orr.w	r2, r3, #8
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008330:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008334:	2b01      	cmp	r3, #1
 8008336:	d107      	bne.n	8008348 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008340:	f043 0304 	orr.w	r3, r3, #4
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008354:	b004      	add	sp, #16
 8008356:	4770      	bx	lr
 8008358:	803c3800 	.word	0x803c3800

0800835c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008376:	d901      	bls.n	800837c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e01b      	b.n	80083b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	daf2      	bge.n	800836a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	019b      	lsls	r3, r3, #6
 800838c:	f043 0220 	orr.w	r2, r3, #32
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083a0:	d901      	bls.n	80083a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e006      	b.n	80083b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d0f0      	beq.n	8008394 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083d8:	d901      	bls.n	80083de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e018      	b.n	8008410 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	daf2      	bge.n	80083cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2210      	movs	r2, #16
 80083ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083fc:	d901      	bls.n	8008402 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e006      	b.n	8008410 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b10      	cmp	r3, #16
 800840c:	d0f0      	beq.n	80083f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800843c:	4313      	orrs	r3, r2
 800843e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800844e:	b480      	push	{r7}
 8008450:	b087      	sub	sp, #28
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 0306 	and.w	r3, r3, #6
 8008466:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d102      	bne.n	8008474 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]
 8008472:	e00a      	b.n	800848a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d002      	beq.n	8008480 <USB_GetDevSpeed+0x32>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b06      	cmp	r3, #6
 800847e:	d102      	bne.n	8008486 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008480:	2302      	movs	r3, #2
 8008482:	75fb      	strb	r3, [r7, #23]
 8008484:	e001      	b.n	800848a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008486:	230f      	movs	r3, #15
 8008488:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
}
 800848c:	4618      	mov	r0, r3
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d13a      	bne.n	800852a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ba:	69da      	ldr	r2, [r3, #28]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	f003 030f 	and.w	r3, r3, #15
 80084c4:	2101      	movs	r1, #1
 80084c6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	68f9      	ldr	r1, [r7, #12]
 80084ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084d2:	4313      	orrs	r3, r2
 80084d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d155      	bne.n	8008598 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	791b      	ldrb	r3, [r3, #4]
 8008506:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008508:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	059b      	lsls	r3, r3, #22
 800850e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008510:	4313      	orrs	r3, r2
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	440a      	add	r2, r1
 800851a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800851e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	e036      	b.n	8008598 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008530:	69da      	ldr	r2, [r3, #28]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	2101      	movs	r1, #1
 800853c:	fa01 f303 	lsl.w	r3, r1, r3
 8008540:	041b      	lsls	r3, r3, #16
 8008542:	68f9      	ldr	r1, [r7, #12]
 8008544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008548:	4313      	orrs	r3, r2
 800854a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d11a      	bne.n	8008598 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	791b      	ldrb	r3, [r3, #4]
 800857c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800857e:	430b      	orrs	r3, r1
 8008580:	4313      	orrs	r3, r2
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	0151      	lsls	r1, r2, #5
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	440a      	add	r2, r1
 800858a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800858e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008596:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
	...

080085a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d161      	bne.n	8008688 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085da:	d11f      	bne.n	800861c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	0151      	lsls	r1, r2, #5
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	440a      	add	r2, r1
 80085f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	0151      	lsls	r1, r2, #5
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	440a      	add	r2, r1
 8008612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008616:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800861a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 030f 	and.w	r3, r3, #15
 800862c:	2101      	movs	r1, #1
 800862e:	fa01 f303 	lsl.w	r3, r1, r3
 8008632:	b29b      	uxth	r3, r3
 8008634:	43db      	mvns	r3, r3
 8008636:	68f9      	ldr	r1, [r7, #12]
 8008638:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800863c:	4013      	ands	r3, r2
 800863e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008646:	69da      	ldr	r2, [r3, #28]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	2101      	movs	r1, #1
 8008652:	fa01 f303 	lsl.w	r3, r1, r3
 8008656:	b29b      	uxth	r3, r3
 8008658:	43db      	mvns	r3, r3
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008660:	4013      	ands	r3, r2
 8008662:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	0159      	lsls	r1, r3, #5
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	440b      	add	r3, r1
 800867a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800867e:	4619      	mov	r1, r3
 8008680:	4b35      	ldr	r3, [pc, #212]	@ (8008758 <USB_DeactivateEndpoint+0x1b0>)
 8008682:	4013      	ands	r3, r2
 8008684:	600b      	str	r3, [r1, #0]
 8008686:	e060      	b.n	800874a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800869a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800869e:	d11f      	bne.n	80086e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 030f 	and.w	r3, r3, #15
 80086f0:	2101      	movs	r1, #1
 80086f2:	fa01 f303 	lsl.w	r3, r1, r3
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	43db      	mvns	r3, r3
 80086fa:	68f9      	ldr	r1, [r7, #12]
 80086fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008700:	4013      	ands	r3, r2
 8008702:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	2101      	movs	r1, #1
 8008716:	fa01 f303 	lsl.w	r3, r1, r3
 800871a:	041b      	lsls	r3, r3, #16
 800871c:	43db      	mvns	r3, r3
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008724:	4013      	ands	r3, r2
 8008726:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	0159      	lsls	r1, r3, #5
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	440b      	add	r3, r1
 800873e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008742:	4619      	mov	r1, r3
 8008744:	4b05      	ldr	r3, [pc, #20]	@ (800875c <USB_DeactivateEndpoint+0x1b4>)
 8008746:	4013      	ands	r3, r2
 8008748:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	ec337800 	.word	0xec337800
 800875c:	eff37800 	.word	0xeff37800

08008760 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08a      	sub	sp, #40	@ 0x28
 8008764:	af02      	add	r7, sp, #8
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	4613      	mov	r3, r2
 800876c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	785b      	ldrb	r3, [r3, #1]
 800877c:	2b01      	cmp	r3, #1
 800877e:	f040 817a 	bne.w	8008a76 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d132      	bne.n	80087f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80087a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80087ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	0151      	lsls	r1, r2, #5
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	440a      	add	r2, r1
 80087e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087e8:	0cdb      	lsrs	r3, r3, #19
 80087ea:	04db      	lsls	r3, r3, #19
 80087ec:	6113      	str	r3, [r2, #16]
 80087ee:	e092      	b.n	8008916 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	440a      	add	r2, r1
 8008806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800880a:	0cdb      	lsrs	r3, r3, #19
 800880c:	04db      	lsls	r3, r3, #19
 800880e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800882a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800882e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008832:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d11a      	bne.n	8008870 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	691a      	ldr	r2, [r3, #16]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	429a      	cmp	r2, r3
 8008844:	d903      	bls.n	800884e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	0151      	lsls	r1, r2, #5
 8008860:	69fa      	ldr	r2, [r7, #28]
 8008862:	440a      	add	r2, r1
 8008864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008868:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800886c:	6113      	str	r3, [r2, #16]
 800886e:	e01b      	b.n	80088a8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	6919      	ldr	r1, [r3, #16]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	440b      	add	r3, r1
 8008888:	1e59      	subs	r1, r3, #1
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008892:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008894:	4ba2      	ldr	r3, [pc, #648]	@ (8008b20 <USB_EPStartXfer+0x3c0>)
 8008896:	400b      	ands	r3, r1
 8008898:	69b9      	ldr	r1, [r7, #24]
 800889a:	0148      	lsls	r0, r1, #5
 800889c:	69f9      	ldr	r1, [r7, #28]
 800889e:	4401      	add	r1, r0
 80088a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80088a4:	4313      	orrs	r3, r2
 80088a6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b4:	691a      	ldr	r2, [r3, #16]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088be:	69b9      	ldr	r1, [r7, #24]
 80088c0:	0148      	lsls	r0, r1, #5
 80088c2:	69f9      	ldr	r1, [r7, #28]
 80088c4:	4401      	add	r1, r0
 80088c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80088ca:	4313      	orrs	r3, r2
 80088cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	791b      	ldrb	r3, [r3, #4]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d11f      	bne.n	8008916 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088f0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80088f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	0151      	lsls	r1, r2, #5
 8008908:	69fa      	ldr	r2, [r7, #28]
 800890a:	440a      	add	r2, r1
 800890c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008910:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008914:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d14b      	bne.n	80089b4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d009      	beq.n	8008938 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008930:	461a      	mov	r2, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	791b      	ldrb	r3, [r3, #4]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d128      	bne.n	8008992 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800894c:	2b00      	cmp	r3, #0
 800894e:	d110      	bne.n	8008972 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	0151      	lsls	r1, r2, #5
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	440a      	add	r2, r1
 8008966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800896a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	e00f      	b.n	8008992 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800898c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008990:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	e165      	b.n	8008c80 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80089d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	791b      	ldrb	r3, [r3, #4]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d015      	beq.n	8008a08 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 814d 	beq.w	8008c80 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	2101      	movs	r1, #1
 80089f8:	fa01 f303 	lsl.w	r3, r1, r3
 80089fc:	69f9      	ldr	r1, [r7, #28]
 80089fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a02:	4313      	orrs	r3, r2
 8008a04:	634b      	str	r3, [r1, #52]	@ 0x34
 8008a06:	e13b      	b.n	8008c80 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d110      	bne.n	8008a3a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	e00f      	b.n	8008a5a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	68d9      	ldr	r1, [r3, #12]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	b298      	uxth	r0, r3
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 f9b8 	bl	8008de4 <USB_WritePacket>
 8008a74:	e104      	b.n	8008c80 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	0151      	lsls	r1, r2, #5
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	440a      	add	r2, r1
 8008a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a90:	0cdb      	lsrs	r3, r3, #19
 8008a92:	04db      	lsls	r3, r3, #19
 8008a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	0151      	lsls	r1, r2, #5
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	440a      	add	r2, r1
 8008aac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ab0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ab4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ab8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d131      	bne.n	8008b24 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aee:	69b9      	ldr	r1, [r7, #24]
 8008af0:	0148      	lsls	r0, r1, #5
 8008af2:	69f9      	ldr	r1, [r7, #28]
 8008af4:	4401      	add	r1, r0
 8008af6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008afa:	4313      	orrs	r3, r2
 8008afc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	0151      	lsls	r1, r2, #5
 8008b10:	69fa      	ldr	r2, [r7, #28]
 8008b12:	440a      	add	r2, r1
 8008b14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b1c:	6113      	str	r3, [r2, #16]
 8008b1e:	e061      	b.n	8008be4 <USB_EPStartXfer+0x484>
 8008b20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d123      	bne.n	8008b74 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b38:	691a      	ldr	r2, [r3, #16]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	0148      	lsls	r0, r1, #5
 8008b46:	69f9      	ldr	r1, [r7, #28]
 8008b48:	4401      	add	r1, r0
 8008b4a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b70:	6113      	str	r3, [r2, #16]
 8008b72:	e037      	b.n	8008be4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	691a      	ldr	r2, [r3, #16]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	1e5a      	subs	r2, r3, #1
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b88:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	8afa      	ldrh	r2, [r7, #22]
 8008b90:	fb03 f202 	mul.w	r2, r3, r2
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba4:	691a      	ldr	r2, [r3, #16]
 8008ba6:	8afb      	ldrh	r3, [r7, #22]
 8008ba8:	04d9      	lsls	r1, r3, #19
 8008baa:	4b38      	ldr	r3, [pc, #224]	@ (8008c8c <USB_EPStartXfer+0x52c>)
 8008bac:	400b      	ands	r3, r1
 8008bae:	69b9      	ldr	r1, [r7, #24]
 8008bb0:	0148      	lsls	r0, r1, #5
 8008bb2:	69f9      	ldr	r1, [r7, #28]
 8008bb4:	4401      	add	r1, r0
 8008bb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bca:	691a      	ldr	r2, [r3, #16]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bd4:	69b9      	ldr	r1, [r7, #24]
 8008bd6:	0148      	lsls	r0, r1, #5
 8008bd8:	69f9      	ldr	r1, [r7, #28]
 8008bda:	4401      	add	r1, r0
 8008bdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008be0:	4313      	orrs	r3, r2
 8008be2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d10d      	bne.n	8008c06 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	68d9      	ldr	r1, [r3, #12]
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c02:	460a      	mov	r2, r1
 8008c04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	791b      	ldrb	r3, [r3, #4]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d128      	bne.n	8008c60 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d110      	bne.n	8008c40 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	e00f      	b.n	8008c60 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	0151      	lsls	r1, r2, #5
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	440a      	add	r2, r1
 8008c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3720      	adds	r7, #32
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	1ff80000 	.word	0x1ff80000

08008c90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d14a      	bne.n	8008d44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cc6:	f040 8086 	bne.w	8008dd6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	7812      	ldrb	r2, [r2, #0]
 8008cde:	0151      	lsls	r1, r2, #5
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	440a      	add	r2, r1
 8008ce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ce8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008cec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	7812      	ldrb	r2, [r2, #0]
 8008d02:	0151      	lsls	r1, r2, #5
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	440a      	add	r2, r1
 8008d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3301      	adds	r3, #1
 8008d16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d902      	bls.n	8008d28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	75fb      	strb	r3, [r7, #23]
          break;
 8008d26:	e056      	b.n	8008dd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d40:	d0e7      	beq.n	8008d12 <USB_EPStopXfer+0x82>
 8008d42:	e048      	b.n	8008dd6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d5c:	d13b      	bne.n	8008dd6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	7812      	ldrb	r2, [r2, #0]
 8008d72:	0151      	lsls	r1, r2, #5
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	440a      	add	r2, r1
 8008d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	7812      	ldrb	r2, [r2, #0]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008da0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008da4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d902      	bls.n	8008dbc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	75fb      	strb	r3, [r7, #23]
          break;
 8008dba:	e00c      	b.n	8008dd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dd4:	d0e7      	beq.n	8008da6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b089      	sub	sp, #36	@ 0x24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4611      	mov	r1, r2
 8008df0:	461a      	mov	r2, r3
 8008df2:	460b      	mov	r3, r1
 8008df4:	71fb      	strb	r3, [r7, #7]
 8008df6:	4613      	mov	r3, r2
 8008df8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d123      	bne.n	8008e52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e0a:	88bb      	ldrh	r3, [r7, #4]
 8008e0c:	3303      	adds	r3, #3
 8008e0e:	089b      	lsrs	r3, r3, #2
 8008e10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e12:	2300      	movs	r3, #0
 8008e14:	61bb      	str	r3, [r7, #24]
 8008e16:	e018      	b.n	8008e4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	031a      	lsls	r2, r3, #12
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e24:	461a      	mov	r2, r3
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	3301      	adds	r3, #1
 8008e36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	3301      	adds	r3, #1
 8008e42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	3301      	adds	r3, #1
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d3e2      	bcc.n	8008e18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3724      	adds	r7, #36	@ 0x24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b08b      	sub	sp, #44	@ 0x2c
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	089b      	lsrs	r3, r3, #2
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e7e:	88fb      	ldrh	r3, [r7, #6]
 8008e80:	f003 0303 	and.w	r3, r3, #3
 8008e84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e86:	2300      	movs	r3, #0
 8008e88:	623b      	str	r3, [r7, #32]
 8008e8a:	e014      	b.n	8008eb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e96:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	3301      	adds	r3, #1
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	623b      	str	r3, [r7, #32]
 8008eb6:	6a3a      	ldr	r2, [r7, #32]
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d3e6      	bcc.n	8008e8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ebe:	8bfb      	ldrh	r3, [r7, #30]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01e      	beq.n	8008f02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f107 0310 	add.w	r3, r7, #16
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	701a      	strb	r2, [r3, #0]
      i++;
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	3301      	adds	r3, #1
 8008eee:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008ef6:	8bfb      	ldrh	r3, [r7, #30]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008efc:	8bfb      	ldrh	r3, [r7, #30]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1ea      	bne.n	8008ed8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	372c      	adds	r7, #44	@ 0x2c
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d12c      	bne.n	8008f86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	db12      	blt.n	8008f64 <USB_EPSetStall+0x54>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00f      	beq.n	8008f64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	0151      	lsls	r1, r2, #5
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	440a      	add	r2, r1
 8008f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	e02b      	b.n	8008fde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	db12      	blt.n	8008fbe <USB_EPSetStall+0xae>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00f      	beq.n	8008fbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	0151      	lsls	r1, r2, #5
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	440a      	add	r2, r1
 8008fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008fbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	785b      	ldrb	r3, [r3, #1]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d128      	bne.n	800905a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	440a      	add	r2, r1
 800901e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009022:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009026:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	791b      	ldrb	r3, [r3, #4]
 800902c:	2b03      	cmp	r3, #3
 800902e:	d003      	beq.n	8009038 <USB_EPClearStall+0x4c>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	791b      	ldrb	r3, [r3, #4]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d138      	bne.n	80090aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e027      	b.n	80090aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009074:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009078:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	791b      	ldrb	r3, [r3, #4]
 800907e:	2b03      	cmp	r3, #3
 8009080:	d003      	beq.n	800908a <USB_EPClearStall+0x9e>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	791b      	ldrb	r3, [r3, #4]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d10f      	bne.n	80090aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	0151      	lsls	r1, r2, #5
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	440a      	add	r2, r1
 80090a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80090da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80090ec:	68f9      	ldr	r1, [r7, #12]
 80090ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090f2:	4313      	orrs	r3, r2
 80090f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009132:	f023 0302 	bic.w	r3, r3, #2
 8009136:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009174:	f043 0302 	orr.w	r3, r3, #2
 8009178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	4013      	ands	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091a0:	68fb      	ldr	r3, [r7, #12]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	4013      	ands	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	0c1b      	lsrs	r3, r3, #16
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b085      	sub	sp, #20
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	4013      	ands	r3, r2
 8009204:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	b29b      	uxth	r3, r3
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009216:	b480      	push	{r7}
 8009218:	b085      	sub	sp, #20
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	460b      	mov	r3, r1
 8009220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	4013      	ands	r3, r2
 8009242:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009244:	68bb      	ldr	r3, [r7, #8]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009252:	b480      	push	{r7}
 8009254:	b087      	sub	sp, #28
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	460b      	mov	r3, r1
 800925c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009274:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	fa22 f303 	lsr.w	r3, r2, r3
 8009282:	01db      	lsls	r3, r3, #7
 8009284:	b2db      	uxtb	r3, r3
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4313      	orrs	r3, r2
 800928a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4013      	ands	r3, r2
 800929e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092a0:	68bb      	ldr	r3, [r7, #8]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	371c      	adds	r7, #28
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	f003 0301 	and.w	r3, r3, #1
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80092e8:	f023 0307 	bic.w	r3, r3, #7
 80092ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009300:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	460b      	mov	r3, r1
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	333c      	adds	r3, #60	@ 0x3c
 8009326:	3304      	adds	r3, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4a26      	ldr	r2, [pc, #152]	@ (80093c8 <USB_EP0_OutStart+0xb8>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d90a      	bls.n	800934a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009344:	d101      	bne.n	800934a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	e037      	b.n	80093ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009350:	461a      	mov	r2, r3
 8009352:	2300      	movs	r3, #0
 8009354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009364:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009378:	f043 0318 	orr.w	r3, r3, #24
 800937c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800938c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009390:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009392:	7afb      	ldrb	r3, [r7, #11]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d10f      	bne.n	80093b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093b2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80093b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	371c      	adds	r7, #28
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	4f54300a 	.word	0x4f54300a

080093cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093e4:	d901      	bls.n	80093ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e01b      	b.n	8009422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	daf2      	bge.n	80093d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	f043 0201 	orr.w	r2, r3, #1
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800940e:	d901      	bls.n	8009414 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e006      	b.n	8009422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b01      	cmp	r3, #1
 800941e:	d0f0      	beq.n	8009402 <USB_CoreReset+0x36>

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
	...

08009430 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800943c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009440:	f002 fc88 	bl	800bd54 <USBD_static_malloc>
 8009444:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d109      	bne.n	8009460 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	32b0      	adds	r2, #176	@ 0xb0
 8009456:	2100      	movs	r1, #0
 8009458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800945c:	2302      	movs	r3, #2
 800945e:	e0d4      	b.n	800960a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009460:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009464:	2100      	movs	r1, #0
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f002 fd9c 	bl	800bfa4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	32b0      	adds	r2, #176	@ 0xb0
 8009476:	68f9      	ldr	r1, [r7, #12]
 8009478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	32b0      	adds	r2, #176	@ 0xb0
 8009486:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	7c1b      	ldrb	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d138      	bne.n	800950a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009498:	4b5e      	ldr	r3, [pc, #376]	@ (8009614 <USBD_CDC_Init+0x1e4>)
 800949a:	7819      	ldrb	r1, [r3, #0]
 800949c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094a0:	2202      	movs	r2, #2
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f002 fb33 	bl	800bb0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009614 <USBD_CDC_Init+0x1e4>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 020f 	and.w	r2, r3, #15
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	3324      	adds	r3, #36	@ 0x24
 80094be:	2201      	movs	r2, #1
 80094c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094c2:	4b55      	ldr	r3, [pc, #340]	@ (8009618 <USBD_CDC_Init+0x1e8>)
 80094c4:	7819      	ldrb	r1, [r3, #0]
 80094c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094ca:	2202      	movs	r2, #2
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f002 fb1e 	bl	800bb0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094d2:	4b51      	ldr	r3, [pc, #324]	@ (8009618 <USBD_CDC_Init+0x1e8>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	f003 020f 	and.w	r2, r3, #15
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	440b      	add	r3, r1
 80094e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094ea:	2201      	movs	r2, #1
 80094ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80094ee:	4b4b      	ldr	r3, [pc, #300]	@ (800961c <USBD_CDC_Init+0x1ec>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	f003 020f 	and.w	r2, r3, #15
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	3326      	adds	r3, #38	@ 0x26
 8009504:	2210      	movs	r2, #16
 8009506:	801a      	strh	r2, [r3, #0]
 8009508:	e035      	b.n	8009576 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800950a:	4b42      	ldr	r3, [pc, #264]	@ (8009614 <USBD_CDC_Init+0x1e4>)
 800950c:	7819      	ldrb	r1, [r3, #0]
 800950e:	2340      	movs	r3, #64	@ 0x40
 8009510:	2202      	movs	r2, #2
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f002 fafb 	bl	800bb0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009518:	4b3e      	ldr	r3, [pc, #248]	@ (8009614 <USBD_CDC_Init+0x1e4>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	f003 020f 	and.w	r2, r3, #15
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	4613      	mov	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	440b      	add	r3, r1
 800952c:	3324      	adds	r3, #36	@ 0x24
 800952e:	2201      	movs	r2, #1
 8009530:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009532:	4b39      	ldr	r3, [pc, #228]	@ (8009618 <USBD_CDC_Init+0x1e8>)
 8009534:	7819      	ldrb	r1, [r3, #0]
 8009536:	2340      	movs	r3, #64	@ 0x40
 8009538:	2202      	movs	r2, #2
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f002 fae7 	bl	800bb0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009540:	4b35      	ldr	r3, [pc, #212]	@ (8009618 <USBD_CDC_Init+0x1e8>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	f003 020f 	and.w	r2, r3, #15
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	440b      	add	r3, r1
 8009554:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009558:	2201      	movs	r2, #1
 800955a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800955c:	4b2f      	ldr	r3, [pc, #188]	@ (800961c <USBD_CDC_Init+0x1ec>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 020f 	and.w	r2, r3, #15
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	3326      	adds	r3, #38	@ 0x26
 8009572:	2210      	movs	r2, #16
 8009574:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009576:	4b29      	ldr	r3, [pc, #164]	@ (800961c <USBD_CDC_Init+0x1ec>)
 8009578:	7819      	ldrb	r1, [r3, #0]
 800957a:	2308      	movs	r3, #8
 800957c:	2203      	movs	r2, #3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f002 fac5 	bl	800bb0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009584:	4b25      	ldr	r3, [pc, #148]	@ (800961c <USBD_CDC_Init+0x1ec>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f003 020f 	and.w	r2, r3, #15
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	4613      	mov	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	440b      	add	r3, r1
 8009598:	3324      	adds	r3, #36	@ 0x24
 800959a:	2201      	movs	r2, #1
 800959c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	33b0      	adds	r3, #176	@ 0xb0
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80095d4:	2302      	movs	r3, #2
 80095d6:	e018      	b.n	800960a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	7c1b      	ldrb	r3, [r3, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009618 <USBD_CDC_Init+0x1e8>)
 80095e2:	7819      	ldrb	r1, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f002 fb7c 	bl	800bcec <USBD_LL_PrepareReceive>
 80095f4:	e008      	b.n	8009608 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095f6:	4b08      	ldr	r3, [pc, #32]	@ (8009618 <USBD_CDC_Init+0x1e8>)
 80095f8:	7819      	ldrb	r1, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009600:	2340      	movs	r3, #64	@ 0x40
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f002 fb72 	bl	800bcec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	200000a7 	.word	0x200000a7
 8009618:	200000a8 	.word	0x200000a8
 800961c:	200000a9 	.word	0x200000a9

08009620 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800962c:	4b3a      	ldr	r3, [pc, #232]	@ (8009718 <USBD_CDC_DeInit+0xf8>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f002 fa91 	bl	800bb5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009638:	4b37      	ldr	r3, [pc, #220]	@ (8009718 <USBD_CDC_DeInit+0xf8>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 020f 	and.w	r2, r3, #15
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	440b      	add	r3, r1
 800964c:	3324      	adds	r3, #36	@ 0x24
 800964e:	2200      	movs	r2, #0
 8009650:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009652:	4b32      	ldr	r3, [pc, #200]	@ (800971c <USBD_CDC_DeInit+0xfc>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f002 fa7e 	bl	800bb5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800965e:	4b2f      	ldr	r3, [pc, #188]	@ (800971c <USBD_CDC_DeInit+0xfc>)
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	f003 020f 	and.w	r2, r3, #15
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009676:	2200      	movs	r2, #0
 8009678:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800967a:	4b29      	ldr	r3, [pc, #164]	@ (8009720 <USBD_CDC_DeInit+0x100>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f002 fa6a 	bl	800bb5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009686:	4b26      	ldr	r3, [pc, #152]	@ (8009720 <USBD_CDC_DeInit+0x100>)
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	f003 020f 	and.w	r2, r3, #15
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	3324      	adds	r3, #36	@ 0x24
 800969c:	2200      	movs	r2, #0
 800969e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80096a0:	4b1f      	ldr	r3, [pc, #124]	@ (8009720 <USBD_CDC_DeInit+0x100>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f003 020f 	and.w	r2, r3, #15
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	3326      	adds	r3, #38	@ 0x26
 80096b6:	2200      	movs	r2, #0
 80096b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	32b0      	adds	r2, #176	@ 0xb0
 80096c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d01f      	beq.n	800970c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	33b0      	adds	r3, #176	@ 0xb0
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	32b0      	adds	r2, #176	@ 0xb0
 80096ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f002 fb3e 	bl	800bd70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	32b0      	adds	r2, #176	@ 0xb0
 80096fe:	2100      	movs	r1, #0
 8009700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	200000a7 	.word	0x200000a7
 800971c:	200000a8 	.word	0x200000a8
 8009720:	200000a9 	.word	0x200000a9

08009724 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	32b0      	adds	r2, #176	@ 0xb0
 8009738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d101      	bne.n	8009754 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009750:	2303      	movs	r3, #3
 8009752:	e0bf      	b.n	80098d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800975c:	2b00      	cmp	r3, #0
 800975e:	d050      	beq.n	8009802 <USBD_CDC_Setup+0xde>
 8009760:	2b20      	cmp	r3, #32
 8009762:	f040 80af 	bne.w	80098c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	88db      	ldrh	r3, [r3, #6]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d03a      	beq.n	80097e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b25b      	sxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	da1b      	bge.n	80097b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	33b0      	adds	r3, #176	@ 0xb0
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800978e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	88d2      	ldrh	r2, [r2, #6]
 8009794:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	88db      	ldrh	r3, [r3, #6]
 800979a:	2b07      	cmp	r3, #7
 800979c:	bf28      	it	cs
 800979e:	2307      	movcs	r3, #7
 80097a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	89fa      	ldrh	r2, [r7, #14]
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 fd87 	bl	800b2bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80097ae:	e090      	b.n	80098d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	785a      	ldrb	r2, [r3, #1]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88db      	ldrh	r3, [r3, #6]
 80097be:	2b3f      	cmp	r3, #63	@ 0x3f
 80097c0:	d803      	bhi.n	80097ca <USBD_CDC_Setup+0xa6>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	88db      	ldrh	r3, [r3, #6]
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	e000      	b.n	80097cc <USBD_CDC_Setup+0xa8>
 80097ca:	2240      	movs	r2, #64	@ 0x40
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80097d2:	6939      	ldr	r1, [r7, #16]
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80097da:	461a      	mov	r2, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 fd99 	bl	800b314 <USBD_CtlPrepareRx>
      break;
 80097e2:	e076      	b.n	80098d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	33b0      	adds	r3, #176	@ 0xb0
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	7850      	ldrb	r0, [r2, #1]
 80097fa:	2200      	movs	r2, #0
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	4798      	blx	r3
      break;
 8009800:	e067      	b.n	80098d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	785b      	ldrb	r3, [r3, #1]
 8009806:	2b0b      	cmp	r3, #11
 8009808:	d851      	bhi.n	80098ae <USBD_CDC_Setup+0x18a>
 800980a:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <USBD_CDC_Setup+0xec>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	08009841 	.word	0x08009841
 8009814:	080098bd 	.word	0x080098bd
 8009818:	080098af 	.word	0x080098af
 800981c:	080098af 	.word	0x080098af
 8009820:	080098af 	.word	0x080098af
 8009824:	080098af 	.word	0x080098af
 8009828:	080098af 	.word	0x080098af
 800982c:	080098af 	.word	0x080098af
 8009830:	080098af 	.word	0x080098af
 8009834:	080098af 	.word	0x080098af
 8009838:	0800986b 	.word	0x0800986b
 800983c:	08009895 	.word	0x08009895
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b03      	cmp	r3, #3
 800984a:	d107      	bne.n	800985c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800984c:	f107 030a 	add.w	r3, r7, #10
 8009850:	2202      	movs	r2, #2
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f001 fd31 	bl	800b2bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800985a:	e032      	b.n	80098c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 fcbb 	bl	800b1da <USBD_CtlError>
            ret = USBD_FAIL;
 8009864:	2303      	movs	r3, #3
 8009866:	75fb      	strb	r3, [r7, #23]
          break;
 8009868:	e02b      	b.n	80098c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b03      	cmp	r3, #3
 8009874:	d107      	bne.n	8009886 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009876:	f107 030d 	add.w	r3, r7, #13
 800987a:	2201      	movs	r2, #1
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 fd1c 	bl	800b2bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009884:	e01d      	b.n	80098c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 fca6 	bl	800b1da <USBD_CtlError>
            ret = USBD_FAIL;
 800988e:	2303      	movs	r3, #3
 8009890:	75fb      	strb	r3, [r7, #23]
          break;
 8009892:	e016      	b.n	80098c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b03      	cmp	r3, #3
 800989e:	d00f      	beq.n	80098c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 fc99 	bl	800b1da <USBD_CtlError>
            ret = USBD_FAIL;
 80098a8:	2303      	movs	r3, #3
 80098aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80098ac:	e008      	b.n	80098c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 fc92 	bl	800b1da <USBD_CtlError>
          ret = USBD_FAIL;
 80098b6:	2303      	movs	r3, #3
 80098b8:	75fb      	strb	r3, [r7, #23]
          break;
 80098ba:	e002      	b.n	80098c2 <USBD_CDC_Setup+0x19e>
          break;
 80098bc:	bf00      	nop
 80098be:	e008      	b.n	80098d2 <USBD_CDC_Setup+0x1ae>
          break;
 80098c0:	bf00      	nop
      }
      break;
 80098c2:	e006      	b.n	80098d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 fc87 	bl	800b1da <USBD_CtlError>
      ret = USBD_FAIL;
 80098cc:	2303      	movs	r3, #3
 80098ce:	75fb      	strb	r3, [r7, #23]
      break;
 80098d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	32b0      	adds	r2, #176	@ 0xb0
 80098fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009902:	2303      	movs	r3, #3
 8009904:	e065      	b.n	80099d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	32b0      	adds	r2, #176	@ 0xb0
 8009910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009914:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009916:	78fb      	ldrb	r3, [r7, #3]
 8009918:	f003 020f 	and.w	r2, r3, #15
 800991c:	6879      	ldr	r1, [r7, #4]
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	3318      	adds	r3, #24
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d02f      	beq.n	8009990 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	f003 020f 	and.w	r2, r3, #15
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	3318      	adds	r3, #24
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	f003 010f 	and.w	r1, r3, #15
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	460b      	mov	r3, r1
 8009950:	00db      	lsls	r3, r3, #3
 8009952:	440b      	add	r3, r1
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4403      	add	r3, r0
 8009958:	331c      	adds	r3, #28
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009960:	fb01 f303 	mul.w	r3, r1, r3
 8009964:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009966:	2b00      	cmp	r3, #0
 8009968:	d112      	bne.n	8009990 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	f003 020f 	and.w	r2, r3, #15
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	3318      	adds	r3, #24
 800997e:	2200      	movs	r2, #0
 8009980:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009982:	78f9      	ldrb	r1, [r7, #3]
 8009984:	2300      	movs	r3, #0
 8009986:	2200      	movs	r2, #0
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f002 f98e 	bl	800bcaa <USBD_LL_Transmit>
 800998e:	e01f      	b.n	80099d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	33b0      	adds	r3, #176	@ 0xb0
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d010      	beq.n	80099d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	33b0      	adds	r3, #176	@ 0xb0
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80099cc:	78fa      	ldrb	r2, [r7, #3]
 80099ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	460b      	mov	r3, r1
 80099e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	32b0      	adds	r2, #176	@ 0xb0
 80099f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	32b0      	adds	r2, #176	@ 0xb0
 8009a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e01a      	b.n	8009a42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f002 f98c 	bl	800bd2e <USBD_LL_GetRxDataSize>
 8009a16:	4602      	mov	r2, r0
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	33b0      	adds	r3, #176	@ 0xb0
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	32b0      	adds	r2, #176	@ 0xb0
 8009a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e024      	b.n	8009ab6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	33b0      	adds	r3, #176	@ 0xb0
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d019      	beq.n	8009ab4 <USBD_CDC_EP0_RxReady+0x6a>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009a86:	2bff      	cmp	r3, #255	@ 0xff
 8009a88:	d014      	beq.n	8009ab4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	33b0      	adds	r3, #176	@ 0xb0
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009aa2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009aaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	22ff      	movs	r2, #255	@ 0xff
 8009ab0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ac8:	2182      	movs	r1, #130	@ 0x82
 8009aca:	4818      	ldr	r0, [pc, #96]	@ (8009b2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009acc:	f000 fd4f 	bl	800a56e <USBD_GetEpDesc>
 8009ad0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	4815      	ldr	r0, [pc, #84]	@ (8009b2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ad6:	f000 fd4a 	bl	800a56e <USBD_GetEpDesc>
 8009ada:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009adc:	2181      	movs	r1, #129	@ 0x81
 8009ade:	4813      	ldr	r0, [pc, #76]	@ (8009b2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ae0:	f000 fd45 	bl	800a56e <USBD_GetEpDesc>
 8009ae4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2210      	movs	r2, #16
 8009af0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d006      	beq.n	8009b06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b00:	711a      	strb	r2, [r3, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d006      	beq.n	8009b1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b14:	711a      	strb	r2, [r3, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2243      	movs	r2, #67	@ 0x43
 8009b1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b20:	4b02      	ldr	r3, [pc, #8]	@ (8009b2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000064 	.word	0x20000064

08009b30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b38:	2182      	movs	r1, #130	@ 0x82
 8009b3a:	4818      	ldr	r0, [pc, #96]	@ (8009b9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b3c:	f000 fd17 	bl	800a56e <USBD_GetEpDesc>
 8009b40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b42:	2101      	movs	r1, #1
 8009b44:	4815      	ldr	r0, [pc, #84]	@ (8009b9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b46:	f000 fd12 	bl	800a56e <USBD_GetEpDesc>
 8009b4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b4c:	2181      	movs	r1, #129	@ 0x81
 8009b4e:	4813      	ldr	r0, [pc, #76]	@ (8009b9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b50:	f000 fd0d 	bl	800a56e <USBD_GetEpDesc>
 8009b54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2210      	movs	r2, #16
 8009b60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d006      	beq.n	8009b76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	711a      	strb	r2, [r3, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f042 0202 	orr.w	r2, r2, #2
 8009b74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d006      	beq.n	8009b8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	711a      	strb	r2, [r3, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f042 0202 	orr.w	r2, r2, #2
 8009b88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2243      	movs	r2, #67	@ 0x43
 8009b8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b90:	4b02      	ldr	r3, [pc, #8]	@ (8009b9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000064 	.word	0x20000064

08009ba0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ba8:	2182      	movs	r1, #130	@ 0x82
 8009baa:	4818      	ldr	r0, [pc, #96]	@ (8009c0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bac:	f000 fcdf 	bl	800a56e <USBD_GetEpDesc>
 8009bb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	4815      	ldr	r0, [pc, #84]	@ (8009c0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bb6:	f000 fcda 	bl	800a56e <USBD_GetEpDesc>
 8009bba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bbc:	2181      	movs	r1, #129	@ 0x81
 8009bbe:	4813      	ldr	r0, [pc, #76]	@ (8009c0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bc0:	f000 fcd5 	bl	800a56e <USBD_GetEpDesc>
 8009bc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2210      	movs	r2, #16
 8009bd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d006      	beq.n	8009be6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009be0:	711a      	strb	r2, [r3, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d006      	beq.n	8009bfa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bf4:	711a      	strb	r2, [r3, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2243      	movs	r2, #67	@ 0x43
 8009bfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c00:	4b02      	ldr	r3, [pc, #8]	@ (8009c0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000064 	.word	0x20000064

08009c10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	220a      	movs	r2, #10
 8009c1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c1e:	4b03      	ldr	r3, [pc, #12]	@ (8009c2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20000020 	.word	0x20000020

08009c30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e009      	b.n	8009c58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	33b0      	adds	r3, #176	@ 0xb0
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	32b0      	adds	r2, #176	@ 0xb0
 8009c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e008      	b.n	8009c9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	32b0      	adds	r2, #176	@ 0xb0
 8009cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e004      	b.n	8009cd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
	...

08009ce4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	32b0      	adds	r2, #176	@ 0xb0
 8009cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e025      	b.n	8009d56 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d11f      	bne.n	8009d54 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009d1c:	4b10      	ldr	r3, [pc, #64]	@ (8009d60 <USBD_CDC_TransmitPacket+0x7c>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 020f 	and.w	r2, r3, #15
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4403      	add	r3, r0
 8009d36:	3318      	adds	r3, #24
 8009d38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009d3a:	4b09      	ldr	r3, [pc, #36]	@ (8009d60 <USBD_CDC_TransmitPacket+0x7c>)
 8009d3c:	7819      	ldrb	r1, [r3, #0]
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 ffad 	bl	800bcaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	200000a7 	.word	0x200000a7

08009d64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	32b0      	adds	r2, #176	@ 0xb0
 8009d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	32b0      	adds	r2, #176	@ 0xb0
 8009d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e018      	b.n	8009dc4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	7c1b      	ldrb	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dcc <USBD_CDC_ReceivePacket+0x68>)
 8009d9c:	7819      	ldrb	r1, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 ff9f 	bl	800bcec <USBD_LL_PrepareReceive>
 8009dae:	e008      	b.n	8009dc2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009db0:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <USBD_CDC_ReceivePacket+0x68>)
 8009db2:	7819      	ldrb	r1, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009dba:	2340      	movs	r3, #64	@ 0x40
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f001 ff95 	bl	800bcec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	200000a8 	.word	0x200000a8

08009dd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e01f      	b.n	8009e28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	79fa      	ldrb	r2, [r7, #7]
 8009e1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f001 fe0f 	bl	800ba40 <USBD_LL_Init>
 8009e22:	4603      	mov	r3, r0
 8009e24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e025      	b.n	8009e94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	32ae      	adds	r2, #174	@ 0xae
 8009e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00f      	beq.n	8009e84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	32ae      	adds	r2, #174	@ 0xae
 8009e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e74:	f107 020e 	add.w	r2, r7, #14
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 fe17 	bl	800bad8 <USBD_LL_Start>
 8009eaa:	4603      	mov	r3, r0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ebc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d009      	beq.n	8009ef8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	78fa      	ldrb	r2, [r7, #3]
 8009eee:	4611      	mov	r1, r2
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	4798      	blx	r3
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	78fa      	ldrb	r2, [r7, #3]
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	4798      	blx	r3
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 f90c 	bl	800b166 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f6a:	f003 031f 	and.w	r3, r3, #31
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d01a      	beq.n	8009fa8 <USBD_LL_SetupStage+0x72>
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d822      	bhi.n	8009fbc <USBD_LL_SetupStage+0x86>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d002      	beq.n	8009f80 <USBD_LL_SetupStage+0x4a>
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d00a      	beq.n	8009f94 <USBD_LL_SetupStage+0x5e>
 8009f7e:	e01d      	b.n	8009fbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fb63 	bl	800a654 <USBD_StdDevReq>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73fb      	strb	r3, [r7, #15]
      break;
 8009f92:	e020      	b.n	8009fd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fbcb 	bl	800a738 <USBD_StdItfReq>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa6:	e016      	b.n	8009fd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fc2d 	bl	800a810 <USBD_StdEPReq>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8009fba:	e00c      	b.n	8009fd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 fde4 	bl	800bb98 <USBD_LL_StallEP>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd4:	bf00      	nop
  }

  return ret;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d16e      	bne.n	800a0d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ffe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a006:	2b03      	cmp	r3, #3
 800a008:	f040 8098 	bne.w	800a13c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	689a      	ldr	r2, [r3, #8]
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	429a      	cmp	r2, r3
 800a016:	d913      	bls.n	800a040 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	1ad2      	subs	r2, r2, r3
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	68da      	ldr	r2, [r3, #12]
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	4293      	cmp	r3, r2
 800a030:	bf28      	it	cs
 800a032:	4613      	movcs	r3, r2
 800a034:	461a      	mov	r2, r3
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f001 f988 	bl	800b34e <USBD_CtlContinueRx>
 800a03e:	e07d      	b.n	800a13c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a046:	f003 031f 	and.w	r3, r3, #31
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d014      	beq.n	800a078 <USBD_LL_DataOutStage+0x98>
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d81d      	bhi.n	800a08e <USBD_LL_DataOutStage+0xae>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <USBD_LL_DataOutStage+0x7c>
 800a056:	2b01      	cmp	r3, #1
 800a058:	d003      	beq.n	800a062 <USBD_LL_DataOutStage+0x82>
 800a05a:	e018      	b.n	800a08e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	75bb      	strb	r3, [r7, #22]
            break;
 800a060:	e018      	b.n	800a094 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	4619      	mov	r1, r3
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 fa64 	bl	800a53a <USBD_CoreFindIF>
 800a072:	4603      	mov	r3, r0
 800a074:	75bb      	strb	r3, [r7, #22]
            break;
 800a076:	e00d      	b.n	800a094 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	4619      	mov	r1, r3
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fa66 	bl	800a554 <USBD_CoreFindEP>
 800a088:	4603      	mov	r3, r0
 800a08a:	75bb      	strb	r3, [r7, #22]
            break;
 800a08c:	e002      	b.n	800a094 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	75bb      	strb	r3, [r7, #22]
            break;
 800a092:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a094:	7dbb      	ldrb	r3, [r7, #22]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d119      	bne.n	800a0ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d113      	bne.n	800a0ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a0a6:	7dba      	ldrb	r2, [r7, #22]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	32ae      	adds	r2, #174	@ 0xae
 800a0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00b      	beq.n	800a0ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a0b6:	7dba      	ldrb	r2, [r7, #22]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a0be:	7dba      	ldrb	r2, [r7, #22]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	32ae      	adds	r2, #174	@ 0xae
 800a0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f001 f94e 	bl	800b370 <USBD_CtlSendStatus>
 800a0d4:	e032      	b.n	800a13c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a0d6:	7afb      	ldrb	r3, [r7, #11]
 800a0d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 fa37 	bl	800a554 <USBD_CoreFindEP>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0ea:	7dbb      	ldrb	r3, [r7, #22]
 800a0ec:	2bff      	cmp	r3, #255	@ 0xff
 800a0ee:	d025      	beq.n	800a13c <USBD_LL_DataOutStage+0x15c>
 800a0f0:	7dbb      	ldrb	r3, [r7, #22]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d122      	bne.n	800a13c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d117      	bne.n	800a132 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a102:	7dba      	ldrb	r2, [r7, #22]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	32ae      	adds	r2, #174	@ 0xae
 800a108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00f      	beq.n	800a132 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a112:	7dba      	ldrb	r2, [r7, #22]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a11a:	7dba      	ldrb	r2, [r7, #22]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	32ae      	adds	r2, #174	@ 0xae
 800a120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	7afa      	ldrb	r2, [r7, #11]
 800a128:	4611      	mov	r1, r2
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	4798      	blx	r3
 800a12e:	4603      	mov	r3, r0
 800a130:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a132:	7dfb      	ldrb	r3, [r7, #23]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
 800a13a:	e000      	b.n	800a13e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b086      	sub	sp, #24
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	460b      	mov	r3, r1
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a154:	7afb      	ldrb	r3, [r7, #11]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d16f      	bne.n	800a23a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3314      	adds	r3, #20
 800a15e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a166:	2b02      	cmp	r3, #2
 800a168:	d15a      	bne.n	800a220 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	429a      	cmp	r2, r3
 800a174:	d914      	bls.n	800a1a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	1ad2      	subs	r2, r2, r3
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	461a      	mov	r2, r3
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f001 f8b0 	bl	800b2f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a192:	2300      	movs	r3, #0
 800a194:	2200      	movs	r2, #0
 800a196:	2100      	movs	r1, #0
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f001 fda7 	bl	800bcec <USBD_LL_PrepareReceive>
 800a19e:	e03f      	b.n	800a220 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	68da      	ldr	r2, [r3, #12]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d11c      	bne.n	800a1e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d316      	bcc.n	800a1e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d20f      	bcs.n	800a1e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f001 f891 	bl	800b2f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1d8:	2300      	movs	r3, #0
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f001 fd84 	bl	800bcec <USBD_LL_PrepareReceive>
 800a1e4:	e01c      	b.n	800a220 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d10f      	bne.n	800a212 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d009      	beq.n	800a212 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a212:	2180      	movs	r1, #128	@ 0x80
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f001 fcbf 	bl	800bb98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f001 f8bb 	bl	800b396 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d03a      	beq.n	800a2a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff fe42 	bl	8009eb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a238:	e032      	b.n	800a2a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a240:	b2db      	uxtb	r3, r3
 800a242:	4619      	mov	r1, r3
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f985 	bl	800a554 <USBD_CoreFindEP>
 800a24a:	4603      	mov	r3, r0
 800a24c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a24e:	7dfb      	ldrb	r3, [r7, #23]
 800a250:	2bff      	cmp	r3, #255	@ 0xff
 800a252:	d025      	beq.n	800a2a0 <USBD_LL_DataInStage+0x15a>
 800a254:	7dfb      	ldrb	r3, [r7, #23]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d122      	bne.n	800a2a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b03      	cmp	r3, #3
 800a264:	d11c      	bne.n	800a2a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a266:	7dfa      	ldrb	r2, [r7, #23]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	32ae      	adds	r2, #174	@ 0xae
 800a26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d014      	beq.n	800a2a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a276:	7dfa      	ldrb	r2, [r7, #23]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a27e:	7dfa      	ldrb	r2, [r7, #23]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	32ae      	adds	r2, #174	@ 0xae
 800a284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	7afa      	ldrb	r2, [r7, #11]
 800a28c:	4611      	mov	r1, r2
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	4798      	blx	r3
 800a292:	4603      	mov	r3, r0
 800a294:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a296:	7dbb      	ldrb	r3, [r7, #22]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a29c:	7dbb      	ldrb	r3, [r7, #22]
 800a29e:	e000      	b.n	800a2a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d014      	beq.n	800a310 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00e      	beq.n	800a310 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	6852      	ldr	r2, [r2, #4]
 800a2fe:	b2d2      	uxtb	r2, r2
 800a300:	4611      	mov	r1, r2
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	4798      	blx	r3
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a30c:	2303      	movs	r3, #3
 800a30e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a310:	2340      	movs	r3, #64	@ 0x40
 800a312:	2200      	movs	r2, #0
 800a314:	2100      	movs	r1, #0
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f001 fbf9 	bl	800bb0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2240      	movs	r2, #64	@ 0x40
 800a328:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a32c:	2340      	movs	r3, #64	@ 0x40
 800a32e:	2200      	movs	r2, #0
 800a330:	2180      	movs	r1, #128	@ 0x80
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f001 fbeb 	bl	800bb0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2240      	movs	r2, #64	@ 0x40
 800a342:	621a      	str	r2, [r3, #32]

  return ret;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	460b      	mov	r3, r1
 800a358:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a36e:	b480      	push	{r7}
 800a370:	b083      	sub	sp, #12
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b04      	cmp	r3, #4
 800a380:	d006      	beq.n	800a390 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2204      	movs	r2, #4
 800a394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b04      	cmp	r3, #4
 800a3b8:	d106      	bne.n	800a3c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d110      	bne.n	800a40c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00b      	beq.n	800a40c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a406:	69db      	ldr	r3, [r3, #28]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	32ae      	adds	r2, #174	@ 0xae
 800a42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a434:	2303      	movs	r3, #3
 800a436:	e01c      	b.n	800a472 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b03      	cmp	r3, #3
 800a442:	d115      	bne.n	800a470 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	32ae      	adds	r2, #174	@ 0xae
 800a44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00b      	beq.n	800a470 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	32ae      	adds	r2, #174	@ 0xae
 800a462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	78fa      	ldrb	r2, [r7, #3]
 800a46a:	4611      	mov	r1, r2
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	32ae      	adds	r2, #174	@ 0xae
 800a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a498:	2303      	movs	r3, #3
 800a49a:	e01c      	b.n	800a4d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d115      	bne.n	800a4d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	32ae      	adds	r2, #174	@ 0xae
 800a4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	32ae      	adds	r2, #174	@ 0xae
 800a4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4cc:	78fa      	ldrb	r2, [r7, #3]
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00e      	beq.n	800a530 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6852      	ldr	r2, [r2, #4]
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	4611      	mov	r1, r2
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a52c:	2303      	movs	r3, #3
 800a52e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a530:	7bfb      	ldrb	r3, [r7, #15]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a546:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a560:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a562:	4618      	mov	r0, r3
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b086      	sub	sp, #24
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	460b      	mov	r3, r1
 800a578:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a582:	2300      	movs	r3, #0
 800a584:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	885b      	ldrh	r3, [r3, #2]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	7812      	ldrb	r2, [r2, #0]
 800a590:	4293      	cmp	r3, r2
 800a592:	d91f      	bls.n	800a5d4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a59a:	e013      	b.n	800a5c4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a59c:	f107 030a 	add.w	r3, r7, #10
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6978      	ldr	r0, [r7, #20]
 800a5a4:	f000 f81b 	bl	800a5de <USBD_GetNextDesc>
 800a5a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	785b      	ldrb	r3, [r3, #1]
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d108      	bne.n	800a5c4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	789b      	ldrb	r3, [r3, #2]
 800a5ba:	78fa      	ldrb	r2, [r7, #3]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d008      	beq.n	800a5d2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	885b      	ldrh	r3, [r3, #2]
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	897b      	ldrh	r3, [r7, #10]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d8e5      	bhi.n	800a59c <USBD_GetEpDesc+0x2e>
 800a5d0:	e000      	b.n	800a5d4 <USBD_GetEpDesc+0x66>
          break;
 800a5d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a5d4:	693b      	ldr	r3, [r7, #16]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b085      	sub	sp, #20
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	881b      	ldrh	r3, [r3, #0]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	7812      	ldrb	r2, [r2, #0]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4413      	add	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a608:	68fb      	ldr	r3, [r7, #12]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a616:	b480      	push	{r7}
 800a618:	b087      	sub	sp, #28
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	3301      	adds	r3, #1
 800a62c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a634:	8a3b      	ldrh	r3, [r7, #16]
 800a636:	021b      	lsls	r3, r3, #8
 800a638:	b21a      	sxth	r2, r3
 800a63a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a63e:	4313      	orrs	r3, r2
 800a640:	b21b      	sxth	r3, r3
 800a642:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a644:	89fb      	ldrh	r3, [r7, #14]
}
 800a646:	4618      	mov	r0, r3
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
	...

0800a654 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a66a:	2b40      	cmp	r3, #64	@ 0x40
 800a66c:	d005      	beq.n	800a67a <USBD_StdDevReq+0x26>
 800a66e:	2b40      	cmp	r3, #64	@ 0x40
 800a670:	d857      	bhi.n	800a722 <USBD_StdDevReq+0xce>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00f      	beq.n	800a696 <USBD_StdDevReq+0x42>
 800a676:	2b20      	cmp	r3, #32
 800a678:	d153      	bne.n	800a722 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	32ae      	adds	r2, #174	@ 0xae
 800a684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	4798      	blx	r3
 800a690:	4603      	mov	r3, r0
 800a692:	73fb      	strb	r3, [r7, #15]
      break;
 800a694:	e04a      	b.n	800a72c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	2b09      	cmp	r3, #9
 800a69c:	d83b      	bhi.n	800a716 <USBD_StdDevReq+0xc2>
 800a69e:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a4 <USBD_StdDevReq+0x50>)
 800a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a4:	0800a6f9 	.word	0x0800a6f9
 800a6a8:	0800a70d 	.word	0x0800a70d
 800a6ac:	0800a717 	.word	0x0800a717
 800a6b0:	0800a703 	.word	0x0800a703
 800a6b4:	0800a717 	.word	0x0800a717
 800a6b8:	0800a6d7 	.word	0x0800a6d7
 800a6bc:	0800a6cd 	.word	0x0800a6cd
 800a6c0:	0800a717 	.word	0x0800a717
 800a6c4:	0800a6ef 	.word	0x0800a6ef
 800a6c8:	0800a6e1 	.word	0x0800a6e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fa3c 	bl	800ab4c <USBD_GetDescriptor>
          break;
 800a6d4:	e024      	b.n	800a720 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fba1 	bl	800ae20 <USBD_SetAddress>
          break;
 800a6de:	e01f      	b.n	800a720 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fbe0 	bl	800aea8 <USBD_SetConfig>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]
          break;
 800a6ec:	e018      	b.n	800a720 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fc83 	bl	800affc <USBD_GetConfig>
          break;
 800a6f6:	e013      	b.n	800a720 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fcb4 	bl	800b068 <USBD_GetStatus>
          break;
 800a700:	e00e      	b.n	800a720 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fce3 	bl	800b0d0 <USBD_SetFeature>
          break;
 800a70a:	e009      	b.n	800a720 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fd07 	bl	800b122 <USBD_ClrFeature>
          break;
 800a714:	e004      	b.n	800a720 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fd5e 	bl	800b1da <USBD_CtlError>
          break;
 800a71e:	bf00      	nop
      }
      break;
 800a720:	e004      	b.n	800a72c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fd58 	bl	800b1da <USBD_CtlError>
      break;
 800a72a:	bf00      	nop
  }

  return ret;
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop

0800a738 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a74e:	2b40      	cmp	r3, #64	@ 0x40
 800a750:	d005      	beq.n	800a75e <USBD_StdItfReq+0x26>
 800a752:	2b40      	cmp	r3, #64	@ 0x40
 800a754:	d852      	bhi.n	800a7fc <USBD_StdItfReq+0xc4>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <USBD_StdItfReq+0x26>
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	d14e      	bne.n	800a7fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a764:	b2db      	uxtb	r3, r3
 800a766:	3b01      	subs	r3, #1
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d840      	bhi.n	800a7ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	889b      	ldrh	r3, [r3, #4]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b01      	cmp	r3, #1
 800a774:	d836      	bhi.n	800a7e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	889b      	ldrh	r3, [r3, #4]
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7ff fedb 	bl	800a53a <USBD_CoreFindIF>
 800a784:	4603      	mov	r3, r0
 800a786:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a788:	7bbb      	ldrb	r3, [r7, #14]
 800a78a:	2bff      	cmp	r3, #255	@ 0xff
 800a78c:	d01d      	beq.n	800a7ca <USBD_StdItfReq+0x92>
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d11a      	bne.n	800a7ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a794:	7bba      	ldrb	r2, [r7, #14]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	32ae      	adds	r2, #174	@ 0xae
 800a79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00f      	beq.n	800a7c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a7a4:	7bba      	ldrb	r2, [r7, #14]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7ac:	7bba      	ldrb	r2, [r7, #14]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	32ae      	adds	r2, #174	@ 0xae
 800a7b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
 800a7be:	4603      	mov	r3, r0
 800a7c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7c2:	e004      	b.n	800a7ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7c8:	e001      	b.n	800a7ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	88db      	ldrh	r3, [r3, #6]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d110      	bne.n	800a7f8 <USBD_StdItfReq+0xc0>
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10d      	bne.n	800a7f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fdc7 	bl	800b370 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7e2:	e009      	b.n	800a7f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fcf7 	bl	800b1da <USBD_CtlError>
          break;
 800a7ec:	e004      	b.n	800a7f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fcf2 	bl	800b1da <USBD_CtlError>
          break;
 800a7f6:	e000      	b.n	800a7fa <USBD_StdItfReq+0xc2>
          break;
 800a7f8:	bf00      	nop
      }
      break;
 800a7fa:	e004      	b.n	800a806 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fceb 	bl	800b1da <USBD_CtlError>
      break;
 800a804:	bf00      	nop
  }

  return ret;
 800a806:	7bfb      	ldrb	r3, [r7, #15]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	889b      	ldrh	r3, [r3, #4]
 800a822:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a82c:	2b40      	cmp	r3, #64	@ 0x40
 800a82e:	d007      	beq.n	800a840 <USBD_StdEPReq+0x30>
 800a830:	2b40      	cmp	r3, #64	@ 0x40
 800a832:	f200 817f 	bhi.w	800ab34 <USBD_StdEPReq+0x324>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d02a      	beq.n	800a890 <USBD_StdEPReq+0x80>
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	f040 817a 	bne.w	800ab34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a840:	7bbb      	ldrb	r3, [r7, #14]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff fe85 	bl	800a554 <USBD_CoreFindEP>
 800a84a:	4603      	mov	r3, r0
 800a84c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a84e:	7b7b      	ldrb	r3, [r7, #13]
 800a850:	2bff      	cmp	r3, #255	@ 0xff
 800a852:	f000 8174 	beq.w	800ab3e <USBD_StdEPReq+0x32e>
 800a856:	7b7b      	ldrb	r3, [r7, #13]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f040 8170 	bne.w	800ab3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a85e:	7b7a      	ldrb	r2, [r7, #13]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a866:	7b7a      	ldrb	r2, [r7, #13]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	32ae      	adds	r2, #174	@ 0xae
 800a86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 8163 	beq.w	800ab3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a878:	7b7a      	ldrb	r2, [r7, #13]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	32ae      	adds	r2, #174	@ 0xae
 800a87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	4798      	blx	r3
 800a88a:	4603      	mov	r3, r0
 800a88c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a88e:	e156      	b.n	800ab3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	785b      	ldrb	r3, [r3, #1]
 800a894:	2b03      	cmp	r3, #3
 800a896:	d008      	beq.n	800a8aa <USBD_StdEPReq+0x9a>
 800a898:	2b03      	cmp	r3, #3
 800a89a:	f300 8145 	bgt.w	800ab28 <USBD_StdEPReq+0x318>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 809b 	beq.w	800a9da <USBD_StdEPReq+0x1ca>
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d03c      	beq.n	800a922 <USBD_StdEPReq+0x112>
 800a8a8:	e13e      	b.n	800ab28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d002      	beq.n	800a8bc <USBD_StdEPReq+0xac>
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d016      	beq.n	800a8e8 <USBD_StdEPReq+0xd8>
 800a8ba:	e02c      	b.n	800a916 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00d      	beq.n	800a8de <USBD_StdEPReq+0xce>
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	2b80      	cmp	r3, #128	@ 0x80
 800a8c6:	d00a      	beq.n	800a8de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 f963 	bl	800bb98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8d2:	2180      	movs	r1, #128	@ 0x80
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 f95f 	bl	800bb98 <USBD_LL_StallEP>
 800a8da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8dc:	e020      	b.n	800a920 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fc7a 	bl	800b1da <USBD_CtlError>
              break;
 800a8e6:	e01b      	b.n	800a920 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	885b      	ldrh	r3, [r3, #2]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10e      	bne.n	800a90e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00b      	beq.n	800a90e <USBD_StdEPReq+0xfe>
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	2b80      	cmp	r3, #128	@ 0x80
 800a8fa:	d008      	beq.n	800a90e <USBD_StdEPReq+0xfe>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	88db      	ldrh	r3, [r3, #6]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d104      	bne.n	800a90e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 f945 	bl	800bb98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fd2e 	bl	800b370 <USBD_CtlSendStatus>

              break;
 800a914:	e004      	b.n	800a920 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fc5e 	bl	800b1da <USBD_CtlError>
              break;
 800a91e:	bf00      	nop
          }
          break;
 800a920:	e107      	b.n	800ab32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d002      	beq.n	800a934 <USBD_StdEPReq+0x124>
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d016      	beq.n	800a960 <USBD_StdEPReq+0x150>
 800a932:	e04b      	b.n	800a9cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00d      	beq.n	800a956 <USBD_StdEPReq+0x146>
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
 800a93c:	2b80      	cmp	r3, #128	@ 0x80
 800a93e:	d00a      	beq.n	800a956 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 f927 	bl	800bb98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a94a:	2180      	movs	r1, #128	@ 0x80
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 f923 	bl	800bb98 <USBD_LL_StallEP>
 800a952:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a954:	e040      	b.n	800a9d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fc3e 	bl	800b1da <USBD_CtlError>
              break;
 800a95e:	e03b      	b.n	800a9d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	885b      	ldrh	r3, [r3, #2]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d136      	bne.n	800a9d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d004      	beq.n	800a97c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f001 f92d 	bl	800bbd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fcf7 	bl	800b370 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff fde4 	bl	800a554 <USBD_CoreFindEP>
 800a98c:	4603      	mov	r3, r0
 800a98e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a990:	7b7b      	ldrb	r3, [r7, #13]
 800a992:	2bff      	cmp	r3, #255	@ 0xff
 800a994:	d01f      	beq.n	800a9d6 <USBD_StdEPReq+0x1c6>
 800a996:	7b7b      	ldrb	r3, [r7, #13]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d11c      	bne.n	800a9d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a99c:	7b7a      	ldrb	r2, [r7, #13]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a9a4:	7b7a      	ldrb	r2, [r7, #13]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	32ae      	adds	r2, #174	@ 0xae
 800a9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d010      	beq.n	800a9d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9b4:	7b7a      	ldrb	r2, [r7, #13]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	32ae      	adds	r2, #174	@ 0xae
 800a9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	4798      	blx	r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a9ca:	e004      	b.n	800a9d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fc03 	bl	800b1da <USBD_CtlError>
              break;
 800a9d4:	e000      	b.n	800a9d8 <USBD_StdEPReq+0x1c8>
              break;
 800a9d6:	bf00      	nop
          }
          break;
 800a9d8:	e0ab      	b.n	800ab32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d002      	beq.n	800a9ec <USBD_StdEPReq+0x1dc>
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d032      	beq.n	800aa50 <USBD_StdEPReq+0x240>
 800a9ea:	e097      	b.n	800ab1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d007      	beq.n	800aa02 <USBD_StdEPReq+0x1f2>
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	2b80      	cmp	r3, #128	@ 0x80
 800a9f6:	d004      	beq.n	800aa02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fbed 	bl	800b1da <USBD_CtlError>
                break;
 800aa00:	e091      	b.n	800ab26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	da0b      	bge.n	800aa22 <USBD_StdEPReq+0x212>
 800aa0a:	7bbb      	ldrb	r3, [r7, #14]
 800aa0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	3310      	adds	r3, #16
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	3304      	adds	r3, #4
 800aa20:	e00b      	b.n	800aa3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa28:	4613      	mov	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	4413      	add	r3, r2
 800aa38:	3304      	adds	r3, #4
 800aa3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2202      	movs	r2, #2
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fc37 	bl	800b2bc <USBD_CtlSendData>
              break;
 800aa4e:	e06a      	b.n	800ab26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	da11      	bge.n	800aa7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	f003 020f 	and.w	r2, r3, #15
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	4613      	mov	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	3324      	adds	r3, #36	@ 0x24
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d117      	bne.n	800aaa2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fbb0 	bl	800b1da <USBD_CtlError>
                  break;
 800aa7a:	e054      	b.n	800ab26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa7c:	7bbb      	ldrb	r3, [r7, #14]
 800aa7e:	f003 020f 	and.w	r2, r3, #15
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa92:	881b      	ldrh	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d104      	bne.n	800aaa2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fb9d 	bl	800b1da <USBD_CtlError>
                  break;
 800aaa0:	e041      	b.n	800ab26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da0b      	bge.n	800aac2 <USBD_StdEPReq+0x2b2>
 800aaaa:	7bbb      	ldrb	r3, [r7, #14]
 800aaac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	3310      	adds	r3, #16
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	4413      	add	r3, r2
 800aabe:	3304      	adds	r3, #4
 800aac0:	e00b      	b.n	800aada <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
 800aac4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4413      	add	r3, r2
 800aad8:	3304      	adds	r3, #4
 800aada:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <USBD_StdEPReq+0x2d8>
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	2b80      	cmp	r3, #128	@ 0x80
 800aae6:	d103      	bne.n	800aaf0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2200      	movs	r2, #0
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	e00e      	b.n	800ab0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f001 f88d 	bl	800bc14 <USBD_LL_IsStallEP>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2201      	movs	r2, #1
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	e002      	b.n	800ab0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	2202      	movs	r2, #2
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fbd1 	bl	800b2bc <USBD_CtlSendData>
              break;
 800ab1a:	e004      	b.n	800ab26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fb5b 	bl	800b1da <USBD_CtlError>
              break;
 800ab24:	bf00      	nop
          }
          break;
 800ab26:	e004      	b.n	800ab32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fb55 	bl	800b1da <USBD_CtlError>
          break;
 800ab30:	bf00      	nop
      }
      break;
 800ab32:	e005      	b.n	800ab40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fb4f 	bl	800b1da <USBD_CtlError>
      break;
 800ab3c:	e000      	b.n	800ab40 <USBD_StdEPReq+0x330>
      break;
 800ab3e:	bf00      	nop
  }

  return ret;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	885b      	ldrh	r3, [r3, #2]
 800ab66:	0a1b      	lsrs	r3, r3, #8
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	2b06      	cmp	r3, #6
 800ab6e:	f200 8128 	bhi.w	800adc2 <USBD_GetDescriptor+0x276>
 800ab72:	a201      	add	r2, pc, #4	@ (adr r2, 800ab78 <USBD_GetDescriptor+0x2c>)
 800ab74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab78:	0800ab95 	.word	0x0800ab95
 800ab7c:	0800abad 	.word	0x0800abad
 800ab80:	0800abed 	.word	0x0800abed
 800ab84:	0800adc3 	.word	0x0800adc3
 800ab88:	0800adc3 	.word	0x0800adc3
 800ab8c:	0800ad63 	.word	0x0800ad63
 800ab90:	0800ad8f 	.word	0x0800ad8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	7c12      	ldrb	r2, [r2, #16]
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
 800aba8:	60f8      	str	r0, [r7, #12]
      break;
 800abaa:	e112      	b.n	800add2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7c1b      	ldrb	r3, [r3, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10d      	bne.n	800abd0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbc:	f107 0208 	add.w	r2, r7, #8
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
 800abc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3301      	adds	r3, #1
 800abca:	2202      	movs	r2, #2
 800abcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abce:	e100      	b.n	800add2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd8:	f107 0208 	add.w	r2, r7, #8
 800abdc:	4610      	mov	r0, r2
 800abde:	4798      	blx	r3
 800abe0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3301      	adds	r3, #1
 800abe6:	2202      	movs	r2, #2
 800abe8:	701a      	strb	r2, [r3, #0]
      break;
 800abea:	e0f2      	b.n	800add2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	885b      	ldrh	r3, [r3, #2]
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b05      	cmp	r3, #5
 800abf4:	f200 80ac 	bhi.w	800ad50 <USBD_GetDescriptor+0x204>
 800abf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ac00 <USBD_GetDescriptor+0xb4>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800ac19 	.word	0x0800ac19
 800ac04:	0800ac4d 	.word	0x0800ac4d
 800ac08:	0800ac81 	.word	0x0800ac81
 800ac0c:	0800acb5 	.word	0x0800acb5
 800ac10:	0800ace9 	.word	0x0800ace9
 800ac14:	0800ad1d 	.word	0x0800ad1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00b      	beq.n	800ac3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	7c12      	ldrb	r2, [r2, #16]
 800ac30:	f107 0108 	add.w	r1, r7, #8
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
 800ac38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac3a:	e091      	b.n	800ad60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 facb 	bl	800b1da <USBD_CtlError>
            err++;
 800ac44:	7afb      	ldrb	r3, [r7, #11]
 800ac46:	3301      	adds	r3, #1
 800ac48:	72fb      	strb	r3, [r7, #11]
          break;
 800ac4a:	e089      	b.n	800ad60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00b      	beq.n	800ac70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	7c12      	ldrb	r2, [r2, #16]
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
 800ac6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac6e:	e077      	b.n	800ad60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fab1 	bl	800b1da <USBD_CtlError>
            err++;
 800ac78:	7afb      	ldrb	r3, [r7, #11]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac7e:	e06f      	b.n	800ad60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00b      	beq.n	800aca4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	7c12      	ldrb	r2, [r2, #16]
 800ac98:	f107 0108 	add.w	r1, r7, #8
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
 800aca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aca2:	e05d      	b.n	800ad60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa97 	bl	800b1da <USBD_CtlError>
            err++;
 800acac:	7afb      	ldrb	r3, [r7, #11]
 800acae:	3301      	adds	r3, #1
 800acb0:	72fb      	strb	r3, [r7, #11]
          break;
 800acb2:	e055      	b.n	800ad60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	7c12      	ldrb	r2, [r2, #16]
 800accc:	f107 0108 	add.w	r1, r7, #8
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
 800acd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acd6:	e043      	b.n	800ad60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa7d 	bl	800b1da <USBD_CtlError>
            err++;
 800ace0:	7afb      	ldrb	r3, [r7, #11]
 800ace2:	3301      	adds	r3, #1
 800ace4:	72fb      	strb	r3, [r7, #11]
          break;
 800ace6:	e03b      	b.n	800ad60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00b      	beq.n	800ad0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7c12      	ldrb	r2, [r2, #16]
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
 800ad08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0a:	e029      	b.n	800ad60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fa63 	bl	800b1da <USBD_CtlError>
            err++;
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	3301      	adds	r3, #1
 800ad18:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1a:	e021      	b.n	800ad60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7c12      	ldrb	r2, [r2, #16]
 800ad34:	f107 0108 	add.w	r1, r7, #8
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4798      	blx	r3
 800ad3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3e:	e00f      	b.n	800ad60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa49 	bl	800b1da <USBD_CtlError>
            err++;
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4e:	e007      	b.n	800ad60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa41 	bl	800b1da <USBD_CtlError>
          err++;
 800ad58:	7afb      	ldrb	r3, [r7, #11]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad5e:	bf00      	nop
      }
      break;
 800ad60:	e037      	b.n	800add2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	7c1b      	ldrb	r3, [r3, #16]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d109      	bne.n	800ad7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad72:	f107 0208 	add.w	r2, r7, #8
 800ad76:	4610      	mov	r0, r2
 800ad78:	4798      	blx	r3
 800ad7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad7c:	e029      	b.n	800add2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fa2a 	bl	800b1da <USBD_CtlError>
        err++;
 800ad86:	7afb      	ldrb	r3, [r7, #11]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	72fb      	strb	r3, [r7, #11]
      break;
 800ad8c:	e021      	b.n	800add2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	7c1b      	ldrb	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10d      	bne.n	800adb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad9e:	f107 0208 	add.w	r2, r7, #8
 800ada2:	4610      	mov	r0, r2
 800ada4:	4798      	blx	r3
 800ada6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3301      	adds	r3, #1
 800adac:	2207      	movs	r2, #7
 800adae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adb0:	e00f      	b.n	800add2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fa10 	bl	800b1da <USBD_CtlError>
        err++;
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	3301      	adds	r3, #1
 800adbe:	72fb      	strb	r3, [r7, #11]
      break;
 800adc0:	e007      	b.n	800add2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fa08 	bl	800b1da <USBD_CtlError>
      err++;
 800adca:	7afb      	ldrb	r3, [r7, #11]
 800adcc:	3301      	adds	r3, #1
 800adce:	72fb      	strb	r3, [r7, #11]
      break;
 800add0:	bf00      	nop
  }

  if (err != 0U)
 800add2:	7afb      	ldrb	r3, [r7, #11]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11e      	bne.n	800ae16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	88db      	ldrh	r3, [r3, #6]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d016      	beq.n	800ae0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ade0:	893b      	ldrh	r3, [r7, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00e      	beq.n	800ae04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	88da      	ldrh	r2, [r3, #6]
 800adea:	893b      	ldrh	r3, [r7, #8]
 800adec:	4293      	cmp	r3, r2
 800adee:	bf28      	it	cs
 800adf0:	4613      	movcs	r3, r2
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adf6:	893b      	ldrh	r3, [r7, #8]
 800adf8:	461a      	mov	r2, r3
 800adfa:	68f9      	ldr	r1, [r7, #12]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fa5d 	bl	800b2bc <USBD_CtlSendData>
 800ae02:	e009      	b.n	800ae18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f9e7 	bl	800b1da <USBD_CtlError>
 800ae0c:	e004      	b.n	800ae18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 faae 	bl	800b370 <USBD_CtlSendStatus>
 800ae14:	e000      	b.n	800ae18 <USBD_GetDescriptor+0x2cc>
    return;
 800ae16:	bf00      	nop
  }
}
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop

0800ae20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	889b      	ldrh	r3, [r3, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d131      	bne.n	800ae96 <USBD_SetAddress+0x76>
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	88db      	ldrh	r3, [r3, #6]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d12d      	bne.n	800ae96 <USBD_SetAddress+0x76>
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	885b      	ldrh	r3, [r3, #2]
 800ae3e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae40:	d829      	bhi.n	800ae96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	885b      	ldrh	r3, [r3, #2]
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d104      	bne.n	800ae64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae5a:	6839      	ldr	r1, [r7, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f9bc 	bl	800b1da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae62:	e01d      	b.n	800aea0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	7bfa      	ldrb	r2, [r7, #15]
 800ae68:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fefb 	bl	800bc6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fa7a 	bl	800b370 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2202      	movs	r2, #2
 800ae86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae8a:	e009      	b.n	800aea0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae94:	e004      	b.n	800aea0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f99e 	bl	800b1da <USBD_CtlError>
  }
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	885b      	ldrh	r3, [r3, #2]
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	4b4e      	ldr	r3, [pc, #312]	@ (800aff8 <USBD_SetConfig+0x150>)
 800aebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aec0:	4b4d      	ldr	r3, [pc, #308]	@ (800aff8 <USBD_SetConfig+0x150>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d905      	bls.n	800aed4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f985 	bl	800b1da <USBD_CtlError>
    return USBD_FAIL;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e08c      	b.n	800afee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d002      	beq.n	800aee6 <USBD_SetConfig+0x3e>
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d029      	beq.n	800af38 <USBD_SetConfig+0x90>
 800aee4:	e075      	b.n	800afd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aee6:	4b44      	ldr	r3, [pc, #272]	@ (800aff8 <USBD_SetConfig+0x150>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d020      	beq.n	800af30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aeee:	4b42      	ldr	r3, [pc, #264]	@ (800aff8 <USBD_SetConfig+0x150>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aef8:	4b3f      	ldr	r3, [pc, #252]	@ (800aff8 <USBD_SetConfig+0x150>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7fe ffe3 	bl	8009eca <USBD_SetClassConfig>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d008      	beq.n	800af20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f962 	bl	800b1da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2202      	movs	r2, #2
 800af1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af1e:	e065      	b.n	800afec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fa25 	bl	800b370 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2203      	movs	r2, #3
 800af2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af2e:	e05d      	b.n	800afec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fa1d 	bl	800b370 <USBD_CtlSendStatus>
      break;
 800af36:	e059      	b.n	800afec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af38:	4b2f      	ldr	r3, [pc, #188]	@ (800aff8 <USBD_SetConfig+0x150>)
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d112      	bne.n	800af66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800af48:	4b2b      	ldr	r3, [pc, #172]	@ (800aff8 <USBD_SetConfig+0x150>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	461a      	mov	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af52:	4b29      	ldr	r3, [pc, #164]	@ (800aff8 <USBD_SetConfig+0x150>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7fe ffd2 	bl	8009f02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fa06 	bl	800b370 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af64:	e042      	b.n	800afec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af66:	4b24      	ldr	r3, [pc, #144]	@ (800aff8 <USBD_SetConfig+0x150>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d02a      	beq.n	800afca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7fe ffc0 	bl	8009f02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af82:	4b1d      	ldr	r3, [pc, #116]	@ (800aff8 <USBD_SetConfig+0x150>)
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af8c:	4b1a      	ldr	r3, [pc, #104]	@ (800aff8 <USBD_SetConfig+0x150>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7fe ff99 	bl	8009eca <USBD_SetClassConfig>
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00f      	beq.n	800afc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f918 	bl	800b1da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7fe ffa5 	bl	8009f02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2202      	movs	r2, #2
 800afbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800afc0:	e014      	b.n	800afec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f9d4 	bl	800b370 <USBD_CtlSendStatus>
      break;
 800afc8:	e010      	b.n	800afec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f9d0 	bl	800b370 <USBD_CtlSendStatus>
      break;
 800afd0:	e00c      	b.n	800afec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f900 	bl	800b1da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afda:	4b07      	ldr	r3, [pc, #28]	@ (800aff8 <USBD_SetConfig+0x150>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7fe ff8e 	bl	8009f02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800afe6:	2303      	movs	r3, #3
 800afe8:	73fb      	strb	r3, [r7, #15]
      break;
 800afea:	bf00      	nop
  }

  return ret;
 800afec:	7bfb      	ldrb	r3, [r7, #15]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000430 	.word	0x20000430

0800affc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	88db      	ldrh	r3, [r3, #6]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d004      	beq.n	800b018 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f8e2 	bl	800b1da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b016:	e023      	b.n	800b060 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	dc02      	bgt.n	800b02a <USBD_GetConfig+0x2e>
 800b024:	2b00      	cmp	r3, #0
 800b026:	dc03      	bgt.n	800b030 <USBD_GetConfig+0x34>
 800b028:	e015      	b.n	800b056 <USBD_GetConfig+0x5a>
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d00b      	beq.n	800b046 <USBD_GetConfig+0x4a>
 800b02e:	e012      	b.n	800b056 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	3308      	adds	r3, #8
 800b03a:	2201      	movs	r2, #1
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f93c 	bl	800b2bc <USBD_CtlSendData>
        break;
 800b044:	e00c      	b.n	800b060 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3304      	adds	r3, #4
 800b04a:	2201      	movs	r2, #1
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f934 	bl	800b2bc <USBD_CtlSendData>
        break;
 800b054:	e004      	b.n	800b060 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f8be 	bl	800b1da <USBD_CtlError>
        break;
 800b05e:	bf00      	nop
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	3b01      	subs	r3, #1
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d81e      	bhi.n	800b0be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	88db      	ldrh	r3, [r3, #6]
 800b084:	2b02      	cmp	r3, #2
 800b086:	d004      	beq.n	800b092 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f8a5 	bl	800b1da <USBD_CtlError>
        break;
 800b090:	e01a      	b.n	800b0c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d005      	beq.n	800b0ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	f043 0202 	orr.w	r2, r3, #2
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f900 	bl	800b2bc <USBD_CtlSendData>
      break;
 800b0bc:	e004      	b.n	800b0c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f88a 	bl	800b1da <USBD_CtlError>
      break;
 800b0c6:	bf00      	nop
  }
}
 800b0c8:	bf00      	nop
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	885b      	ldrh	r3, [r3, #2]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d107      	bne.n	800b0f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f940 	bl	800b370 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b0f0:	e013      	b.n	800b11a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	885b      	ldrh	r3, [r3, #2]
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d10b      	bne.n	800b112 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	889b      	ldrh	r3, [r3, #4]
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	b29b      	uxth	r3, r3
 800b102:	b2da      	uxtb	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f930 	bl	800b370 <USBD_CtlSendStatus>
}
 800b110:	e003      	b.n	800b11a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f860 	bl	800b1da <USBD_CtlError>
}
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b132:	b2db      	uxtb	r3, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	2b02      	cmp	r3, #2
 800b138:	d80b      	bhi.n	800b152 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	885b      	ldrh	r3, [r3, #2]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d10c      	bne.n	800b15c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f910 	bl	800b370 <USBD_CtlSendStatus>
      }
      break;
 800b150:	e004      	b.n	800b15c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f840 	bl	800b1da <USBD_CtlError>
      break;
 800b15a:	e000      	b.n	800b15e <USBD_ClrFeature+0x3c>
      break;
 800b15c:	bf00      	nop
  }
}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	781a      	ldrb	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3301      	adds	r3, #1
 800b180:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	781a      	ldrb	r2, [r3, #0]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3301      	adds	r3, #1
 800b18e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7ff fa40 	bl	800a616 <SWAPBYTE>
 800b196:	4603      	mov	r3, r0
 800b198:	461a      	mov	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff fa33 	bl	800a616 <SWAPBYTE>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7ff fa26 	bl	800a616 <SWAPBYTE>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	80da      	strh	r2, [r3, #6]
}
 800b1d2:	bf00      	nop
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1e4:	2180      	movs	r1, #128	@ 0x80
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fcd6 	bl	800bb98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fcd2 	bl	800bb98 <USBD_LL_StallEP>
}
 800b1f4:	bf00      	nop
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d036      	beq.n	800b280 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b216:	6938      	ldr	r0, [r7, #16]
 800b218:	f000 f836 	bl	800b288 <USBD_GetLen>
 800b21c:	4603      	mov	r3, r0
 800b21e:	3301      	adds	r3, #1
 800b220:	b29b      	uxth	r3, r3
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	b29a      	uxth	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	4413      	add	r3, r2
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	7812      	ldrb	r2, [r2, #0]
 800b234:	701a      	strb	r2, [r3, #0]
  idx++;
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	3301      	adds	r3, #1
 800b23a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	4413      	add	r3, r2
 800b242:	2203      	movs	r2, #3
 800b244:	701a      	strb	r2, [r3, #0]
  idx++;
 800b246:	7dfb      	ldrb	r3, [r7, #23]
 800b248:	3301      	adds	r3, #1
 800b24a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b24c:	e013      	b.n	800b276 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	4413      	add	r3, r2
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	7812      	ldrb	r2, [r2, #0]
 800b258:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	3301      	adds	r3, #1
 800b25e:	613b      	str	r3, [r7, #16]
    idx++;
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	3301      	adds	r3, #1
 800b264:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	4413      	add	r3, r2
 800b26c:	2200      	movs	r2, #0
 800b26e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b270:	7dfb      	ldrb	r3, [r7, #23]
 800b272:	3301      	adds	r3, #1
 800b274:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1e7      	bne.n	800b24e <USBD_GetString+0x52>
 800b27e:	e000      	b.n	800b282 <USBD_GetString+0x86>
    return;
 800b280:	bf00      	nop
  }
}
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b298:	e005      	b.n	800b2a6 <USBD_GetLen+0x1e>
  {
    len++;
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
 800b29c:	3301      	adds	r3, #1
 800b29e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1f5      	bne.n	800b29a <USBD_GetLen+0x12>
  }

  return len;
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 fce1 	bl	800bcaa <USBD_LL_Transmit>

  return USBD_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	60b9      	str	r1, [r7, #8]
 800b2fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	2100      	movs	r1, #0
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f000 fcd0 	bl	800bcaa <USBD_LL_Transmit>

  return USBD_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2203      	movs	r2, #3
 800b324:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	2100      	movs	r1, #0
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 fcd4 	bl	800bcec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	2100      	movs	r1, #0
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f000 fcc3 	bl	800bcec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2204      	movs	r2, #4
 800b37c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b380:	2300      	movs	r3, #0
 800b382:	2200      	movs	r2, #0
 800b384:	2100      	movs	r1, #0
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fc8f 	bl	800bcaa <USBD_LL_Transmit>

  return USBD_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2205      	movs	r2, #5
 800b3a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fc9d 	bl	800bcec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4912      	ldr	r1, [pc, #72]	@ (800b40c <MX_USB_DEVICE_Init+0x50>)
 800b3c4:	4812      	ldr	r0, [pc, #72]	@ (800b410 <MX_USB_DEVICE_Init+0x54>)
 800b3c6:	f7fe fd03 	bl	8009dd0 <USBD_Init>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3d0:	f7f6 fb42 	bl	8001a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3d4:	490f      	ldr	r1, [pc, #60]	@ (800b414 <MX_USB_DEVICE_Init+0x58>)
 800b3d6:	480e      	ldr	r0, [pc, #56]	@ (800b410 <MX_USB_DEVICE_Init+0x54>)
 800b3d8:	f7fe fd2a 	bl	8009e30 <USBD_RegisterClass>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3e2:	f7f6 fb39 	bl	8001a58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3e6:	490c      	ldr	r1, [pc, #48]	@ (800b418 <MX_USB_DEVICE_Init+0x5c>)
 800b3e8:	4809      	ldr	r0, [pc, #36]	@ (800b410 <MX_USB_DEVICE_Init+0x54>)
 800b3ea:	f7fe fc21 	bl	8009c30 <USBD_CDC_RegisterInterface>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3f4:	f7f6 fb30 	bl	8001a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3f8:	4805      	ldr	r0, [pc, #20]	@ (800b410 <MX_USB_DEVICE_Init+0x54>)
 800b3fa:	f7fe fd4f 	bl	8009e9c <USBD_Start>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b404:	f7f6 fb28 	bl	8001a58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b408:	bf00      	nop
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	200000c0 	.word	0x200000c0
 800b410:	20000434 	.word	0x20000434
 800b414:	2000002c 	.word	0x2000002c
 800b418:	200000ac 	.word	0x200000ac

0800b41c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b420:	2200      	movs	r2, #0
 800b422:	4905      	ldr	r1, [pc, #20]	@ (800b438 <CDC_Init_FS+0x1c>)
 800b424:	4805      	ldr	r0, [pc, #20]	@ (800b43c <CDC_Init_FS+0x20>)
 800b426:	f7fe fc1d 	bl	8009c64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b42a:	4905      	ldr	r1, [pc, #20]	@ (800b440 <CDC_Init_FS+0x24>)
 800b42c:	4803      	ldr	r0, [pc, #12]	@ (800b43c <CDC_Init_FS+0x20>)
 800b42e:	f7fe fc3b 	bl	8009ca8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b432:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b434:	4618      	mov	r0, r3
 800b436:	bd80      	pop	{r7, pc}
 800b438:	20000f10 	.word	0x20000f10
 800b43c:	20000434 	.word	0x20000434
 800b440:	20000710 	.word	0x20000710

0800b444 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b444:	b480      	push	{r7}
 800b446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b448:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	6039      	str	r1, [r7, #0]
 800b45e:	71fb      	strb	r3, [r7, #7]
 800b460:	4613      	mov	r3, r2
 800b462:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	2b23      	cmp	r3, #35	@ 0x23
 800b468:	d84a      	bhi.n	800b500 <CDC_Control_FS+0xac>
 800b46a:	a201      	add	r2, pc, #4	@ (adr r2, 800b470 <CDC_Control_FS+0x1c>)
 800b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b470:	0800b501 	.word	0x0800b501
 800b474:	0800b501 	.word	0x0800b501
 800b478:	0800b501 	.word	0x0800b501
 800b47c:	0800b501 	.word	0x0800b501
 800b480:	0800b501 	.word	0x0800b501
 800b484:	0800b501 	.word	0x0800b501
 800b488:	0800b501 	.word	0x0800b501
 800b48c:	0800b501 	.word	0x0800b501
 800b490:	0800b501 	.word	0x0800b501
 800b494:	0800b501 	.word	0x0800b501
 800b498:	0800b501 	.word	0x0800b501
 800b49c:	0800b501 	.word	0x0800b501
 800b4a0:	0800b501 	.word	0x0800b501
 800b4a4:	0800b501 	.word	0x0800b501
 800b4a8:	0800b501 	.word	0x0800b501
 800b4ac:	0800b501 	.word	0x0800b501
 800b4b0:	0800b501 	.word	0x0800b501
 800b4b4:	0800b501 	.word	0x0800b501
 800b4b8:	0800b501 	.word	0x0800b501
 800b4bc:	0800b501 	.word	0x0800b501
 800b4c0:	0800b501 	.word	0x0800b501
 800b4c4:	0800b501 	.word	0x0800b501
 800b4c8:	0800b501 	.word	0x0800b501
 800b4cc:	0800b501 	.word	0x0800b501
 800b4d0:	0800b501 	.word	0x0800b501
 800b4d4:	0800b501 	.word	0x0800b501
 800b4d8:	0800b501 	.word	0x0800b501
 800b4dc:	0800b501 	.word	0x0800b501
 800b4e0:	0800b501 	.word	0x0800b501
 800b4e4:	0800b501 	.word	0x0800b501
 800b4e8:	0800b501 	.word	0x0800b501
 800b4ec:	0800b501 	.word	0x0800b501
 800b4f0:	0800b501 	.word	0x0800b501
 800b4f4:	0800b501 	.word	0x0800b501
 800b4f8:	0800b501 	.word	0x0800b501
 800b4fc:	0800b501 	.word	0x0800b501
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b500:	bf00      	nop
  }

  return (USBD_OK);
 800b502:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	4805      	ldr	r0, [pc, #20]	@ (800b534 <CDC_Receive_FS+0x24>)
 800b51e:	f7fe fbc3 	bl	8009ca8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b522:	4804      	ldr	r0, [pc, #16]	@ (800b534 <CDC_Receive_FS+0x24>)
 800b524:	f7fe fc1e 	bl	8009d64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b528:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	20000434 	.word	0x20000434

0800b538 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b548:	4b0d      	ldr	r3, [pc, #52]	@ (800b580 <CDC_Transmit_FS+0x48>)
 800b54a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b54e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e00b      	b.n	800b576 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b55e:	887b      	ldrh	r3, [r7, #2]
 800b560:	461a      	mov	r2, r3
 800b562:	6879      	ldr	r1, [r7, #4]
 800b564:	4806      	ldr	r0, [pc, #24]	@ (800b580 <CDC_Transmit_FS+0x48>)
 800b566:	f7fe fb7d 	bl	8009c64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b56a:	4805      	ldr	r0, [pc, #20]	@ (800b580 <CDC_Transmit_FS+0x48>)
 800b56c:	f7fe fbba 	bl	8009ce4 <USBD_CDC_TransmitPacket>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b574:	7bfb      	ldrb	r3, [r7, #15]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000434 	.word	0x20000434

0800b584 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b584:	b480      	push	{r7}
 800b586:	b087      	sub	sp, #28
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	4613      	mov	r3, r2
 800b590:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	371c      	adds	r7, #28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
	...

0800b5a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	6039      	str	r1, [r7, #0]
 800b5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2212      	movs	r2, #18
 800b5b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5ba:	4b03      	ldr	r3, [pc, #12]	@ (800b5c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	200000dc 	.word	0x200000dc

0800b5cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2204      	movs	r2, #4
 800b5dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5de:	4b03      	ldr	r3, [pc, #12]	@ (800b5ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	200000f0 	.word	0x200000f0

0800b5f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	6039      	str	r1, [r7, #0]
 800b5fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d105      	bne.n	800b60e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	4907      	ldr	r1, [pc, #28]	@ (800b624 <USBD_FS_ProductStrDescriptor+0x34>)
 800b606:	4808      	ldr	r0, [pc, #32]	@ (800b628 <USBD_FS_ProductStrDescriptor+0x38>)
 800b608:	f7ff fdf8 	bl	800b1fc <USBD_GetString>
 800b60c:	e004      	b.n	800b618 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	4904      	ldr	r1, [pc, #16]	@ (800b624 <USBD_FS_ProductStrDescriptor+0x34>)
 800b612:	4805      	ldr	r0, [pc, #20]	@ (800b628 <USBD_FS_ProductStrDescriptor+0x38>)
 800b614:	f7ff fdf2 	bl	800b1fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b618:	4b02      	ldr	r3, [pc, #8]	@ (800b624 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	20001710 	.word	0x20001710
 800b628:	0800c1bc 	.word	0x0800c1bc

0800b62c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	6039      	str	r1, [r7, #0]
 800b636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	4904      	ldr	r1, [pc, #16]	@ (800b64c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b63c:	4804      	ldr	r0, [pc, #16]	@ (800b650 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b63e:	f7ff fddd 	bl	800b1fc <USBD_GetString>
  return USBD_StrDesc;
 800b642:	4b02      	ldr	r3, [pc, #8]	@ (800b64c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20001710 	.word	0x20001710
 800b650:	0800c1d4 	.word	0x0800c1d4

0800b654 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	221a      	movs	r2, #26
 800b664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b666:	f000 f843 	bl	800b6f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b66a:	4b02      	ldr	r3, [pc, #8]	@ (800b674 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	200000f4 	.word	0x200000f4

0800b678 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	6039      	str	r1, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b684:	79fb      	ldrb	r3, [r7, #7]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d105      	bne.n	800b696 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4907      	ldr	r1, [pc, #28]	@ (800b6ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800b68e:	4808      	ldr	r0, [pc, #32]	@ (800b6b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b690:	f7ff fdb4 	bl	800b1fc <USBD_GetString>
 800b694:	e004      	b.n	800b6a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	4904      	ldr	r1, [pc, #16]	@ (800b6ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800b69a:	4805      	ldr	r0, [pc, #20]	@ (800b6b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b69c:	f7ff fdae 	bl	800b1fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6a0:	4b02      	ldr	r3, [pc, #8]	@ (800b6ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20001710 	.word	0x20001710
 800b6b0:	0800c1e8 	.word	0x0800c1e8

0800b6b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	6039      	str	r1, [r7, #0]
 800b6be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	4907      	ldr	r1, [pc, #28]	@ (800b6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6ca:	4808      	ldr	r0, [pc, #32]	@ (800b6ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6cc:	f7ff fd96 	bl	800b1fc <USBD_GetString>
 800b6d0:	e004      	b.n	800b6dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	4904      	ldr	r1, [pc, #16]	@ (800b6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6d6:	4805      	ldr	r0, [pc, #20]	@ (800b6ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6d8:	f7ff fd90 	bl	800b1fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6dc:	4b02      	ldr	r3, [pc, #8]	@ (800b6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20001710 	.word	0x20001710
 800b6ec:	0800c1f4 	.word	0x0800c1f4

0800b6f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b734 <Get_SerialNum+0x44>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b738 <Get_SerialNum+0x48>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b702:	4b0e      	ldr	r3, [pc, #56]	@ (800b73c <Get_SerialNum+0x4c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4413      	add	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d009      	beq.n	800b72a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b716:	2208      	movs	r2, #8
 800b718:	4909      	ldr	r1, [pc, #36]	@ (800b740 <Get_SerialNum+0x50>)
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f000 f814 	bl	800b748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b720:	2204      	movs	r2, #4
 800b722:	4908      	ldr	r1, [pc, #32]	@ (800b744 <Get_SerialNum+0x54>)
 800b724:	68b8      	ldr	r0, [r7, #8]
 800b726:	f000 f80f 	bl	800b748 <IntToUnicode>
  }
}
 800b72a:	bf00      	nop
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	1fff7a10 	.word	0x1fff7a10
 800b738:	1fff7a14 	.word	0x1fff7a14
 800b73c:	1fff7a18 	.word	0x1fff7a18
 800b740:	200000f6 	.word	0x200000f6
 800b744:	20000106 	.word	0x20000106

0800b748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b748:	b480      	push	{r7}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	4613      	mov	r3, r2
 800b754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b75a:	2300      	movs	r3, #0
 800b75c:	75fb      	strb	r3, [r7, #23]
 800b75e:	e027      	b.n	800b7b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	0f1b      	lsrs	r3, r3, #28
 800b764:	2b09      	cmp	r3, #9
 800b766:	d80b      	bhi.n	800b780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	0f1b      	lsrs	r3, r3, #28
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	7dfb      	ldrb	r3, [r7, #23]
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	4619      	mov	r1, r3
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	440b      	add	r3, r1
 800b778:	3230      	adds	r2, #48	@ 0x30
 800b77a:	b2d2      	uxtb	r2, r2
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	e00a      	b.n	800b796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	0f1b      	lsrs	r3, r3, #28
 800b784:	b2da      	uxtb	r2, r3
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	4619      	mov	r1, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	440b      	add	r3, r1
 800b790:	3237      	adds	r2, #55	@ 0x37
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	011b      	lsls	r3, r3, #4
 800b79a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	005b      	lsls	r3, r3, #1
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	75fb      	strb	r3, [r7, #23]
 800b7b0:	7dfa      	ldrb	r2, [r7, #23]
 800b7b2:	79fb      	ldrb	r3, [r7, #7]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d3d3      	bcc.n	800b760 <IntToUnicode+0x18>
  }
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	371c      	adds	r7, #28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08a      	sub	sp, #40	@ 0x28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7d0:	f107 0314 	add.w	r3, r7, #20
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	601a      	str	r2, [r3, #0]
 800b7d8:	605a      	str	r2, [r3, #4]
 800b7da:	609a      	str	r2, [r3, #8]
 800b7dc:	60da      	str	r2, [r3, #12]
 800b7de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7e8:	d13a      	bne.n	800b860 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	613b      	str	r3, [r7, #16]
 800b7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800b868 <HAL_PCD_MspInit+0xa0>)
 800b7f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7f2:	4a1d      	ldr	r2, [pc, #116]	@ (800b868 <HAL_PCD_MspInit+0xa0>)
 800b7f4:	f043 0301 	orr.w	r3, r3, #1
 800b7f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b7fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b868 <HAL_PCD_MspInit+0xa0>)
 800b7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b806:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b80a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b80c:	2302      	movs	r3, #2
 800b80e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b810:	2300      	movs	r3, #0
 800b812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b814:	2303      	movs	r3, #3
 800b816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b818:	230a      	movs	r3, #10
 800b81a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	4619      	mov	r1, r3
 800b822:	4812      	ldr	r0, [pc, #72]	@ (800b86c <HAL_PCD_MspInit+0xa4>)
 800b824:	f7f7 ff10 	bl	8003648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b828:	4b0f      	ldr	r3, [pc, #60]	@ (800b868 <HAL_PCD_MspInit+0xa0>)
 800b82a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b82c:	4a0e      	ldr	r2, [pc, #56]	@ (800b868 <HAL_PCD_MspInit+0xa0>)
 800b82e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b832:	6353      	str	r3, [r2, #52]	@ 0x34
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	4b0b      	ldr	r3, [pc, #44]	@ (800b868 <HAL_PCD_MspInit+0xa0>)
 800b83a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b83c:	4a0a      	ldr	r2, [pc, #40]	@ (800b868 <HAL_PCD_MspInit+0xa0>)
 800b83e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b842:	6453      	str	r3, [r2, #68]	@ 0x44
 800b844:	4b08      	ldr	r3, [pc, #32]	@ (800b868 <HAL_PCD_MspInit+0xa0>)
 800b846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b850:	2200      	movs	r2, #0
 800b852:	2100      	movs	r1, #0
 800b854:	2043      	movs	r0, #67	@ 0x43
 800b856:	f7f7 fabe 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b85a:	2043      	movs	r0, #67	@ 0x43
 800b85c:	f7f7 fad7 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b860:	bf00      	nop
 800b862:	3728      	adds	r7, #40	@ 0x28
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	40023800 	.word	0x40023800
 800b86c:	40020000 	.word	0x40020000

0800b870 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b884:	4619      	mov	r1, r3
 800b886:	4610      	mov	r0, r2
 800b888:	f7fe fb55 	bl	8009f36 <USBD_LL_SetupStage>
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b8a6:	78fa      	ldrb	r2, [r7, #3]
 800b8a8:	6879      	ldr	r1, [r7, #4]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	4413      	add	r3, r2
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	440b      	add	r3, r1
 800b8b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	78fb      	ldrb	r3, [r7, #3]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	f7fe fb8f 	bl	8009fe0 <USBD_LL_DataOutStage>
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b8dc:	78fa      	ldrb	r2, [r7, #3]
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	440b      	add	r3, r1
 800b8ea:	3320      	adds	r3, #32
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	78fb      	ldrb	r3, [r7, #3]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f7fe fc28 	bl	800a146 <USBD_LL_DataInStage>
}
 800b8f6:	bf00      	nop
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe fd62 	bl	800a3d6 <USBD_LL_SOF>
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b084      	sub	sp, #16
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b922:	2301      	movs	r3, #1
 800b924:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	79db      	ldrb	r3, [r3, #7]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d001      	beq.n	800b932 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b92e:	f7f6 f893 	bl	8001a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b938:	7bfa      	ldrb	r2, [r7, #15]
 800b93a:	4611      	mov	r1, r2
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fe fd06 	bl	800a34e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fe fcae 	bl	800a2aa <USBD_LL_Reset>
}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fd01 	bl	800a36e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	6812      	ldr	r2, [r2, #0]
 800b97a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b97e:	f043 0301 	orr.w	r3, r3, #1
 800b982:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	7adb      	ldrb	r3, [r3, #11]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d005      	beq.n	800b998 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b98c:	4b04      	ldr	r3, [pc, #16]	@ (800b9a0 <HAL_PCD_SuspendCallback+0x48>)
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	4a03      	ldr	r2, [pc, #12]	@ (800b9a0 <HAL_PCD_SuspendCallback+0x48>)
 800b992:	f043 0306 	orr.w	r3, r3, #6
 800b996:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	e000ed00 	.word	0xe000ed00

0800b9a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe fcf7 	bl	800a3a6 <USBD_LL_Resume>
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b9d2:	78fa      	ldrb	r2, [r7, #3]
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fd4f 	bl	800a47a <USBD_LL_IsoOUTIncomplete>
}
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b9f6:	78fa      	ldrb	r2, [r7, #3]
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fd0b 	bl	800a416 <USBD_LL_IsoINIncomplete>
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe fd61 	bl	800a4de <USBD_LL_DevConnected>
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fd5e 	bl	800a4f4 <USBD_LL_DevDisconnected>
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d13c      	bne.n	800baca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba50:	4a20      	ldr	r2, [pc, #128]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a1e      	ldr	r2, [pc, #120]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba5c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba60:	4b1c      	ldr	r3, [pc, #112]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ba66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba68:	4b1a      	ldr	r3, [pc, #104]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba6a:	2204      	movs	r2, #4
 800ba6c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba6e:	4b19      	ldr	r3, [pc, #100]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba70:	2202      	movs	r2, #2
 800ba72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba74:	4b17      	ldr	r3, [pc, #92]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba7a:	4b16      	ldr	r3, [pc, #88]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba80:	4b14      	ldr	r3, [pc, #80]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba86:	4b13      	ldr	r3, [pc, #76]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba8c:	4b11      	ldr	r3, [pc, #68]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ba92:	4b10      	ldr	r3, [pc, #64]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba98:	4b0e      	ldr	r3, [pc, #56]	@ (800bad4 <USBD_LL_Init+0x94>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba9e:	480d      	ldr	r0, [pc, #52]	@ (800bad4 <USBD_LL_Init+0x94>)
 800baa0:	f7f7 ffa0 	bl	80039e4 <HAL_PCD_Init>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800baaa:	f7f5 ffd5 	bl	8001a58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800baae:	2180      	movs	r1, #128	@ 0x80
 800bab0:	4808      	ldr	r0, [pc, #32]	@ (800bad4 <USBD_LL_Init+0x94>)
 800bab2:	f7f9 f9ca 	bl	8004e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bab6:	2240      	movs	r2, #64	@ 0x40
 800bab8:	2100      	movs	r1, #0
 800baba:	4806      	ldr	r0, [pc, #24]	@ (800bad4 <USBD_LL_Init+0x94>)
 800babc:	f7f9 f97e 	bl	8004dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bac0:	2280      	movs	r2, #128	@ 0x80
 800bac2:	2101      	movs	r1, #1
 800bac4:	4803      	ldr	r0, [pc, #12]	@ (800bad4 <USBD_LL_Init+0x94>)
 800bac6:	f7f9 f979 	bl	8004dbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	20001910 	.word	0x20001910

0800bad8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bae4:	2300      	movs	r3, #0
 800bae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800baee:	4618      	mov	r0, r3
 800baf0:	f7f8 f887 	bl	8003c02 <HAL_PCD_Start>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 f942 	bl	800bd84 <USBD_Get_USB_Status>
 800bb00:	4603      	mov	r3, r0
 800bb02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	4608      	mov	r0, r1
 800bb18:	4611      	mov	r1, r2
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	70fb      	strb	r3, [r7, #3]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70bb      	strb	r3, [r7, #2]
 800bb24:	4613      	mov	r3, r2
 800bb26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb36:	78bb      	ldrb	r3, [r7, #2]
 800bb38:	883a      	ldrh	r2, [r7, #0]
 800bb3a:	78f9      	ldrb	r1, [r7, #3]
 800bb3c:	f7f8 fd5b 	bl	80045f6 <HAL_PCD_EP_Open>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f91c 	bl	800bd84 <USBD_Get_USB_Status>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	460b      	mov	r3, r1
 800bb64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb74:	78fa      	ldrb	r2, [r7, #3]
 800bb76:	4611      	mov	r1, r2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7f8 fda4 	bl	80046c6 <HAL_PCD_EP_Close>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 f8fd 	bl	800bd84 <USBD_Get_USB_Status>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbb2:	78fa      	ldrb	r2, [r7, #3]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7f8 fe5c 	bl	8004874 <HAL_PCD_EP_SetStall>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 f8de 	bl	800bd84 <USBD_Get_USB_Status>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b084      	sub	sp, #16
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbf0:	78fa      	ldrb	r2, [r7, #3]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f8 fea0 	bl	800493a <HAL_PCD_EP_ClrStall>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 f8bf 	bl	800bd84 <USBD_Get_USB_Status>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	da0b      	bge.n	800bc48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc36:	68f9      	ldr	r1, [r7, #12]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	00db      	lsls	r3, r3, #3
 800bc3c:	4413      	add	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	440b      	add	r3, r1
 800bc42:	3316      	adds	r3, #22
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	e00b      	b.n	800bc60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc4e:	68f9      	ldr	r1, [r7, #12]
 800bc50:	4613      	mov	r3, r2
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	4413      	add	r3, r2
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	440b      	add	r3, r1
 800bc5a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bc5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc86:	78fa      	ldrb	r2, [r7, #3]
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7f8 fc8f 	bl	80045ae <HAL_PCD_SetAddress>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 f874 	bl	800bd84 <USBD_Get_USB_Status>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b086      	sub	sp, #24
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	60f8      	str	r0, [r7, #12]
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	603b      	str	r3, [r7, #0]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bcc8:	7af9      	ldrb	r1, [r7, #11]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	f7f8 fd97 	bl	8004800 <HAL_PCD_EP_Transmit>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 f853 	bl	800bd84 <USBD_Get_USB_Status>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bce2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	607a      	str	r2, [r7, #4]
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bd0a:	7af9      	ldrb	r1, [r7, #11]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	f7f8 fd23 	bl	800475a <HAL_PCD_EP_Receive>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 f832 	bl	800bd84 <USBD_Get_USB_Status>
 800bd20:	4603      	mov	r3, r0
 800bd22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd24:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3718      	adds	r7, #24
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b082      	sub	sp, #8
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd40:	78fa      	ldrb	r2, [r7, #3]
 800bd42:	4611      	mov	r1, r2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7f8 fd43 	bl	80047d0 <HAL_PCD_EP_GetRxCount>
 800bd4a:	4603      	mov	r3, r0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd5c:	4b03      	ldr	r3, [pc, #12]	@ (800bd6c <USBD_static_malloc+0x18>)
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	20001df4 	.word	0x20001df4

0800bd70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]

}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	d817      	bhi.n	800bdc8 <USBD_Get_USB_Status+0x44>
 800bd98:	a201      	add	r2, pc, #4	@ (adr r2, 800bda0 <USBD_Get_USB_Status+0x1c>)
 800bd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9e:	bf00      	nop
 800bda0:	0800bdb1 	.word	0x0800bdb1
 800bda4:	0800bdb7 	.word	0x0800bdb7
 800bda8:	0800bdbd 	.word	0x0800bdbd
 800bdac:	0800bdc3 	.word	0x0800bdc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb4:	e00b      	b.n	800bdce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdba:	e008      	b.n	800bdce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc0:	e005      	b.n	800bdce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc6:	e002      	b.n	800bdce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	73fb      	strb	r3, [r7, #15]
    break;
 800bdcc:	bf00      	nop
  }
  return usb_status;
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <_ZdlPvj>:
 800bddc:	f000 b811 	b.w	800be02 <_ZdlPv>

0800bde0 <_Znwj>:
 800bde0:	2801      	cmp	r0, #1
 800bde2:	bf38      	it	cc
 800bde4:	2001      	movcc	r0, #1
 800bde6:	b510      	push	{r4, lr}
 800bde8:	4604      	mov	r4, r0
 800bdea:	4620      	mov	r0, r4
 800bdec:	f000 f81c 	bl	800be28 <malloc>
 800bdf0:	b100      	cbz	r0, 800bdf4 <_Znwj+0x14>
 800bdf2:	bd10      	pop	{r4, pc}
 800bdf4:	f000 f808 	bl	800be08 <_ZSt15get_new_handlerv>
 800bdf8:	b908      	cbnz	r0, 800bdfe <_Znwj+0x1e>
 800bdfa:	f000 f80d 	bl	800be18 <abort>
 800bdfe:	4780      	blx	r0
 800be00:	e7f3      	b.n	800bdea <_Znwj+0xa>

0800be02 <_ZdlPv>:
 800be02:	f000 b819 	b.w	800be38 <free>
	...

0800be08 <_ZSt15get_new_handlerv>:
 800be08:	4b02      	ldr	r3, [pc, #8]	@ (800be14 <_ZSt15get_new_handlerv+0xc>)
 800be0a:	6818      	ldr	r0, [r3, #0]
 800be0c:	f3bf 8f5b 	dmb	ish
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	20002014 	.word	0x20002014

0800be18 <abort>:
 800be18:	b508      	push	{r3, lr}
 800be1a:	2006      	movs	r0, #6
 800be1c:	f000 f8f2 	bl	800c004 <raise>
 800be20:	2001      	movs	r0, #1
 800be22:	f7f5 ffb3 	bl	8001d8c <_exit>
	...

0800be28 <malloc>:
 800be28:	4b02      	ldr	r3, [pc, #8]	@ (800be34 <malloc+0xc>)
 800be2a:	4601      	mov	r1, r0
 800be2c:	6818      	ldr	r0, [r3, #0]
 800be2e:	f000 b82d 	b.w	800be8c <_malloc_r>
 800be32:	bf00      	nop
 800be34:	20000110 	.word	0x20000110

0800be38 <free>:
 800be38:	4b02      	ldr	r3, [pc, #8]	@ (800be44 <free+0xc>)
 800be3a:	4601      	mov	r1, r0
 800be3c:	6818      	ldr	r0, [r3, #0]
 800be3e:	f000 b939 	b.w	800c0b4 <_free_r>
 800be42:	bf00      	nop
 800be44:	20000110 	.word	0x20000110

0800be48 <sbrk_aligned>:
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	4e0f      	ldr	r6, [pc, #60]	@ (800be88 <sbrk_aligned+0x40>)
 800be4c:	460c      	mov	r4, r1
 800be4e:	6831      	ldr	r1, [r6, #0]
 800be50:	4605      	mov	r5, r0
 800be52:	b911      	cbnz	r1, 800be5a <sbrk_aligned+0x12>
 800be54:	f000 f8f2 	bl	800c03c <_sbrk_r>
 800be58:	6030      	str	r0, [r6, #0]
 800be5a:	4621      	mov	r1, r4
 800be5c:	4628      	mov	r0, r5
 800be5e:	f000 f8ed 	bl	800c03c <_sbrk_r>
 800be62:	1c43      	adds	r3, r0, #1
 800be64:	d103      	bne.n	800be6e <sbrk_aligned+0x26>
 800be66:	f04f 34ff 	mov.w	r4, #4294967295
 800be6a:	4620      	mov	r0, r4
 800be6c:	bd70      	pop	{r4, r5, r6, pc}
 800be6e:	1cc4      	adds	r4, r0, #3
 800be70:	f024 0403 	bic.w	r4, r4, #3
 800be74:	42a0      	cmp	r0, r4
 800be76:	d0f8      	beq.n	800be6a <sbrk_aligned+0x22>
 800be78:	1a21      	subs	r1, r4, r0
 800be7a:	4628      	mov	r0, r5
 800be7c:	f000 f8de 	bl	800c03c <_sbrk_r>
 800be80:	3001      	adds	r0, #1
 800be82:	d1f2      	bne.n	800be6a <sbrk_aligned+0x22>
 800be84:	e7ef      	b.n	800be66 <sbrk_aligned+0x1e>
 800be86:	bf00      	nop
 800be88:	20002018 	.word	0x20002018

0800be8c <_malloc_r>:
 800be8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be90:	1ccd      	adds	r5, r1, #3
 800be92:	f025 0503 	bic.w	r5, r5, #3
 800be96:	3508      	adds	r5, #8
 800be98:	2d0c      	cmp	r5, #12
 800be9a:	bf38      	it	cc
 800be9c:	250c      	movcc	r5, #12
 800be9e:	2d00      	cmp	r5, #0
 800bea0:	4606      	mov	r6, r0
 800bea2:	db01      	blt.n	800bea8 <_malloc_r+0x1c>
 800bea4:	42a9      	cmp	r1, r5
 800bea6:	d904      	bls.n	800beb2 <_malloc_r+0x26>
 800bea8:	230c      	movs	r3, #12
 800beaa:	6033      	str	r3, [r6, #0]
 800beac:	2000      	movs	r0, #0
 800beae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf88 <_malloc_r+0xfc>
 800beb6:	f000 f869 	bl	800bf8c <__malloc_lock>
 800beba:	f8d8 3000 	ldr.w	r3, [r8]
 800bebe:	461c      	mov	r4, r3
 800bec0:	bb44      	cbnz	r4, 800bf14 <_malloc_r+0x88>
 800bec2:	4629      	mov	r1, r5
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff ffbf 	bl	800be48 <sbrk_aligned>
 800beca:	1c43      	adds	r3, r0, #1
 800becc:	4604      	mov	r4, r0
 800bece:	d158      	bne.n	800bf82 <_malloc_r+0xf6>
 800bed0:	f8d8 4000 	ldr.w	r4, [r8]
 800bed4:	4627      	mov	r7, r4
 800bed6:	2f00      	cmp	r7, #0
 800bed8:	d143      	bne.n	800bf62 <_malloc_r+0xd6>
 800beda:	2c00      	cmp	r4, #0
 800bedc:	d04b      	beq.n	800bf76 <_malloc_r+0xea>
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	4639      	mov	r1, r7
 800bee2:	4630      	mov	r0, r6
 800bee4:	eb04 0903 	add.w	r9, r4, r3
 800bee8:	f000 f8a8 	bl	800c03c <_sbrk_r>
 800beec:	4581      	cmp	r9, r0
 800beee:	d142      	bne.n	800bf76 <_malloc_r+0xea>
 800bef0:	6821      	ldr	r1, [r4, #0]
 800bef2:	1a6d      	subs	r5, r5, r1
 800bef4:	4629      	mov	r1, r5
 800bef6:	4630      	mov	r0, r6
 800bef8:	f7ff ffa6 	bl	800be48 <sbrk_aligned>
 800befc:	3001      	adds	r0, #1
 800befe:	d03a      	beq.n	800bf76 <_malloc_r+0xea>
 800bf00:	6823      	ldr	r3, [r4, #0]
 800bf02:	442b      	add	r3, r5
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	f8d8 3000 	ldr.w	r3, [r8]
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	bb62      	cbnz	r2, 800bf68 <_malloc_r+0xdc>
 800bf0e:	f8c8 7000 	str.w	r7, [r8]
 800bf12:	e00f      	b.n	800bf34 <_malloc_r+0xa8>
 800bf14:	6822      	ldr	r2, [r4, #0]
 800bf16:	1b52      	subs	r2, r2, r5
 800bf18:	d420      	bmi.n	800bf5c <_malloc_r+0xd0>
 800bf1a:	2a0b      	cmp	r2, #11
 800bf1c:	d917      	bls.n	800bf4e <_malloc_r+0xc2>
 800bf1e:	1961      	adds	r1, r4, r5
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	6025      	str	r5, [r4, #0]
 800bf24:	bf18      	it	ne
 800bf26:	6059      	strne	r1, [r3, #4]
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	bf08      	it	eq
 800bf2c:	f8c8 1000 	streq.w	r1, [r8]
 800bf30:	5162      	str	r2, [r4, r5]
 800bf32:	604b      	str	r3, [r1, #4]
 800bf34:	4630      	mov	r0, r6
 800bf36:	f000 f82f 	bl	800bf98 <__malloc_unlock>
 800bf3a:	f104 000b 	add.w	r0, r4, #11
 800bf3e:	1d23      	adds	r3, r4, #4
 800bf40:	f020 0007 	bic.w	r0, r0, #7
 800bf44:	1ac2      	subs	r2, r0, r3
 800bf46:	bf1c      	itt	ne
 800bf48:	1a1b      	subne	r3, r3, r0
 800bf4a:	50a3      	strne	r3, [r4, r2]
 800bf4c:	e7af      	b.n	800beae <_malloc_r+0x22>
 800bf4e:	6862      	ldr	r2, [r4, #4]
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	bf0c      	ite	eq
 800bf54:	f8c8 2000 	streq.w	r2, [r8]
 800bf58:	605a      	strne	r2, [r3, #4]
 800bf5a:	e7eb      	b.n	800bf34 <_malloc_r+0xa8>
 800bf5c:	4623      	mov	r3, r4
 800bf5e:	6864      	ldr	r4, [r4, #4]
 800bf60:	e7ae      	b.n	800bec0 <_malloc_r+0x34>
 800bf62:	463c      	mov	r4, r7
 800bf64:	687f      	ldr	r7, [r7, #4]
 800bf66:	e7b6      	b.n	800bed6 <_malloc_r+0x4a>
 800bf68:	461a      	mov	r2, r3
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	d1fb      	bne.n	800bf68 <_malloc_r+0xdc>
 800bf70:	2300      	movs	r3, #0
 800bf72:	6053      	str	r3, [r2, #4]
 800bf74:	e7de      	b.n	800bf34 <_malloc_r+0xa8>
 800bf76:	230c      	movs	r3, #12
 800bf78:	6033      	str	r3, [r6, #0]
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f000 f80c 	bl	800bf98 <__malloc_unlock>
 800bf80:	e794      	b.n	800beac <_malloc_r+0x20>
 800bf82:	6005      	str	r5, [r0, #0]
 800bf84:	e7d6      	b.n	800bf34 <_malloc_r+0xa8>
 800bf86:	bf00      	nop
 800bf88:	2000201c 	.word	0x2000201c

0800bf8c <__malloc_lock>:
 800bf8c:	4801      	ldr	r0, [pc, #4]	@ (800bf94 <__malloc_lock+0x8>)
 800bf8e:	f000 b88f 	b.w	800c0b0 <__retarget_lock_acquire_recursive>
 800bf92:	bf00      	nop
 800bf94:	2000215c 	.word	0x2000215c

0800bf98 <__malloc_unlock>:
 800bf98:	4801      	ldr	r0, [pc, #4]	@ (800bfa0 <__malloc_unlock+0x8>)
 800bf9a:	f000 b88a 	b.w	800c0b2 <__retarget_lock_release_recursive>
 800bf9e:	bf00      	nop
 800bfa0:	2000215c 	.word	0x2000215c

0800bfa4 <memset>:
 800bfa4:	4402      	add	r2, r0
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d100      	bne.n	800bfae <memset+0xa>
 800bfac:	4770      	bx	lr
 800bfae:	f803 1b01 	strb.w	r1, [r3], #1
 800bfb2:	e7f9      	b.n	800bfa8 <memset+0x4>

0800bfb4 <_raise_r>:
 800bfb4:	291f      	cmp	r1, #31
 800bfb6:	b538      	push	{r3, r4, r5, lr}
 800bfb8:	4605      	mov	r5, r0
 800bfba:	460c      	mov	r4, r1
 800bfbc:	d904      	bls.n	800bfc8 <_raise_r+0x14>
 800bfbe:	2316      	movs	r3, #22
 800bfc0:	6003      	str	r3, [r0, #0]
 800bfc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc6:	bd38      	pop	{r3, r4, r5, pc}
 800bfc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bfca:	b112      	cbz	r2, 800bfd2 <_raise_r+0x1e>
 800bfcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfd0:	b94b      	cbnz	r3, 800bfe6 <_raise_r+0x32>
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f000 f830 	bl	800c038 <_getpid_r>
 800bfd8:	4622      	mov	r2, r4
 800bfda:	4601      	mov	r1, r0
 800bfdc:	4628      	mov	r0, r5
 800bfde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfe2:	f000 b817 	b.w	800c014 <_kill_r>
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d00a      	beq.n	800c000 <_raise_r+0x4c>
 800bfea:	1c59      	adds	r1, r3, #1
 800bfec:	d103      	bne.n	800bff6 <_raise_r+0x42>
 800bfee:	2316      	movs	r3, #22
 800bff0:	6003      	str	r3, [r0, #0]
 800bff2:	2001      	movs	r0, #1
 800bff4:	e7e7      	b.n	800bfc6 <_raise_r+0x12>
 800bff6:	2100      	movs	r1, #0
 800bff8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bffc:	4620      	mov	r0, r4
 800bffe:	4798      	blx	r3
 800c000:	2000      	movs	r0, #0
 800c002:	e7e0      	b.n	800bfc6 <_raise_r+0x12>

0800c004 <raise>:
 800c004:	4b02      	ldr	r3, [pc, #8]	@ (800c010 <raise+0xc>)
 800c006:	4601      	mov	r1, r0
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	f7ff bfd3 	b.w	800bfb4 <_raise_r>
 800c00e:	bf00      	nop
 800c010:	20000110 	.word	0x20000110

0800c014 <_kill_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d07      	ldr	r5, [pc, #28]	@ (800c034 <_kill_r+0x20>)
 800c018:	2300      	movs	r3, #0
 800c01a:	4604      	mov	r4, r0
 800c01c:	4608      	mov	r0, r1
 800c01e:	4611      	mov	r1, r2
 800c020:	602b      	str	r3, [r5, #0]
 800c022:	f7f5 fea3 	bl	8001d6c <_kill>
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	d102      	bne.n	800c030 <_kill_r+0x1c>
 800c02a:	682b      	ldr	r3, [r5, #0]
 800c02c:	b103      	cbz	r3, 800c030 <_kill_r+0x1c>
 800c02e:	6023      	str	r3, [r4, #0]
 800c030:	bd38      	pop	{r3, r4, r5, pc}
 800c032:	bf00      	nop
 800c034:	20002158 	.word	0x20002158

0800c038 <_getpid_r>:
 800c038:	f7f5 be90 	b.w	8001d5c <_getpid>

0800c03c <_sbrk_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	4d06      	ldr	r5, [pc, #24]	@ (800c058 <_sbrk_r+0x1c>)
 800c040:	2300      	movs	r3, #0
 800c042:	4604      	mov	r4, r0
 800c044:	4608      	mov	r0, r1
 800c046:	602b      	str	r3, [r5, #0]
 800c048:	f7f5 feac 	bl	8001da4 <_sbrk>
 800c04c:	1c43      	adds	r3, r0, #1
 800c04e:	d102      	bne.n	800c056 <_sbrk_r+0x1a>
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	b103      	cbz	r3, 800c056 <_sbrk_r+0x1a>
 800c054:	6023      	str	r3, [r4, #0]
 800c056:	bd38      	pop	{r3, r4, r5, pc}
 800c058:	20002158 	.word	0x20002158

0800c05c <__errno>:
 800c05c:	4b01      	ldr	r3, [pc, #4]	@ (800c064 <__errno+0x8>)
 800c05e:	6818      	ldr	r0, [r3, #0]
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	20000110 	.word	0x20000110

0800c068 <__libc_init_array>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	4d0d      	ldr	r5, [pc, #52]	@ (800c0a0 <__libc_init_array+0x38>)
 800c06c:	4c0d      	ldr	r4, [pc, #52]	@ (800c0a4 <__libc_init_array+0x3c>)
 800c06e:	1b64      	subs	r4, r4, r5
 800c070:	10a4      	asrs	r4, r4, #2
 800c072:	2600      	movs	r6, #0
 800c074:	42a6      	cmp	r6, r4
 800c076:	d109      	bne.n	800c08c <__libc_init_array+0x24>
 800c078:	4d0b      	ldr	r5, [pc, #44]	@ (800c0a8 <__libc_init_array+0x40>)
 800c07a:	4c0c      	ldr	r4, [pc, #48]	@ (800c0ac <__libc_init_array+0x44>)
 800c07c:	f000 f864 	bl	800c148 <_init>
 800c080:	1b64      	subs	r4, r4, r5
 800c082:	10a4      	asrs	r4, r4, #2
 800c084:	2600      	movs	r6, #0
 800c086:	42a6      	cmp	r6, r4
 800c088:	d105      	bne.n	800c096 <__libc_init_array+0x2e>
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c090:	4798      	blx	r3
 800c092:	3601      	adds	r6, #1
 800c094:	e7ee      	b.n	800c074 <__libc_init_array+0xc>
 800c096:	f855 3b04 	ldr.w	r3, [r5], #4
 800c09a:	4798      	blx	r3
 800c09c:	3601      	adds	r6, #1
 800c09e:	e7f2      	b.n	800c086 <__libc_init_array+0x1e>
 800c0a0:	0800c250 	.word	0x0800c250
 800c0a4:	0800c250 	.word	0x0800c250
 800c0a8:	0800c250 	.word	0x0800c250
 800c0ac:	0800c258 	.word	0x0800c258

0800c0b0 <__retarget_lock_acquire_recursive>:
 800c0b0:	4770      	bx	lr

0800c0b2 <__retarget_lock_release_recursive>:
 800c0b2:	4770      	bx	lr

0800c0b4 <_free_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	d041      	beq.n	800c140 <_free_r+0x8c>
 800c0bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0c0:	1f0c      	subs	r4, r1, #4
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	bfb8      	it	lt
 800c0c6:	18e4      	addlt	r4, r4, r3
 800c0c8:	f7ff ff60 	bl	800bf8c <__malloc_lock>
 800c0cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c144 <_free_r+0x90>)
 800c0ce:	6813      	ldr	r3, [r2, #0]
 800c0d0:	b933      	cbnz	r3, 800c0e0 <_free_r+0x2c>
 800c0d2:	6063      	str	r3, [r4, #4]
 800c0d4:	6014      	str	r4, [r2, #0]
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0dc:	f7ff bf5c 	b.w	800bf98 <__malloc_unlock>
 800c0e0:	42a3      	cmp	r3, r4
 800c0e2:	d908      	bls.n	800c0f6 <_free_r+0x42>
 800c0e4:	6820      	ldr	r0, [r4, #0]
 800c0e6:	1821      	adds	r1, r4, r0
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	bf01      	itttt	eq
 800c0ec:	6819      	ldreq	r1, [r3, #0]
 800c0ee:	685b      	ldreq	r3, [r3, #4]
 800c0f0:	1809      	addeq	r1, r1, r0
 800c0f2:	6021      	streq	r1, [r4, #0]
 800c0f4:	e7ed      	b.n	800c0d2 <_free_r+0x1e>
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	b10b      	cbz	r3, 800c100 <_free_r+0x4c>
 800c0fc:	42a3      	cmp	r3, r4
 800c0fe:	d9fa      	bls.n	800c0f6 <_free_r+0x42>
 800c100:	6811      	ldr	r1, [r2, #0]
 800c102:	1850      	adds	r0, r2, r1
 800c104:	42a0      	cmp	r0, r4
 800c106:	d10b      	bne.n	800c120 <_free_r+0x6c>
 800c108:	6820      	ldr	r0, [r4, #0]
 800c10a:	4401      	add	r1, r0
 800c10c:	1850      	adds	r0, r2, r1
 800c10e:	4283      	cmp	r3, r0
 800c110:	6011      	str	r1, [r2, #0]
 800c112:	d1e0      	bne.n	800c0d6 <_free_r+0x22>
 800c114:	6818      	ldr	r0, [r3, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	6053      	str	r3, [r2, #4]
 800c11a:	4408      	add	r0, r1
 800c11c:	6010      	str	r0, [r2, #0]
 800c11e:	e7da      	b.n	800c0d6 <_free_r+0x22>
 800c120:	d902      	bls.n	800c128 <_free_r+0x74>
 800c122:	230c      	movs	r3, #12
 800c124:	602b      	str	r3, [r5, #0]
 800c126:	e7d6      	b.n	800c0d6 <_free_r+0x22>
 800c128:	6820      	ldr	r0, [r4, #0]
 800c12a:	1821      	adds	r1, r4, r0
 800c12c:	428b      	cmp	r3, r1
 800c12e:	bf04      	itt	eq
 800c130:	6819      	ldreq	r1, [r3, #0]
 800c132:	685b      	ldreq	r3, [r3, #4]
 800c134:	6063      	str	r3, [r4, #4]
 800c136:	bf04      	itt	eq
 800c138:	1809      	addeq	r1, r1, r0
 800c13a:	6021      	streq	r1, [r4, #0]
 800c13c:	6054      	str	r4, [r2, #4]
 800c13e:	e7ca      	b.n	800c0d6 <_free_r+0x22>
 800c140:	bd38      	pop	{r3, r4, r5, pc}
 800c142:	bf00      	nop
 800c144:	2000201c 	.word	0x2000201c

0800c148 <_init>:
 800c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14a:	bf00      	nop
 800c14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14e:	bc08      	pop	{r3}
 800c150:	469e      	mov	lr, r3
 800c152:	4770      	bx	lr

0800c154 <_fini>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	bf00      	nop
 800c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15a:	bc08      	pop	{r3}
 800c15c:	469e      	mov	lr, r3
 800c15e:	4770      	bx	lr
